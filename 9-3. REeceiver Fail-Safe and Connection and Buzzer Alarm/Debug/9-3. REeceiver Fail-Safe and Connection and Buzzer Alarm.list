
9-3. REeceiver Fail-Safe and Connection and Buzzer Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800c548  0800c548  0001c548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd2c  0800cd2c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd2c  0800cd2c  0001cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd34  0800cd34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd34  0800cd34  0001cd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd38  0800cd38  0001cd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cd3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000002b4  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000494  20000494  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ebe  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004309  00000000  00000000  000390ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001510  00000000  00000000  0003ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007dc5  00000000  00000000  0003ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aee2  00000000  00000000  00047d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc36c  00000000  00000000  00062c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013efa3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fb8  00000000  00000000  0013eff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c530 	.word	0x0800c530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c530 	.word	0x0800c530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f023 0210 	bic.w	r2, r3, #16
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	605a      	str	r2, [r3, #4]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d101      	bne.n	8000f30 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	330c      	adds	r3, #12
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b085      	sub	sp, #20
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	619a      	str	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800

08001014 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800101e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4013      	ands	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40023800 	.word	0x40023800

08001044 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	; 0x40
 8001048:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f008 f8f0 	bl	8009238 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001068:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800106c:	f7ff ffd2 	bl	8001014 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ffb7 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ffb4 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ffb1 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001082:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001086:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001088:	2302      	movs	r3, #2
 800108a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001098:	2305      	movs	r3, #5
 800109a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4841      	ldr	r0, [pc, #260]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010a2:	f007 f8a4 	bl	80081ee <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010ae:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010b4:	2302      	movs	r3, #2
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010c2:	2318      	movs	r3, #24
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4834      	ldr	r0, [pc, #208]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 80010da:	f007 fa58 	bl	800858e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010de:	2100      	movs	r1, #0
 80010e0:	4832      	ldr	r0, [pc, #200]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 80010e2:	f7ff fef3 	bl	8000ecc <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010ec:	f7ff ff6a 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f4:	482c      	ldr	r0, [pc, #176]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010f6:	f7ff ff65 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001100:	f7ff ff60 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4822      	ldr	r0, [pc, #136]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001120:	f007 f865 	bl	80081ee <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001128:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	481c      	ldr	r0, [pc, #112]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001140:	f007 f855 	bl	80081ee <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001160:	f007 f845 	bl	80081ee <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001178:	f007 f839 	bl	80081ee <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 800117e:	f7ff fe95 	bl	8000eac <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	4808      	ldr	r0, [pc, #32]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001188:	f7ff ff0e 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800118c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001192:	f7ff ff09 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800119c:	f7ff ff04 	bl	8000fa8 <LL_GPIO_SetOutputPin>
}
 80011a0:	bf00      	nop
 80011a2:	3740      	adds	r7, #64	; 0x40
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40003800 	.word	0x40003800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000

080011b8 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011be:	f7ff ff41 	bl	8001044 <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...");
 80011c2:	482e      	ldr	r0, [pc, #184]	; (800127c <BNO080_Initialization+0xc4>)
 80011c4:	f008 fcaa 	bl	8009b1c <iprintf>

	CHIP_DESELECT(BNO080);
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	482c      	ldr	r0, [pc, #176]	; (8001280 <BNO080_Initialization+0xc8>)
 80011ce:	f7ff feeb 	bl	8000fa8 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	482b      	ldr	r0, [pc, #172]	; (8001284 <BNO080_Initialization+0xcc>)
 80011d8:	f7ff fee6 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e0:	4829      	ldr	r0, [pc, #164]	; (8001288 <BNO080_Initialization+0xd0>)
 80011e2:	f7ff feef 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011e6:	20c8      	movs	r0, #200	; 0xc8
 80011e8:	f003 ff26 	bl	8005038 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	4825      	ldr	r0, [pc, #148]	; (8001288 <BNO080_Initialization+0xd0>)
 80011f2:	f7ff fed9 	bl	8000fa8 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011f6:	f000 fc3d 	bl	8001a74 <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011fa:	f000 fc3b 	bl	8001a74 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011fe:	f000 fc5d 	bl	8001abc <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001202:	f000 fc37 	bl	8001a74 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001206:	f000 fc59 	bl	8001abc <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <BNO080_Initialization+0xd4>)
 800120c:	22f9      	movs	r2, #249	; 0xf9
 800120e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <BNO080_Initialization+0xd4>)
 8001212:	2200      	movs	r2, #0
 8001214:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001216:	2102      	movs	r1, #2
 8001218:	2002      	movs	r0, #2
 800121a:	f000 fcbf 	bl	8001b9c <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 800121e:	f000 fc29 	bl	8001a74 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001222:	f000 fc4b 	bl	8001abc <BNO080_receivePacket>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d11b      	bne.n	8001264 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <BNO080_Initialization+0xd8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <BNO080_Initialization+0xd8>)
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	461a      	mov	r2, r3
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <BNO080_Initialization+0xd8>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4618      	mov	r0, r3
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <BNO080_Initialization+0xd8>)
 8001240:	78db      	ldrb	r3, [r3, #3]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <BNO080_Initialization+0xdc>)
 8001248:	f008 fc68 	bl	8009b1c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <BNO080_Initialization+0xd4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2bf8      	cmp	r3, #248	; 0xf8
 8001252:	d107      	bne.n	8001264 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <BNO080_Initialization+0xd4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <BNO080_Initialization+0xe0>)
 800125c:	f008 fc5e 	bl	8009b1c <iprintf>
			return (0);
 8001260:	2300      	movs	r3, #0
 8001262:	e007      	b.n	8001274 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <BNO080_Initialization+0xd4>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	22f8      	movs	r2, #248	; 0xf8
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <BNO080_Initialization+0xe4>)
 800126e:	f008 fc55 	bl	8009b1c <iprintf>
	return (1); //Something went wrong
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	0800c548 	.word	0x0800c548
 8001280:	40020400 	.word	0x40020400
 8001284:	40020000 	.word	0x40020000
 8001288:	40020800 	.word	0x40020800
 800128c:	20000200 	.word	0x20000200
 8001290:	200001fc 	.word	0x200001fc
 8001294:	0800c55c 	.word	0x0800c55c
 8001298:	0800c574 	.word	0x0800c574
 800129c:	0800c594 	.word	0x0800c594

080012a0 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012aa:	bf00      	nop
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <SPI2_SendByte+0x40>)
 80012ae:	f7ff fe33 	bl	8000f18 <LL_SPI_IsActiveFlag_TXE>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f9      	beq.n	80012ac <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <SPI2_SendByte+0x40>)
 80012be:	f7ff fe4c 	bl	8000f5a <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012c2:	bf00      	nop
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <SPI2_SendByte+0x40>)
 80012c6:	f7ff fe14 	bl	8000ef2 <LL_SPI_IsActiveFlag_RXNE>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f9      	beq.n	80012c4 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <SPI2_SendByte+0x40>)
 80012d2:	f7ff fe34 	bl	8000f3e <LL_SPI_ReceiveData8>
 80012d6:	4603      	mov	r3, r0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40003800 	.word	0x40003800

080012e4 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <BNO080_dataAvailable+0x50>)
 80012ee:	f7ff fe46 	bl	8000f7e <LL_GPIO_IsInputPinSet>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <BNO080_dataAvailable+0x18>
		return (0);
 80012f8:	2300      	movs	r3, #0
 80012fa:	e019      	b.n	8001330 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80012fc:	f000 fbde 	bl	8001abc <BNO080_receivePacket>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d113      	bne.n	800132e <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <BNO080_dataAvailable+0x54>)
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d107      	bne.n	800131e <BNO080_dataAvailable+0x3a>
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <BNO080_dataAvailable+0x58>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2bfb      	cmp	r3, #251	; 0xfb
 8001314:	d103      	bne.n	800131e <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001316:	f000 f82f 	bl	8001378 <BNO080_parseInputReport>
			return (1);
 800131a:	2301      	movs	r3, #1
 800131c:	e008      	b.n	8001330 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <BNO080_dataAvailable+0x54>)
 8001320:	789b      	ldrb	r3, [r3, #2]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d103      	bne.n	800132e <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001326:	f000 f80b 	bl	8001340 <BNO080_parseCommandReport>
			return (1);
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40020800 	.word	0x40020800
 8001338:	200001fc 	.word	0x200001fc
 800133c:	20000200 	.word	0x20000200

08001340 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <BNO080_parseCommandReport+0x30>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2bf1      	cmp	r3, #241	; 0xf1
 800134c:	d109      	bne.n	8001362 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <BNO080_parseCommandReport+0x30>)
 8001350:	789b      	ldrb	r3, [r3, #2]
 8001352:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b07      	cmp	r3, #7
 8001358:	d103      	bne.n	8001362 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <BNO080_parseCommandReport+0x30>)
 800135c:	795a      	ldrb	r2, [r3, #5]
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <BNO080_parseCommandReport+0x34>)
 8001360:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000200 	.word	0x20000200
 8001374:	200002c4 	.word	0x200002c4

08001378 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800137e:	4b98      	ldr	r3, [pc, #608]	; (80015e0 <BNO080_parseInputReport+0x268>)
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b96      	ldr	r3, [pc, #600]	; (80015e0 <BNO080_parseInputReport+0x268>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001390:	8a3b      	ldrh	r3, [r7, #16]
 8001392:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001396:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001398:	8a3b      	ldrh	r3, [r7, #16]
 800139a:	3b04      	subs	r3, #4
 800139c:	b29b      	uxth	r3, r3
 800139e:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80013a0:	4b90      	ldr	r3, [pc, #576]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	061b      	lsls	r3, r3, #24
 80013a6:	4a8f      	ldr	r2, [pc, #572]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013a8:	78d2      	ldrb	r2, [r2, #3]
 80013aa:	0412      	lsls	r2, r2, #16
 80013ac:	4313      	orrs	r3, r2
 80013ae:	4a8d      	ldr	r2, [pc, #564]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013b0:	7892      	ldrb	r2, [r2, #2]
 80013b2:	0212      	lsls	r2, r2, #8
 80013b4:	4313      	orrs	r3, r2
 80013b6:	4a8b      	ldr	r2, [pc, #556]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013b8:	7852      	ldrb	r2, [r2, #1]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	4a8a      	ldr	r2, [pc, #552]	; (80015e8 <BNO080_parseInputReport+0x270>)
 80013be:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013c0:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013c2:	79db      	ldrb	r3, [r3, #7]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013ca:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013cc:	7a9b      	ldrb	r3, [r3, #10]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b84      	ldr	r3, [pc, #528]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013d4:	7a5b      	ldrb	r3, [r3, #9]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013e0:	7b1b      	ldrb	r3, [r3, #12]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013e8:	7adb      	ldrb	r3, [r3, #11]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013f4:	7b9b      	ldrb	r3, [r3, #14]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80013fc:	7b5b      	ldrb	r3, [r3, #13]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21b      	sxth	r3, r3
 8001404:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800140e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001412:	2b0e      	cmp	r3, #14
 8001414:	dd09      	ble.n	800142a <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001416:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 8001418:	7c1b      	ldrb	r3, [r3, #16]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b71      	ldr	r3, [pc, #452]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 8001420:	7bdb      	ldrb	r3, [r3, #15]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800142a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800142e:	2b10      	cmp	r3, #16
 8001430:	dd09      	ble.n	8001446 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001432:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 8001434:	7c9b      	ldrb	r3, [r3, #18]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 800143c:	7c5b      	ldrb	r3, [r3, #17]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001446:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 8001448:	795b      	ldrb	r3, [r3, #5]
 800144a:	2b1e      	cmp	r3, #30
 800144c:	dc46      	bgt.n	80014dc <BNO080_parseInputReport+0x164>
 800144e:	2b00      	cmp	r3, #0
 8001450:	f340 80bf 	ble.w	80015d2 <BNO080_parseInputReport+0x25a>
 8001454:	3b01      	subs	r3, #1
 8001456:	2b1d      	cmp	r3, #29
 8001458:	f200 80bb 	bhi.w	80015d2 <BNO080_parseInputReport+0x25a>
 800145c:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <BNO080_parseInputReport+0xec>)
 800145e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001462:	bf00      	nop
 8001464:	080014e3 	.word	0x080014e3
 8001468:	0800151b 	.word	0x0800151b
 800146c:	08001537 	.word	0x08001537
 8001470:	080014ff 	.word	0x080014ff
 8001474:	08001553 	.word	0x08001553
 8001478:	080015d3 	.word	0x080015d3
 800147c:	080015d3 	.word	0x080015d3
 8001480:	08001553 	.word	0x08001553
 8001484:	080015d3 	.word	0x080015d3
 8001488:	080015d3 	.word	0x080015d3
 800148c:	080015d3 	.word	0x080015d3
 8001490:	080015d3 	.word	0x080015d3
 8001494:	080015d3 	.word	0x080015d3
 8001498:	080015d3 	.word	0x080015d3
 800149c:	080015d3 	.word	0x080015d3
 80014a0:	080015d3 	.word	0x080015d3
 80014a4:	0800157b 	.word	0x0800157b
 80014a8:	080015d3 	.word	0x080015d3
 80014ac:	08001583 	.word	0x08001583
 80014b0:	080015d3 	.word	0x080015d3
 80014b4:	080015d3 	.word	0x080015d3
 80014b8:	080015d3 	.word	0x080015d3
 80014bc:	080015d3 	.word	0x080015d3
 80014c0:	080015d3 	.word	0x080015d3
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	080015d3 	.word	0x080015d3
 80014cc:	080015d3 	.word	0x080015d3
 80014d0:	080015d3 	.word	0x080015d3
 80014d4:	080015d3 	.word	0x080015d3
 80014d8:	0800158d 	.word	0x0800158d
 80014dc:	2bf1      	cmp	r3, #241	; 0xf1
 80014de:	d06d      	beq.n	80015bc <BNO080_parseInputReport+0x244>
		//See reference manual to add additional feature reports as needed
	}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014e0:	e077      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		accelAccuracy = status;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <BNO080_parseInputReport+0x274>)
 80014e8:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 80014ea:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <BNO080_parseInputReport+0x278>)
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 80014f0:	4a40      	ldr	r2, [pc, #256]	; (80015f4 <BNO080_parseInputReport+0x27c>)
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 80014f6:	4a40      	ldr	r2, [pc, #256]	; (80015f8 <BNO080_parseInputReport+0x280>)
 80014f8:	893b      	ldrh	r3, [r7, #8]
 80014fa:	8013      	strh	r3, [r2, #0]
		break;
 80014fc:	e069      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		accelLinAccuracy = status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <BNO080_parseInputReport+0x284>)
 8001504:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001506:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <BNO080_parseInputReport+0x288>)
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 800150c:	4a3d      	ldr	r2, [pc, #244]	; (8001604 <BNO080_parseInputReport+0x28c>)
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001512:	4a3d      	ldr	r2, [pc, #244]	; (8001608 <BNO080_parseInputReport+0x290>)
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	8013      	strh	r3, [r2, #0]
		break;
 8001518:	e05b      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		gyroAccuracy = status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <BNO080_parseInputReport+0x294>)
 8001520:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001522:	4a3b      	ldr	r2, [pc, #236]	; (8001610 <BNO080_parseInputReport+0x298>)
 8001524:	89bb      	ldrh	r3, [r7, #12]
 8001526:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001528:	4a3a      	ldr	r2, [pc, #232]	; (8001614 <BNO080_parseInputReport+0x29c>)
 800152a:	897b      	ldrh	r3, [r7, #10]
 800152c:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 800152e:	4a3a      	ldr	r2, [pc, #232]	; (8001618 <BNO080_parseInputReport+0x2a0>)
 8001530:	893b      	ldrh	r3, [r7, #8]
 8001532:	8013      	strh	r3, [r2, #0]
		break;
 8001534:	e04d      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		magAccuracy = status;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <BNO080_parseInputReport+0x2a4>)
 800153c:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 800153e:	4a38      	ldr	r2, [pc, #224]	; (8001620 <BNO080_parseInputReport+0x2a8>)
 8001540:	89bb      	ldrh	r3, [r7, #12]
 8001542:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001544:	4a37      	ldr	r2, [pc, #220]	; (8001624 <BNO080_parseInputReport+0x2ac>)
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 800154a:	4a37      	ldr	r2, [pc, #220]	; (8001628 <BNO080_parseInputReport+0x2b0>)
 800154c:	893b      	ldrh	r3, [r7, #8]
 800154e:	8013      	strh	r3, [r2, #0]
		break;
 8001550:	e03f      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		quatAccuracy = status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <BNO080_parseInputReport+0x2b4>)
 8001558:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 800155a:	4a35      	ldr	r2, [pc, #212]	; (8001630 <BNO080_parseInputReport+0x2b8>)
 800155c:	89bb      	ldrh	r3, [r7, #12]
 800155e:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001560:	4a34      	ldr	r2, [pc, #208]	; (8001634 <BNO080_parseInputReport+0x2bc>)
 8001562:	897b      	ldrh	r3, [r7, #10]
 8001564:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001566:	4a34      	ldr	r2, [pc, #208]	; (8001638 <BNO080_parseInputReport+0x2c0>)
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 800156c:	4a33      	ldr	r2, [pc, #204]	; (800163c <BNO080_parseInputReport+0x2c4>)
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001572:	4a33      	ldr	r2, [pc, #204]	; (8001640 <BNO080_parseInputReport+0x2c8>)
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	8013      	strh	r3, [r2, #0]
		break;
 8001578:	e02b      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		stepCount = data3; //Bytes 8/9
 800157a:	4a32      	ldr	r2, [pc, #200]	; (8001644 <BNO080_parseInputReport+0x2cc>)
 800157c:	893b      	ldrh	r3, [r7, #8]
 800157e:	8013      	strh	r3, [r2, #0]
		break;
 8001580:	e027      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 8001584:	7a5a      	ldrb	r2, [r3, #9]
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <BNO080_parseInputReport+0x2d0>)
 8001588:	701a      	strb	r2, [r3, #0]
		break;
 800158a:	e022      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 800158e:	7a9a      	ldrb	r2, [r3, #10]
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <BNO080_parseInputReport+0x2d4>)
 8001592:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001594:	2300      	movs	r3, #0
 8001596:	74fb      	strb	r3, [r7, #19]
 8001598:	e00c      	b.n	80015b4 <BNO080_parseInputReport+0x23c>
			_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	f103 020b 	add.w	r2, r3, #11
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <BNO080_parseInputReport+0x2d8>)
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	7cfb      	ldrb	r3, [r7, #19]
 80015a6:	440b      	add	r3, r1
 80015a8:	490e      	ldr	r1, [pc, #56]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80015aa:	5c8a      	ldrb	r2, [r1, r2]
 80015ac:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	3301      	adds	r3, #1
 80015b2:	74fb      	strb	r3, [r7, #19]
 80015b4:	7cfb      	ldrb	r3, [r7, #19]
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d9ef      	bls.n	800159a <BNO080_parseInputReport+0x222>
		break;
 80015ba:	e00a      	b.n	80015d2 <BNO080_parseInputReport+0x25a>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80015be:	79db      	ldrb	r3, [r3, #7]
 80015c0:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b07      	cmp	r3, #7
 80015c6:	d103      	bne.n	80015d0 <BNO080_parseInputReport+0x258>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <BNO080_parseInputReport+0x26c>)
 80015ca:	7a9a      	ldrb	r2, [r3, #10]
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <BNO080_parseInputReport+0x2dc>)
 80015ce:	701a      	strb	r2, [r3, #0]
		break;
 80015d0:	bf00      	nop
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200001fc 	.word	0x200001fc
 80015e4:	20000200 	.word	0x20000200
 80015e8:	200002b8 	.word	0x200002b8
 80015ec:	2000028e 	.word	0x2000028e
 80015f0:	20000288 	.word	0x20000288
 80015f4:	2000028a 	.word	0x2000028a
 80015f8:	2000028c 	.word	0x2000028c
 80015fc:	20000296 	.word	0x20000296
 8001600:	20000290 	.word	0x20000290
 8001604:	20000292 	.word	0x20000292
 8001608:	20000294 	.word	0x20000294
 800160c:	2000029e 	.word	0x2000029e
 8001610:	20000298 	.word	0x20000298
 8001614:	2000029a 	.word	0x2000029a
 8001618:	2000029c 	.word	0x2000029c
 800161c:	200002a6 	.word	0x200002a6
 8001620:	200002a0 	.word	0x200002a0
 8001624:	200002a2 	.word	0x200002a2
 8001628:	200002a4 	.word	0x200002a4
 800162c:	200002b2 	.word	0x200002b2
 8001630:	200002a8 	.word	0x200002a8
 8001634:	200002aa 	.word	0x200002aa
 8001638:	200002ac 	.word	0x200002ac
 800163c:	200002ae 	.word	0x200002ae
 8001640:	200002b0 	.word	0x200002b0
 8001644:	200002b4 	.word	0x200002b4
 8001648:	200002bc 	.word	0x200002bc
 800164c:	200002bd 	.word	0x200002bd
 8001650:	200002c0 	.word	0x200002c0
 8001654:	200002c4 	.word	0x200002c4

08001658 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <BNO080_getQuatI+0x24>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <BNO080_getQuatI+0x28>)
 8001664:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f8a5 	bl	80017bc <BNO080_qToFloat>
 8001672:	eef0 7a40 	vmov.f32	s15, s0
}
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200002a8 	.word	0x200002a8
 8001680:	20000000 	.word	0x20000000

08001684 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <BNO080_getQuatJ+0x24>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b21b      	sxth	r3, r3
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <BNO080_getQuatJ+0x28>)
 8001690:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f000 f88f 	bl	80017bc <BNO080_qToFloat>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
}
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200002aa 	.word	0x200002aa
 80016ac:	20000000 	.word	0x20000000

080016b0 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <BNO080_getQuatK+0x24>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <BNO080_getQuatK+0x28>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f879 	bl	80017bc <BNO080_qToFloat>
 80016ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200002ac 	.word	0x200002ac
 80016d8:	20000000 	.word	0x20000000

080016dc <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <BNO080_getQuatReal+0x24>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4a07      	ldr	r2, [pc, #28]	; (8001704 <BNO080_getQuatReal+0x28>)
 80016e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f863 	bl	80017bc <BNO080_qToFloat>
 80016f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200002ae 	.word	0x200002ae
 8001704:	20000000 	.word	0x20000000

08001708 <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <BNO080_getQuatAccuracy+0x14>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	200002b2 	.word	0x200002b2

08001720 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <BNO080_getMagX+0x24>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <BNO080_getMagX+0x28>)
 800172c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f841 	bl	80017bc <BNO080_qToFloat>
 800173a:	eef0 7a40 	vmov.f32	s15, s0
}
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002a0 	.word	0x200002a0
 8001748:	20000002 	.word	0x20000002

0800174c <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <BNO080_getMagY+0x24>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <BNO080_getMagY+0x28>)
 8001758:	f9b2 2000 	ldrsh.w	r2, [r2]
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f82b 	bl	80017bc <BNO080_qToFloat>
 8001766:	eef0 7a40 	vmov.f32	s15, s0
}
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200002a2 	.word	0x200002a2
 8001774:	20000002 	.word	0x20000002

08001778 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <BNO080_getMagZ+0x24>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <BNO080_getMagZ+0x28>)
 8001784:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f815 	bl	80017bc <BNO080_qToFloat>
 8001792:	eef0 7a40 	vmov.f32	s15, s0
}
 8001796:	eeb0 0a67 	vmov.f32	s0, s15
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200002a4 	.word	0x200002a4
 80017a0:	20000002 	.word	0x20000002

080017a4 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	return (magAccuracy);
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <BNO080_getMagAccuracy+0x14>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	200002a6 	.word	0x200002a6

080017bc <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	ed2d 8b02 	vpush	{d8}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	460a      	mov	r2, r1
 80017ca:	80fb      	strh	r3, [r7, #6]
 80017cc:	4613      	mov	r3, r2
 80017ce:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 80017d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80017dc:	797b      	ldrb	r3, [r7, #5]
 80017de:	425b      	negs	r3, r3
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e8:	eef0 0a67 	vmov.f32	s1, s15
 80017ec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80017f0:	f00a facc 	bl	800bd8c <powf>
 80017f4:	eef0 7a40 	vmov.f32	s15, s0
 80017f8:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	ecbd 8b02 	vpop	{d8}
 8001808:	bd80      	pop	{r7, pc}

0800180a <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	2200      	movs	r2, #0
 8001818:	4619      	mov	r1, r3
 800181a:	2005      	movs	r0, #5
 800181c:	f000 f83a 	bl	8001894 <BNO080_setFeatureCommand>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	2008      	movs	r0, #8
 800183a:	f000 f82b 	bl	8001894 <BNO080_setFeatureCommand>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	2003      	movs	r0, #3
 8001858:	f000 f81c 	bl	8001894 <BNO080_setFeatureCommand>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001868:	2004      	movs	r0, #4
 800186a:	f000 f885 	bl	8001978 <BNO080_sendCalibrateCommand>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <BNO080_calibrationComplete+0x1c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <BNO080_calibrationComplete+0x10>
		return (1);
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <BNO080_calibrationComplete+0x12>
	return (0);
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	200002c4 	.word	0x200002c4

08001894 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018a4:	22fd      	movs	r2, #253	; 0xfd
 80018a6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018c6:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018d0:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018da:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0e1b      	lsrs	r3, r3, #24
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018e4:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 8001904:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 800190e:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 8001918:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0e1b      	lsrs	r3, r3, #24
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <BNO080_setFeatureCommand+0xa0>)
 8001922:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001924:	2111      	movs	r1, #17
 8001926:	2002      	movs	r0, #2
 8001928:	f000 f938 	bl	8001b9c <BNO080_sendPacket>
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000200 	.word	0x20000200

08001938 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <BNO080_sendCommand+0x38>)
 8001944:	22f2      	movs	r2, #242	; 0xf2
 8001946:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <BNO080_sendCommand+0x3c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	b2d1      	uxtb	r1, r2
 8001950:	4a08      	ldr	r2, [pc, #32]	; (8001974 <BNO080_sendCommand+0x3c>)
 8001952:	7011      	strb	r1, [r2, #0]
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <BNO080_sendCommand+0x38>)
 8001956:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <BNO080_sendCommand+0x38>)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 800195e:	210c      	movs	r1, #12
 8001960:	2002      	movs	r0, #2
 8001962:	f000 f91b 	bl	8001b9c <BNO080_sendPacket>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000200 	.word	0x20000200
 8001974:	20000286 	.word	0x20000286

08001978 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001982:	2303      	movs	r3, #3
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e006      	b.n	8001996 <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 800198c:	2100      	movs	r1, #0
 800198e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	3301      	adds	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b0b      	cmp	r3, #11
 800199a:	d9f5      	bls.n	8001988 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	70da      	strb	r2, [r3, #3]
 80019a8:	e020      	b.n	80019ec <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d103      	bne.n	80019b8 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	711a      	strb	r2, [r3, #4]
 80019b6:	e019      	b.n	80019ec <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	715a      	strb	r2, [r3, #5]
 80019c4:	e012      	b.n	80019ec <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d103      	bne.n	80019d4 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	71da      	strb	r2, [r3, #7]
 80019d2:	e00b      	b.n	80019ec <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d108      	bne.n	80019ec <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 80019dc:	2201      	movs	r2, #1
 80019de:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <BNO080_sendCalibrateCommand+0x88>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <BNO080_sendCalibrateCommand+0x8c>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 80019f2:	2007      	movs	r0, #7
 80019f4:	f7ff ffa0 	bl	8001938 <BNO080_sendCommand>
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000200 	.word	0x20000200
 8001a04:	200002c4 	.word	0x200002c4

08001a08 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a0e:	2303      	movs	r3, #3
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	e006      	b.n	8001a22 <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <BNO080_requestCalibrationStatus+0x34>)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b0b      	cmp	r3, #11
 8001a26:	d9f5      	bls.n	8001a14 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <BNO080_requestCalibrationStatus+0x34>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001a2e:	2007      	movs	r0, #7
 8001a30:	f7ff ff82 	bl	8001938 <BNO080_sendCommand>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000200 	.word	0x20000200

08001a40 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a46:	2303      	movs	r3, #3
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	e006      	b.n	8001a5a <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <BNO080_saveCalibration+0x30>)
 8001a50:	2100      	movs	r1, #0
 8001a52:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3301      	adds	r3, #1
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b0b      	cmp	r3, #11
 8001a5e:	d9f5      	bls.n	8001a4c <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001a60:	2006      	movs	r0, #6
 8001a62:	f7ff ff69 	bl	8001938 <BNO080_sendCommand>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000200 	.word	0x20000200

08001a74 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	e00c      	b.n	8001a9a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <BNO080_waitForSPI+0x40>)
 8001a86:	f7ff fa7a 	bl	8000f7e <LL_GPIO_IsInputPinSet>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001a90:	2301      	movs	r3, #1
 8001a92:	e00a      	b.n	8001aaa <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d1ee      	bne.n	8001a80 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <BNO080_waitForSPI+0x44>)
 8001aa4:	f008 f8c0 	bl	8009c28 <puts>
	return (0);
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	0800c5e0 	.word	0x0800c5e0

08001abc <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac6:	4831      	ldr	r0, [pc, #196]	; (8001b8c <BNO080_receivePacket+0xd0>)
 8001ac8:	f7ff fa59 	bl	8000f7e <LL_GPIO_IsInputPinSet>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e056      	b.n	8001b84 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ada:	482d      	ldr	r0, [pc, #180]	; (8001b90 <BNO080_receivePacket+0xd4>)
 8001adc:	f7ff fa72 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fbdd 	bl	80012a0 <SPI2_SendByte>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fbd8 	bl	80012a0 <SPI2_SendByte>
 8001af0:	4603      	mov	r3, r0
 8001af2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fbd3 	bl	80012a0 <SPI2_SendByte>
 8001afa:	4603      	mov	r3, r0
 8001afc:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fbce 	bl	80012a0 <SPI2_SendByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <BNO080_receivePacket+0xd8>)
 8001b0a:	7b7b      	ldrb	r3, [r7, #13]
 8001b0c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001b0e:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <BNO080_receivePacket+0xd8>)
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <BNO080_receivePacket+0xd8>)
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <BNO080_receivePacket+0xd8>)
 8001b1c:	7abb      	ldrb	r3, [r7, #10]
 8001b1e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001b20:	7b3b      	ldrb	r3, [r7, #12]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001b2e:	893b      	ldrh	r3, [r7, #8]
 8001b30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b34:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001b36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e020      	b.n	8001b84 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001b42:	893b      	ldrh	r3, [r7, #8]
 8001b44:	3b04      	subs	r3, #4
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	81fb      	strh	r3, [r7, #14]
 8001b4e:	e00e      	b.n	8001b6e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001b50:	20ff      	movs	r0, #255	; 0xff
 8001b52:	f7ff fba5 	bl	80012a0 <SPI2_SendByte>
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b5e:	d803      	bhi.n	8001b68 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001b60:	89fb      	ldrh	r3, [r7, #14]
 8001b62:	490d      	ldr	r1, [pc, #52]	; (8001b98 <BNO080_receivePacket+0xdc>)
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	81fb      	strh	r3, [r7, #14]
 8001b6e:	89fa      	ldrh	r2, [r7, #14]
 8001b70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbeb      	blt.n	8001b50 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <BNO080_receivePacket+0xd4>)
 8001b7e:	f7ff fa13 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020400 	.word	0x40020400
 8001b94:	200001fc 	.word	0x200001fc
 8001b98:	20000200 	.word	0x20000200

08001b9c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460a      	mov	r2, r1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001bac:	79bb      	ldrb	r3, [r7, #6]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001bb2:	f7ff ff5f 	bl	8001a74 <BNO080_waitForSPI>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e032      	b.n	8001c26 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc4:	481a      	ldr	r0, [pc, #104]	; (8001c30 <BNO080_sendPacket+0x94>)
 8001bc6:	f7ff f9fd 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fb67 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	121b      	asrs	r3, r3, #8
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb61 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fb5d 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <BNO080_sendPacket+0x98>)
 8001bea:	5cd2      	ldrb	r2, [r2, r3]
 8001bec:	1c51      	adds	r1, r2, #1
 8001bee:	b2c8      	uxtb	r0, r1
 8001bf0:	4910      	ldr	r1, [pc, #64]	; (8001c34 <BNO080_sendPacket+0x98>)
 8001bf2:	54c8      	strb	r0, [r1, r3]
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f7ff fb53 	bl	80012a0 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e008      	b.n	8001c12 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <BNO080_sendPacket+0x9c>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb4a 	bl	80012a0 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3f2      	bcc.n	8001c00 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c1e:	4804      	ldr	r0, [pc, #16]	; (8001c30 <BNO080_sendPacket+0x94>)
 8001c20:	f7ff f9c2 	bl	8000fa8 <LL_GPIO_SetOutputPin>

	return (1);
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40020400 	.word	0x40020400
 8001c34:	20000280 	.word	0x20000280
 8001c38:	20000200 	.word	0x20000200

08001c3c <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8001c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4c:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	e00a      	b.n	8001c6a <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	89fa      	ldrh	r2, [r7, #14]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	3301      	adds	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	3b02      	subs	r3, #2
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbef      	blt.n	8001c54 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	321e      	adds	r2, #30
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10a      	bne.n	8001c98 <iBus_Check_CHKSUM+0x5c>
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	331f      	adds	r3, #31
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d101      	bne.n	8001c98 <iBus_Check_CHKSUM+0x5c>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <iBus_Check_CHKSUM+0x5e>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3305      	adds	r3, #5
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3306      	adds	r3, #6
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3307      	adds	r3, #7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3309      	adds	r3, #9
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	330a      	adds	r3, #10
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	330b      	adds	r3, #11
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	330c      	adds	r3, #12
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	330d      	adds	r3, #13
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	819a      	strh	r2, [r3, #12]

	//CH6의 값이 변하지 않아서 failsafe 발생 X -> CH5로 대체하여 failsafe 진행
	iBus->FailSafe = (data[11] >> 4);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	330b      	adds	r3, #11
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	751a      	strb	r2, [r3, #20]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <iBus_isActive_Failsafe>:

unsigned char iBus_isActive_Failsafe(FSiA6B_iBus* iBus) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7d1b      	ldrb	r3, [r3, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_SPI_Enable>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_SPI_SetStandard>:
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 0210 	bic.w	r2, r3, #16
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	605a      	str	r2, [r3, #4]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_SPI_IsActiveFlag_TXE>:
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d101      	bne.n	8001e3e <LL_SPI_IsActiveFlag_TXE+0x18>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_SPI_ReceiveData8>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	330c      	adds	r3, #12
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_SPI_TransmitData8>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	330c      	adds	r3, #12
 8001e78:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_GPIO_SetOutputPin>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	619a      	str	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_GPIO_ResetOutputPin>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <LL_AHB1_GRP1_EnableClock>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f04:	4907      	ldr	r1, [pc, #28]	; (8001f24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40023800 	.word	0x40023800

08001f28 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b090      	sub	sp, #64	; 0x40
 8001f2c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	2228      	movs	r2, #40	; 0x28
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f007 f97e 	bl	8009238 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f50:	f7ff ffd2 	bl	8001ef8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff ffb7 	bl	8001ec8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f5a:	2004      	movs	r0, #4
 8001f5c:	f7ff ffb4 	bl	8001ec8 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f60:	23e0      	movs	r3, #224	; 0xe0
 8001f62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f64:	2302      	movs	r3, #2
 8001f66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f74:	2305      	movs	r3, #5
 8001f76:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	463b      	mov	r3, r7
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4825      	ldr	r0, [pc, #148]	; (8002014 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001f7e:	f006 f936 	bl	80081ee <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001f86:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f8a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001f90:	2302      	movs	r3, #2
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001faa:	230a      	movs	r3, #10
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001fae:	f107 0318 	add.w	r3, r7, #24
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4818      	ldr	r0, [pc, #96]	; (8002018 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001fb6:	f006 faea 	bl	800858e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4816      	ldr	r0, [pc, #88]	; (8002018 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001fbe:	f7ff ff0c 	bl	8001dda <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	4815      	ldr	r0, [pc, #84]	; (800201c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001fc6:	f7ff ff6f 	bl	8001ea8 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001fca:	2310      	movs	r3, #16
 8001fcc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001fde:	463b      	mov	r3, r7
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480e      	ldr	r0, [pc, #56]	; (800201c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001fe4:	f006 f903 	bl	80081ee <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001ffa:	f006 f8f8 	bl	80081ee <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002000:	f7ff fedb 	bl	8001dba <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002004:	2110      	movs	r1, #16
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002008:	f7ff ff40 	bl	8001e8c <LL_GPIO_SetOutputPin>
}
 800200c:	bf00      	nop
 800200e:	3740      	adds	r7, #64	; 0x40
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40020000 	.word	0x40020000
 8002018:	40013000 	.word	0x40013000
 800201c:	40020800 	.word	0x40020800

08002020 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800202a:	bf00      	nop
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <SPI1_SendByte+0x40>)
 800202e:	f7ff fefa 	bl	8001e26 <LL_SPI_IsActiveFlag_TXE>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f9      	beq.n	800202c <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4619      	mov	r1, r3
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <SPI1_SendByte+0x40>)
 800203e:	f7ff ff13 	bl	8001e68 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002042:	bf00      	nop
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <SPI1_SendByte+0x40>)
 8002046:	f7ff fedb 	bl	8001e00 <LL_SPI_IsActiveFlag_RXNE>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f9      	beq.n	8002044 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <SPI1_SendByte+0x40>)
 8002052:	f7ff fefb 	bl	8001e4c <LL_SPI_ReceiveData8>
 8002056:	4603      	mov	r3, r0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40013000 	.word	0x40013000

08002064 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800206e:	2110      	movs	r1, #16
 8002070:	480b      	ldr	r0, [pc, #44]	; (80020a0 <ICM20602_Readbyte+0x3c>)
 8002072:	f7ff ff19 	bl	8001ea8 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ffce 	bl	8002020 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff ffcb 	bl	8002020 <SPI1_SendByte>
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800208e:	2110      	movs	r1, #16
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <ICM20602_Readbyte+0x3c>)
 8002092:	f7ff fefb 	bl	8001e8c <LL_GPIO_SetOutputPin>
	
	return val;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40020800 	.word	0x40020800

080020a4 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	460a      	mov	r2, r1
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80020b4:	2110      	movs	r1, #16
 80020b6:	480b      	ldr	r0, [pc, #44]	; (80020e4 <ICM20602_Writebyte+0x40>)
 80020b8:	f7ff fef6 	bl	8001ea8 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ffab 	bl	8002020 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ffa7 	bl	8002020 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80020d2:	2110      	movs	r1, #16
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <ICM20602_Writebyte+0x40>)
 80020d6:	f7ff fed9 	bl	8001e8c <LL_GPIO_SetOutputPin>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40020800 	.word	0x40020800

080020e8 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002104:	f7ff ff10 	bl	8001f28 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8002108:	4833      	ldr	r0, [pc, #204]	; (80021d8 <ICM20602_Initialization+0xf0>)
 800210a:	f007 fd07 	bl	8009b1c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800210e:	2075      	movs	r0, #117	; 0x75
 8002110:	f7ff ffa8 	bl	8002064 <ICM20602_Readbyte>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b12      	cmp	r3, #18
 800211c:	d105      	bne.n	800212a <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	4619      	mov	r1, r3
 8002122:	482e      	ldr	r0, [pc, #184]	; (80021dc <ICM20602_Initialization+0xf4>)
 8002124:	f007 fcfa 	bl	8009b1c <iprintf>
 8002128:	e012      	b.n	8002150 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b12      	cmp	r3, #18
 800212e:	d00f      	beq.n	8002150 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002130:	2075      	movs	r0, #117	; 0x75
 8002132:	f7ff ff97 	bl	8002064 <ICM20602_Readbyte>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b12      	cmp	r3, #18
 800213e:	d007      	beq.n	8002150 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2212      	movs	r2, #18
 8002144:	4619      	mov	r1, r3
 8002146:	4826      	ldr	r0, [pc, #152]	; (80021e0 <ICM20602_Initialization+0xf8>)
 8002148:	f007 fce8 	bl	8009b1c <iprintf>
			return 1; //ERROR
 800214c:	2301      	movs	r3, #1
 800214e:	e03f      	b.n	80021d0 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	206b      	movs	r0, #107	; 0x6b
 8002154:	f7ff ffa6 	bl	80020a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002158:	2032      	movs	r0, #50	; 0x32
 800215a:	f002 ff6d 	bl	8005038 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800215e:	2101      	movs	r1, #1
 8002160:	206b      	movs	r0, #107	; 0x6b
 8002162:	f7ff ff9f 	bl	80020a4 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002166:	2032      	movs	r0, #50	; 0x32
 8002168:	f002 ff66 	bl	8005038 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800216c:	2138      	movs	r1, #56	; 0x38
 800216e:	206c      	movs	r0, #108	; 0x6c
 8002170:	f7ff ff98 	bl	80020a4 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002174:	2032      	movs	r0, #50	; 0x32
 8002176:	f002 ff5f 	bl	8005038 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800217a:	2100      	movs	r1, #0
 800217c:	2019      	movs	r0, #25
 800217e:	f7ff ff91 	bl	80020a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002182:	2032      	movs	r0, #50	; 0x32
 8002184:	f002 ff58 	bl	8005038 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002188:	2105      	movs	r1, #5
 800218a:	201a      	movs	r0, #26
 800218c:	f7ff ff8a 	bl	80020a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002190:	2032      	movs	r0, #50	; 0x32
 8002192:	f002 ff51 	bl	8005038 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002196:	2118      	movs	r1, #24
 8002198:	201b      	movs	r0, #27
 800219a:	f7ff ff83 	bl	80020a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 800219e:	2032      	movs	r0, #50	; 0x32
 80021a0:	f002 ff4a 	bl	8005038 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80021a4:	2118      	movs	r1, #24
 80021a6:	201c      	movs	r0, #28
 80021a8:	f7ff ff7c 	bl	80020a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021ac:	2032      	movs	r0, #50	; 0x32
 80021ae:	f002 ff43 	bl	8005038 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80021b2:	2103      	movs	r1, #3
 80021b4:	201d      	movs	r0, #29
 80021b6:	f7ff ff75 	bl	80020a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021ba:	2032      	movs	r0, #50	; 0x32
 80021bc:	f002 ff3c 	bl	8005038 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80021c0:	2101      	movs	r1, #1
 80021c2:	2038      	movs	r0, #56	; 0x38
 80021c4:	f7ff ff6e 	bl	80020a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021c8:	2032      	movs	r0, #50	; 0x32
 80021ca:	f002 ff35 	bl	8005038 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	0800c5f4 	.word	0x0800c5f4
 80021dc:	0800c60c 	.word	0x0800c60c
 80021e0:	0800c630 	.word	0x0800c630

080021e4 <LL_SPI_Enable>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	601a      	str	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_SPI_SetStandard>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f023 0210 	bic.w	r2, r3, #16
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	605a      	str	r2, [r3, #4]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_SPI_IsActiveFlag_RXNE>:
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_SPI_IsActiveFlag_TXE>:
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d101      	bne.n	8002268 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_SPI_ReceiveData8>:
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	330c      	adds	r3, #12
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_SPI_TransmitData8>:
{
 8002292:	b480      	push	{r7}
 8002294:	b085      	sub	sp, #20
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	330c      	adds	r3, #12
 80022a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	701a      	strb	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_GPIO_SetOutputPin>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_GPIO_ResetOutputPin>:
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	041a      	lsls	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_AHB1_GRP1_EnableClock>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4313      	orrs	r3, r2
 8002302:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4013      	ands	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40023800 	.word	0x40023800

08002320 <LL_APB1_GRP1_EnableClock>:
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <LL_APB1_GRP1_EnableClock+0x2c>)
 800232a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <LL_APB1_GRP1_EnableClock+0x2c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4313      	orrs	r3, r2
 8002332:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40023800 	.word	0x40023800

08002350 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b090      	sub	sp, #64	; 0x40
 8002354:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	2228      	movs	r2, #40	; 0x28
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f006 ff6a 	bl	8009238 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	463b      	mov	r3, r7
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002374:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002378:	f7ff ffd2 	bl	8002320 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff ffb7 	bl	80022f0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002382:	2338      	movs	r3, #56	; 0x38
 8002384:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002386:	2302      	movs	r3, #2
 8002388:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002396:	2306      	movs	r3, #6
 8002398:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	463b      	mov	r3, r7
 800239c:	4619      	mov	r1, r3
 800239e:	4826      	ldr	r0, [pc, #152]	; (8002438 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023a0:	f005 ff25 	bl	80081ee <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023ac:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023b2:	2302      	movs	r3, #2
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80023ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80023c0:	2308      	movs	r3, #8
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023c4:	2300      	movs	r3, #0
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80023cc:	230a      	movs	r3, #10
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	4619      	mov	r1, r3
 80023d6:	4819      	ldr	r0, [pc, #100]	; (800243c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80023d8:	f006 f8d9 	bl	800858e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80023dc:	2100      	movs	r1, #0
 80023de:	4817      	ldr	r0, [pc, #92]	; (800243c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80023e0:	f7ff ff10 	bl	8002204 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80023e4:	2140      	movs	r1, #64	; 0x40
 80023e6:	4814      	ldr	r0, [pc, #80]	; (8002438 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023e8:	f7ff ff73 	bl	80022d2 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80023ec:	2340      	movs	r3, #64	; 0x40
 80023ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023f0:	2301      	movs	r3, #1
 80023f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002406:	f005 fef2 	bl	80081ee <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002412:	2301      	movs	r3, #1
 8002414:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8002416:	463b      	mov	r3, r7
 8002418:	4619      	mov	r1, r3
 800241a:	4807      	ldr	r0, [pc, #28]	; (8002438 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800241c:	f005 fee7 	bl	80081ee <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002420:	4806      	ldr	r0, [pc, #24]	; (800243c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002422:	f7ff fedf 	bl	80021e4 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800242a:	f7ff ff44 	bl	80022b6 <LL_GPIO_SetOutputPin>
}
 800242e:	bf00      	nop
 8002430:	3740      	adds	r7, #64	; 0x40
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40020400 	.word	0x40020400
 800243c:	40003c00 	.word	0x40003c00

08002440 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 800244a:	bf00      	nop
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <SPI3_SendByte+0x40>)
 800244e:	f7ff feff 	bl	8002250 <LL_SPI_IsActiveFlag_TXE>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f9      	beq.n	800244c <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	4619      	mov	r1, r3
 800245c:	4808      	ldr	r0, [pc, #32]	; (8002480 <SPI3_SendByte+0x40>)
 800245e:	f7ff ff18 	bl	8002292 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8002462:	bf00      	nop
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <SPI3_SendByte+0x40>)
 8002466:	f7ff fee0 	bl	800222a <LL_SPI_IsActiveFlag_RXNE>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f9      	beq.n	8002464 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <SPI3_SendByte+0x40>)
 8002472:	f7ff ff00 	bl	8002276 <LL_SPI_ReceiveData8>
 8002476:	4603      	mov	r3, r0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40003c00 	.word	0x40003c00

08002484 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	480b      	ldr	r0, [pc, #44]	; (80024c0 <LPS22HH_Readbyte+0x3c>)
 8002492:	f7ff ff1e 	bl	80022d2 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ffce 	bl	8002440 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff ffcb 	bl	8002440 <SPI3_SendByte>
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80024ae:	2140      	movs	r1, #64	; 0x40
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <LPS22HH_Readbyte+0x3c>)
 80024b2:	f7ff ff00 	bl	80022b6 <LL_GPIO_SetOutputPin>
	
	return val;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40020400 	.word	0x40020400

080024c4 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	460a      	mov	r2, r1
 80024ce:	71fb      	strb	r3, [r7, #7]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <LPS22HH_Writebyte+0x40>)
 80024d8:	f7ff fefb 	bl	80022d2 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ffab 	bl	8002440 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ffa7 	bl	8002440 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80024f2:	2140      	movs	r1, #64	; 0x40
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <LPS22HH_Writebyte+0x40>)
 80024f6:	f7ff fede 	bl	80022b6 <LL_GPIO_SetOutputPin>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40020400 	.word	0x40020400

08002508 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002512:	f7ff ff1d 	bl	8002350 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8002516:	4841      	ldr	r0, [pc, #260]	; (800261c <LPS22HH_Initialization+0x114>)
 8002518:	f007 fb00 	bl	8009b1c <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 800251c:	200f      	movs	r0, #15
 800251e:	f7ff ffb1 	bl	8002484 <LPS22HH_Readbyte>
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2bb3      	cmp	r3, #179	; 0xb3
 800252a:	d105      	bne.n	8002538 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	4619      	mov	r1, r3
 8002530:	483b      	ldr	r0, [pc, #236]	; (8002620 <LPS22HH_Initialization+0x118>)
 8002532:	f007 faf3 	bl	8009b1c <iprintf>
 8002536:	e012      	b.n	800255e <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	2bb3      	cmp	r3, #179	; 0xb3
 800253c:	d00f      	beq.n	800255e <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800253e:	200f      	movs	r0, #15
 8002540:	f7ff ffa0 	bl	8002484 <LPS22HH_Readbyte>
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2bb3      	cmp	r3, #179	; 0xb3
 800254c:	d007      	beq.n	800255e <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	22b3      	movs	r2, #179	; 0xb3
 8002552:	4619      	mov	r1, r3
 8002554:	4833      	ldr	r0, [pc, #204]	; (8002624 <LPS22HH_Initialization+0x11c>)
 8002556:	f007 fae1 	bl	8009b1c <iprintf>
			return 1; //ERROR
 800255a:	2301      	movs	r3, #1
 800255c:	e059      	b.n	8002612 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 800255e:	2104      	movs	r1, #4
 8002560:	2011      	movs	r0, #17
 8002562:	f7ff ffaf 	bl	80024c4 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002566:	2011      	movs	r0, #17
 8002568:	f7ff ff8c 	bl	8002484 <LPS22HH_Readbyte>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f7      	bne.n	8002566 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002576:	2010      	movs	r0, #16
 8002578:	f7ff ff84 	bl	8002484 <LPS22HH_Readbyte>
 800257c:	4603      	mov	r3, r0
 800257e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002580:	79bb      	ldrb	r3, [r7, #6]
 8002582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002586:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002588:	79bb      	ldrb	r3, [r7, #6]
 800258a:	4619      	mov	r1, r3
 800258c:	2010      	movs	r0, #16
 800258e:	f7ff ff99 	bl	80024c4 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002596:	2010      	movs	r0, #16
 8002598:	f7ff ff74 	bl	8002484 <LPS22HH_Readbyte>
 800259c:	4603      	mov	r3, r0
 800259e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025a0:	2010      	movs	r0, #16
 80025a2:	f7ff ff6f 	bl	8002484 <LPS22HH_Readbyte>
 80025a6:	4603      	mov	r3, r0
 80025a8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	f043 030c 	orr.w	r3, r3, #12
 80025b0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	4619      	mov	r1, r3
 80025b6:	2010      	movs	r0, #16
 80025b8:	f7ff ff84 	bl	80024c4 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025bc:	2010      	movs	r0, #16
 80025be:	f7ff ff61 	bl	8002484 <LPS22HH_Readbyte>
 80025c2:	4603      	mov	r3, r0
 80025c4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80025ce:	79bb      	ldrb	r3, [r7, #6]
 80025d0:	4619      	mov	r1, r3
 80025d2:	2010      	movs	r0, #16
 80025d4:	f7ff ff76 	bl	80024c4 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80025d8:	2011      	movs	r0, #17
 80025da:	f7ff ff53 	bl	8002484 <LPS22HH_Readbyte>
 80025de:	4603      	mov	r3, r0
 80025e0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	4619      	mov	r1, r3
 80025ee:	2011      	movs	r0, #17
 80025f0:	f7ff ff68 	bl	80024c4 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 80025f4:	2012      	movs	r0, #18
 80025f6:	f7ff ff45 	bl	8002484 <LPS22HH_Readbyte>
 80025fa:	4603      	mov	r3, r0
 80025fc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002606:	79bb      	ldrb	r3, [r7, #6]
 8002608:	4619      	mov	r1, r3
 800260a:	2012      	movs	r0, #18
 800260c:	f7ff ff5a 	bl	80024c4 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	0800c65c 	.word	0x0800c65c
 8002620:	0800c670 	.word	0x0800c670
 8002624:	0800c694 	.word	0x0800c694

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60da      	str	r2, [r3, #12]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	615a      	str	r2, [r3, #20]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <LL_AHB1_GRP1_EnableClock>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40023800 	.word	0x40023800

080027fc <LL_APB1_GRP1_EnableClock>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <LL_APB1_GRP1_EnableClock+0x2c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40023800 	.word	0x40023800

0800282c <M8N_TransmitDATA>:
	0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitDATA(unsigned char* data, unsigned char len) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < len; i++) {
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e011      	b.n	8002862 <M8N_TransmitDATA+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 800283e:	bf00      	nop
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <M8N_TransmitDATA+0x48>)
 8002842:	f7ff ffa0 	bl	8002786 <LL_USART_IsActiveFlag_TXE>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f9      	beq.n	8002840 <M8N_TransmitDATA+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	4807      	ldr	r0, [pc, #28]	; (8002874 <M8N_TransmitDATA+0x48>)
 8002858:	f7ff ffa8 	bl	80027ac <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++) {
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3301      	adds	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbe9      	blt.n	800283e <M8N_TransmitDATA+0x12>
	}
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40004c00 	.word	0x40004c00

08002878 <M8N_UART4_Initialzation>:

void M8N_UART4_Initialzation(void){
 8002878:	b580      	push	{r7, lr}
 800287a:	b08e      	sub	sp, #56	; 0x38
 800287c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */

	  /* USER CODE END UART4_Init 0 */

	  LL_USART_InitTypeDef USART_InitStruct = {0};
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	615a      	str	r2, [r3, #20]
 8002890:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80028a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028a6:	f7ff ffa9 	bl	80027fc <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80028aa:	2004      	movs	r0, #4
 80028ac:	f7ff ff8e 	bl	80027cc <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80028b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028b4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028b6:	2302      	movs	r3, #2
 80028b8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80028c6:	2308      	movs	r3, #8
 80028c8:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4819      	ldr	r0, [pc, #100]	; (8002934 <M8N_UART4_Initialzation+0xbc>)
 80028d0:	f005 fc8d 	bl	80081ee <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028d4:	f7ff fea8 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80028d8:	4603      	mov	r3, r0
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fef8 	bl	80026d4 <NVIC_EncodePriority>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4619      	mov	r1, r3
 80028e8:	2034      	movs	r0, #52	; 0x34
 80028ea:	f7ff fec9 	bl	8002680 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 80028ee:	2034      	movs	r0, #52	; 0x34
 80028f0:	f7ff fea8 	bl	8002644 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 80028f4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80028f8:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002902:	2300      	movs	r3, #0
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002906:	230c      	movs	r3, #12
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	4619      	mov	r1, r3
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <M8N_UART4_Initialzation+0xc0>)
 800291a:	f006 fbe3 	bl	80090e4 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 800291e:	4806      	ldr	r0, [pc, #24]	; (8002938 <M8N_UART4_Initialzation+0xc0>)
 8002920:	f7ff ff1b 	bl	800275a <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <M8N_UART4_Initialzation+0xc0>)
 8002926:	f7ff ff08 	bl	800273a <LL_USART_Enable>
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */
}
 800292a:	bf00      	nop
 800292c:	3738      	adds	r7, #56	; 0x38
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40020800 	.word	0x40020800
 8002938:	40004c00 	.word	0x40004c00

0800293c <M8N_Initialzation>:

void M8N_Initialzation(void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	M8N_UART4_Initialzation();
 8002940:	f7ff ff9a 	bl	8002878 <M8N_UART4_Initialzation>

	M8N_TransmitDATA(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002944:	211c      	movs	r1, #28
 8002946:	480d      	ldr	r0, [pc, #52]	; (800297c <M8N_Initialzation+0x40>)
 8002948:	f7ff ff70 	bl	800282c <M8N_TransmitDATA>
	HAL_Delay(100);
 800294c:	2064      	movs	r0, #100	; 0x64
 800294e:	f002 fb73 	bl	8005038 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002952:	2110      	movs	r1, #16
 8002954:	480a      	ldr	r0, [pc, #40]	; (8002980 <M8N_Initialzation+0x44>)
 8002956:	f7ff ff69 	bl	800282c <M8N_TransmitDATA>
	HAL_Delay(100);
 800295a:	2064      	movs	r0, #100	; 0x64
 800295c:	f002 fb6c 	bl	8005038 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002960:	210e      	movs	r1, #14
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <M8N_Initialzation+0x48>)
 8002964:	f7ff ff62 	bl	800282c <M8N_TransmitDATA>
	HAL_Delay(100);
 8002968:	2064      	movs	r0, #100	; 0x64
 800296a:	f002 fb65 	bl	8005038 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 800296e:	2115      	movs	r1, #21
 8002970:	4805      	ldr	r0, [pc, #20]	; (8002988 <M8N_Initialzation+0x4c>)
 8002972:	f7ff ff5b 	bl	800282c <M8N_TransmitDATA>
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	0800c8b8 	.word	0x0800c8b8
 8002980:	0800c8d4 	.word	0x0800c8d4
 8002984:	0800c8e4 	.word	0x0800c8e4
 8002988:	0800c8f4 	.word	0x0800c8f4

0800298c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002992:	463b      	mov	r3, r7
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029a0:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <MX_ADC1_Init+0x9c>)
 80029a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <MX_ADC1_Init+0xa0>)
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029da:	2201      	movs	r2, #1
 80029dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029ec:	480d      	ldr	r0, [pc, #52]	; (8002a24 <MX_ADC1_Init+0x98>)
 80029ee:	f002 fb47 	bl	8005080 <HAL_ADC_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029f8:	f001 f8de 	bl	8003bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80029fc:	2308      	movs	r3, #8
 80029fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002a04:	2307      	movs	r3, #7
 8002a06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a08:	463b      	mov	r3, r7
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4805      	ldr	r0, [pc, #20]	; (8002a24 <MX_ADC1_Init+0x98>)
 8002a0e:	f002 fca9 	bl	8005364 <HAL_ADC_ConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a18:	f001 f8ce 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200002e0 	.word	0x200002e0
 8002a28:	40012000 	.word	0x40012000
 8002a2c:	0f000001 	.word	0x0f000001

08002a30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2e      	ldr	r2, [pc, #184]	; (8002b08 <HAL_ADC_MspInit+0xd8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d156      	bne.n	8002b00 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_ADC_MspInit+0xdc>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <HAL_ADC_MspInit+0xdc>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_ADC_MspInit+0xdc>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_ADC_MspInit+0xdc>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <HAL_ADC_MspInit+0xdc>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_ADC_MspInit+0xdc>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481c      	ldr	r0, [pc, #112]	; (8002b10 <HAL_ADC_MspInit+0xe0>)
 8002a9e:	f003 fc15 	bl	80062cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_ADC_MspInit+0xe8>)
 8002aa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ace:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ae4:	480b      	ldr	r0, [pc, #44]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002ae6:	f002 ffef 	bl	8005ac8 <HAL_DMA_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002af0:	f001 f862 	bl	8003bb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
 8002afa:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_ADC_MspInit+0xe4>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40012000 	.word	0x40012000
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020400 	.word	0x40020400
 8002b14:	20000328 	.word	0x20000328
 8002b18:	40026410 	.word	0x40026410

08002b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2038      	movs	r0, #56	; 0x38
 8002b44:	f002 ff89 	bl	8005a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b48:	2038      	movs	r0, #56	; 0x38
 8002b4a:	f002 ffa2 	bl	8005a92 <HAL_NVIC_EnableIRQ>

}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <LL_GPIO_SetOutputPin>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	619a      	str	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_GPIO_ResetOutputPin>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <LL_AHB1_GRP1_EnableClock>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba4:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bce:	463b      	mov	r3, r7
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
 8002bdc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002bde:	2004      	movs	r0, #4
 8002be0:	f7ff ffda 	bl	8002b98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002be4:	2080      	movs	r0, #128	; 0x80
 8002be6:	f7ff ffd7 	bl	8002b98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f7ff ffd4 	bl	8002b98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7ff ffd1 	bl	8002b98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002bf6:	2008      	movs	r0, #8
 8002bf8:	f7ff ffce 	bl	8002b98 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8002bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c00:	482e      	ldr	r0, [pc, #184]	; (8002cbc <MX_GPIO_Init+0xf4>)
 8002c02:	f7ff ffab 	bl	8002b5c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002c06:	f240 2117 	movw	r1, #535	; 0x217
 8002c0a:	482c      	ldr	r0, [pc, #176]	; (8002cbc <MX_GPIO_Init+0xf4>)
 8002c0c:	f7ff ffb4 	bl	8002b78 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8002c10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002c14:	482a      	ldr	r0, [pc, #168]	; (8002cc0 <MX_GPIO_Init+0xf8>)
 8002c16:	f7ff ffaf 	bl	8002b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c1e:	4829      	ldr	r0, [pc, #164]	; (8002cc4 <MX_GPIO_Init+0xfc>)
 8002c20:	f7ff ffaa 	bl	8002b78 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8002c24:	f242 2317 	movw	r3, #8727	; 0x2217
 8002c28:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3a:	463b      	mov	r3, r7
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	481f      	ldr	r0, [pc, #124]	; (8002cbc <MX_GPIO_Init+0xf4>)
 8002c40:	f005 fad5 	bl	80081ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002c44:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002c48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c52:	463b      	mov	r3, r7
 8002c54:	4619      	mov	r1, r3
 8002c56:	4819      	ldr	r0, [pc, #100]	; (8002cbc <MX_GPIO_Init+0xf4>)
 8002c58:	f005 fac9 	bl	80081ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8002c5c:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002c60:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c62:	2301      	movs	r3, #1
 8002c64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	463b      	mov	r3, r7
 8002c74:	4619      	mov	r1, r3
 8002c76:	4812      	ldr	r0, [pc, #72]	; (8002cc0 <MX_GPIO_Init+0xf8>)
 8002c78:	f005 fab9 	bl	80081ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c82:	2301      	movs	r3, #1
 8002c84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	463b      	mov	r3, r7
 8002c94:	4619      	mov	r1, r3
 8002c96:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <MX_GPIO_Init+0xfc>)
 8002c98:	f005 faa9 	bl	80081ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca8:	463b      	mov	r3, r7
 8002caa:	4619      	mov	r1, r3
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_GPIO_Init+0xf8>)
 8002cae:	f005 fa9e 	bl	80081ee <LL_GPIO_Init>

}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40020000 	.word	0x40020000

08002cc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <MX_I2C1_Init+0x54>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <MX_I2C1_Init+0x58>)
 8002cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d04:	4804      	ldr	r0, [pc, #16]	; (8002d18 <MX_I2C1_Init+0x50>)
 8002d06:	f003 fc7d 	bl	8006604 <HAL_I2C_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d10:	f000 ff52 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000388 	.word	0x20000388
 8002d1c:	40005400 	.word	0x40005400
 8002d20:	00061a80 	.word	0x00061a80

08002d24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_I2C_MspInit+0x84>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d12c      	bne.n	8002da0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_I2C_MspInit+0x88>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_I2C_MspInit+0x88>)
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_I2C_MspInit+0x88>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d68:	2312      	movs	r3, #18
 8002d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d74:	2304      	movs	r3, #4
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480c      	ldr	r0, [pc, #48]	; (8002db0 <HAL_I2C_MspInit+0x8c>)
 8002d80:	f003 faa4 	bl	80062cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_I2C_MspInit+0x88>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <HAL_I2C_MspInit+0x88>)
 8002d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d92:	6413      	str	r3, [r2, #64]	; 0x40
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_I2C_MspInit+0x88>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40005400 	.word	0x40005400
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020400 	.word	0x40020400

08002db4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1a      	ldr	r2, [r3, #32]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60da      	str	r2, [r3, #12]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_USART_IsActiveFlag_TXE>:
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_USART_EnableIT_RXNE>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f043 0320 	orr.w	r3, r3, #32
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	330c      	adds	r3, #12
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	61ba      	str	r2, [r7, #24]
 8002e86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6979      	ldr	r1, [r7, #20]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	613b      	str	r3, [r7, #16]
   return(result);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e7      	bne.n	8002e68 <LL_USART_EnableIT_RXNE+0x8>
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_USART_TransmitData8>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	605a      	str	r2, [r3, #4]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_GPIO_SetOutputPin>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	619a      	str	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_GPIO_ResetOutputPin>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4013      	ands	r3, r2
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	43d9      	mvns	r1, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	400b      	ands	r3, r1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_write>:
#include "AT24C08.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e011      	b.n	8002f66 <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8002f42:	bf00      	nop
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <_write+0x48>)
 8002f46:	f7ff ff78 	bl	8002e3a <LL_USART_IsActiveFlag_TXE>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f9      	beq.n	8002f44 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p + i));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4807      	ldr	r0, [pc, #28]	; (8002f78 <_write+0x48>)
 8002f5c:	f7ff ffa3 	bl	8002ea6 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++){
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3301      	adds	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	dbe9      	blt.n	8002f42 <_write+0x12>
	}
	return len;
 8002f6e:	687b      	ldr	r3, [r7, #4]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40011400 	.word	0x40011400

08002f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b093      	sub	sp, #76	; 0x4c
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float Q[4];
	float quatRadianAccuracy;
   	unsigned char buf_read[16] = {0};
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002f92:	4bc9      	ldr	r3, [pc, #804]	; (80032b8 <main+0x33c>)
 8002f94:	f107 0408 	add.w	r4, r7, #8
 8002f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short adcVal;
	float batvol;
	short gyro_x_offset =12, gyro_y_offset = 16, gyro_z_offset = 9;
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002fa8:	2309      	movs	r3, #9
 8002faa:	87bb      	strh	r3, [r7, #60]	; 0x3c
	unsigned char motor_arming_flag = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	unsigned short iBus_SwA_Prev = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	unsigned char iBus_rx_cnt = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fbe:	f001 ffc9 	bl	8004f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fc2:	f000 fbad 	bl	8003720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fc6:	f7ff fdff 	bl	8002bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fca:	f7ff fda7 	bl	8002b1c <MX_DMA_Init>
  MX_TIM3_Init();
 8002fce:	f001 fb9d 	bl	800470c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002fd2:	f001 fee5 	bl	8004da0 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002fd6:	f000 fea1 	bl	8003d1c <MX_SPI2_Init>
  MX_SPI1_Init();
 8002fda:	f000 fe4d 	bl	8003c78 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002fde:	f000 fef1 	bl	8003dc4 <MX_SPI3_Init>
  MX_UART4_Init();
 8002fe2:	f001 fdd9 	bl	8004b98 <MX_UART4_Init>
  MX_UART5_Init();
 8002fe6:	f001 fe39 	bl	8004c5c <MX_UART5_Init>
  MX_TIM5_Init();
 8002fea:	f001 fc01 	bl	80047f0 <MX_TIM5_Init>
  MX_I2C1_Init();
 8002fee:	f7ff fe6b 	bl	8002cc8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002ff2:	f7ff fccb 	bl	800298c <MX_ADC1_Init>
  MX_TIM7_Init();
 8002ff6:	f001 fc9d 	bl	8004934 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002ffa:	f001 fea7 	bl	8004d4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);//Buzzer
 8002ffe:	48af      	ldr	r0, [pc, #700]	; (80032bc <main+0x340>)
 8003000:	f7ff fed8 	bl	8002db4 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM7);
 8003004:	48ae      	ldr	r0, [pc, #696]	; (80032c0 <main+0x344>)
 8003006:	f7ff fed5 	bl	8002db4 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 800300a:	48ad      	ldr	r0, [pc, #692]	; (80032c0 <main+0x344>)
 800300c:	f7ff ff05 	bl	8002e1a <LL_TIM_EnableIT_UPDATE>

  LL_USART_EnableIT_RXNE(USART6);//Debug UART
 8003010:	48ac      	ldr	r0, [pc, #688]	; (80032c4 <main+0x348>)
 8003012:	f7ff ff25 	bl	8002e60 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);//GPS
 8003016:	48ac      	ldr	r0, [pc, #688]	; (80032c8 <main+0x34c>)
 8003018:	f7ff ff22 	bl	8002e60 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);//FS-iA6B
 800301c:	48ab      	ldr	r0, [pc, #684]	; (80032cc <main+0x350>)
 800301e:	f7ff ff1f 	bl	8002e60 <LL_USART_EnableIT_RXNE>

  LL_TIM_EnableCounter(TIM5);//Motor ADC
 8003022:	48ab      	ldr	r0, [pc, #684]	; (80032d0 <main+0x354>)
 8003024:	f7ff fec6 	bl	8002db4 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8003028:	2101      	movs	r1, #1
 800302a:	48a9      	ldr	r0, [pc, #676]	; (80032d0 <main+0x354>)
 800302c:	f7ff fed2 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003030:	2110      	movs	r1, #16
 8003032:	48a7      	ldr	r0, [pc, #668]	; (80032d0 <main+0x354>)
 8003034:	f7ff fece 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800303c:	48a4      	ldr	r0, [pc, #656]	; (80032d0 <main+0x354>)
 800303e:	f7ff fec9 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003046:	48a2      	ldr	r0, [pc, #648]	; (80032d0 <main+0x354>)
 8003048:	f7ff fec4 	bl	8002dd4 <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);//Battery ADC
 800304c:	1dbb      	adds	r3, r7, #6
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	48a0      	ldr	r0, [pc, #640]	; (80032d4 <main+0x358>)
 8003054:	f002 f858 	bl	8005108 <HAL_ADC_Start_DMA>

  TIM3->PSC = 1000;
 8003058:	4b98      	ldr	r3, [pc, #608]	; (80032bc <main+0x340>)
 800305a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003064:	4895      	ldr	r0, [pc, #596]	; (80032bc <main+0x340>)
 8003066:	f7ff feb5 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 800306a:	203c      	movs	r0, #60	; 0x3c
 800306c:	f001 ffe4 	bl	8005038 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003074:	4891      	ldr	r0, [pc, #580]	; (80032bc <main+0x340>)
 8003076:	f7ff febe 	bl	8002df6 <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 800307a:	203c      	movs	r0, #60	; 0x3c
 800307c:	f001 ffdc 	bl	8005038 <HAL_Delay>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003084:	488d      	ldr	r0, [pc, #564]	; (80032bc <main+0x340>)
 8003086:	f7ff fea5 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 800308a:	203c      	movs	r0, #60	; 0x3c
 800308c:	f001 ffd4 	bl	8005038 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003094:	4889      	ldr	r0, [pc, #548]	; (80032bc <main+0x340>)
 8003096:	f7ff feae 	bl	8002df6 <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 800309a:	203c      	movs	r0, #60	; 0x3c
 800309c:	f001 ffcc 	bl	8005038 <HAL_Delay>
  printf("Checking Sensor connection.\n");
 80030a0:	488d      	ldr	r0, [pc, #564]	; (80032d8 <main+0x35c>)
 80030a2:	f006 fdc1 	bl	8009c28 <puts>

  if(BNO080_Initialization() != 0)
 80030a6:	f7fe f887 	bl	80011b8 <BNO080_Initialization>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03a      	beq.n	8003126 <main+0x1aa>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80030b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030b4:	4881      	ldr	r0, [pc, #516]	; (80032bc <main+0x340>)
 80030b6:	f7ff fe8d 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 80030ba:	4b80      	ldr	r3, [pc, #512]	; (80032bc <main+0x340>)
 80030bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80030c2:	2064      	movs	r0, #100	; 0x64
 80030c4:	f001 ffb8 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 1500;
 80030c8:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <main+0x340>)
 80030ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80030d0:	2064      	movs	r0, #100	; 0x64
 80030d2:	f001 ffb1 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 2000;
 80030d6:	4b79      	ldr	r3, [pc, #484]	; (80032bc <main+0x340>)
 80030d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80030de:	2064      	movs	r0, #100	; 0x64
 80030e0:	f001 ffaa 	bl	8005038 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80030e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e8:	4874      	ldr	r0, [pc, #464]	; (80032bc <main+0x340>)
 80030ea:	f7ff fe84 	bl	8002df6 <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...");
 80030ee:	487b      	ldr	r0, [pc, #492]	; (80032dc <main+0x360>)
 80030f0:	f006 fd14 	bl	8009b1c <iprintf>

	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80030f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030f8:	4870      	ldr	r0, [pc, #448]	; (80032bc <main+0x340>)
 80030fa:	f7ff fe7c 	bl	8002df6 <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 80030fe:	2101      	movs	r1, #1
 8003100:	4877      	ldr	r0, [pc, #476]	; (80032e0 <main+0x364>)
 8003102:	f7ff fefc 	bl	8002efe <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003106:	20c8      	movs	r0, #200	; 0xc8
 8003108:	f001 ff96 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800310c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003110:	486a      	ldr	r0, [pc, #424]	; (80032bc <main+0x340>)
 8003112:	f7ff fe5f 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003116:	2101      	movs	r1, #1
 8003118:	4871      	ldr	r0, [pc, #452]	; (80032e0 <main+0x364>)
 800311a:	f7ff fef0 	bl	8002efe <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800311e:	20c8      	movs	r0, #200	; 0xc8
 8003120:	f001 ff8a 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003124:	e7e6      	b.n	80030f4 <main+0x178>
	  }
  }
  BNO080_enableRotationVector(2500);
 8003126:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800312a:	f7fe fb6e 	bl	800180a <BNO080_enableRotationVector>

  if(ICM20602_Initialization() != 0)
 800312e:	f7fe ffdb 	bl	80020e8 <ICM20602_Initialization>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03a      	beq.n	80031ae <main+0x232>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800313c:	485f      	ldr	r0, [pc, #380]	; (80032bc <main+0x340>)
 800313e:	f7ff fe49 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 8003142:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <main+0x340>)
 8003144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800314a:	2064      	movs	r0, #100	; 0x64
 800314c:	f001 ff74 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 1500;
 8003150:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <main+0x340>)
 8003152:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8003158:	2064      	movs	r0, #100	; 0x64
 800315a:	f001 ff6d 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 2000;
 800315e:	4b57      	ldr	r3, [pc, #348]	; (80032bc <main+0x340>)
 8003160:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8003166:	2064      	movs	r0, #100	; 0x64
 8003168:	f001 ff66 	bl	8005038 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800316c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003170:	4852      	ldr	r0, [pc, #328]	; (80032bc <main+0x340>)
 8003172:	f7ff fe40 	bl	8002df6 <LL_TIM_CC_DisableChannel>

	  printf("\nICM-20602 failed. Program shutting down...");
 8003176:	485b      	ldr	r0, [pc, #364]	; (80032e4 <main+0x368>)
 8003178:	f006 fcd0 	bl	8009b1c <iprintf>

	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800317c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003180:	484e      	ldr	r0, [pc, #312]	; (80032bc <main+0x340>)
 8003182:	f7ff fe38 	bl	8002df6 <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003186:	2102      	movs	r1, #2
 8003188:	4855      	ldr	r0, [pc, #340]	; (80032e0 <main+0x364>)
 800318a:	f7ff feb8 	bl	8002efe <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800318e:	20c8      	movs	r0, #200	; 0xc8
 8003190:	f001 ff52 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003198:	4848      	ldr	r0, [pc, #288]	; (80032bc <main+0x340>)
 800319a:	f7ff fe1b 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 800319e:	2102      	movs	r1, #2
 80031a0:	484f      	ldr	r0, [pc, #316]	; (80032e0 <main+0x364>)
 80031a2:	f7ff feac 	bl	8002efe <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 80031a6:	20c8      	movs	r0, #200	; 0xc8
 80031a8:	f001 ff46 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80031ac:	e7e6      	b.n	800317c <main+0x200>
	  }
  }

  if(LPS22HH_Initialization() != 0)
 80031ae:	f7ff f9ab 	bl	8002508 <LPS22HH_Initialization>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d03a      	beq.n	800322e <main+0x2b2>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80031b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031bc:	483f      	ldr	r0, [pc, #252]	; (80032bc <main+0x340>)
 80031be:	f7ff fe09 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <main+0x340>)
 80031c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80031ca:	2064      	movs	r0, #100	; 0x64
 80031cc:	f001 ff34 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 1500;
 80031d0:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <main+0x340>)
 80031d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80031d8:	2064      	movs	r0, #100	; 0x64
 80031da:	f001 ff2d 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 2000;
 80031de:	4b37      	ldr	r3, [pc, #220]	; (80032bc <main+0x340>)
 80031e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80031e6:	2064      	movs	r0, #100	; 0x64
 80031e8:	f001 ff26 	bl	8005038 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80031ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031f0:	4832      	ldr	r0, [pc, #200]	; (80032bc <main+0x340>)
 80031f2:	f7ff fe00 	bl	8002df6 <LL_TIM_CC_DisableChannel>

	  printf("\nLPS22HH failed. Program shutting down...");
 80031f6:	483c      	ldr	r0, [pc, #240]	; (80032e8 <main+0x36c>)
 80031f8:	f006 fc90 	bl	8009b1c <iprintf>

	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80031fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003200:	482e      	ldr	r0, [pc, #184]	; (80032bc <main+0x340>)
 8003202:	f7ff fdf8 	bl	8002df6 <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003206:	2104      	movs	r1, #4
 8003208:	4835      	ldr	r0, [pc, #212]	; (80032e0 <main+0x364>)
 800320a:	f7ff fe78 	bl	8002efe <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800320e:	20c8      	movs	r0, #200	; 0xc8
 8003210:	f001 ff12 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003218:	4828      	ldr	r0, [pc, #160]	; (80032bc <main+0x340>)
 800321a:	f7ff fddb 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800321e:	2104      	movs	r1, #4
 8003220:	482f      	ldr	r0, [pc, #188]	; (80032e0 <main+0x364>)
 8003222:	f7ff fe6c 	bl	8002efe <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003226:	20c8      	movs	r0, #200	; 0xc8
 8003228:	f001 ff06 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800322c:	e7e6      	b.n	80031fc <main+0x280>
	  }
  }
  printf("All Sensor OK!\n");
 800322e:	482f      	ldr	r0, [pc, #188]	; (80032ec <main+0x370>)
 8003230:	f006 fcfa 	bl	8009c28 <puts>
  M8N_Initialzation();
 8003234:	f7ff fb82 	bl	800293c <M8N_Initialzation>

  ICM20602_Writebyte(0x13, (gyro_x_offset * -2)>>8);
 8003238:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800323c:	4613      	mov	r3, r2
 800323e:	07db      	lsls	r3, r3, #31
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	121b      	asrs	r3, r3, #8
 8003246:	4619      	mov	r1, r3
 8003248:	2013      	movs	r0, #19
 800324a:	f7fe ff2b 	bl	80020a4 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 800324e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8003252:	4613      	mov	r3, r2
 8003254:	07db      	lsls	r3, r3, #31
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4619      	mov	r1, r3
 800325c:	2014      	movs	r0, #20
 800325e:	f7fe ff21 	bl	80020a4 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset * -2)>>8);
 8003262:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8003266:	4613      	mov	r3, r2
 8003268:	07db      	lsls	r3, r3, #31
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	121b      	asrs	r3, r3, #8
 8003270:	4619      	mov	r1, r3
 8003272:	2015      	movs	r0, #21
 8003274:	f7fe ff16 	bl	80020a4 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 8003278:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800327c:	4613      	mov	r3, r2
 800327e:	07db      	lsls	r3, r3, #31
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4619      	mov	r1, r3
 8003286:	2016      	movs	r0, #22
 8003288:	f7fe ff0c 	bl	80020a4 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset * -2)>>8);
 800328c:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8003290:	4613      	mov	r3, r2
 8003292:	07db      	lsls	r3, r3, #31
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	121b      	asrs	r3, r3, #8
 800329a:	4619      	mov	r1, r3
 800329c:	2017      	movs	r0, #23
 800329e:	f7fe ff01 	bl	80020a4 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset * -2));
 80032a2:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 80032a6:	4613      	mov	r3, r2
 80032a8:	07db      	lsls	r3, r3, #31
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4619      	mov	r1, r3
 80032b0:	2018      	movs	r0, #24
 80032b2:	f7fe fef7 	bl	80020a4 <ICM20602_Writebyte>


  while(Is_iBus_Received() == 0){
 80032b6:	e02f      	b.n	8003318 <main+0x39c>
 80032b8:	0800c778 	.word	0x0800c778
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40001400 	.word	0x40001400
 80032c4:	40011400 	.word	0x40011400
 80032c8:	40004c00 	.word	0x40004c00
 80032cc:	40005000 	.word	0x40005000
 80032d0:	40000c00 	.word	0x40000c00
 80032d4:	200002e0 	.word	0x200002e0
 80032d8:	0800c6c0 	.word	0x0800c6c0
 80032dc:	0800c6dc 	.word	0x0800c6dc
 80032e0:	40020800 	.word	0x40020800
 80032e4:	0800c708 	.word	0x0800c708
 80032e8:	0800c734 	.word	0x0800c734
 80032ec:	0800c760 	.word	0x0800c760
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80032f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f4:	48b7      	ldr	r0, [pc, #732]	; (80035d4 <main+0x658>)
 80032f6:	f7ff fd6d 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 3000;
 80032fa:	4bb6      	ldr	r3, [pc, #728]	; (80035d4 <main+0x658>)
 80032fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003302:	20c8      	movs	r0, #200	; 0xc8
 8003304:	f001 fe98 	bl	8005038 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800330c:	48b1      	ldr	r0, [pc, #708]	; (80035d4 <main+0x658>)
 800330e:	f7ff fd72 	bl	8002df6 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8003312:	20c8      	movs	r0, #200	; 0xc8
 8003314:	f001 fe90 	bl	8005038 <HAL_Delay>
  while(Is_iBus_Received() == 0){
 8003318:	f000 fac0 	bl	800389c <Is_iBus_Received>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0e6      	beq.n	80032f0 <main+0x374>
  }
  if(iBus.SwC == 2000)
 8003322:	4bad      	ldr	r3, [pc, #692]	; (80035d8 <main+0x65c>)
 8003324:	899b      	ldrh	r3, [r3, #12]
 8003326:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800332a:	d145      	bne.n	80033b8 <main+0x43c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800332c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003330:	48a8      	ldr	r0, [pc, #672]	; (80035d4 <main+0x658>)
 8003332:	f7ff fd4f 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8003336:	4ba7      	ldr	r3, [pc, #668]	; (80035d4 <main+0x658>)
 8003338:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800333e:	20c8      	movs	r0, #200	; 0xc8
 8003340:	f001 fe7a 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 2000;
 8003344:	4ba3      	ldr	r3, [pc, #652]	; (80035d4 <main+0x658>)
 8003346:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800334c:	20c8      	movs	r0, #200	; 0xc8
 800334e:	f001 fe73 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 1500;
 8003352:	4ba0      	ldr	r3, [pc, #640]	; (80035d4 <main+0x658>)
 8003354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003358:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800335a:	20c8      	movs	r0, #200	; 0xc8
 800335c:	f001 fe6c 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 2000;
 8003360:	4b9c      	ldr	r3, [pc, #624]	; (80035d4 <main+0x658>)
 8003362:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800336c:	4899      	ldr	r0, [pc, #612]	; (80035d4 <main+0x658>)
 800336e:	f7ff fd42 	bl	8002df6 <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 8003372:	f000 fa65 	bl	8003840 <ESC_Calibration>
	  while(iBus.SwC != 1000) {
 8003376:	e019      	b.n	80033ac <main+0x430>
		  Is_iBus_Received();
 8003378:	f000 fa90 	bl	800389c <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800337c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003380:	4894      	ldr	r0, [pc, #592]	; (80035d4 <main+0x658>)
 8003382:	f7ff fd27 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8003386:	4b93      	ldr	r3, [pc, #588]	; (80035d4 <main+0x658>)
 8003388:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 800338e:	20c8      	movs	r0, #200	; 0xc8
 8003390:	f001 fe52 	bl	8005038 <HAL_Delay>
		  TIM3->PSC = 2000;
 8003394:	4b8f      	ldr	r3, [pc, #572]	; (80035d4 <main+0x658>)
 8003396:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 800339c:	20c8      	movs	r0, #200	; 0xc8
 800339e:	f001 fe4b 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80033a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033a6:	488b      	ldr	r0, [pc, #556]	; (80035d4 <main+0x658>)
 80033a8:	f7ff fd25 	bl	8002df6 <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000) {
 80033ac:	4b8a      	ldr	r3, [pc, #552]	; (80035d8 <main+0x65c>)
 80033ae:	899b      	ldrh	r3, [r3, #12]
 80033b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033b4:	d1e0      	bne.n	8003378 <main+0x3fc>
 80033b6:	e05f      	b.n	8003478 <main+0x4fc>
	  }
  }
  else if(iBus.SwC == 1500)
 80033b8:	4b87      	ldr	r3, [pc, #540]	; (80035d8 <main+0x65c>)
 80033ba:	899b      	ldrh	r3, [r3, #12]
 80033bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d159      	bne.n	8003478 <main+0x4fc>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80033c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033c8:	4882      	ldr	r0, [pc, #520]	; (80035d4 <main+0x658>)
 80033ca:	f7ff fd03 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 80033ce:	4b81      	ldr	r3, [pc, #516]	; (80035d4 <main+0x658>)
 80033d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 80033d6:	20c8      	movs	r0, #200	; 0xc8
 80033d8:	f001 fe2e 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 2000;
 80033dc:	4b7d      	ldr	r3, [pc, #500]	; (80035d4 <main+0x658>)
 80033de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 80033e4:	20c8      	movs	r0, #200	; 0xc8
 80033e6:	f001 fe27 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 1500;
 80033ea:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <main+0x658>)
 80033ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 80033f2:	20c8      	movs	r0, #200	; 0xc8
 80033f4:	f001 fe20 	bl	8005038 <HAL_Delay>
	  TIM3->PSC = 2000;
 80033f8:	4b76      	ldr	r3, [pc, #472]	; (80035d4 <main+0x658>)
 80033fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003404:	4873      	ldr	r0, [pc, #460]	; (80035d4 <main+0x658>)
 8003406:	f7ff fcf6 	bl	8002df6 <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 800340a:	f000 fa67 	bl	80038dc <BNO080_Calibration>
	  while(iBus.SwC != 1000) {
 800340e:	e019      	b.n	8003444 <main+0x4c8>
		  Is_iBus_Received();
 8003410:	f000 fa44 	bl	800389c <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003418:	486e      	ldr	r0, [pc, #440]	; (80035d4 <main+0x658>)
 800341a:	f7ff fcdb 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 800341e:	4b6d      	ldr	r3, [pc, #436]	; (80035d4 <main+0x658>)
 8003420:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8003426:	20c8      	movs	r0, #200	; 0xc8
 8003428:	f001 fe06 	bl	8005038 <HAL_Delay>
		  TIM3->PSC = 2000;
 800342c:	4b69      	ldr	r3, [pc, #420]	; (80035d4 <main+0x658>)
 800342e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8003434:	20c8      	movs	r0, #200	; 0xc8
 8003436:	f001 fdff 	bl	8005038 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800343a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800343e:	4865      	ldr	r0, [pc, #404]	; (80035d4 <main+0x658>)
 8003440:	f7ff fcd9 	bl	8002df6 <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000) {
 8003444:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <main+0x65c>)
 8003446:	899b      	ldrh	r3, [r3, #12]
 8003448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344c:	d1e0      	bne.n	8003410 <main+0x494>
	  }
  }

  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 800344e:	e013      	b.n	8003478 <main+0x4fc>
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003454:	485f      	ldr	r0, [pc, #380]	; (80035d4 <main+0x658>)
 8003456:	f7ff fcbd 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 800345a:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <main+0x658>)
 800345c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(70);
 8003462:	2046      	movs	r0, #70	; 0x46
 8003464:	f001 fde8 	bl	8005038 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346c:	4859      	ldr	r0, [pc, #356]	; (80035d4 <main+0x658>)
 800346e:	f7ff fcc2 	bl	8002df6 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 8003472:	2046      	movs	r0, #70	; 0x46
 8003474:	f001 fde0 	bl	8005038 <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8003478:	f000 f9bc 	bl	80037f4 <Is_iBus_Throttle_Min>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0e6      	beq.n	8003450 <main+0x4d4>
 8003482:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <main+0x65c>)
 8003484:	891b      	ldrh	r3, [r3, #8]
 8003486:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800348a:	d0e1      	beq.n	8003450 <main+0x4d4>
  }

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800348c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003490:	4850      	ldr	r0, [pc, #320]	; (80035d4 <main+0x658>)
 8003492:	f7ff fc9f 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000;
 8003496:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <main+0x658>)
 8003498:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800349e:	2064      	movs	r0, #100	; 0x64
 80034a0:	f001 fdca 	bl	8005038 <HAL_Delay>
  TIM3->PSC = 1500;
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <main+0x658>)
 80034a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80034ac:	2064      	movs	r0, #100	; 0x64
 80034ae:	f001 fdc3 	bl	8005038 <HAL_Delay>
  TIM3->PSC = 1000;
 80034b2:	4b48      	ldr	r3, [pc, #288]	; (80035d4 <main+0x658>)
 80034b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b8:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80034ba:	2064      	movs	r0, #100	; 0x64
 80034bc:	f001 fdbc 	bl	8005038 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80034c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034c4:	4843      	ldr	r0, [pc, #268]	; (80035d4 <main+0x658>)
 80034c6:	f7ff fc96 	bl	8002df6 <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 80034ca:	4844      	ldr	r0, [pc, #272]	; (80035dc <main+0x660>)
 80034cc:	f006 fbac 	bl	8009c28 <puts>
			  M8N_UBX_NAV_POSLLH_Pasing(&m8n_rx_buf[0], &posllh);

			  printf("LAT: %d\tLOT: %d\tLength: %d\t\n", posllh.lon, posllh.lat, posllh.length);
		  }
	  }*/
	  if(ibus_rx_cplt_flag == 1){
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <main+0x664>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d123      	bne.n	8003520 <main+0x5a4>
		  ibus_rx_cplt_flag = 0;
 80034d8:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <main+0x664>)
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 80034de:	2120      	movs	r1, #32
 80034e0:	4840      	ldr	r0, [pc, #256]	; (80035e4 <main+0x668>)
 80034e2:	f7fe fbab 	bl	8001c3c <iBus_Check_CHKSUM>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d119      	bne.n	8003520 <main+0x5a4>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80034ec:	2104      	movs	r1, #4
 80034ee:	483e      	ldr	r0, [pc, #248]	; (80035e8 <main+0x66c>)
 80034f0:	f7ff fd05 	bl	8002efe <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80034f4:	4938      	ldr	r1, [pc, #224]	; (80035d8 <main+0x65c>)
 80034f6:	483b      	ldr	r0, [pc, #236]	; (80035e4 <main+0x668>)
 80034f8:	f7fe fbd6 	bl	8001ca8 <iBus_Parsing>
			  iBus_rx_cnt++;
 80034fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003500:	3301      	adds	r3, #1
 8003502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			  if(iBus_isActive_Failsafe(&iBus) == 1)
 8003506:	4834      	ldr	r0, [pc, #208]	; (80035d8 <main+0x65c>)
 8003508:	f7fe fc46 	bl	8001d98 <iBus_isActive_Failsafe>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d103      	bne.n	800351a <main+0x59e>
			  {
				  failsafe_flag = 1;
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <main+0x670>)
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e002      	b.n	8003520 <main+0x5a4>
			  }
			  else
			  {
				  failsafe_flag = 0;
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <main+0x670>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
			  //printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC, iBus.FailSafe);
			  //HAL_Delay(50);
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 8003520:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <main+0x674>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d109      	bne.n	800353c <main+0x5c0>
	  {
		  tim7_1000ms_flag = 0;
 8003528:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <main+0x674>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 800352e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <main+0x5c0>
		  {
			  failsafe_flag = 2;
 8003536:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <main+0x670>)
 8003538:	2202      	movs	r2, #2
 800353a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <main+0x670>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d00c      	beq.n	800355e <main+0x5e2>
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <main+0x670>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d008      	beq.n	800355e <main+0x5e2>
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <main+0x678>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d004      	beq.n	800355e <main+0x5e2>
 8003554:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <main+0x65c>)
 8003556:	899b      	ldrh	r3, [r3, #12]
 8003558:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800355c:	d105      	bne.n	800356a <main+0x5ee>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800355e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003562:	481c      	ldr	r0, [pc, #112]	; (80035d4 <main+0x658>)
 8003564:	f7ff fc36 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
 8003568:	e004      	b.n	8003574 <main+0x5f8>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800356a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800356e:	4819      	ldr	r0, [pc, #100]	; (80035d4 <main+0x658>)
 8003570:	f7ff fc41 	bl	8002df6 <LL_TIM_CC_DisableChannel>
	  }

	  batvol = adcVal * 0.003619f;
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80035f8 <main+0x67c>
 8003582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003586:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  //printf("%d\t %f\n", adcVal, batvol);
	  if(batvol < 10.0f)
 800358a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800358e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d503      	bpl.n	80035a4 <main+0x628>
	  {
		  low_bat_flag = 1;
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <main+0x678>)
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e002      	b.n	80035aa <main+0x62e>
	  }
	  else
		  low_bat_flag = 0;
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <main+0x678>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]



	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <main+0x65c>)
 80035ac:	891b      	ldrh	r3, [r3, #8]
 80035ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80035b2:	d141      	bne.n	8003638 <main+0x6bc>
 80035b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80035bc:	d03c      	beq.n	8003638 <main+0x6bc>
	  {
		  if(iBus.LV < 1010)
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <main+0x65c>)
 80035c0:	889b      	ldrh	r3, [r3, #4]
 80035c2:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d82c      	bhi.n	8003624 <main+0x6a8>
		  {
			  motor_arming_flag = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80035d0:	e032      	b.n	8003638 <main+0x6bc>
 80035d2:	bf00      	nop
 80035d4:	40000400 	.word	0x40000400
 80035d8:	200002c8 	.word	0x200002c8
 80035dc:	0800c770 	.word	0x0800c770
 80035e0:	2000042c 	.word	0x2000042c
 80035e4:	2000040c 	.word	0x2000040c
 80035e8:	40020800 	.word	0x40020800
 80035ec:	200003dc 	.word	0x200003dc
 80035f0:	2000042f 	.word	0x2000042f
 80035f4:	200003dd 	.word	0x200003dd
 80035f8:	3b6d2cbf 	.word	0x3b6d2cbf
		  }
		  else
		  {
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003600:	4843      	ldr	r0, [pc, #268]	; (8003710 <main+0x794>)
 8003602:	f7ff fbe7 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
				  TIM3->PSC = 1000;
 8003606:	4b42      	ldr	r3, [pc, #264]	; (8003710 <main+0x794>)
 8003608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(70);
 800360e:	2046      	movs	r0, #70	; 0x46
 8003610:	f001 fd12 	bl	8005038 <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003618:	483d      	ldr	r0, [pc, #244]	; (8003710 <main+0x794>)
 800361a:	f7ff fbec 	bl	8002df6 <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 800361e:	2046      	movs	r0, #70	; 0x46
 8003620:	f001 fd0a 	bl	8005038 <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 8003624:	f000 f8e6 	bl	80037f4 <Is_iBus_Throttle_Min>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0e6      	beq.n	80035fc <main+0x680>
 800362e:	4b39      	ldr	r3, [pc, #228]	; (8003714 <main+0x798>)
 8003630:	891b      	ldrh	r3, [r3, #8]
 8003632:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003636:	d0e1      	beq.n	80035fc <main+0x680>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <main+0x798>)
 800363a:	891b      	ldrh	r3, [r3, #8]
 800363c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	  if(iBus.SwA != 2000)
 8003640:	4b34      	ldr	r3, [pc, #208]	; (8003714 <main+0x798>)
 8003642:	891b      	ldrh	r3, [r3, #8]
 8003644:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003648:	d002      	beq.n	8003650 <main+0x6d4>
	  {
		  motor_arming_flag = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  }
	  if(motor_arming_flag == 1)
 8003650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003654:	2b01      	cmp	r3, #1
 8003656:	d149      	bne.n	80036ec <main+0x770>
	  {
		  if(failsafe_flag == 0)
 8003658:	4b2f      	ldr	r3, [pc, #188]	; (8003718 <main+0x79c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d134      	bne.n	80036ca <main+0x74e>
		  {
			  TIM5->CCR1 = 10500 + 500 + (iBus.LV - 1000) * 10;
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <main+0x798>)
 8003662:	889b      	ldrh	r3, [r3, #4]
 8003664:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8003674:	3338      	adds	r3, #56	; 0x38
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <main+0x7a0>)
 8003678:	6353      	str	r3, [r2, #52]	; 0x34
			  TIM5->CCR2 = 10500 + 500 + (iBus.LV - 1000) * 10;
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <main+0x798>)
 800367c:	889b      	ldrh	r3, [r3, #4]
 800367e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 800368e:	3338      	adds	r3, #56	; 0x38
 8003690:	4a22      	ldr	r2, [pc, #136]	; (800371c <main+0x7a0>)
 8003692:	6393      	str	r3, [r2, #56]	; 0x38
			  TIM5->CCR3 = 10500 + 500 + (iBus.LV - 1000) * 10;
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <main+0x798>)
 8003696:	889b      	ldrh	r3, [r3, #4]
 8003698:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80036a8:	3338      	adds	r3, #56	; 0x38
 80036aa:	4a1c      	ldr	r2, [pc, #112]	; (800371c <main+0x7a0>)
 80036ac:	63d3      	str	r3, [r2, #60]	; 0x3c
			  TIM5->CCR4 = 10500 + 500 + (iBus.LV - 1000) * 10;
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <main+0x798>)
 80036b0:	889b      	ldrh	r3, [r3, #4]
 80036b2:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80036c2:	3338      	adds	r3, #56	; 0x38
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <main+0x7a0>)
 80036c6:	6413      	str	r3, [r2, #64]	; 0x40
 80036c8:	e702      	b.n	80034d0 <main+0x554>
		  }
		  else
		  {
			  TIM5->CCR1 = 10500;
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <main+0x7a0>)
 80036cc:	f642 1204 	movw	r2, #10500	; 0x2904
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM5->CCR2 = 10500;
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <main+0x7a0>)
 80036d4:	f642 1204 	movw	r2, #10500	; 0x2904
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM5->CCR3 = 10500;
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <main+0x7a0>)
 80036dc:	f642 1204 	movw	r2, #10500	; 0x2904
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM5->CCR4 = 10500;
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <main+0x7a0>)
 80036e4:	f642 1204 	movw	r2, #10500	; 0x2904
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
 80036ea:	e6f1      	b.n	80034d0 <main+0x554>
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 10500;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <main+0x7a0>)
 80036ee:	f642 1204 	movw	r2, #10500	; 0x2904
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 10500;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <main+0x7a0>)
 80036f6:	f642 1204 	movw	r2, #10500	; 0x2904
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR3 = 10500;
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <main+0x7a0>)
 80036fe:	f642 1204 	movw	r2, #10500	; 0x2904
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM5->CCR4 = 10500;
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <main+0x7a0>)
 8003706:	f642 1204 	movw	r2, #10500	; 0x2904
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
	  if(ibus_rx_cplt_flag == 1){
 800370c:	e6e0      	b.n	80034d0 <main+0x554>
 800370e:	bf00      	nop
 8003710:	40000400 	.word	0x40000400
 8003714:	200002c8 	.word	0x200002c8
 8003718:	200003dc 	.word	0x200003dc
 800371c:	40000c00 	.word	0x40000c00

08003720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b094      	sub	sp, #80	; 0x50
 8003724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003726:	f107 0320 	add.w	r3, r7, #32
 800372a:	2230      	movs	r2, #48	; 0x30
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f005 fd82 	bl	8009238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <SystemClock_Config+0xcc>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4a27      	ldr	r2, [pc, #156]	; (80037ec <SystemClock_Config+0xcc>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003752:	6413      	str	r3, [r2, #64]	; 0x40
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <SystemClock_Config+0xcc>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003760:	2300      	movs	r3, #0
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <SystemClock_Config+0xd0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <SystemClock_Config+0xd0>)
 800376a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <SystemClock_Config+0xd0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800377c:	2301      	movs	r3, #1
 800377e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003786:	2302      	movs	r3, #2
 8003788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800378a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003790:	2304      	movs	r3, #4
 8003792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003794:	23a8      	movs	r3, #168	; 0xa8
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003798:	2302      	movs	r3, #2
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800379c:	2304      	movs	r3, #4
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037a0:	f107 0320 	add.w	r3, r7, #32
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 f871 	bl	800688c <HAL_RCC_OscConfig>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037b0:	f000 fa02 	bl	8003bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037b4:	230f      	movs	r3, #15
 80037b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037b8:	2302      	movs	r3, #2
 80037ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2105      	movs	r1, #5
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fad2 	bl	8006d7c <HAL_RCC_ClockConfig>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037de:	f000 f9eb 	bl	8003bb8 <Error_Handler>
  }
}
 80037e2:	bf00      	nop
 80037e4:	3750      	adds	r7, #80	; 0x50
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40007000 	.word	0x40007000

080037f4 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <Is_iBus_Throttle_Min+0x40>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d115      	bne.n	800382c <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <Is_iBus_Throttle_Min+0x40>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8003806:	2120      	movs	r1, #32
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <Is_iBus_Throttle_Min+0x44>)
 800380a:	f7fe fa17 	bl	8001c3c <iBus_Check_CHKSUM>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10b      	bne.n	800382c <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003814:	4909      	ldr	r1, [pc, #36]	; (800383c <Is_iBus_Throttle_Min+0x48>)
 8003816:	4808      	ldr	r0, [pc, #32]	; (8003838 <Is_iBus_Throttle_Min+0x44>)
 8003818:	f7fe fa46 	bl	8001ca8 <iBus_Parsing>
			if(iBus.LV < 1010)
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <Is_iBus_Throttle_Min+0x48>)
 800381e:	889b      	ldrh	r3, [r3, #4]
 8003820:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8003824:	4293      	cmp	r3, r2
 8003826:	d801      	bhi.n	800382c <Is_iBus_Throttle_Min+0x38>
				return 1;
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	2000042c 	.word	0x2000042c
 8003838:	2000040c 	.word	0x2000040c
 800383c:	200002c8 	.word	0x200002c8

08003840 <ESC_Calibration>:

void ESC_Calibration(void) {
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
	  TIM5->CCR1 = 21000;
 8003844:	4b14      	ldr	r3, [pc, #80]	; (8003898 <ESC_Calibration+0x58>)
 8003846:	f245 2208 	movw	r2, #21000	; 0x5208
 800384a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 21000;
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <ESC_Calibration+0x58>)
 800384e:	f245 2208 	movw	r2, #21000	; 0x5208
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 21000;
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <ESC_Calibration+0x58>)
 8003856:	f245 2208 	movw	r2, #21000	; 0x5208
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 21000;
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <ESC_Calibration+0x58>)
 800385e:	f245 2208 	movw	r2, #21000	; 0x5208
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 8003864:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003868:	f001 fbe6 	bl	8005038 <HAL_Delay>

	  TIM5->CCR1 = 10500;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <ESC_Calibration+0x58>)
 800386e:	f642 1204 	movw	r2, #10500	; 0x2904
 8003872:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 10500;
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <ESC_Calibration+0x58>)
 8003876:	f642 1204 	movw	r2, #10500	; 0x2904
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 10500;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <ESC_Calibration+0x58>)
 800387e:	f642 1204 	movw	r2, #10500	; 0x2904
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 10500;
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <ESC_Calibration+0x58>)
 8003886:	f642 1204 	movw	r2, #10500	; 0x2904
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(8000);
 800388c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003890:	f001 fbd2 	bl	8005038 <HAL_Delay>
}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40000c00 	.word	0x40000c00

0800389c <Is_iBus_Received>:
int Is_iBus_Received(void) {
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <Is_iBus_Received+0x34>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10f      	bne.n	80038c8 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <Is_iBus_Received+0x34>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 80038ae:	2120      	movs	r1, #32
 80038b0:	4808      	ldr	r0, [pc, #32]	; (80038d4 <Is_iBus_Received+0x38>)
 80038b2:	f7fe f9c3 	bl	8001c3c <iBus_Check_CHKSUM>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <Is_iBus_Received+0x2c>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80038bc:	4906      	ldr	r1, [pc, #24]	; (80038d8 <Is_iBus_Received+0x3c>)
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <Is_iBus_Received+0x38>)
 80038c0:	f7fe f9f2 	bl	8001ca8 <iBus_Parsing>
			return 1;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000042c 	.word	0x2000042c
 80038d4:	2000040c 	.word	0x2000040c
 80038d8:	200002c8 	.word	0x200002c8

080038dc <BNO080_Calibration>:
void BNO080_Calibration(void)
{
 80038dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e0:	b090      	sub	sp, #64	; 0x40
 80038e2:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 80038e4:	f7fd fc68 	bl	80011b8 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 80038e8:	f7fd ffbc 	bl	8001864 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 80038ec:	f644 6020 	movw	r0, #20000	; 0x4e20
 80038f0:	f7fd ff9a 	bl	8001828 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 80038f4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80038f8:	f7fd ffa5 	bl	8001846 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 80038fc:	489d      	ldr	r0, [pc, #628]	; (8003b74 <BNO080_Calibration+0x298>)
 80038fe:	f006 f993 	bl	8009c28 <puts>
	printf("Output in form x, y, z, in uTesla\n\n");
 8003902:	489d      	ldr	r0, [pc, #628]	; (8003b78 <BNO080_Calibration+0x29c>)
 8003904:	f006 f990 	bl	8009c28 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8003908:	e0b8      	b.n	8003a7c <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 800390a:	f7fd fceb 	bl	80012e4 <BNO080_dataAvailable>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	f040 80ae 	bne.w	8003a72 <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8003916:	f7fd ff03 	bl	8001720 <BNO080_getMagX>
 800391a:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800391e:	f7fd ff15 	bl	800174c <BNO080_getMagY>
 8003922:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8003926:	f7fd ff27 	bl	8001778 <BNO080_getMagZ>
 800392a:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800392e:	f7fd ff39 	bl	80017a4 <BNO080_getMagAccuracy>
 8003932:	4603      	mov	r3, r0
 8003934:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8003936:	f7fd fe8f 	bl	8001658 <BNO080_getQuatI>
 800393a:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800393e:	f7fd fea1 	bl	8001684 <BNO080_getQuatJ>
 8003942:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8003946:	f7fd feb3 	bl	80016b0 <BNO080_getQuatK>
 800394a:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 800394e:	f7fd fec5 	bl	80016dc <BNO080_getQuatReal>
 8003952:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 8003956:	f7fd fed7 	bl	8001708 <BNO080_getQuatAccuracy>
 800395a:	4603      	mov	r3, r0
 800395c:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 800395e:	6a38      	ldr	r0, [r7, #32]
 8003960:	f7fc fdf2 	bl	8000548 <__aeabi_f2d>
 8003964:	4680      	mov	r8, r0
 8003966:	4689      	mov	r9, r1
 8003968:	69f8      	ldr	r0, [r7, #28]
 800396a:	f7fc fded 	bl	8000548 <__aeabi_f2d>
 800396e:	4604      	mov	r4, r0
 8003970:	460d      	mov	r5, r1
 8003972:	69b8      	ldr	r0, [r7, #24]
 8003974:	f7fc fde8 	bl	8000548 <__aeabi_f2d>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003980:	e9cd 4500 	strd	r4, r5, [sp]
 8003984:	4642      	mov	r2, r8
 8003986:	464b      	mov	r3, r9
 8003988:	487c      	ldr	r0, [pc, #496]	; (8003b7c <BNO080_Calibration+0x2a0>)
 800398a:	f006 f8c7 	bl	8009b1c <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <BNO080_Calibration+0xc0>
 8003994:	487a      	ldr	r0, [pc, #488]	; (8003b80 <BNO080_Calibration+0x2a4>)
 8003996:	f006 f8c1 	bl	8009b1c <iprintf>
 800399a:	e013      	b.n	80039c4 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d103      	bne.n	80039aa <BNO080_Calibration+0xce>
 80039a2:	4878      	ldr	r0, [pc, #480]	; (8003b84 <BNO080_Calibration+0x2a8>)
 80039a4:	f006 f8ba 	bl	8009b1c <iprintf>
 80039a8:	e00c      	b.n	80039c4 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d103      	bne.n	80039b8 <BNO080_Calibration+0xdc>
 80039b0:	4875      	ldr	r0, [pc, #468]	; (8003b88 <BNO080_Calibration+0x2ac>)
 80039b2:	f006 f8b3 	bl	8009b1c <iprintf>
 80039b6:	e005      	b.n	80039c4 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d102      	bne.n	80039c4 <BNO080_Calibration+0xe8>
 80039be:	4873      	ldr	r0, [pc, #460]	; (8003b8c <BNO080_Calibration+0x2b0>)
 80039c0:	f006 f8ac 	bl	8009b1c <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 80039c4:	6938      	ldr	r0, [r7, #16]
 80039c6:	f7fc fdbf 	bl	8000548 <__aeabi_f2d>
 80039ca:	4682      	mov	sl, r0
 80039cc:	468b      	mov	fp, r1
 80039ce:	6938      	ldr	r0, [r7, #16]
 80039d0:	f7fc fdba 	bl	8000548 <__aeabi_f2d>
 80039d4:	4604      	mov	r4, r0
 80039d6:	460d      	mov	r5, r1
 80039d8:	6938      	ldr	r0, [r7, #16]
 80039da:	f7fc fdb5 	bl	8000548 <__aeabi_f2d>
 80039de:	4680      	mov	r8, r0
 80039e0:	4689      	mov	r9, r1
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fc fdb0 	bl	8000548 <__aeabi_f2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80039f4:	e9cd 4500 	strd	r4, r5, [sp]
 80039f8:	4652      	mov	r2, sl
 80039fa:	465b      	mov	r3, fp
 80039fc:	4864      	ldr	r0, [pc, #400]	; (8003b90 <BNO080_Calibration+0x2b4>)
 80039fe:	f006 f88d 	bl	8009b1c <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <BNO080_Calibration+0x134>
 8003a08:	4862      	ldr	r0, [pc, #392]	; (8003b94 <BNO080_Calibration+0x2b8>)
 8003a0a:	f006 f90d 	bl	8009c28 <puts>
 8003a0e:	e013      	b.n	8003a38 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d103      	bne.n	8003a1e <BNO080_Calibration+0x142>
 8003a16:	4860      	ldr	r0, [pc, #384]	; (8003b98 <BNO080_Calibration+0x2bc>)
 8003a18:	f006 f906 	bl	8009c28 <puts>
 8003a1c:	e00c      	b.n	8003a38 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d103      	bne.n	8003a2c <BNO080_Calibration+0x150>
 8003a24:	485d      	ldr	r0, [pc, #372]	; (8003b9c <BNO080_Calibration+0x2c0>)
 8003a26:	f006 f8ff 	bl	8009c28 <puts>
 8003a2a:	e005      	b.n	8003a38 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d102      	bne.n	8003a38 <BNO080_Calibration+0x15c>
 8003a32:	485b      	ldr	r0, [pc, #364]	; (8003ba0 <BNO080_Calibration+0x2c4>)
 8003a34:	f006 f8f8 	bl	8009c28 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d110      	bne.n	8003a60 <BNO080_Calibration+0x184>
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d10d      	bne.n	8003a60 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8003a44:	2107      	movs	r1, #7
 8003a46:	4857      	ldr	r0, [pc, #348]	; (8003ba4 <BNO080_Calibration+0x2c8>)
 8003a48:	f7ff fa3c 	bl	8002ec4 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8003a4c:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003a4e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a58:	4853      	ldr	r0, [pc, #332]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003a5a:	f7ff f9bb 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
 8003a5e:	e008      	b.n	8003a72 <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8003a60:	2107      	movs	r1, #7
 8003a62:	4850      	ldr	r0, [pc, #320]	; (8003ba4 <BNO080_Calibration+0x2c8>)
 8003a64:	f7ff fa3c 	bl	8002ee0 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a6c:	484e      	ldr	r0, [pc, #312]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003a6e:	f7ff f9c2 	bl	8002df6 <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8003a72:	f7ff ff13 	bl	800389c <Is_iBus_Received>
		HAL_Delay(100);
 8003a76:	2064      	movs	r0, #100	; 0x64
 8003a78:	f001 fade 	bl	8005038 <HAL_Delay>
	while(iBus.SwC == 1500)
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <BNO080_Calibration+0x2d0>)
 8003a7e:	899b      	ldrh	r3, [r3, #12]
 8003a80:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a84:	4293      	cmp	r3, r2
 8003a86:	f43f af40 	beq.w	800390a <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8003a8a:	2107      	movs	r1, #7
 8003a8c:	4845      	ldr	r0, [pc, #276]	; (8003ba4 <BNO080_Calibration+0x2c8>)
 8003a8e:	f7ff fa27 	bl	8002ee0 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a96:	4844      	ldr	r0, [pc, #272]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003a98:	f7ff f9ad 	bl	8002df6 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8003a9c:	f7fd ffd0 	bl	8001a40 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8003aa0:	f7fd ffb2 	bl	8001a08 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8003aa4:	2364      	movs	r3, #100	; 0x64
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d02f      	beq.n	8003b14 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 8003ab4:	f7fd fc16 	bl	80012e4 <BNO080_dataAvailable>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d026      	beq.n	8003b0c <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 8003abe:	f7fd fed9 	bl	8001874 <BNO080_calibrationComplete>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d121      	bne.n	8003b0c <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 8003ac8:	4839      	ldr	r0, [pc, #228]	; (8003bb0 <BNO080_Calibration+0x2d4>)
 8003aca:	f006 f8ad 	bl	8009c28 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ad2:	4835      	ldr	r0, [pc, #212]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003ad4:	f7ff f97e 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003ada:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8003ae0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ae4:	f001 faa8 	bl	8005038 <HAL_Delay>
				TIM3->PSC = 1500;
 8003ae8:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003aea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8003af0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003af4:	f001 faa0 	bl	8005038 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003afc:	482a      	ldr	r0, [pc, #168]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003afe:	f7ff f97a 	bl	8002df6 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 8003b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b06:	f001 fa97 	bl	8005038 <HAL_Delay>
				break;
 8003b0a:	e004      	b.n	8003b16 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f001 fa93 	bl	8005038 <HAL_Delay>
		if(--counter == 0) break;
 8003b12:	e7c9      	b.n	8003aa8 <BNO080_Calibration+0x1cc>
 8003b14:	bf00      	nop
	}
	if(counter == 0)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d120      	bne.n	8003b5e <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 8003b1c:	4825      	ldr	r0, [pc, #148]	; (8003bb4 <BNO080_Calibration+0x2d8>)
 8003b1e:	f006 f883 	bl	8009c28 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b26:	4820      	ldr	r0, [pc, #128]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003b28:	f7ff f954 	bl	8002dd4 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003b2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8003b34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b38:	f001 fa7e 	bl	8005038 <HAL_Delay>
		TIM3->PSC = 2000;
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003b3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8003b44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b48:	f001 fa76 	bl	8005038 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b50:	4815      	ldr	r0, [pc, #84]	; (8003ba8 <BNO080_Calibration+0x2cc>)
 8003b52:	f7ff f950 	bl	8002df6 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 8003b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b5a:	f001 fa6d 	bl	8005038 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8003b5e:	f7fd fb2b 	bl	80011b8 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8003b62:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003b66:	f7fd fe50 	bl	800180a <BNO080_enableRotationVector>
}
 8003b6a:	bf00      	nop
 8003b6c:	3728      	adds	r7, #40	; 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b74:	0800c788 	.word	0x0800c788
 8003b78:	0800c7d4 	.word	0x0800c7d4
 8003b7c:	0800c7f8 	.word	0x0800c7f8
 8003b80:	0800c804 	.word	0x0800c804
 8003b84:	0800c810 	.word	0x0800c810
 8003b88:	0800c818 	.word	0x0800c818
 8003b8c:	0800c820 	.word	0x0800c820
 8003b90:	0800c828 	.word	0x0800c828
 8003b94:	0800c838 	.word	0x0800c838
 8003b98:	0800c844 	.word	0x0800c844
 8003b9c:	0800c848 	.word	0x0800c848
 8003ba0:	0800c850 	.word	0x0800c850
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	200002c8 	.word	0x200002c8
 8003bb0:	0800c858 	.word	0x0800c858
 8003bb4:	0800c880 	.word	0x0800c880

08003bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003bbc:	b672      	cpsid	i
}
 8003bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <Error_Handler+0x8>

08003bc2 <LL_SPI_SetStandard>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 0210 	bic.w	r2, r3, #16
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	605a      	str	r2, [r3, #4]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_AHB1_GRP1_EnableClock>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf4:	4907      	ldr	r1, [pc, #28]	; (8003c14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4013      	ands	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c06:	68fb      	ldr	r3, [r7, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40023800 	.word	0x40023800

08003c18 <LL_APB1_GRP1_EnableClock>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c24:	4907      	ldr	r1, [pc, #28]	; (8003c44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4013      	ands	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c36:	68fb      	ldr	r3, [r7, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40023800 	.word	0x40023800

08003c48 <LL_APB2_GRP1_EnableClock>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c54:	4907      	ldr	r1, [pc, #28]	; (8003c74 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4013      	ands	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40023800 	.word	0x40023800

08003c78 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b090      	sub	sp, #64	; 0x40
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003c7e:	f107 0318 	add.w	r3, r7, #24
 8003c82:	2228      	movs	r2, #40	; 0x28
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 fad6 	bl	8009238 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	611a      	str	r2, [r3, #16]
 8003c9a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003c9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ca0:	f7ff ffd2 	bl	8003c48 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f7ff ff9f 	bl	8003be8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003caa:	23e0      	movs	r3, #224	; 0xe0
 8003cac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4813      	ldr	r0, [pc, #76]	; (8003d14 <MX_SPI1_Init+0x9c>)
 8003cc8:	f004 fa91 	bl	80081ee <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003cd0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003cd4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003ce8:	2310      	movs	r3, #16
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003cec:	2300      	movs	r3, #0
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003cf8:	f107 0318 	add.w	r3, r7, #24
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4806      	ldr	r0, [pc, #24]	; (8003d18 <MX_SPI1_Init+0xa0>)
 8003d00:	f004 fc45 	bl	800858e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003d04:	2100      	movs	r1, #0
 8003d06:	4804      	ldr	r0, [pc, #16]	; (8003d18 <MX_SPI1_Init+0xa0>)
 8003d08:	f7ff ff5b 	bl	8003bc2 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d0c:	bf00      	nop
 8003d0e:	3740      	adds	r7, #64	; 0x40
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40013000 	.word	0x40013000

08003d1c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b090      	sub	sp, #64	; 0x40
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003d22:	f107 0318 	add.w	r3, r7, #24
 8003d26:	2228      	movs	r2, #40	; 0x28
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f005 fa84 	bl	8009238 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	463b      	mov	r3, r7
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	60da      	str	r2, [r3, #12]
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003d40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d44:	f7ff ff68 	bl	8003c18 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f7ff ff4d 	bl	8003be8 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003d4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003d52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d54:	2302      	movs	r3, #2
 8003d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003d64:	2305      	movs	r3, #5
 8003d66:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d68:	463b      	mov	r3, r7
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4813      	ldr	r0, [pc, #76]	; (8003dbc <MX_SPI2_Init+0xa0>)
 8003d6e:	f004 fa3e 	bl	80081ee <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003d76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003d7a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003d80:	2302      	movs	r3, #2
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003d8e:	2318      	movs	r3, #24
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003d9a:	230a      	movs	r3, #10
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003d9e:	f107 0318 	add.w	r3, r7, #24
 8003da2:	4619      	mov	r1, r3
 8003da4:	4806      	ldr	r0, [pc, #24]	; (8003dc0 <MX_SPI2_Init+0xa4>)
 8003da6:	f004 fbf2 	bl	800858e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003daa:	2100      	movs	r1, #0
 8003dac:	4804      	ldr	r0, [pc, #16]	; (8003dc0 <MX_SPI2_Init+0xa4>)
 8003dae:	f7ff ff08 	bl	8003bc2 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003db2:	bf00      	nop
 8003db4:	3740      	adds	r7, #64	; 0x40
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40003800 	.word	0x40003800

08003dc4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b090      	sub	sp, #64	; 0x40
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003dca:	f107 0318 	add.w	r3, r7, #24
 8003dce:	2228      	movs	r2, #40	; 0x28
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f005 fa30 	bl	8009238 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	463b      	mov	r3, r7
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	611a      	str	r2, [r3, #16]
 8003de6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003de8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003dec:	f7ff ff14 	bl	8003c18 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003df0:	2002      	movs	r0, #2
 8003df2:	f7ff fef9 	bl	8003be8 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003df6:	2338      	movs	r3, #56	; 0x38
 8003df8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0e:	463b      	mov	r3, r7
 8003e10:	4619      	mov	r1, r3
 8003e12:	4813      	ldr	r0, [pc, #76]	; (8003e60 <MX_SPI3_Init+0x9c>)
 8003e14:	f004 f9eb 	bl	80081ee <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003e1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003e20:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003e22:	2300      	movs	r3, #0
 8003e24:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003e26:	2302      	movs	r3, #2
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003e34:	2308      	movs	r3, #8
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003e40:	230a      	movs	r3, #10
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003e44:	f107 0318 	add.w	r3, r7, #24
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4806      	ldr	r0, [pc, #24]	; (8003e64 <MX_SPI3_Init+0xa0>)
 8003e4c:	f004 fb9f 	bl	800858e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003e50:	2100      	movs	r1, #0
 8003e52:	4804      	ldr	r0, [pc, #16]	; (8003e64 <MX_SPI3_Init+0xa0>)
 8003e54:	f7ff feb5 	bl	8003bc2 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003e58:	bf00      	nop
 8003e5a:	3740      	adds	r7, #64	; 0x40
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40003c00 	.word	0x40003c00

08003e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800

08003eb8 <LL_TIM_ClearFlag_UPDATE>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f06f 0201 	mvn.w	r2, #1
 8003ec6:	611a      	str	r2, [r3, #16]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_USART_IsActiveFlag_RXNE>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_USART_ClearFlag_RXNE>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f06f 0220 	mvn.w	r2, #32
 8003f2e:	601a      	str	r2, [r3, #0]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_USART_ReceiveData8>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	b2db      	uxtb	r3, r3
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f5a:	e7fe      	b.n	8003f5a <NMI_Handler+0x4>

08003f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f60:	e7fe      	b.n	8003f60 <HardFault_Handler+0x4>

08003f62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f66:	e7fe      	b.n	8003f66 <MemManage_Handler+0x4>

08003f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f6c:	e7fe      	b.n	8003f6c <BusFault_Handler+0x4>

08003f6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f72:	e7fe      	b.n	8003f72 <UsageFault_Handler+0x4>

08003f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fa2:	f001 f829 	bl	8004ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fb0:	4802      	ldr	r0, [pc, #8]	; (8003fbc <USART1_IRQHandler+0x10>)
 8003fb2:	f003 f951 	bl	8007258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000043c 	.word	0x2000043c

08003fc0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4)){
 8003fc4:	4833      	ldr	r0, [pc, #204]	; (8004094 <UART4_IRQHandler+0xd4>)
 8003fc6:	f7ff ff98 	bl	8003efa <LL_USART_IsActiveFlag_RXNE>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <UART4_IRQHandler+0xc8>
			LL_USART_ClearFlag_RXNE(UART4);
 8003fd0:	4830      	ldr	r0, [pc, #192]	; (8004094 <UART4_IRQHandler+0xd4>)
 8003fd2:	f7ff ffa5 	bl	8003f20 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8003fd6:	482f      	ldr	r0, [pc, #188]	; (8004094 <UART4_IRQHandler+0xd4>)
 8003fd8:	f7ff ffb0 	bl	8003f3c <LL_USART_ReceiveData8>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <UART4_IRQHandler+0xd8>)
 8003fe2:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	; (800409c <UART4_IRQHandler+0xdc>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]

//			LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt){
 8003fea:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <UART4_IRQHandler+0xe0>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b23      	cmp	r3, #35	; 0x23
 8003ff0:	d02e      	beq.n	8004050 <UART4_IRQHandler+0x90>
 8003ff2:	2b23      	cmp	r3, #35	; 0x23
 8003ff4:	dc3a      	bgt.n	800406c <UART4_IRQHandler+0xac>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <UART4_IRQHandler+0x40>
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d012      	beq.n	8004024 <UART4_IRQHandler+0x64>
 8003ffe:	e035      	b.n	800406c <UART4_IRQHandler+0xac>
			case 0:
				if(uart4_rx_data == 0xb5){
 8004000:	4b25      	ldr	r3, [pc, #148]	; (8004098 <UART4_IRQHandler+0xd8>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2bb5      	cmp	r3, #181	; 0xb5
 8004006:	d141      	bne.n	800408c <UART4_IRQHandler+0xcc>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <UART4_IRQHandler+0xe0>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	4b22      	ldr	r3, [pc, #136]	; (8004098 <UART4_IRQHandler+0xd8>)
 8004010:	7819      	ldrb	r1, [r3, #0]
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <UART4_IRQHandler+0xe4>)
 8004014:	5499      	strb	r1, [r3, r2]
					cnt++;
 8004016:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <UART4_IRQHandler+0xe0>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <UART4_IRQHandler+0xe0>)
 8004020:	701a      	strb	r2, [r3, #0]
				}
				break;
 8004022:	e033      	b.n	800408c <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62) {
 8004024:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <UART4_IRQHandler+0xd8>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b62      	cmp	r3, #98	; 0x62
 800402a:	d10d      	bne.n	8004048 <UART4_IRQHandler+0x88>
					m8n_rx_buf[cnt] = uart4_rx_data;
 800402c:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <UART4_IRQHandler+0xe0>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <UART4_IRQHandler+0xd8>)
 8004034:	7819      	ldrb	r1, [r3, #0]
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <UART4_IRQHandler+0xe4>)
 8004038:	5499      	strb	r1, [r3, r2]
					cnt++;
 800403a:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <UART4_IRQHandler+0xe0>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	3301      	adds	r3, #1
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <UART4_IRQHandler+0xe0>)
 8004044:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8004046:	e022      	b.n	800408e <UART4_IRQHandler+0xce>
					cnt = 0;
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <UART4_IRQHandler+0xe0>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
				break;
 800404e:	e01e      	b.n	800408e <UART4_IRQHandler+0xce>
			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8004050:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <UART4_IRQHandler+0xe0>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <UART4_IRQHandler+0xd8>)
 8004058:	7819      	ldrb	r1, [r3, #0]
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <UART4_IRQHandler+0xe4>)
 800405c:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <UART4_IRQHandler+0xe0>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <UART4_IRQHandler+0xe8>)
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
				break;
 800406a:	e010      	b.n	800408e <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <UART4_IRQHandler+0xe0>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <UART4_IRQHandler+0xd8>)
 8004074:	7819      	ldrb	r1, [r3, #0]
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <UART4_IRQHandler+0xe4>)
 8004078:	5499      	strb	r1, [r3, r2]
				cnt++;
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <UART4_IRQHandler+0xe0>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <UART4_IRQHandler+0xe0>)
 8004084:	701a      	strb	r2, [r3, #0]
				break;
 8004086:	e002      	b.n	800408e <UART4_IRQHandler+0xce>
			}
	}
 8004088:	bf00      	nop
 800408a:	e000      	b.n	800408e <UART4_IRQHandler+0xce>
				break;
 800408c:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40004c00 	.word	0x40004c00
 8004098:	200003e1 	.word	0x200003e1
 800409c:	200003e0 	.word	0x200003e0
 80040a0:	20000430 	.word	0x20000430
 80040a4:	200003e4 	.word	0x200003e4
 80040a8:	20000408 	.word	0x20000408

080040ac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5)){
 80040b0:	4833      	ldr	r0, [pc, #204]	; (8004180 <UART5_IRQHandler+0xd4>)
 80040b2:	f7ff ff22 	bl	8003efa <LL_USART_IsActiveFlag_RXNE>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05b      	beq.n	8004174 <UART5_IRQHandler+0xc8>
		LL_USART_ClearFlag_RXNE(UART5);
 80040bc:	4830      	ldr	r0, [pc, #192]	; (8004180 <UART5_IRQHandler+0xd4>)
 80040be:	f7ff ff2f 	bl	8003f20 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 80040c2:	482f      	ldr	r0, [pc, #188]	; (8004180 <UART5_IRQHandler+0xd4>)
 80040c4:	f7ff ff3a 	bl	8003f3c <LL_USART_ReceiveData8>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <UART5_IRQHandler+0xd8>)
 80040ce:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <UART5_IRQHandler+0xdc>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
		/*while(!LL_USART_IsActiveFlag_TXE(USART6));
		LL_USART_TransmitData8(USART6, uart5_rx_data);*/

		switch(cnt){
 80040d6:	4b2d      	ldr	r3, [pc, #180]	; (800418c <UART5_IRQHandler+0xe0>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b1f      	cmp	r3, #31
 80040dc:	d02e      	beq.n	800413c <UART5_IRQHandler+0x90>
 80040de:	2b1f      	cmp	r3, #31
 80040e0:	dc3a      	bgt.n	8004158 <UART5_IRQHandler+0xac>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <UART5_IRQHandler+0x40>
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d012      	beq.n	8004110 <UART5_IRQHandler+0x64>
 80040ea:	e035      	b.n	8004158 <UART5_IRQHandler+0xac>
		case 0:
			if(uart5_rx_data == 0x20){
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <UART5_IRQHandler+0xd8>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d141      	bne.n	8004178 <UART5_IRQHandler+0xcc>
				ibus_rx_buf[cnt] = uart5_rx_data;
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <UART5_IRQHandler+0xe0>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <UART5_IRQHandler+0xd8>)
 80040fc:	7819      	ldrb	r1, [r3, #0]
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <UART5_IRQHandler+0xe4>)
 8004100:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <UART5_IRQHandler+0xe0>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <UART5_IRQHandler+0xe0>)
 800410c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800410e:	e033      	b.n	8004178 <UART5_IRQHandler+0xcc>

		case 1:
			if(uart5_rx_data == 0x40) {
 8004110:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <UART5_IRQHandler+0xd8>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d10d      	bne.n	8004134 <UART5_IRQHandler+0x88>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <UART5_IRQHandler+0xe0>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <UART5_IRQHandler+0xd8>)
 8004120:	7819      	ldrb	r1, [r3, #0]
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <UART5_IRQHandler+0xe4>)
 8004124:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004126:	4b19      	ldr	r3, [pc, #100]	; (800418c <UART5_IRQHandler+0xe0>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	3301      	adds	r3, #1
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <UART5_IRQHandler+0xe0>)
 8004130:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8004132:	e022      	b.n	800417a <UART5_IRQHandler+0xce>
				cnt = 0;
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <UART5_IRQHandler+0xe0>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
			break;
 800413a:	e01e      	b.n	800417a <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <UART5_IRQHandler+0xe0>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <UART5_IRQHandler+0xd8>)
 8004144:	7819      	ldrb	r1, [r3, #0]
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <UART5_IRQHandler+0xe4>)
 8004148:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <UART5_IRQHandler+0xe0>)
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <UART5_IRQHandler+0xe8>)
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
			break;
 8004156:	e010      	b.n	800417a <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <UART5_IRQHandler+0xe0>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <UART5_IRQHandler+0xd8>)
 8004160:	7819      	ldrb	r1, [r3, #0]
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <UART5_IRQHandler+0xe4>)
 8004164:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <UART5_IRQHandler+0xe0>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	3301      	adds	r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <UART5_IRQHandler+0xe0>)
 8004170:	701a      	strb	r2, [r3, #0]
			break;
 8004172:	e002      	b.n	800417a <UART5_IRQHandler+0xce>
		}
	}
 8004174:	bf00      	nop
 8004176:	e000      	b.n	800417a <UART5_IRQHandler+0xce>
			break;
 8004178:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40005000 	.word	0x40005000
 8004184:	2000040a 	.word	0x2000040a
 8004188:	20000409 	.word	0x20000409
 800418c:	20000431 	.word	0x20000431
 8004190:	2000040c 	.word	0x2000040c
 8004194:	2000042c 	.word	0x2000042c

08004198 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800419c:	481d      	ldr	r0, [pc, #116]	; (8004214 <TIM7_IRQHandler+0x7c>)
 800419e:	f7ff fe99 	bl	8003ed4 <LL_TIM_IsActiveFlag_UPDATE>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d033      	beq.n	8004210 <TIM7_IRQHandler+0x78>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 80041a8:	481a      	ldr	r0, [pc, #104]	; (8004214 <TIM7_IRQHandler+0x7c>)
 80041aa:	f7ff fe85 	bl	8003eb8 <LL_TIM_ClearFlag_UPDATE>
		tim7_20ms_count++;
 80041ae:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <TIM7_IRQHandler+0x80>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <TIM7_IRQHandler+0x80>)
 80041b8:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20)
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <TIM7_IRQHandler+0x80>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b14      	cmp	r3, #20
 80041c0:	d105      	bne.n	80041ce <TIM7_IRQHandler+0x36>
		{
			tim7_20ms_count = 0;
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <TIM7_IRQHandler+0x80>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <TIM7_IRQHandler+0x84>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <TIM7_IRQHandler+0x88>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <TIM7_IRQHandler+0x88>)
 80041d8:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100)
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <TIM7_IRQHandler+0x88>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d105      	bne.n	80041ee <TIM7_IRQHandler+0x56>
		{
			tim7_100ms_count = 0;
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <TIM7_IRQHandler+0x88>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 80041e8:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <TIM7_IRQHandler+0x8c>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <TIM7_IRQHandler+0x90>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <TIM7_IRQHandler+0x90>)
 80041f8:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000)
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <TIM7_IRQHandler+0x90>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004202:	d105      	bne.n	8004210 <TIM7_IRQHandler+0x78>
		{
			tim7_1000ms_count = 0;
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <TIM7_IRQHandler+0x90>)
 8004206:	2200      	movs	r2, #0
 8004208:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <TIM7_IRQHandler+0x94>)
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40001400 	.word	0x40001400
 8004218:	20000432 	.word	0x20000432
 800421c:	2000042d 	.word	0x2000042d
 8004220:	20000433 	.word	0x20000433
 8004224:	2000042e 	.word	0x2000042e
 8004228:	20000434 	.word	0x20000434
 800422c:	2000042f 	.word	0x2000042f

08004230 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <DMA2_Stream0_IRQHandler+0x10>)
 8004236:	f001 fddf 	bl	8005df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000328 	.word	0x20000328

08004244 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)){
 8004248:	480a      	ldr	r0, [pc, #40]	; (8004274 <USART6_IRQHandler+0x30>)
 800424a:	f7ff fe56 	bl	8003efa <LL_USART_IsActiveFlag_RXNE>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00c      	beq.n	800426e <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8004254:	4807      	ldr	r0, [pc, #28]	; (8004274 <USART6_IRQHandler+0x30>)
 8004256:	f7ff fe63 	bl	8003f20 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800425a:	4806      	ldr	r0, [pc, #24]	; (8004274 <USART6_IRQHandler+0x30>)
 800425c:	f7ff fe6e 	bl	8003f3c <LL_USART_ReceiveData8>
 8004260:	4603      	mov	r3, r0
 8004262:	461a      	mov	r2, r3
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <USART6_IRQHandler+0x34>)
 8004266:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <USART6_IRQHandler+0x38>)
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40011400 	.word	0x40011400
 8004278:	200003df 	.word	0x200003df
 800427c:	200003de 	.word	0x200003de

08004280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return 1;
 8004284:	2301      	movs	r3, #1
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <_kill>:

int _kill(int pid, int sig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800429a:	f004 ffa3 	bl	80091e4 <__errno>
 800429e:	4603      	mov	r3, r0
 80042a0:	2216      	movs	r2, #22
 80042a2:	601a      	str	r2, [r3, #0]
  return -1;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_exit>:

void _exit (int status)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ffe7 	bl	8004290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042c2:	e7fe      	b.n	80042c2 <_exit+0x12>

080042c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e00a      	b.n	80042ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042d6:	f3af 8000 	nop.w
 80042da:	4601      	mov	r1, r0
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	60ba      	str	r2, [r7, #8]
 80042e2:	b2ca      	uxtb	r2, r1
 80042e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3301      	adds	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dbf0      	blt.n	80042d6 <_read+0x12>
  }

  return len;
 80042f4:	687b      	ldr	r3, [r7, #4]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004326:	605a      	str	r2, [r3, #4]
  return 0;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_isatty>:

int _isatty(int file)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800433e:	2301      	movs	r3, #1
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004370:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <_sbrk+0x5c>)
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <_sbrk+0x60>)
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <_sbrk+0x64>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <_sbrk+0x64>)
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <_sbrk+0x68>)
 8004388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <_sbrk+0x64>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	429a      	cmp	r2, r3
 8004396:	d207      	bcs.n	80043a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004398:	f004 ff24 	bl	80091e4 <__errno>
 800439c:	4603      	mov	r3, r0
 800439e:	220c      	movs	r2, #12
 80043a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	e009      	b.n	80043bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <_sbrk+0x64>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <_sbrk+0x64>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	4a05      	ldr	r2, [pc, #20]	; (80043cc <_sbrk+0x64>)
 80043b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20020000 	.word	0x20020000
 80043c8:	00000400 	.word	0x00000400
 80043cc:	20000438 	.word	0x20000438
 80043d0:	20000498 	.word	0x20000498

080043d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <SystemInit+0x20>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <SystemInit+0x20>)
 80043e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_GetPriorityGrouping>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <__NVIC_GetPriorityGrouping+0x18>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0a1b      	lsrs	r3, r3, #8
 8004402:	f003 0307 	and.w	r3, r3, #7
}
 8004406:	4618      	mov	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <__NVIC_EnableIRQ>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	2b00      	cmp	r3, #0
 8004424:	db0b      	blt.n	800443e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	4907      	ldr	r1, [pc, #28]	; (800444c <__NVIC_EnableIRQ+0x38>)
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2001      	movs	r0, #1
 8004436:	fa00 f202 	lsl.w	r2, r0, r2
 800443a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	e000e100 	.word	0xe000e100

08004450 <__NVIC_SetPriority>:
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	2b00      	cmp	r3, #0
 8004462:	db0a      	blt.n	800447a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	490c      	ldr	r1, [pc, #48]	; (800449c <__NVIC_SetPriority+0x4c>)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	0112      	lsls	r2, r2, #4
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	440b      	add	r3, r1
 8004474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004478:	e00a      	b.n	8004490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4908      	ldr	r1, [pc, #32]	; (80044a0 <__NVIC_SetPriority+0x50>)
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	3b04      	subs	r3, #4
 8004488:	0112      	lsls	r2, r2, #4
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	440b      	add	r3, r1
 800448e:	761a      	strb	r2, [r3, #24]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000e100 	.word	0xe000e100
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <NVIC_EncodePriority>:
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f1c3 0307 	rsb	r3, r3, #7
 80044be:	2b04      	cmp	r3, #4
 80044c0:	bf28      	it	cs
 80044c2:	2304      	movcs	r3, #4
 80044c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3304      	adds	r3, #4
 80044ca:	2b06      	cmp	r3, #6
 80044cc:	d902      	bls.n	80044d4 <NVIC_EncodePriority+0x30>
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3b03      	subs	r3, #3
 80044d2:	e000      	b.n	80044d6 <NVIC_EncodePriority+0x32>
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d8:	f04f 32ff 	mov.w	r2, #4294967295
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43da      	mvns	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	401a      	ands	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044ec:	f04f 31ff 	mov.w	r1, #4294967295
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	fa01 f303 	lsl.w	r3, r1, r3
 80044f6:	43d9      	mvns	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044fc:	4313      	orrs	r3, r2
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3724      	adds	r7, #36	; 0x24
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <LL_TIM_EnableARRPreload>:
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <LL_TIM_OC_EnableFast>:
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d01c      	beq.n	8004576 <LL_TIM_OC_EnableFast+0x4a>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b04      	cmp	r3, #4
 8004540:	d017      	beq.n	8004572 <LL_TIM_OC_EnableFast+0x46>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b10      	cmp	r3, #16
 8004546:	d012      	beq.n	800456e <LL_TIM_OC_EnableFast+0x42>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d00d      	beq.n	800456a <LL_TIM_OC_EnableFast+0x3e>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004554:	d007      	beq.n	8004566 <LL_TIM_OC_EnableFast+0x3a>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455c:	d101      	bne.n	8004562 <LL_TIM_OC_EnableFast+0x36>
 800455e:	2305      	movs	r3, #5
 8004560:	e00a      	b.n	8004578 <LL_TIM_OC_EnableFast+0x4c>
 8004562:	2306      	movs	r3, #6
 8004564:	e008      	b.n	8004578 <LL_TIM_OC_EnableFast+0x4c>
 8004566:	2304      	movs	r3, #4
 8004568:	e006      	b.n	8004578 <LL_TIM_OC_EnableFast+0x4c>
 800456a:	2303      	movs	r3, #3
 800456c:	e004      	b.n	8004578 <LL_TIM_OC_EnableFast+0x4c>
 800456e:	2302      	movs	r3, #2
 8004570:	e002      	b.n	8004578 <LL_TIM_OC_EnableFast+0x4c>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <LL_TIM_OC_EnableFast+0x4c>
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3318      	adds	r3, #24
 800457e:	4619      	mov	r1, r3
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <LL_TIM_OC_EnableFast+0x80>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	440b      	add	r3, r1
 8004588:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	4907      	ldr	r1, [pc, #28]	; (80045b0 <LL_TIM_OC_EnableFast+0x84>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	4619      	mov	r1, r3
 8004596:	2304      	movs	r3, #4
 8004598:	408b      	lsls	r3, r1
 800459a:	431a      	orrs	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	601a      	str	r2, [r3, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	0800c924 	.word	0x0800c924
 80045b0:	0800c92c 	.word	0x0800c92c

080045b4 <LL_TIM_OC_EnablePreload>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d01c      	beq.n	80045fe <LL_TIM_OC_EnablePreload+0x4a>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d017      	beq.n	80045fa <LL_TIM_OC_EnablePreload+0x46>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d012      	beq.n	80045f6 <LL_TIM_OC_EnablePreload+0x42>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d00d      	beq.n	80045f2 <LL_TIM_OC_EnablePreload+0x3e>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d007      	beq.n	80045ee <LL_TIM_OC_EnablePreload+0x3a>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d101      	bne.n	80045ea <LL_TIM_OC_EnablePreload+0x36>
 80045e6:	2305      	movs	r3, #5
 80045e8:	e00a      	b.n	8004600 <LL_TIM_OC_EnablePreload+0x4c>
 80045ea:	2306      	movs	r3, #6
 80045ec:	e008      	b.n	8004600 <LL_TIM_OC_EnablePreload+0x4c>
 80045ee:	2304      	movs	r3, #4
 80045f0:	e006      	b.n	8004600 <LL_TIM_OC_EnablePreload+0x4c>
 80045f2:	2303      	movs	r3, #3
 80045f4:	e004      	b.n	8004600 <LL_TIM_OC_EnablePreload+0x4c>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e002      	b.n	8004600 <LL_TIM_OC_EnablePreload+0x4c>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <LL_TIM_OC_EnablePreload+0x4c>
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3318      	adds	r3, #24
 8004606:	4619      	mov	r1, r3
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <LL_TIM_OC_EnablePreload+0x80>)
 800460c:	5cd3      	ldrb	r3, [r2, r3]
 800460e:	440b      	add	r3, r1
 8004610:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	4907      	ldr	r1, [pc, #28]	; (8004638 <LL_TIM_OC_EnablePreload+0x84>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	4619      	mov	r1, r3
 800461e:	2308      	movs	r3, #8
 8004620:	408b      	lsls	r3, r1
 8004622:	431a      	orrs	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	0800c924 	.word	0x0800c924
 8004638:	0800c92c 	.word	0x0800c92c

0800463c <LL_TIM_SetClockSource>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	609a      	str	r2, [r3, #8]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <LL_TIM_SetTriggerOutput>:
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	605a      	str	r2, [r3, #4]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_TIM_DisableMasterSlaveMode>:
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_AHB1_GRP1_EnableClock>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80046b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b8:	4907      	ldr	r1, [pc, #28]	; (80046d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4313      	orrs	r3, r2
 80046be:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80046c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4013      	ands	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40023800 	.word	0x40023800

080046dc <LL_APB1_GRP1_EnableClock>:
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <LL_APB1_GRP1_EnableClock+0x2c>)
 80046e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e8:	4907      	ldr	r1, [pc, #28]	; (8004708 <LL_APB1_GRP1_EnableClock+0x2c>)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <LL_APB1_GRP1_EnableClock+0x2c>)
 80046f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4013      	ands	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40023800 	.word	0x40023800

0800470c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b094      	sub	sp, #80	; 0x50
 8004710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004712:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004722:	f107 031c 	add.w	r3, r7, #28
 8004726:	2220      	movs	r2, #32
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f004 fd84 	bl	8009238 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	609a      	str	r2, [r3, #8]
 800473a:	60da      	str	r2, [r3, #12]
 800473c:	611a      	str	r2, [r3, #16]
 800473e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004740:	2002      	movs	r0, #2
 8004742:	f7ff ffcb 	bl	80046dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8004746:	f240 33e7 	movw	r3, #999	; 0x3e7
 800474a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800474c:	2300      	movs	r3, #0
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8004750:	2314      	movs	r3, #20
 8004752:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004754:	2300      	movs	r3, #0
 8004756:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800475c:	4619      	mov	r1, r3
 800475e:	4822      	ldr	r0, [pc, #136]	; (80047e8 <MX_TIM3_Init+0xdc>)
 8004760:	f003 ffda 	bl	8008718 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8004764:	4820      	ldr	r0, [pc, #128]	; (80047e8 <MX_TIM3_Init+0xdc>)
 8004766:	f7ff fed0 	bl	800450a <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800476a:	2100      	movs	r1, #0
 800476c:	481e      	ldr	r0, [pc, #120]	; (80047e8 <MX_TIM3_Init+0xdc>)
 800476e:	f7ff ff65 	bl	800463c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8004772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004776:	481c      	ldr	r0, [pc, #112]	; (80047e8 <MX_TIM3_Init+0xdc>)
 8004778:	f7ff ff1c 	bl	80045b4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800477c:	2360      	movs	r3, #96	; 0x60
 800477e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004784:	2300      	movs	r3, #0
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8004788:	230a      	movs	r3, #10
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800478c:	2300      	movs	r3, #0
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004790:	f107 031c 	add.w	r3, r7, #28
 8004794:	461a      	mov	r2, r3
 8004796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800479a:	4813      	ldr	r0, [pc, #76]	; (80047e8 <MX_TIM3_Init+0xdc>)
 800479c:	f004 f856 	bl	800884c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80047a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047a4:	4810      	ldr	r0, [pc, #64]	; (80047e8 <MX_TIM3_Init+0xdc>)
 80047a6:	f7ff fec1 	bl	800452c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80047aa:	2100      	movs	r1, #0
 80047ac:	480e      	ldr	r0, [pc, #56]	; (80047e8 <MX_TIM3_Init+0xdc>)
 80047ae:	f7ff ff5a 	bl	8004666 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80047b2:	480d      	ldr	r0, [pc, #52]	; (80047e8 <MX_TIM3_Init+0xdc>)
 80047b4:	f7ff ff6a 	bl	800468c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80047b8:	2002      	movs	r0, #2
 80047ba:	f7ff ff77 	bl	80046ac <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80047be:	2302      	movs	r3, #2
 80047c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80047c2:	2302      	movs	r3, #2
 80047c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80047d2:	2302      	movs	r3, #2
 80047d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4804      	ldr	r0, [pc, #16]	; (80047ec <MX_TIM3_Init+0xe0>)
 80047dc:	f003 fd07 	bl	80081ee <LL_GPIO_Init>

}
 80047e0:	bf00      	nop
 80047e2:	3750      	adds	r7, #80	; 0x50
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40020400 	.word	0x40020400

080047f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b094      	sub	sp, #80	; 0x50
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80047f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004806:	f107 031c 	add.w	r3, r7, #28
 800480a:	2220      	movs	r2, #32
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f004 fd12 	bl	8009238 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	60da      	str	r2, [r3, #12]
 8004820:	611a      	str	r2, [r3, #16]
 8004822:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004824:	2008      	movs	r0, #8
 8004826:	f7ff ff59 	bl	80046dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800482e:	2300      	movs	r3, #0
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 8004832:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004838:	2300      	movs	r3, #0
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800483c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004840:	4619      	mov	r1, r3
 8004842:	483a      	ldr	r0, [pc, #232]	; (800492c <MX_TIM5_Init+0x13c>)
 8004844:	f003 ff68 	bl	8008718 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8004848:	4838      	ldr	r0, [pc, #224]	; (800492c <MX_TIM5_Init+0x13c>)
 800484a:	f7ff fe5e 	bl	800450a <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800484e:	2100      	movs	r1, #0
 8004850:	4836      	ldr	r0, [pc, #216]	; (800492c <MX_TIM5_Init+0x13c>)
 8004852:	f7ff fef3 	bl	800463c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8004856:	2101      	movs	r1, #1
 8004858:	4834      	ldr	r0, [pc, #208]	; (800492c <MX_TIM5_Init+0x13c>)
 800485a:	f7ff feab 	bl	80045b4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800485e:	2360      	movs	r3, #96	; 0x60
 8004860:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800486e:	2300      	movs	r3, #0
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004872:	f107 031c 	add.w	r3, r7, #28
 8004876:	461a      	mov	r2, r3
 8004878:	2101      	movs	r1, #1
 800487a:	482c      	ldr	r0, [pc, #176]	; (800492c <MX_TIM5_Init+0x13c>)
 800487c:	f003 ffe6 	bl	800884c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8004880:	2101      	movs	r1, #1
 8004882:	482a      	ldr	r0, [pc, #168]	; (800492c <MX_TIM5_Init+0x13c>)
 8004884:	f7ff fe52 	bl	800452c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8004888:	2110      	movs	r1, #16
 800488a:	4828      	ldr	r0, [pc, #160]	; (800492c <MX_TIM5_Init+0x13c>)
 800488c:	f7ff fe92 	bl	80045b4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004890:	f107 031c 	add.w	r3, r7, #28
 8004894:	461a      	mov	r2, r3
 8004896:	2110      	movs	r1, #16
 8004898:	4824      	ldr	r0, [pc, #144]	; (800492c <MX_TIM5_Init+0x13c>)
 800489a:	f003 ffd7 	bl	800884c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 800489e:	2110      	movs	r1, #16
 80048a0:	4822      	ldr	r0, [pc, #136]	; (800492c <MX_TIM5_Init+0x13c>)
 80048a2:	f7ff fe43 	bl	800452c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80048a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048aa:	4820      	ldr	r0, [pc, #128]	; (800492c <MX_TIM5_Init+0x13c>)
 80048ac:	f7ff fe82 	bl	80045b4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80048b0:	f107 031c 	add.w	r3, r7, #28
 80048b4:	461a      	mov	r2, r3
 80048b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ba:	481c      	ldr	r0, [pc, #112]	; (800492c <MX_TIM5_Init+0x13c>)
 80048bc:	f003 ffc6 	bl	800884c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 80048c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048c4:	4819      	ldr	r0, [pc, #100]	; (800492c <MX_TIM5_Init+0x13c>)
 80048c6:	f7ff fe31 	bl	800452c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80048ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ce:	4817      	ldr	r0, [pc, #92]	; (800492c <MX_TIM5_Init+0x13c>)
 80048d0:	f7ff fe70 	bl	80045b4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80048d4:	f107 031c 	add.w	r3, r7, #28
 80048d8:	461a      	mov	r2, r3
 80048da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048de:	4813      	ldr	r0, [pc, #76]	; (800492c <MX_TIM5_Init+0x13c>)
 80048e0:	f003 ffb4 	bl	800884c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 80048e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048e8:	4810      	ldr	r0, [pc, #64]	; (800492c <MX_TIM5_Init+0x13c>)
 80048ea:	f7ff fe1f 	bl	800452c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80048ee:	2100      	movs	r1, #0
 80048f0:	480e      	ldr	r0, [pc, #56]	; (800492c <MX_TIM5_Init+0x13c>)
 80048f2:	f7ff feb8 	bl	8004666 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80048f6:	480d      	ldr	r0, [pc, #52]	; (800492c <MX_TIM5_Init+0x13c>)
 80048f8:	f7ff fec8 	bl	800468c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80048fc:	2001      	movs	r0, #1
 80048fe:	f7ff fed5 	bl	80046ac <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8004902:	230f      	movs	r3, #15
 8004904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004906:	2302      	movs	r3, #2
 8004908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004916:	2302      	movs	r3, #2
 8004918:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4804      	ldr	r0, [pc, #16]	; (8004930 <MX_TIM5_Init+0x140>)
 8004920:	f003 fc65 	bl	80081ee <LL_GPIO_Init>

}
 8004924:	bf00      	nop
 8004926:	3750      	adds	r7, #80	; 0x50
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40020000 	.word	0x40020000

08004934 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8004948:	2020      	movs	r0, #32
 800494a:	f7ff fec7 	bl	80046dc <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800494e:	f7ff fd53 	bl	80043f8 <__NVIC_GetPriorityGrouping>
 8004952:	4603      	mov	r3, r0
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fda3 	bl	80044a4 <NVIC_EncodePriority>
 800495e:	4603      	mov	r3, r0
 8004960:	4619      	mov	r1, r3
 8004962:	2037      	movs	r0, #55	; 0x37
 8004964:	f7ff fd74 	bl	8004450 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8004968:	2037      	movs	r0, #55	; 0x37
 800496a:	f7ff fd53 	bl	8004414 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 800496e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8004972:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 8004978:	2301      	movs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4808      	ldr	r0, [pc, #32]	; (80049a4 <MX_TIM7_Init+0x70>)
 8004982:	f003 fec9 	bl	8008718 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8004986:	4807      	ldr	r0, [pc, #28]	; (80049a4 <MX_TIM7_Init+0x70>)
 8004988:	f7ff fdbf 	bl	800450a <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800498c:	2100      	movs	r1, #0
 800498e:	4805      	ldr	r0, [pc, #20]	; (80049a4 <MX_TIM7_Init+0x70>)
 8004990:	f7ff fe69 	bl	8004666 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8004994:	4803      	ldr	r0, [pc, #12]	; (80049a4 <MX_TIM7_Init+0x70>)
 8004996:	f7ff fe79 	bl	800468c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40001400 	.word	0x40001400

080049a8 <__NVIC_GetPriorityGrouping>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	f003 0307 	and.w	r3, r3, #7
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <__NVIC_EnableIRQ>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	db0b      	blt.n	80049ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	f003 021f 	and.w	r2, r3, #31
 80049dc:	4907      	ldr	r1, [pc, #28]	; (80049fc <__NVIC_EnableIRQ+0x38>)
 80049de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2001      	movs	r0, #1
 80049e6:	fa00 f202 	lsl.w	r2, r0, r2
 80049ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000e100 	.word	0xe000e100

08004a00 <__NVIC_SetPriority>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	db0a      	blt.n	8004a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	490c      	ldr	r1, [pc, #48]	; (8004a4c <__NVIC_SetPriority+0x4c>)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	0112      	lsls	r2, r2, #4
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	440b      	add	r3, r1
 8004a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a28:	e00a      	b.n	8004a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	4908      	ldr	r1, [pc, #32]	; (8004a50 <__NVIC_SetPriority+0x50>)
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	3b04      	subs	r3, #4
 8004a38:	0112      	lsls	r2, r2, #4
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	761a      	strb	r2, [r3, #24]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	e000e100 	.word	0xe000e100
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <NVIC_EncodePriority>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f1c3 0307 	rsb	r3, r3, #7
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	bf28      	it	cs
 8004a72:	2304      	movcs	r3, #4
 8004a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d902      	bls.n	8004a84 <NVIC_EncodePriority+0x30>
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3b03      	subs	r3, #3
 8004a82:	e000      	b.n	8004a86 <NVIC_EncodePriority+0x32>
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43da      	mvns	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	401a      	ands	r2, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	43d9      	mvns	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aac:	4313      	orrs	r3, r2
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_USART_Enable>:
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60da      	str	r2, [r3, #12]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <LL_USART_ConfigAsyncMode>:
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	615a      	str	r2, [r3, #20]
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <LL_AHB1_GRP1_EnableClock>:
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004b10:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b14:	4907      	ldr	r1, [pc, #28]	; (8004b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4013      	ands	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40023800 	.word	0x40023800

08004b38 <LL_APB1_GRP1_EnableClock>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b44:	4907      	ldr	r1, [pc, #28]	; (8004b64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4013      	ands	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40023800 	.word	0x40023800

08004b68 <LL_APB2_GRP1_EnableClock>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b74:	4907      	ldr	r1, [pc, #28]	; (8004b94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4013      	ands	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40023800 	.word	0x40023800

08004b98 <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08e      	sub	sp, #56	; 0x38
 8004b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004b9e:	f107 031c 	add.w	r3, r7, #28
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	611a      	str	r2, [r3, #16]
 8004bae:	615a      	str	r2, [r3, #20]
 8004bb0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8004bc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bc6:	f7ff ffb7 	bl	8004b38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004bca:	2004      	movs	r0, #4
 8004bcc:	f7ff ff9c 	bl	8004b08 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8004bd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004be6:	2308      	movs	r3, #8
 8004be8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4819      	ldr	r0, [pc, #100]	; (8004c54 <MX_UART4_Init+0xbc>)
 8004bf0:	f003 fafd 	bl	80081ee <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004bf4:	f7ff fed8 	bl	80049a8 <__NVIC_GetPriorityGrouping>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff ff28 	bl	8004a54 <NVIC_EncodePriority>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4619      	mov	r1, r3
 8004c08:	2034      	movs	r0, #52	; 0x34
 8004c0a:	f7ff fef9 	bl	8004a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8004c0e:	2034      	movs	r0, #52	; 0x34
 8004c10:	f7ff fed8 	bl	80049c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8004c14:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004c18:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004c26:	230c      	movs	r3, #12
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8004c32:	f107 031c 	add.w	r3, r7, #28
 8004c36:	4619      	mov	r1, r3
 8004c38:	4807      	ldr	r0, [pc, #28]	; (8004c58 <MX_UART4_Init+0xc0>)
 8004c3a:	f004 fa53 	bl	80090e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8004c3e:	4806      	ldr	r0, [pc, #24]	; (8004c58 <MX_UART4_Init+0xc0>)
 8004c40:	f7ff ff4b 	bl	8004ada <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8004c44:	4804      	ldr	r0, [pc, #16]	; (8004c58 <MX_UART4_Init+0xc0>)
 8004c46:	f7ff ff38 	bl	8004aba <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004c4a:	bf00      	nop
 8004c4c:	3738      	adds	r7, #56	; 0x38
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40020800 	.word	0x40020800
 8004c58:	40004c00 	.word	0x40004c00

08004c5c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	; 0x38
 8004c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004c62:	f107 031c 	add.w	r3, r7, #28
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	609a      	str	r2, [r3, #8]
 8004c6e:	60da      	str	r2, [r3, #12]
 8004c70:	611a      	str	r2, [r3, #16]
 8004c72:	615a      	str	r2, [r3, #20]
 8004c74:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]
 8004c84:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8004c86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004c8a:	f7ff ff55 	bl	8004b38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004c8e:	2004      	movs	r0, #4
 8004c90:	f7ff ff3a 	bl	8004b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004c94:	2008      	movs	r0, #8
 8004c96:	f7ff ff37 	bl	8004b08 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8004c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4821      	ldr	r0, [pc, #132]	; (8004d40 <MX_UART5_Init+0xe4>)
 8004cba:	f003 fa98 	bl	80081ee <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cd6:	1d3b      	adds	r3, r7, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	481a      	ldr	r0, [pc, #104]	; (8004d44 <MX_UART5_Init+0xe8>)
 8004cdc:	f003 fa87 	bl	80081ee <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004ce0:	f7ff fe62 	bl	80049a8 <__NVIC_GetPriorityGrouping>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff feb2 	bl	8004a54 <NVIC_EncodePriority>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	2035      	movs	r0, #53	; 0x35
 8004cf6:	f7ff fe83 	bl	8004a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8004cfa:	2035      	movs	r0, #53	; 0x35
 8004cfc:	f7ff fe62 	bl	80049c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004d00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004d04:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004d06:	2300      	movs	r3, #0
 8004d08:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8004d12:	2304      	movs	r3, #4
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8004d1e:	f107 031c 	add.w	r3, r7, #28
 8004d22:	4619      	mov	r1, r3
 8004d24:	4808      	ldr	r0, [pc, #32]	; (8004d48 <MX_UART5_Init+0xec>)
 8004d26:	f004 f9dd 	bl	80090e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8004d2a:	4807      	ldr	r0, [pc, #28]	; (8004d48 <MX_UART5_Init+0xec>)
 8004d2c:	f7ff fed5 	bl	8004ada <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8004d30:	4805      	ldr	r0, [pc, #20]	; (8004d48 <MX_UART5_Init+0xec>)
 8004d32:	f7ff fec2 	bl	8004aba <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004d36:	bf00      	nop
 8004d38:	3738      	adds	r7, #56	; 0x38
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40020800 	.word	0x40020800
 8004d44:	40020c00 	.word	0x40020c00
 8004d48:	40005000 	.word	0x40005000

08004d4c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d52:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <MX_USART1_UART_Init+0x50>)
 8004d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d5e:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d72:	220c      	movs	r2, #12
 8004d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d82:	4805      	ldr	r0, [pc, #20]	; (8004d98 <MX_USART1_UART_Init+0x4c>)
 8004d84:	f002 fa1a 	bl	80071bc <HAL_UART_Init>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d8e:	f7fe ff13 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	2000043c 	.word	0x2000043c
 8004d9c:	40011000 	.word	0x40011000

08004da0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004da6:	f107 031c 	add.w	r3, r7, #28
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	609a      	str	r2, [r3, #8]
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	611a      	str	r2, [r3, #16]
 8004db6:	615a      	str	r2, [r3, #20]
 8004db8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	60da      	str	r2, [r3, #12]
 8004dc6:	611a      	str	r2, [r3, #16]
 8004dc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004dca:	2020      	movs	r0, #32
 8004dcc:	f7ff fecc 	bl	8004b68 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004dd0:	2004      	movs	r0, #4
 8004dd2:	f7ff fe99 	bl	8004b08 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004dd6:	23c0      	movs	r3, #192	; 0xc0
 8004dd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004dde:	2303      	movs	r3, #3
 8004de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004dea:	2308      	movs	r3, #8
 8004dec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4819      	ldr	r0, [pc, #100]	; (8004e58 <MX_USART6_UART_Init+0xb8>)
 8004df4:	f003 f9fb 	bl	80081ee <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004df8:	f7ff fdd6 	bl	80049a8 <__NVIC_GetPriorityGrouping>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fe26 	bl	8004a54 <NVIC_EncodePriority>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	2047      	movs	r0, #71	; 0x47
 8004e0e:	f7ff fdf7 	bl	8004a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004e12:	2047      	movs	r0, #71	; 0x47
 8004e14:	f7ff fdd6 	bl	80049c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004e18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004e1c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004e32:	2300      	movs	r3, #0
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004e36:	f107 031c 	add.w	r3, r7, #28
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4807      	ldr	r0, [pc, #28]	; (8004e5c <MX_USART6_UART_Init+0xbc>)
 8004e3e:	f004 f951 	bl	80090e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004e42:	4806      	ldr	r0, [pc, #24]	; (8004e5c <MX_USART6_UART_Init+0xbc>)
 8004e44:	f7ff fe49 	bl	8004ada <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004e48:	4804      	ldr	r0, [pc, #16]	; (8004e5c <MX_USART6_UART_Init+0xbc>)
 8004e4a:	f7ff fe36 	bl	8004aba <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004e4e:	bf00      	nop
 8004e50:	3738      	adds	r7, #56	; 0x38
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40020800 	.word	0x40020800
 8004e5c:	40011400 	.word	0x40011400

08004e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e68:	f107 0314 	add.w	r3, r7, #20
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_UART_MspInit+0x94>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d134      	bne.n	8004eec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_UART_MspInit+0x98>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <HAL_UART_MspInit+0x98>)
 8004e8c:	f043 0310 	orr.w	r3, r3, #16
 8004e90:	6453      	str	r3, [r2, #68]	; 0x44
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_UART_MspInit+0x98>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <HAL_UART_MspInit+0x98>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <HAL_UART_MspInit+0x98>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6313      	str	r3, [r2, #48]	; 0x30
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_UART_MspInit+0x98>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004eba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ecc:	2307      	movs	r3, #7
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4809      	ldr	r0, [pc, #36]	; (8004efc <HAL_UART_MspInit+0x9c>)
 8004ed8:	f001 f9f8 	bl	80062cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004edc:	2200      	movs	r2, #0
 8004ede:	2100      	movs	r1, #0
 8004ee0:	2025      	movs	r0, #37	; 0x25
 8004ee2:	f000 fdba 	bl	8005a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ee6:	2025      	movs	r0, #37	; 0x25
 8004ee8:	f000 fdd3 	bl	8005a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004eec:	bf00      	nop
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40011000 	.word	0x40011000
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40020000 	.word	0x40020000

08004f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f04:	480d      	ldr	r0, [pc, #52]	; (8004f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f06:	490e      	ldr	r1, [pc, #56]	; (8004f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f08:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f0c:	e002      	b.n	8004f14 <LoopCopyDataInit>

08004f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f12:	3304      	adds	r3, #4

08004f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f18:	d3f9      	bcc.n	8004f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f1a:	4a0b      	ldr	r2, [pc, #44]	; (8004f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f1c:	4c0b      	ldr	r4, [pc, #44]	; (8004f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f20:	e001      	b.n	8004f26 <LoopFillZerobss>

08004f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f24:	3204      	adds	r2, #4

08004f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f28:	d3fb      	bcc.n	8004f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f2a:	f7ff fa53 	bl	80043d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f2e:	f004 f95f 	bl	80091f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f32:	f7fe f823 	bl	8002f7c <main>
  bx  lr    
 8004f36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004f44:	0800cd3c 	.word	0x0800cd3c
  ldr r2, =_sbss
 8004f48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004f4c:	20000494 	.word	0x20000494

08004f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f50:	e7fe      	b.n	8004f50 <ADC_IRQHandler>
	...

08004f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_Init+0x40>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a0d      	ldr	r2, [pc, #52]	; (8004f94 <HAL_Init+0x40>)
 8004f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_Init+0x40>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <HAL_Init+0x40>)
 8004f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f70:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <HAL_Init+0x40>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <HAL_Init+0x40>)
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f7c:	2003      	movs	r0, #3
 8004f7e:	f000 fd61 	bl	8005a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f82:	200f      	movs	r0, #15
 8004f84:	f000 f808 	bl	8004f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f88:	f7fe ff6e 	bl	8003e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023c00 	.word	0x40023c00

08004f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_InitTick+0x54>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_InitTick+0x58>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fd79 	bl	8005aae <HAL_SYSTICK_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e00e      	b.n	8004fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d80a      	bhi.n	8004fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	f000 fd41 	bl	8005a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fd8:	4a06      	ldr	r2, [pc, #24]	; (8004ff4 <HAL_InitTick+0x5c>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000004 	.word	0x20000004
 8004ff0:	2000000c 	.word	0x2000000c
 8004ff4:	20000008 	.word	0x20000008

08004ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_IncTick+0x20>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_IncTick+0x24>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4413      	add	r3, r2
 8005008:	4a04      	ldr	r2, [pc, #16]	; (800501c <HAL_IncTick+0x24>)
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	2000000c 	.word	0x2000000c
 800501c:	20000480 	.word	0x20000480

08005020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return uwTick;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_GetTick+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000480 	.word	0x20000480

08005038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005040:	f7ff ffee 	bl	8005020 <HAL_GetTick>
 8005044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d005      	beq.n	800505e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_Delay+0x44>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800505e:	bf00      	nop
 8005060:	f7ff ffde 	bl	8005020 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d8f7      	bhi.n	8005060 <HAL_Delay+0x28>
  {
  }
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2000000c 	.word	0x2000000c

08005080 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e033      	b.n	80050fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fd fcc6 	bl	8002a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d118      	bne.n	80050f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050c6:	f023 0302 	bic.w	r3, r3, #2
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa68 	bl	80055a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	f043 0201 	orr.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
 80050ee:	e001      	b.n	80050f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_ADC_Start_DMA+0x1e>
 8005122:	2302      	movs	r3, #2
 8005124:	e0e9      	b.n	80052fa <HAL_ADC_Start_DMA+0x1f2>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d018      	beq.n	800516e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800514c:	4b6d      	ldr	r3, [pc, #436]	; (8005304 <HAL_ADC_Start_DMA+0x1fc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a6d      	ldr	r2, [pc, #436]	; (8005308 <HAL_ADC_Start_DMA+0x200>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0c9a      	lsrs	r2, r3, #18
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005160:	e002      	b.n	8005168 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3b01      	subs	r3, #1
 8005166:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f9      	bne.n	8005162 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517c:	d107      	bne.n	800518e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800518c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	f040 80a1 	bne.w	80052e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051dc:	d106      	bne.n	80051ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f023 0206 	bic.w	r2, r3, #6
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
 80051ea:	e002      	b.n	80051f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051fa:	4b44      	ldr	r3, [pc, #272]	; (800530c <HAL_ADC_Start_DMA+0x204>)
 80051fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	4a43      	ldr	r2, [pc, #268]	; (8005310 <HAL_ADC_Start_DMA+0x208>)
 8005204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	4a42      	ldr	r2, [pc, #264]	; (8005314 <HAL_ADC_Start_DMA+0x20c>)
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	4a41      	ldr	r2, [pc, #260]	; (8005318 <HAL_ADC_Start_DMA+0x210>)
 8005214:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800521e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800522e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	334c      	adds	r3, #76	; 0x4c
 800524a:	4619      	mov	r1, r3
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f000 fce8 	bl	8005c24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2b00      	cmp	r3, #0
 800525e:	d12a      	bne.n	80052b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2d      	ldr	r2, [pc, #180]	; (800531c <HAL_ADC_Start_DMA+0x214>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d015      	beq.n	8005296 <HAL_ADC_Start_DMA+0x18e>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2c      	ldr	r2, [pc, #176]	; (8005320 <HAL_ADC_Start_DMA+0x218>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d105      	bne.n	8005280 <HAL_ADC_Start_DMA+0x178>
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_ADC_Start_DMA+0x204>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a27      	ldr	r2, [pc, #156]	; (8005324 <HAL_ADC_Start_DMA+0x21c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d136      	bne.n	80052f8 <HAL_ADC_Start_DMA+0x1f0>
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_ADC_Start_DMA+0x204>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	d130      	bne.n	80052f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d129      	bne.n	80052f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	e020      	b.n	80052f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_ADC_Start_DMA+0x214>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d11b      	bne.n	80052f8 <HAL_ADC_Start_DMA+0x1f0>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d114      	bne.n	80052f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	e00b      	b.n	80052f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f043 0210 	orr.w	r2, r3, #16
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000004 	.word	0x20000004
 8005308:	431bde83 	.word	0x431bde83
 800530c:	40012300 	.word	0x40012300
 8005310:	080057a1 	.word	0x080057a1
 8005314:	0800585b 	.word	0x0800585b
 8005318:	08005877 	.word	0x08005877
 800531c:	40012000 	.word	0x40012000
 8005320:	40012100 	.word	0x40012100
 8005324:	40012200 	.word	0x40012200

08005328 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x1c>
 800537c:	2302      	movs	r3, #2
 800537e:	e105      	b.n	800558c <HAL_ADC_ConfigChannel+0x228>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b09      	cmp	r3, #9
 800538e:	d925      	bls.n	80053dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68d9      	ldr	r1, [r3, #12]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	3b1e      	subs	r3, #30
 80053a6:	2207      	movs	r2, #7
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43da      	mvns	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	400a      	ands	r2, r1
 80053b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68d9      	ldr	r1, [r3, #12]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	4618      	mov	r0, r3
 80053c8:	4603      	mov	r3, r0
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	4403      	add	r3, r0
 80053ce:	3b1e      	subs	r3, #30
 80053d0:	409a      	lsls	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	e022      	b.n	8005422 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6919      	ldr	r1, [r3, #16]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	2207      	movs	r2, #7
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43da      	mvns	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	400a      	ands	r2, r1
 80053fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6919      	ldr	r1, [r3, #16]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	4618      	mov	r0, r3
 8005412:	4603      	mov	r3, r0
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4403      	add	r3, r0
 8005418:	409a      	lsls	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d824      	bhi.n	8005474 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	3b05      	subs	r3, #5
 800543c:	221f      	movs	r2, #31
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43da      	mvns	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	400a      	ands	r2, r1
 800544a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	4618      	mov	r0, r3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	3b05      	subs	r3, #5
 8005466:	fa00 f203 	lsl.w	r2, r0, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	635a      	str	r2, [r3, #52]	; 0x34
 8005472:	e04c      	b.n	800550e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b0c      	cmp	r3, #12
 800547a:	d824      	bhi.n	80054c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	3b23      	subs	r3, #35	; 0x23
 800548e:	221f      	movs	r2, #31
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43da      	mvns	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	400a      	ands	r2, r1
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	4618      	mov	r0, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	3b23      	subs	r3, #35	; 0x23
 80054b8:	fa00 f203 	lsl.w	r2, r0, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
 80054c4:	e023      	b.n	800550e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	3b41      	subs	r3, #65	; 0x41
 80054d8:	221f      	movs	r2, #31
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43da      	mvns	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	400a      	ands	r2, r1
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	4618      	mov	r0, r3
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	3b41      	subs	r3, #65	; 0x41
 8005502:	fa00 f203 	lsl.w	r2, r0, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800550e:	4b22      	ldr	r3, [pc, #136]	; (8005598 <HAL_ADC_ConfigChannel+0x234>)
 8005510:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a21      	ldr	r2, [pc, #132]	; (800559c <HAL_ADC_ConfigChannel+0x238>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d109      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x1cc>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b12      	cmp	r3, #18
 8005522:	d105      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a19      	ldr	r2, [pc, #100]	; (800559c <HAL_ADC_ConfigChannel+0x238>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d123      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x21e>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b10      	cmp	r3, #16
 8005540:	d003      	beq.n	800554a <HAL_ADC_ConfigChannel+0x1e6>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b11      	cmp	r3, #17
 8005548:	d11b      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b10      	cmp	r3, #16
 800555c:	d111      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <HAL_ADC_ConfigChannel+0x23c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a10      	ldr	r2, [pc, #64]	; (80055a4 <HAL_ADC_ConfigChannel+0x240>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	0c9a      	lsrs	r2, r3, #18
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005574:	e002      	b.n	800557c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	3b01      	subs	r3, #1
 800557a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f9      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40012300 	.word	0x40012300
 800559c:	40012000 	.word	0x40012000
 80055a0:	20000004 	.word	0x20000004
 80055a4:	431bde83 	.word	0x431bde83

080055a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055b0:	4b79      	ldr	r3, [pc, #484]	; (8005798 <ADC_Init+0x1f0>)
 80055b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6859      	ldr	r1, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	021a      	lsls	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	4a58      	ldr	r2, [pc, #352]	; (800579c <ADC_Init+0x1f4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d022      	beq.n	8005686 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800564e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6899      	ldr	r1, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6899      	ldr	r1, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	609a      	str	r2, [r3, #8]
 8005684:	e00f      	b.n	80056a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0202 	bic.w	r2, r2, #2
 80056b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6899      	ldr	r1, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7e1b      	ldrb	r3, [r3, #24]
 80056c0:	005a      	lsls	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01b      	beq.n	800570c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80056f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	3b01      	subs	r3, #1
 8005700:	035a      	lsls	r2, r3, #13
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	e007      	b.n	800571c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800571a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	3b01      	subs	r3, #1
 8005738:	051a      	lsls	r2, r3, #20
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6899      	ldr	r1, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800575e:	025a      	lsls	r2, r3, #9
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6899      	ldr	r1, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	029a      	lsls	r2, r3, #10
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40012300 	.word	0x40012300
 800579c:	0f000001 	.word	0x0f000001

080057a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d13c      	bne.n	8005834 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d12b      	bne.n	800582c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d127      	bne.n	800582c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d119      	bne.n	800582c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0220 	bic.w	r2, r2, #32
 8005806:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0201 	orr.w	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff fd7b 	bl	8005328 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005832:	e00e      	b.n	8005852 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fd85 	bl	8005350 <HAL_ADC_ErrorCallback>
}
 8005846:	e004      	b.n	8005852 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff fd67 	bl	800533c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2240      	movs	r2, #64	; 0x40
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	f043 0204 	orr.w	r2, r3, #4
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff fd5a 	bl	8005350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <__NVIC_SetPriorityGrouping>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <__NVIC_SetPriorityGrouping+0x44>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058c0:	4013      	ands	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058d6:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <__NVIC_SetPriorityGrouping+0x44>)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	60d3      	str	r3, [r2, #12]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	e000ed00 	.word	0xe000ed00

080058ec <__NVIC_GetPriorityGrouping>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058f0:	4b04      	ldr	r3, [pc, #16]	; (8005904 <__NVIC_GetPriorityGrouping+0x18>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	f003 0307 	and.w	r3, r3, #7
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	e000ed00 	.word	0xe000ed00

08005908 <__NVIC_EnableIRQ>:
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005916:	2b00      	cmp	r3, #0
 8005918:	db0b      	blt.n	8005932 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	f003 021f 	and.w	r2, r3, #31
 8005920:	4907      	ldr	r1, [pc, #28]	; (8005940 <__NVIC_EnableIRQ+0x38>)
 8005922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2001      	movs	r0, #1
 800592a:	fa00 f202 	lsl.w	r2, r0, r2
 800592e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000e100 	.word	0xe000e100

08005944 <__NVIC_SetPriority>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005954:	2b00      	cmp	r3, #0
 8005956:	db0a      	blt.n	800596e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	490c      	ldr	r1, [pc, #48]	; (8005990 <__NVIC_SetPriority+0x4c>)
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	0112      	lsls	r2, r2, #4
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	440b      	add	r3, r1
 8005968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800596c:	e00a      	b.n	8005984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4908      	ldr	r1, [pc, #32]	; (8005994 <__NVIC_SetPriority+0x50>)
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	3b04      	subs	r3, #4
 800597c:	0112      	lsls	r2, r2, #4
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	440b      	add	r3, r1
 8005982:	761a      	strb	r2, [r3, #24]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	e000e100 	.word	0xe000e100
 8005994:	e000ed00 	.word	0xe000ed00

08005998 <NVIC_EncodePriority>:
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f1c3 0307 	rsb	r3, r3, #7
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	bf28      	it	cs
 80059b6:	2304      	movcs	r3, #4
 80059b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3304      	adds	r3, #4
 80059be:	2b06      	cmp	r3, #6
 80059c0:	d902      	bls.n	80059c8 <NVIC_EncodePriority+0x30>
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3b03      	subs	r3, #3
 80059c6:	e000      	b.n	80059ca <NVIC_EncodePriority+0x32>
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059cc:	f04f 32ff 	mov.w	r2, #4294967295
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43da      	mvns	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	401a      	ands	r2, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059e0:	f04f 31ff 	mov.w	r1, #4294967295
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ea:	43d9      	mvns	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f0:	4313      	orrs	r3, r2
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3724      	adds	r7, #36	; 0x24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a10:	d301      	bcc.n	8005a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a12:	2301      	movs	r3, #1
 8005a14:	e00f      	b.n	8005a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a16:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <SysTick_Config+0x40>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a1e:	210f      	movs	r1, #15
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	f7ff ff8e 	bl	8005944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <SysTick_Config+0x40>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a2e:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <SysTick_Config+0x40>)
 8005a30:	2207      	movs	r2, #7
 8005a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	e000e010 	.word	0xe000e010

08005a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff ff29 	bl	80058a4 <__NVIC_SetPriorityGrouping>
}
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b086      	sub	sp, #24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	4603      	mov	r3, r0
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
 8005a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a6c:	f7ff ff3e 	bl	80058ec <__NVIC_GetPriorityGrouping>
 8005a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f7ff ff8e 	bl	8005998 <NVIC_EncodePriority>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff5d 	bl	8005944 <__NVIC_SetPriority>
}
 8005a8a:	bf00      	nop
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	4603      	mov	r3, r0
 8005a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff ff31 	bl	8005908 <__NVIC_EnableIRQ>
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff ffa2 	bl	8005a00 <SysTick_Config>
 8005abc:	4603      	mov	r3, r0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ad4:	f7ff faa4 	bl	8005020 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e099      	b.n	8005c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b04:	e00f      	b.n	8005b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b06:	f7ff fa8b 	bl	8005020 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d908      	bls.n	8005b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2203      	movs	r2, #3
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e078      	b.n	8005c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e8      	bne.n	8005b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <HAL_DMA_Init+0x158>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d107      	bne.n	8005b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0307 	bic.w	r3, r3, #7
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d117      	bne.n	8005bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fb01 	bl	80061d4 <DMA_CheckFifoParam>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2240      	movs	r2, #64	; 0x40
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005be6:	2301      	movs	r3, #1
 8005be8:	e016      	b.n	8005c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fab8 	bl	8006168 <DMA_CalcBaseAndBitshift>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	223f      	movs	r2, #63	; 0x3f
 8005c02:	409a      	lsls	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	f010803f 	.word	0xf010803f

08005c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_DMA_Start_IT+0x26>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e040      	b.n	8005ccc <HAL_DMA_Start_IT+0xa8>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d12f      	bne.n	8005cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa4a 	bl	800610c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	223f      	movs	r2, #63	; 0x3f
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0216 	orr.w	r2, r2, #22
 8005c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0208 	orr.w	r2, r2, #8
 8005caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e005      	b.n	8005cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ce2:	f7ff f99d 	bl	8005020 <HAL_GetTick>
 8005ce6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d008      	beq.n	8005d06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e052      	b.n	8005dac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0216 	bic.w	r2, r2, #22
 8005d14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <HAL_DMA_Abort+0x62>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0208 	bic.w	r2, r2, #8
 8005d44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d56:	e013      	b.n	8005d80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d58:	f7ff f962 	bl	8005020 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d90c      	bls.n	8005d80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e015      	b.n	8005dac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e4      	bne.n	8005d58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d92:	223f      	movs	r2, #63	; 0x3f
 8005d94:	409a      	lsls	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2280      	movs	r2, #128	; 0x80
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e00c      	b.n	8005dec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e04:	4b8e      	ldr	r3, [pc, #568]	; (8006040 <HAL_DMA_IRQHandler+0x248>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a8e      	ldr	r2, [pc, #568]	; (8006044 <HAL_DMA_IRQHandler+0x24c>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	0a9b      	lsrs	r3, r3, #10
 8005e10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e22:	2208      	movs	r2, #8
 8005e24:	409a      	lsls	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01a      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0204 	bic.w	r2, r2, #4
 8005e4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e50:	2208      	movs	r2, #8
 8005e52:	409a      	lsls	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f043 0201 	orr.w	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	2201      	movs	r2, #1
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d012      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e86:	2201      	movs	r2, #1
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	f043 0202 	orr.w	r2, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d012      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	f043 0204 	orr.w	r2, r3, #4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d043      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d03c      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef2:	2210      	movs	r2, #16
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d018      	beq.n	8005f3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d108      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d024      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	e01f      	b.n	8005f68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	e016      	b.n	8005f68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0208 	bic.w	r2, r2, #8
 8005f56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 808f 	beq.w	8006098 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8087 	beq.w	8006098 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8e:	2220      	movs	r2, #32
 8005f90:	409a      	lsls	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d136      	bne.n	8006010 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0216 	bic.w	r2, r2, #22
 8005fb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <HAL_DMA_IRQHandler+0x1da>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0208 	bic.w	r2, r2, #8
 8005fe0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	223f      	movs	r2, #63	; 0x3f
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	2b00      	cmp	r3, #0
 8006004:	d07e      	beq.n	8006104 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
        }
        return;
 800600e:	e079      	b.n	8006104 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01d      	beq.n	800605a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10d      	bne.n	8006048 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006030:	2b00      	cmp	r3, #0
 8006032:	d031      	beq.n	8006098 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
 800603c:	e02c      	b.n	8006098 <HAL_DMA_IRQHandler+0x2a0>
 800603e:	bf00      	nop
 8006040:	20000004 	.word	0x20000004
 8006044:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d023      	beq.n	8006098 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
 8006058:	e01e      	b.n	8006098 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10f      	bne.n	8006088 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0210 	bic.w	r2, r2, #16
 8006076:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	2b00      	cmp	r3, #0
 800609e:	d032      	beq.n	8006106 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d022      	beq.n	80060f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2205      	movs	r2, #5
 80060b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0201 	bic.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d307      	bcc.n	80060e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f2      	bne.n	80060c4 <HAL_DMA_IRQHandler+0x2cc>
 80060de:	e000      	b.n	80060e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	e000      	b.n	8006106 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006104:	bf00      	nop
    }
  }
}
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006128:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d108      	bne.n	800614c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800614a:	e007      	b.n	800615c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	3b10      	subs	r3, #16
 8006178:	4a14      	ldr	r2, [pc, #80]	; (80061cc <DMA_CalcBaseAndBitshift+0x64>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006182:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <DMA_CalcBaseAndBitshift+0x68>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d909      	bls.n	80061aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	659a      	str	r2, [r3, #88]	; 0x58
 80061a8:	e007      	b.n	80061ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	aaaaaaab 	.word	0xaaaaaaab
 80061d0:	0800c934 	.word	0x0800c934

080061d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d11f      	bne.n	800622e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d856      	bhi.n	80062a2 <DMA_CheckFifoParam+0xce>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <DMA_CheckFifoParam+0x28>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	0800620d 	.word	0x0800620d
 8006200:	0800621f 	.word	0x0800621f
 8006204:	0800620d 	.word	0x0800620d
 8006208:	080062a3 	.word	0x080062a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d046      	beq.n	80062a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800621c:	e043      	b.n	80062a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006226:	d140      	bne.n	80062aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800622c:	e03d      	b.n	80062aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	d121      	bne.n	800627c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b03      	cmp	r3, #3
 800623c:	d837      	bhi.n	80062ae <DMA_CheckFifoParam+0xda>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <DMA_CheckFifoParam+0x70>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006255 	.word	0x08006255
 8006248:	0800625b 	.word	0x0800625b
 800624c:	08006255 	.word	0x08006255
 8006250:	0800626d 	.word	0x0800626d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
      break;
 8006258:	e030      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d025      	beq.n	80062b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800626a:	e022      	b.n	80062b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006274:	d11f      	bne.n	80062b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800627a:	e01c      	b.n	80062b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d903      	bls.n	800628a <DMA_CheckFifoParam+0xb6>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d003      	beq.n	8006290 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006288:	e018      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
      break;
 800628e:	e015      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e00b      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      break;
 80062a2:	bf00      	nop
 80062a4:	e00a      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      break;
 80062a6:	bf00      	nop
 80062a8:	e008      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      break;
 80062aa:	bf00      	nop
 80062ac:	e006      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      break;
 80062ae:	bf00      	nop
 80062b0:	e004      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      break;
 80062b2:	bf00      	nop
 80062b4:	e002      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      break;   
 80062b6:	bf00      	nop
 80062b8:	e000      	b.n	80062bc <DMA_CheckFifoParam+0xe8>
      break;
 80062ba:	bf00      	nop
    }
  } 
  
  return status; 
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop

080062cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	; 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062da:	2300      	movs	r3, #0
 80062dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	e16b      	b.n	80065c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062e8:	2201      	movs	r2, #1
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4013      	ands	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	f040 815a 	bne.w	80065ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d005      	beq.n	800631e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800631a:	2b02      	cmp	r3, #2
 800631c:	d130      	bne.n	8006380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	2203      	movs	r2, #3
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	43db      	mvns	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4313      	orrs	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006354:	2201      	movs	r2, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	f003 0201 	and.w	r2, r3, #1
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	2b03      	cmp	r3, #3
 800638a:	d017      	beq.n	80063bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	2203      	movs	r2, #3
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d123      	bne.n	8006410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	08da      	lsrs	r2, r3, #3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3208      	adds	r2, #8
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	220f      	movs	r2, #15
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	43db      	mvns	r3, r3
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4013      	ands	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	08da      	lsrs	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3208      	adds	r2, #8
 800640a:	69b9      	ldr	r1, [r7, #24]
 800640c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	2203      	movs	r2, #3
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0203 	and.w	r2, r3, #3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4313      	orrs	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80b4 	beq.w	80065ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	4b60      	ldr	r3, [pc, #384]	; (80065d8 <HAL_GPIO_Init+0x30c>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	4a5f      	ldr	r2, [pc, #380]	; (80065d8 <HAL_GPIO_Init+0x30c>)
 800645c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006460:	6453      	str	r3, [r2, #68]	; 0x44
 8006462:	4b5d      	ldr	r3, [pc, #372]	; (80065d8 <HAL_GPIO_Init+0x30c>)
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800646e:	4a5b      	ldr	r2, [pc, #364]	; (80065dc <HAL_GPIO_Init+0x310>)
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	089b      	lsrs	r3, r3, #2
 8006474:	3302      	adds	r3, #2
 8006476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	220f      	movs	r2, #15
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43db      	mvns	r3, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4013      	ands	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a52      	ldr	r2, [pc, #328]	; (80065e0 <HAL_GPIO_Init+0x314>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d02b      	beq.n	80064f2 <HAL_GPIO_Init+0x226>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a51      	ldr	r2, [pc, #324]	; (80065e4 <HAL_GPIO_Init+0x318>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d025      	beq.n	80064ee <HAL_GPIO_Init+0x222>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a50      	ldr	r2, [pc, #320]	; (80065e8 <HAL_GPIO_Init+0x31c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01f      	beq.n	80064ea <HAL_GPIO_Init+0x21e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a4f      	ldr	r2, [pc, #316]	; (80065ec <HAL_GPIO_Init+0x320>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d019      	beq.n	80064e6 <HAL_GPIO_Init+0x21a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a4e      	ldr	r2, [pc, #312]	; (80065f0 <HAL_GPIO_Init+0x324>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <HAL_GPIO_Init+0x216>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a4d      	ldr	r2, [pc, #308]	; (80065f4 <HAL_GPIO_Init+0x328>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00d      	beq.n	80064de <HAL_GPIO_Init+0x212>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a4c      	ldr	r2, [pc, #304]	; (80065f8 <HAL_GPIO_Init+0x32c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <HAL_GPIO_Init+0x20e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a4b      	ldr	r2, [pc, #300]	; (80065fc <HAL_GPIO_Init+0x330>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_GPIO_Init+0x20a>
 80064d2:	2307      	movs	r3, #7
 80064d4:	e00e      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064d6:	2308      	movs	r3, #8
 80064d8:	e00c      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064da:	2306      	movs	r3, #6
 80064dc:	e00a      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064de:	2305      	movs	r3, #5
 80064e0:	e008      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064e2:	2304      	movs	r3, #4
 80064e4:	e006      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064e6:	2303      	movs	r3, #3
 80064e8:	e004      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e002      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <HAL_GPIO_Init+0x228>
 80064f2:	2300      	movs	r3, #0
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	f002 0203 	and.w	r2, r2, #3
 80064fa:	0092      	lsls	r2, r2, #2
 80064fc:	4093      	lsls	r3, r2
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006504:	4935      	ldr	r1, [pc, #212]	; (80065dc <HAL_GPIO_Init+0x310>)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	089b      	lsrs	r3, r3, #2
 800650a:	3302      	adds	r3, #2
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006512:	4b3b      	ldr	r3, [pc, #236]	; (8006600 <HAL_GPIO_Init+0x334>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	43db      	mvns	r3, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4013      	ands	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006536:	4a32      	ldr	r2, [pc, #200]	; (8006600 <HAL_GPIO_Init+0x334>)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800653c:	4b30      	ldr	r3, [pc, #192]	; (8006600 <HAL_GPIO_Init+0x334>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	43db      	mvns	r3, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4013      	ands	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006560:	4a27      	ldr	r2, [pc, #156]	; (8006600 <HAL_GPIO_Init+0x334>)
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006566:	4b26      	ldr	r3, [pc, #152]	; (8006600 <HAL_GPIO_Init+0x334>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	43db      	mvns	r3, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	4013      	ands	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800658a:	4a1d      	ldr	r2, [pc, #116]	; (8006600 <HAL_GPIO_Init+0x334>)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006590:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <HAL_GPIO_Init+0x334>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	43db      	mvns	r3, r3
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4013      	ands	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065b4:	4a12      	ldr	r2, [pc, #72]	; (8006600 <HAL_GPIO_Init+0x334>)
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3301      	adds	r3, #1
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	2b0f      	cmp	r3, #15
 80065c4:	f67f ae90 	bls.w	80062e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800
 80065dc:	40013800 	.word	0x40013800
 80065e0:	40020000 	.word	0x40020000
 80065e4:	40020400 	.word	0x40020400
 80065e8:	40020800 	.word	0x40020800
 80065ec:	40020c00 	.word	0x40020c00
 80065f0:	40021000 	.word	0x40021000
 80065f4:	40021400 	.word	0x40021400
 80065f8:	40021800 	.word	0x40021800
 80065fc:	40021c00 	.word	0x40021c00
 8006600:	40013c00 	.word	0x40013c00

08006604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e12b      	b.n	800686e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fc fb7a 	bl	8002d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2224      	movs	r2, #36	; 0x24
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006668:	f000 fd80 	bl	800716c <HAL_RCC_GetPCLK1Freq>
 800666c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a81      	ldr	r2, [pc, #516]	; (8006878 <HAL_I2C_Init+0x274>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d807      	bhi.n	8006688 <HAL_I2C_Init+0x84>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4a80      	ldr	r2, [pc, #512]	; (800687c <HAL_I2C_Init+0x278>)
 800667c:	4293      	cmp	r3, r2
 800667e:	bf94      	ite	ls
 8006680:	2301      	movls	r3, #1
 8006682:	2300      	movhi	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	e006      	b.n	8006696 <HAL_I2C_Init+0x92>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a7d      	ldr	r2, [pc, #500]	; (8006880 <HAL_I2C_Init+0x27c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	bf94      	ite	ls
 8006690:	2301      	movls	r3, #1
 8006692:	2300      	movhi	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0e7      	b.n	800686e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a78      	ldr	r2, [pc, #480]	; (8006884 <HAL_I2C_Init+0x280>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	0c9b      	lsrs	r3, r3, #18
 80066a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4a6a      	ldr	r2, [pc, #424]	; (8006878 <HAL_I2C_Init+0x274>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d802      	bhi.n	80066d8 <HAL_I2C_Init+0xd4>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3301      	adds	r3, #1
 80066d6:	e009      	b.n	80066ec <HAL_I2C_Init+0xe8>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	4a69      	ldr	r2, [pc, #420]	; (8006888 <HAL_I2C_Init+0x284>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
 80066e8:	099b      	lsrs	r3, r3, #6
 80066ea:	3301      	adds	r3, #1
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	495c      	ldr	r1, [pc, #368]	; (8006878 <HAL_I2C_Init+0x274>)
 8006708:	428b      	cmp	r3, r1
 800670a:	d819      	bhi.n	8006740 <HAL_I2C_Init+0x13c>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1e59      	subs	r1, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	fbb1 f3f3 	udiv	r3, r1, r3
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006720:	400b      	ands	r3, r1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_I2C_Init+0x138>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1e59      	subs	r1, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fbb1 f3f3 	udiv	r3, r1, r3
 8006734:	3301      	adds	r3, #1
 8006736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800673a:	e051      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 800673c:	2304      	movs	r3, #4
 800673e:	e04f      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d111      	bne.n	800676c <HAL_I2C_Init+0x168>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	1e58      	subs	r0, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6859      	ldr	r1, [r3, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	440b      	add	r3, r1
 8006756:	fbb0 f3f3 	udiv	r3, r0, r3
 800675a:	3301      	adds	r3, #1
 800675c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	e012      	b.n	8006792 <HAL_I2C_Init+0x18e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1e58      	subs	r0, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	0099      	lsls	r1, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006782:	3301      	adds	r3, #1
 8006784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Init+0x196>
 8006796:	2301      	movs	r3, #1
 8006798:	e022      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10e      	bne.n	80067c0 <HAL_I2C_Init+0x1bc>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1e58      	subs	r0, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6859      	ldr	r1, [r3, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	440b      	add	r3, r1
 80067b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067be:	e00f      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	1e58      	subs	r0, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6859      	ldr	r1, [r3, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	0099      	lsls	r1, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d6:	3301      	adds	r3, #1
 80067d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	6809      	ldr	r1, [r1, #0]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800680e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6911      	ldr	r1, [r2, #16]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68d2      	ldr	r2, [r2, #12]
 800681a:	4311      	orrs	r1, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	430b      	orrs	r3, r1
 8006822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	000186a0 	.word	0x000186a0
 800687c:	001e847f 	.word	0x001e847f
 8006880:	003d08ff 	.word	0x003d08ff
 8006884:	431bde83 	.word	0x431bde83
 8006888:	10624dd3 	.word	0x10624dd3

0800688c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e267      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d075      	beq.n	8006996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068aa:	4b88      	ldr	r3, [pc, #544]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00c      	beq.n	80068d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b6:	4b85      	ldr	r3, [pc, #532]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d112      	bne.n	80068e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c2:	4b82      	ldr	r3, [pc, #520]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	4b7e      	ldr	r3, [pc, #504]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d05b      	beq.n	8006994 <HAL_RCC_OscConfig+0x108>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d157      	bne.n	8006994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e242      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x74>
 80068f2:	4b76      	ldr	r3, [pc, #472]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a75      	ldr	r2, [pc, #468]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e01d      	b.n	800693c <HAL_RCC_OscConfig+0xb0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x98>
 800690a:	4b70      	ldr	r3, [pc, #448]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6f      	ldr	r2, [pc, #444]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b6d      	ldr	r3, [pc, #436]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a6c      	ldr	r2, [pc, #432]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e00b      	b.n	800693c <HAL_RCC_OscConfig+0xb0>
 8006924:	4b69      	ldr	r3, [pc, #420]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a68      	ldr	r2, [pc, #416]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 800692a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	4b66      	ldr	r3, [pc, #408]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a65      	ldr	r2, [pc, #404]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800693a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006944:	f7fe fb6c 	bl	8005020 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800694c:	f7fe fb68 	bl	8005020 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e207      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695e:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0xc0>
 800696a:	e014      	b.n	8006996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7fe fb58 	bl	8005020 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006974:	f7fe fb54 	bl	8005020 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b64      	cmp	r3, #100	; 0x64
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e1f3      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006986:	4b51      	ldr	r3, [pc, #324]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0xe8>
 8006992:	e000      	b.n	8006996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d063      	beq.n	8006a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069a2:	4b4a      	ldr	r3, [pc, #296]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ae:	4b47      	ldr	r3, [pc, #284]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d11c      	bne.n	80069f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ba:	4b44      	ldr	r3, [pc, #272]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d116      	bne.n	80069f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069c6:	4b41      	ldr	r3, [pc, #260]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_RCC_OscConfig+0x152>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d001      	beq.n	80069de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e1c7      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069de:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4937      	ldr	r1, [pc, #220]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f2:	e03a      	b.n	8006a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d020      	beq.n	8006a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069fc:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <HAL_RCC_OscConfig+0x244>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a02:	f7fe fb0d 	bl	8005020 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a0a:	f7fe fb09 	bl	8005020 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e1a8      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a1c:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f0      	beq.n	8006a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a28:	4b28      	ldr	r3, [pc, #160]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4925      	ldr	r1, [pc, #148]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	600b      	str	r3, [r1, #0]
 8006a3c:	e015      	b.n	8006a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a3e:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <HAL_RCC_OscConfig+0x244>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fe faec 	bl	8005020 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a4c:	f7fe fae8 	bl	8005020 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e187      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a5e:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d036      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a7e:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <HAL_RCC_OscConfig+0x248>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a84:	f7fe facc 	bl	8005020 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a8c:	f7fe fac8 	bl	8005020 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e167      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <HAL_RCC_OscConfig+0x240>)
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x200>
 8006aaa:	e01b      	b.n	8006ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <HAL_RCC_OscConfig+0x248>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab2:	f7fe fab5 	bl	8005020 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab8:	e00e      	b.n	8006ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aba:	f7fe fab1 	bl	8005020 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d907      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e150      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	42470000 	.word	0x42470000
 8006ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad8:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ea      	bne.n	8006aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8097 	beq.w	8006c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af6:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10f      	bne.n	8006b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	4b7d      	ldr	r3, [pc, #500]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	4a7c      	ldr	r2, [pc, #496]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6413      	str	r3, [r2, #64]	; 0x40
 8006b12:	4b7a      	ldr	r3, [pc, #488]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b22:	4b77      	ldr	r3, [pc, #476]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d118      	bne.n	8006b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2e:	4b74      	ldr	r3, [pc, #464]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a73      	ldr	r2, [pc, #460]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3a:	f7fe fa71 	bl	8005020 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b42:	f7fe fa6d 	bl	8005020 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e10c      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b54:	4b6a      	ldr	r3, [pc, #424]	; (8006d00 <HAL_RCC_OscConfig+0x474>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <HAL_RCC_OscConfig+0x2ea>
 8006b68:	4b64      	ldr	r3, [pc, #400]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	4a63      	ldr	r2, [pc, #396]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	6713      	str	r3, [r2, #112]	; 0x70
 8006b74:	e01c      	b.n	8006bb0 <HAL_RCC_OscConfig+0x324>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0x30c>
 8006b7e:	4b5f      	ldr	r3, [pc, #380]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	4a5e      	ldr	r2, [pc, #376]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b84:	f043 0304 	orr.w	r3, r3, #4
 8006b88:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	4a5b      	ldr	r2, [pc, #364]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b90:	f043 0301 	orr.w	r3, r3, #1
 8006b94:	6713      	str	r3, [r2, #112]	; 0x70
 8006b96:	e00b      	b.n	8006bb0 <HAL_RCC_OscConfig+0x324>
 8006b98:	4b58      	ldr	r3, [pc, #352]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	4a57      	ldr	r2, [pc, #348]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba4:	4b55      	ldr	r3, [pc, #340]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba8:	4a54      	ldr	r2, [pc, #336]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006baa:	f023 0304 	bic.w	r3, r3, #4
 8006bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d015      	beq.n	8006be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb8:	f7fe fa32 	bl	8005020 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bbe:	e00a      	b.n	8006bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc0:	f7fe fa2e 	bl	8005020 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e0cb      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd6:	4b49      	ldr	r3, [pc, #292]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0ee      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x334>
 8006be2:	e014      	b.n	8006c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be4:	f7fe fa1c 	bl	8005020 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bea:	e00a      	b.n	8006c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bec:	f7fe fa18 	bl	8005020 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e0b5      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c02:	4b3e      	ldr	r3, [pc, #248]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1ee      	bne.n	8006bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d105      	bne.n	8006c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c14:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	4a38      	ldr	r2, [pc, #224]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80a1 	beq.w	8006d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c2a:	4b34      	ldr	r3, [pc, #208]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b08      	cmp	r3, #8
 8006c34:	d05c      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d141      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3e:	4b31      	ldr	r3, [pc, #196]	; (8006d04 <HAL_RCC_OscConfig+0x478>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c44:	f7fe f9ec 	bl	8005020 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c4c:	f7fe f9e8 	bl	8005020 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e087      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5e:	4b27      	ldr	r3, [pc, #156]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69da      	ldr	r2, [r3, #28]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	019b      	lsls	r3, r3, #6
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	3b01      	subs	r3, #1
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	061b      	lsls	r3, r3, #24
 8006c8e:	491b      	ldr	r1, [pc, #108]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c94:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <HAL_RCC_OscConfig+0x478>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9a:	f7fe f9c1 	bl	8005020 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca2:	f7fe f9bd 	bl	8005020 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e05c      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb4:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x416>
 8006cc0:	e054      	b.n	8006d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <HAL_RCC_OscConfig+0x478>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc8:	f7fe f9aa 	bl	8005020 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd0:	f7fe f9a6 	bl	8005020 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e045      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <HAL_RCC_OscConfig+0x470>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x444>
 8006cee:	e03d      	b.n	8006d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d107      	bne.n	8006d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e038      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	40007000 	.word	0x40007000
 8006d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <HAL_RCC_OscConfig+0x4ec>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d028      	beq.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d121      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d11a      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d38:	4013      	ands	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d111      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	3b01      	subs	r3, #1
 8006d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d107      	bne.n	8006d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40023800 	.word	0x40023800

08006d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0cc      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d90:	4b68      	ldr	r3, [pc, #416]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d90c      	bls.n	8006db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	4b65      	ldr	r3, [pc, #404]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da6:	4b63      	ldr	r3, [pc, #396]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0b8      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d020      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dd0:	4b59      	ldr	r3, [pc, #356]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	4a58      	ldr	r2, [pc, #352]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006de8:	4b53      	ldr	r3, [pc, #332]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4a52      	ldr	r2, [pc, #328]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df4:	4b50      	ldr	r3, [pc, #320]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	494d      	ldr	r1, [pc, #308]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d044      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d107      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	4b47      	ldr	r3, [pc, #284]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d119      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e07f      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d003      	beq.n	8006e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d107      	bne.n	8006e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e3a:	4b3f      	ldr	r3, [pc, #252]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e06f      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4a:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e067      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e5a:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f023 0203 	bic.w	r2, r3, #3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4934      	ldr	r1, [pc, #208]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e6c:	f7fe f8d8 	bl	8005020 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e72:	e00a      	b.n	8006e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e74:	f7fe f8d4 	bl	8005020 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e04f      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8a:	4b2b      	ldr	r3, [pc, #172]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 020c 	and.w	r2, r3, #12
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d1eb      	bne.n	8006e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e9c:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d20c      	bcs.n	8006ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eaa:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e032      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed0:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4916      	ldr	r1, [pc, #88]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	490e      	ldr	r1, [pc, #56]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f02:	f000 f821 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	091b      	lsrs	r3, r3, #4
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	490a      	ldr	r1, [pc, #40]	; (8006f3c <HAL_RCC_ClockConfig+0x1c0>)
 8006f14:	5ccb      	ldrb	r3, [r1, r3]
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <HAL_RCC_ClockConfig+0x1c8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe f838 	bl	8004f98 <HAL_InitTick>

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40023c00 	.word	0x40023c00
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	0800c90c 	.word	0x0800c90c
 8006f40:	20000004 	.word	0x20000004
 8006f44:	20000008 	.word	0x20000008

08006f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f4c:	b094      	sub	sp, #80	; 0x50
 8006f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	647b      	str	r3, [r7, #68]	; 0x44
 8006f54:	2300      	movs	r3, #0
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	2300      	movs	r3, #0
 8006f5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f60:	4b79      	ldr	r3, [pc, #484]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 030c 	and.w	r3, r3, #12
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d00d      	beq.n	8006f88 <HAL_RCC_GetSysClockFreq+0x40>
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	f200 80e1 	bhi.w	8007134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x34>
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d003      	beq.n	8006f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f7a:	e0db      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f7c:	4b73      	ldr	r3, [pc, #460]	; (800714c <HAL_RCC_GetSysClockFreq+0x204>)
 8006f7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f80:	e0db      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f82:	4b73      	ldr	r3, [pc, #460]	; (8007150 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f86:	e0d8      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f88:	4b6f      	ldr	r3, [pc, #444]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f92:	4b6d      	ldr	r3, [pc, #436]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d063      	beq.n	8007066 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f9e:	4b6a      	ldr	r3, [pc, #424]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fba:	4622      	mov	r2, r4
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	f04f 0000 	mov.w	r0, #0
 8006fc2:	f04f 0100 	mov.w	r1, #0
 8006fc6:	0159      	lsls	r1, r3, #5
 8006fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fcc:	0150      	lsls	r0, r2, #5
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	1a51      	subs	r1, r2, r1
 8006fd6:	6139      	str	r1, [r7, #16]
 8006fd8:	4629      	mov	r1, r5
 8006fda:	eb63 0301 	sbc.w	r3, r3, r1
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fec:	4659      	mov	r1, fp
 8006fee:	018b      	lsls	r3, r1, #6
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	018a      	lsls	r2, r1, #6
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8007000:	4659      	mov	r1, fp
 8007002:	eb63 0901 	sbc.w	r9, r3, r1
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800701a:	4690      	mov	r8, r2
 800701c:	4699      	mov	r9, r3
 800701e:	4623      	mov	r3, r4
 8007020:	eb18 0303 	adds.w	r3, r8, r3
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	462b      	mov	r3, r5
 8007028:	eb49 0303 	adc.w	r3, r9, r3
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800703a:	4629      	mov	r1, r5
 800703c:	024b      	lsls	r3, r1, #9
 800703e:	4621      	mov	r1, r4
 8007040:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007044:	4621      	mov	r1, r4
 8007046:	024a      	lsls	r2, r1, #9
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704e:	2200      	movs	r2, #0
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
 8007052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007058:	f7f9 fda6 	bl	8000ba8 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4613      	mov	r3, r2
 8007062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007064:	e058      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007066:	4b38      	ldr	r3, [pc, #224]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	099b      	lsrs	r3, r3, #6
 800706c:	2200      	movs	r2, #0
 800706e:	4618      	mov	r0, r3
 8007070:	4611      	mov	r1, r2
 8007072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007076:	623b      	str	r3, [r7, #32]
 8007078:	2300      	movs	r3, #0
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
 800707c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007080:	4642      	mov	r2, r8
 8007082:	464b      	mov	r3, r9
 8007084:	f04f 0000 	mov.w	r0, #0
 8007088:	f04f 0100 	mov.w	r1, #0
 800708c:	0159      	lsls	r1, r3, #5
 800708e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007092:	0150      	lsls	r0, r2, #5
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4641      	mov	r1, r8
 800709a:	ebb2 0a01 	subs.w	sl, r2, r1
 800709e:	4649      	mov	r1, r9
 80070a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070b8:	ebb2 040a 	subs.w	r4, r2, sl
 80070bc:	eb63 050b 	sbc.w	r5, r3, fp
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	00eb      	lsls	r3, r5, #3
 80070ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070ce:	00e2      	lsls	r2, r4, #3
 80070d0:	4614      	mov	r4, r2
 80070d2:	461d      	mov	r5, r3
 80070d4:	4643      	mov	r3, r8
 80070d6:	18e3      	adds	r3, r4, r3
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	464b      	mov	r3, r9
 80070dc:	eb45 0303 	adc.w	r3, r5, r3
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070ee:	4629      	mov	r1, r5
 80070f0:	028b      	lsls	r3, r1, #10
 80070f2:	4621      	mov	r1, r4
 80070f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070f8:	4621      	mov	r1, r4
 80070fa:	028a      	lsls	r2, r1, #10
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007102:	2200      	movs	r2, #0
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	61fa      	str	r2, [r7, #28]
 8007108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800710c:	f7f9 fd4c 	bl	8000ba8 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4613      	mov	r3, r2
 8007116:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_GetSysClockFreq+0x200>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	3301      	adds	r3, #1
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800712a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007132:	e002      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RCC_GetSysClockFreq+0x204>)
 8007136:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800713a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800713c:	4618      	mov	r0, r3
 800713e:	3750      	adds	r7, #80	; 0x50
 8007140:	46bd      	mov	sp, r7
 8007142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800
 800714c:	00f42400 	.word	0x00f42400
 8007150:	007a1200 	.word	0x007a1200

08007154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007158:	4b03      	ldr	r3, [pc, #12]	; (8007168 <HAL_RCC_GetHCLKFreq+0x14>)
 800715a:	681b      	ldr	r3, [r3, #0]
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000004 	.word	0x20000004

0800716c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007170:	f7ff fff0 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 8007174:	4602      	mov	r2, r0
 8007176:	4b05      	ldr	r3, [pc, #20]	; (800718c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	0a9b      	lsrs	r3, r3, #10
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	4903      	ldr	r1, [pc, #12]	; (8007190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007182:	5ccb      	ldrb	r3, [r1, r3]
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40023800 	.word	0x40023800
 8007190:	0800c91c 	.word	0x0800c91c

08007194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007198:	f7ff ffdc 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	0b5b      	lsrs	r3, r3, #13
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4903      	ldr	r1, [pc, #12]	; (80071b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40023800 	.word	0x40023800
 80071b8:	0800c91c 	.word	0x0800c91c

080071bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e03f      	b.n	800724e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fd fe3c 	bl	8004e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc7b 	bl	8007afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0ba      	sub	sp, #232	; 0xe8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800727e:	2300      	movs	r3, #0
 8007280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007284:	2300      	movs	r3, #0
 8007286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10f      	bne.n	80072be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <HAL_UART_IRQHandler+0x66>
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fb65 	bl	8007986 <UART_Receive_IT>
      return;
 80072bc:	e256      	b.n	800776c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80de 	beq.w	8007484 <HAL_UART_IRQHandler+0x22c>
 80072c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d106      	bne.n	80072e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80d1 	beq.w	8007484 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <HAL_UART_IRQHandler+0xae>
 80072ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f043 0201 	orr.w	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00b      	beq.n	800732a <HAL_UART_IRQHandler+0xd2>
 8007312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f043 0202 	orr.w	r2, r3, #2
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800732a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <HAL_UART_IRQHandler+0xf6>
 8007336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f043 0204 	orr.w	r2, r3, #4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d011      	beq.n	800737e <HAL_UART_IRQHandler+0x126>
 800735a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b00      	cmp	r3, #0
 8007364:	d105      	bne.n	8007372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f043 0208 	orr.w	r2, r3, #8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 81ed 	beq.w	8007762 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_UART_IRQHandler+0x14e>
 8007394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 faf0 	bl	8007986 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	bf0c      	ite	eq
 80073b4:	2301      	moveq	r3, #1
 80073b6:	2300      	movne	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <HAL_UART_IRQHandler+0x17a>
 80073ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d04f      	beq.n	8007472 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f9f8 	bl	80077c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d141      	bne.n	800746a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3314      	adds	r3, #20
 80073ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3314      	adds	r3, #20
 800740e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007412:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800741e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800742a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1d9      	bne.n	80073e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	2b00      	cmp	r3, #0
 8007438:	d013      	beq.n	8007462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743e:	4a7d      	ldr	r2, [pc, #500]	; (8007634 <HAL_UART_IRQHandler+0x3dc>)
 8007440:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fcb4 	bl	8005db4 <HAL_DMA_Abort_IT>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d016      	beq.n	8007480 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007460:	e00e      	b.n	8007480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f99a 	bl	800779c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007468:	e00a      	b.n	8007480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f996 	bl	800779c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007470:	e006      	b.n	8007480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f992 	bl	800779c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800747e:	e170      	b.n	8007762 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007480:	bf00      	nop
    return;
 8007482:	e16e      	b.n	8007762 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	2b01      	cmp	r3, #1
 800748a:	f040 814a 	bne.w	8007722 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800748e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 8143 	beq.w	8007722 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800749c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 813c 	beq.w	8007722 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	f040 80b4 	bne.w	8007638 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8140 	beq.w	8007766 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ee:	429a      	cmp	r2, r3
 80074f0:	f080 8139 	bcs.w	8007766 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007506:	f000 8088 	beq.w	800761a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	330c      	adds	r3, #12
 8007510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800753a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007542:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800754e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1d9      	bne.n	800750a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3314      	adds	r3, #20
 800755c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800757a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800757e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007582:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800758c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e1      	bne.n	8007556 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3314      	adds	r3, #20
 8007598:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e3      	bne.n	8007592 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ea:	f023 0310 	bic.w	r3, r3, #16
 80075ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80075fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800760a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e3      	bne.n	80075d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fb5d 	bl	8005cd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007622:	b29b      	uxth	r3, r3
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	b29b      	uxth	r3, r3
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f8c0 	bl	80077b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007630:	e099      	b.n	8007766 <HAL_UART_IRQHandler+0x50e>
 8007632:	bf00      	nop
 8007634:	0800788f 	.word	0x0800788f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007640:	b29b      	uxth	r3, r3
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 808b 	beq.w	800776a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8086 	beq.w	800776a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007682:	647a      	str	r2, [r7, #68]	; 0x44
 8007684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e3      	bne.n	800765e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3314      	adds	r3, #20
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	623b      	str	r3, [r7, #32]
   return(result);
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3314      	adds	r3, #20
 80076b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076ba:	633a      	str	r2, [r7, #48]	; 0x30
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e3      	bne.n	8007696 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0310 	bic.w	r3, r3, #16
 80076f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	330c      	adds	r3, #12
 80076fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007700:	61fa      	str	r2, [r7, #28]
 8007702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	69b9      	ldr	r1, [r7, #24]
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	617b      	str	r3, [r7, #20]
   return(result);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e3      	bne.n	80076dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f848 	bl	80077b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007720:	e023      	b.n	800776a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <HAL_UART_IRQHandler+0x4ea>
 800772e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8bb 	bl	80078b6 <UART_Transmit_IT>
    return;
 8007740:	e014      	b.n	800776c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00e      	beq.n	800776c <HAL_UART_IRQHandler+0x514>
 800774e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f8fb 	bl	8007956 <UART_EndTransmit_IT>
    return;
 8007760:	e004      	b.n	800776c <HAL_UART_IRQHandler+0x514>
    return;
 8007762:	bf00      	nop
 8007764:	e002      	b.n	800776c <HAL_UART_IRQHandler+0x514>
      return;
 8007766:	bf00      	nop
 8007768:	e000      	b.n	800776c <HAL_UART_IRQHandler+0x514>
      return;
 800776a:	bf00      	nop
  }
}
 800776c:	37e8      	adds	r7, #232	; 0xe8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop

08007774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b095      	sub	sp, #84	; 0x54
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077f0:	643a      	str	r2, [r7, #64]	; 0x40
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	61fb      	str	r3, [r7, #28]
   return(result);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	64bb      	str	r3, [r7, #72]	; 0x48
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800782a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	2b01      	cmp	r3, #1
 800783e:	d119      	bne.n	8007874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0310 	bic.w	r3, r3, #16
 8007856:	647b      	str	r3, [r7, #68]	; 0x44
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007860:	61ba      	str	r2, [r7, #24]
 8007862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6979      	ldr	r1, [r7, #20]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007882:	bf00      	nop
 8007884:	3754      	adds	r7, #84	; 0x54
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff ff77 	bl	800779c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b21      	cmp	r3, #33	; 0x21
 80078c8:	d13e      	bne.n	8007948 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d2:	d114      	bne.n	80078fe <UART_Transmit_IT+0x48>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d110      	bne.n	80078fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	1c9a      	adds	r2, r3, #2
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	621a      	str	r2, [r3, #32]
 80078fc:	e008      	b.n	8007910 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	1c59      	adds	r1, r3, #1
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6211      	str	r1, [r2, #32]
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29b      	uxth	r3, r3
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4619      	mov	r1, r3
 800791e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10f      	bne.n	8007944 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007932:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007942:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007948:	2302      	movs	r3, #2
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fefc 	bl	8007774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b08c      	sub	sp, #48	; 0x30
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b22      	cmp	r3, #34	; 0x22
 8007998:	f040 80ab 	bne.w	8007af2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d117      	bne.n	80079d6 <UART_Receive_IT+0x50>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d113      	bne.n	80079d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	1c9a      	adds	r2, r3, #2
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28
 80079d4:	e026      	b.n	8007a24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e8:	d007      	beq.n	80079fa <UART_Receive_IT+0x74>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <UART_Receive_IT+0x82>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e008      	b.n	8007a1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4619      	mov	r1, r3
 8007a32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d15a      	bne.n	8007aee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0220 	bic.w	r2, r2, #32
 8007a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d135      	bne.n	8007ae4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f023 0310 	bic.w	r3, r3, #16
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	623a      	str	r2, [r7, #32]
 8007aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	69f9      	ldr	r1, [r7, #28]
 8007aa4:	6a3a      	ldr	r2, [r7, #32]
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e5      	bne.n	8007a7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d10a      	bne.n	8007ad6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fe67 	bl	80077b0 <HAL_UARTEx_RxEventCallback>
 8007ae2:	e002      	b.n	8007aea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fe4f 	bl	8007788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e002      	b.n	8007af4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e000      	b.n	8007af4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007af2:	2302      	movs	r3, #2
  }
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3730      	adds	r7, #48	; 0x30
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b00:	b0c0      	sub	sp, #256	; 0x100
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b18:	68d9      	ldr	r1, [r3, #12]
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	ea40 0301 	orr.w	r3, r0, r1
 8007b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b54:	f021 010c 	bic.w	r1, r1, #12
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b62:	430b      	orrs	r3, r1
 8007b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b76:	6999      	ldr	r1, [r3, #24]
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	ea40 0301 	orr.w	r3, r0, r1
 8007b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b8f      	ldr	r3, [pc, #572]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d005      	beq.n	8007b9c <UART_SetConfig+0xa0>
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b8d      	ldr	r3, [pc, #564]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d104      	bne.n	8007ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b9c:	f7ff fafa 	bl	8007194 <HAL_RCC_GetPCLK2Freq>
 8007ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ba4:	e003      	b.n	8007bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ba6:	f7ff fae1 	bl	800716c <HAL_RCC_GetPCLK1Freq>
 8007baa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb8:	f040 810c 	bne.w	8007dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bce:	4622      	mov	r2, r4
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	1891      	adds	r1, r2, r2
 8007bd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bd6:	415b      	adcs	r3, r3
 8007bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bde:	4621      	mov	r1, r4
 8007be0:	eb12 0801 	adds.w	r8, r2, r1
 8007be4:	4629      	mov	r1, r5
 8007be6:	eb43 0901 	adc.w	r9, r3, r1
 8007bea:	f04f 0200 	mov.w	r2, #0
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bfe:	4690      	mov	r8, r2
 8007c00:	4699      	mov	r9, r3
 8007c02:	4623      	mov	r3, r4
 8007c04:	eb18 0303 	adds.w	r3, r8, r3
 8007c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	eb49 0303 	adc.w	r3, r9, r3
 8007c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	18db      	adds	r3, r3, r3
 8007c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c30:	4613      	mov	r3, r2
 8007c32:	eb42 0303 	adc.w	r3, r2, r3
 8007c36:	657b      	str	r3, [r7, #84]	; 0x54
 8007c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c40:	f7f8 ffb2 	bl	8000ba8 <__aeabi_uldivmod>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4b61      	ldr	r3, [pc, #388]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	011c      	lsls	r4, r3, #4
 8007c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	1891      	adds	r1, r2, r2
 8007c6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c6c:	415b      	adcs	r3, r3
 8007c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c74:	4641      	mov	r1, r8
 8007c76:	eb12 0a01 	adds.w	sl, r2, r1
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c94:	4692      	mov	sl, r2
 8007c96:	469b      	mov	fp, r3
 8007c98:	4643      	mov	r3, r8
 8007c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	18db      	adds	r3, r3, r3
 8007cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	eb42 0303 	adc.w	r3, r2, r3
 8007ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cd6:	f7f8 ff67 	bl	8000ba8 <__aeabi_uldivmod>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	4b3b      	ldr	r3, [pc, #236]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	2264      	movs	r2, #100	; 0x64
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	1acb      	subs	r3, r1, r3
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cf6:	4b36      	ldr	r3, [pc, #216]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d04:	441c      	add	r4, r3
 8007d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	1891      	adds	r1, r2, r2
 8007d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d20:	415b      	adcs	r3, r3
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d28:	4641      	mov	r1, r8
 8007d2a:	1851      	adds	r1, r2, r1
 8007d2c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d2e:	4649      	mov	r1, r9
 8007d30:	414b      	adcs	r3, r1
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d40:	4659      	mov	r1, fp
 8007d42:	00cb      	lsls	r3, r1, #3
 8007d44:	4651      	mov	r1, sl
 8007d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4a:	4651      	mov	r1, sl
 8007d4c:	00ca      	lsls	r2, r1, #3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	4642      	mov	r2, r8
 8007d56:	189b      	adds	r3, r3, r2
 8007d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	460a      	mov	r2, r1
 8007d60:	eb42 0303 	adc.w	r3, r2, r3
 8007d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	18db      	adds	r3, r3, r3
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d82:	4613      	mov	r3, r2
 8007d84:	eb42 0303 	adc.w	r3, r2, r3
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d92:	f7f8 ff09 	bl	8000ba8 <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	2164      	movs	r1, #100	; 0x64
 8007da4:	fb01 f303 	mul.w	r3, r1, r3
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	3332      	adds	r3, #50	; 0x32
 8007dae:	4a08      	ldr	r2, [pc, #32]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007db0:	fba2 2303 	umull	r2, r3, r2, r3
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	f003 0207 	and.w	r2, r3, #7
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4422      	add	r2, r4
 8007dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dc4:	e105      	b.n	8007fd2 <UART_SetConfig+0x4d6>
 8007dc6:	bf00      	nop
 8007dc8:	40011000 	.word	0x40011000
 8007dcc:	40011400 	.word	0x40011400
 8007dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007de6:	4642      	mov	r2, r8
 8007de8:	464b      	mov	r3, r9
 8007dea:	1891      	adds	r1, r2, r2
 8007dec:	6239      	str	r1, [r7, #32]
 8007dee:	415b      	adcs	r3, r3
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
 8007df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007df6:	4641      	mov	r1, r8
 8007df8:	1854      	adds	r4, r2, r1
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	eb43 0501 	adc.w	r5, r3, r1
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	00eb      	lsls	r3, r5, #3
 8007e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e0e:	00e2      	lsls	r2, r4, #3
 8007e10:	4614      	mov	r4, r2
 8007e12:	461d      	mov	r5, r3
 8007e14:	4643      	mov	r3, r8
 8007e16:	18e3      	adds	r3, r4, r3
 8007e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	eb45 0303 	adc.w	r3, r5, r3
 8007e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e42:	4629      	mov	r1, r5
 8007e44:	008b      	lsls	r3, r1, #2
 8007e46:	4621      	mov	r1, r4
 8007e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	008a      	lsls	r2, r1, #2
 8007e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e54:	f7f8 fea8 	bl	8000ba8 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4b60      	ldr	r3, [pc, #384]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	011c      	lsls	r4, r3, #4
 8007e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	1891      	adds	r1, r2, r2
 8007e7e:	61b9      	str	r1, [r7, #24]
 8007e80:	415b      	adcs	r3, r3
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e88:	4641      	mov	r1, r8
 8007e8a:	1851      	adds	r1, r2, r1
 8007e8c:	6139      	str	r1, [r7, #16]
 8007e8e:	4649      	mov	r1, r9
 8007e90:	414b      	adcs	r3, r1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ea0:	4659      	mov	r1, fp
 8007ea2:	00cb      	lsls	r3, r1, #3
 8007ea4:	4651      	mov	r1, sl
 8007ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eaa:	4651      	mov	r1, sl
 8007eac:	00ca      	lsls	r2, r1, #3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	189b      	adds	r3, r3, r2
 8007eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ebc:	464b      	mov	r3, r9
 8007ebe:	460a      	mov	r2, r1
 8007ec0:	eb42 0303 	adc.w	r3, r2, r3
 8007ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ed2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	008b      	lsls	r3, r1, #2
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eea:	4641      	mov	r1, r8
 8007eec:	008a      	lsls	r2, r1, #2
 8007eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ef2:	f7f8 fe59 	bl	8000ba8 <__aeabi_uldivmod>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4b39      	ldr	r3, [pc, #228]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007efc:	fba3 1302 	umull	r1, r3, r3, r2
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	2164      	movs	r1, #100	; 0x64
 8007f04:	fb01 f303 	mul.w	r3, r1, r3
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	3332      	adds	r3, #50	; 0x32
 8007f0e:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f1a:	441c      	add	r4, r3
 8007f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f20:	2200      	movs	r2, #0
 8007f22:	673b      	str	r3, [r7, #112]	; 0x70
 8007f24:	677a      	str	r2, [r7, #116]	; 0x74
 8007f26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	1891      	adds	r1, r2, r2
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	415b      	adcs	r3, r3
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f3a:	4641      	mov	r1, r8
 8007f3c:	1851      	adds	r1, r2, r1
 8007f3e:	6039      	str	r1, [r7, #0]
 8007f40:	4649      	mov	r1, r9
 8007f42:	414b      	adcs	r3, r1
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f52:	4659      	mov	r1, fp
 8007f54:	00cb      	lsls	r3, r1, #3
 8007f56:	4651      	mov	r1, sl
 8007f58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	00ca      	lsls	r2, r1, #3
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	4603      	mov	r3, r0
 8007f66:	4642      	mov	r2, r8
 8007f68:	189b      	adds	r3, r3, r2
 8007f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	460a      	mov	r2, r1
 8007f70:	eb42 0303 	adc.w	r3, r2, r3
 8007f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f80:	667a      	str	r2, [r7, #100]	; 0x64
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	f04f 0300 	mov.w	r3, #0
 8007f8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f8e:	4649      	mov	r1, r9
 8007f90:	008b      	lsls	r3, r1, #2
 8007f92:	4641      	mov	r1, r8
 8007f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f98:	4641      	mov	r1, r8
 8007f9a:	008a      	lsls	r2, r1, #2
 8007f9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fa0:	f7f8 fe02 	bl	8000ba8 <__aeabi_uldivmod>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007faa:	fba3 1302 	umull	r1, r3, r3, r2
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	2164      	movs	r1, #100	; 0x64
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	3332      	adds	r3, #50	; 0x32
 8007fbc:	4a08      	ldr	r2, [pc, #32]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4422      	add	r2, r4
 8007fd0:	609a      	str	r2, [r3, #8]
}
 8007fd2:	bf00      	nop
 8007fd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fde:	bf00      	nop
 8007fe0:	51eb851f 	.word	0x51eb851f

08007fe4 <LL_GPIO_SetPinMode>:
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b089      	sub	sp, #36	; 0x24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	fa93 f3a3 	rbit	r3, r3
 8007ffe:	613b      	str	r3, [r7, #16]
  return result;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	fab3 f383 	clz	r3, r3
 8008006:	b2db      	uxtb	r3, r3
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	2103      	movs	r1, #3
 800800c:	fa01 f303 	lsl.w	r3, r1, r3
 8008010:	43db      	mvns	r3, r3
 8008012:	401a      	ands	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	fa93 f3a3 	rbit	r3, r3
 800801e:	61bb      	str	r3, [r7, #24]
  return result;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	fab3 f383 	clz	r3, r3
 8008026:	b2db      	uxtb	r3, r3
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	fa01 f303 	lsl.w	r3, r1, r3
 8008030:	431a      	orrs	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]
}
 8008036:	bf00      	nop
 8008038:	3724      	adds	r7, #36	; 0x24
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <LL_GPIO_SetPinOutputType>:
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	43db      	mvns	r3, r3
 8008056:	401a      	ands	r2, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	fb01 f303 	mul.w	r3, r1, r3
 8008060:	431a      	orrs	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	605a      	str	r2, [r3, #4]
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <LL_GPIO_SetPinSpeed>:
{
 8008072:	b480      	push	{r7}
 8008074:	b089      	sub	sp, #36	; 0x24
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	fa93 f3a3 	rbit	r3, r3
 800808c:	613b      	str	r3, [r7, #16]
  return result;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	fab3 f383 	clz	r3, r3
 8008094:	b2db      	uxtb	r3, r3
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	2103      	movs	r1, #3
 800809a:	fa01 f303 	lsl.w	r3, r1, r3
 800809e:	43db      	mvns	r3, r3
 80080a0:	401a      	ands	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	fa93 f3a3 	rbit	r3, r3
 80080ac:	61bb      	str	r3, [r7, #24]
  return result;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	fab3 f383 	clz	r3, r3
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	fa01 f303 	lsl.w	r3, r1, r3
 80080be:	431a      	orrs	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	609a      	str	r2, [r3, #8]
}
 80080c4:	bf00      	nop
 80080c6:	3724      	adds	r7, #36	; 0x24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <LL_GPIO_SetPinPull>:
{
 80080d0:	b480      	push	{r7}
 80080d2:	b089      	sub	sp, #36	; 0x24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	fa93 f3a3 	rbit	r3, r3
 80080ea:	613b      	str	r3, [r7, #16]
  return result;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	fab3 f383 	clz	r3, r3
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	2103      	movs	r1, #3
 80080f8:	fa01 f303 	lsl.w	r3, r1, r3
 80080fc:	43db      	mvns	r3, r3
 80080fe:	401a      	ands	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	fa93 f3a3 	rbit	r3, r3
 800810a:	61bb      	str	r3, [r7, #24]
  return result;
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	fab3 f383 	clz	r3, r3
 8008112:	b2db      	uxtb	r3, r3
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	fa01 f303 	lsl.w	r3, r1, r3
 800811c:	431a      	orrs	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	60da      	str	r2, [r3, #12]
}
 8008122:	bf00      	nop
 8008124:	3724      	adds	r7, #36	; 0x24
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <LL_GPIO_SetAFPin_0_7>:
{
 800812e:	b480      	push	{r7}
 8008130:	b089      	sub	sp, #36	; 0x24
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a1a      	ldr	r2, [r3, #32]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	fa93 f3a3 	rbit	r3, r3
 8008148:	613b      	str	r3, [r7, #16]
  return result;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	fab3 f383 	clz	r3, r3
 8008150:	b2db      	uxtb	r3, r3
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	210f      	movs	r1, #15
 8008156:	fa01 f303 	lsl.w	r3, r1, r3
 800815a:	43db      	mvns	r3, r3
 800815c:	401a      	ands	r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	fa93 f3a3 	rbit	r3, r3
 8008168:	61bb      	str	r3, [r7, #24]
  return result;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	fab3 f383 	clz	r3, r3
 8008170:	b2db      	uxtb	r3, r3
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	431a      	orrs	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	621a      	str	r2, [r3, #32]
}
 8008180:	bf00      	nop
 8008182:	3724      	adds	r7, #36	; 0x24
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <LL_GPIO_SetAFPin_8_15>:
{
 800818c:	b480      	push	{r7}
 800818e:	b089      	sub	sp, #36	; 0x24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	fa93 f3a3 	rbit	r3, r3
 80081a8:	613b      	str	r3, [r7, #16]
  return result;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	fab3 f383 	clz	r3, r3
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	210f      	movs	r1, #15
 80081b6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ba:	43db      	mvns	r3, r3
 80081bc:	401a      	ands	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	0a1b      	lsrs	r3, r3, #8
 80081c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	fa93 f3a3 	rbit	r3, r3
 80081ca:	61bb      	str	r3, [r7, #24]
  return result;
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	fab3 f383 	clz	r3, r3
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	fa01 f303 	lsl.w	r3, r1, r3
 80081dc:	431a      	orrs	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80081e2:	bf00      	nop
 80081e4:	3724      	adds	r7, #36	; 0x24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b088      	sub	sp, #32
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	fa93 f3a3 	rbit	r3, r3
 800820c:	613b      	str	r3, [r7, #16]
  return result;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	fab3 f383 	clz	r3, r3
 8008214:	b2db      	uxtb	r3, r3
 8008216:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008218:	e050      	b.n	80082bc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	2101      	movs	r1, #1
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	fa01 f303 	lsl.w	r3, r1, r3
 8008226:	4013      	ands	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d042      	beq.n	80082b6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d003      	beq.n	8008240 <LL_GPIO_Init+0x52>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d10d      	bne.n	800825c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	461a      	mov	r2, r3
 8008246:	69b9      	ldr	r1, [r7, #24]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff ff12 	bl	8008072 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	461a      	mov	r2, r3
 8008254:	69b9      	ldr	r1, [r7, #24]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff fef3 	bl	8008042 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	461a      	mov	r2, r3
 8008262:	69b9      	ldr	r1, [r7, #24]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ff33 	bl	80080d0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d11a      	bne.n	80082a8 <LL_GPIO_Init+0xba>
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	fa93 f3a3 	rbit	r3, r3
 800827c:	60bb      	str	r3, [r7, #8]
  return result;
 800827e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008280:	fab3 f383 	clz	r3, r3
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b07      	cmp	r3, #7
 8008288:	d807      	bhi.n	800829a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	461a      	mov	r2, r3
 8008290:	69b9      	ldr	r1, [r7, #24]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff ff4b 	bl	800812e <LL_GPIO_SetAFPin_0_7>
 8008298:	e006      	b.n	80082a8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	461a      	mov	r2, r3
 80082a0:	69b9      	ldr	r1, [r7, #24]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7ff ff72 	bl	800818c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	461a      	mov	r2, r3
 80082ae:	69b9      	ldr	r1, [r7, #24]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff fe97 	bl	8007fe4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	3301      	adds	r3, #1
 80082ba:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	fa22 f303 	lsr.w	r3, r2, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1a7      	bne.n	800821a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80082d8:	4b04      	ldr	r3, [pc, #16]	; (80082ec <LL_RCC_GetSysClkSource+0x18>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 030c 	and.w	r3, r3, #12
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40023800 	.word	0x40023800

080082f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <LL_RCC_GetAHBPrescaler+0x18>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40023800 	.word	0x40023800

0800830c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <LL_RCC_GetAPB1Prescaler+0x18>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8008318:	4618      	mov	r0, r3
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40023800 	.word	0x40023800

08008328 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800832c:	4b04      	ldr	r3, [pc, #16]	; (8008340 <LL_RCC_GetAPB2Prescaler+0x18>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8008334:	4618      	mov	r0, r3
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	40023800 	.word	0x40023800

08008344 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <LL_RCC_PLL_GetMainSource+0x18>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8008350:	4618      	mov	r0, r3
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40023800 	.word	0x40023800

08008360 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008364:	4b04      	ldr	r3, [pc, #16]	; (8008378 <LL_RCC_PLL_GetN+0x18>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	099b      	lsrs	r3, r3, #6
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800836e:	4618      	mov	r0, r3
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	40023800 	.word	0x40023800

0800837c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8008380:	4b04      	ldr	r3, [pc, #16]	; (8008394 <LL_RCC_PLL_GetP+0x18>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008388:	4618      	mov	r0, r3
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800

08008398 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <LL_RCC_PLL_GetDivider+0x18>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40023800 	.word	0x40023800

080083b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80083bc:	f000 f820 	bl	8008400 <RCC_GetSystemClockFreq>
 80083c0:	4602      	mov	r2, r0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f840 	bl	8008450 <RCC_GetHCLKClockFreq>
 80083d0:	4602      	mov	r2, r0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f84e 	bl	800847c <RCC_GetPCLK1ClockFreq>
 80083e0:	4602      	mov	r2, r0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f85a 	bl	80084a4 <RCC_GetPCLK2ClockFreq>
 80083f0:	4602      	mov	r2, r0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	60da      	str	r2, [r3, #12]
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800840a:	f7ff ff63 	bl	80082d4 <LL_RCC_GetSysClkSource>
 800840e:	4603      	mov	r3, r0
 8008410:	2b08      	cmp	r3, #8
 8008412:	d00c      	beq.n	800842e <RCC_GetSystemClockFreq+0x2e>
 8008414:	2b08      	cmp	r3, #8
 8008416:	d80f      	bhi.n	8008438 <RCC_GetSystemClockFreq+0x38>
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <RCC_GetSystemClockFreq+0x22>
 800841c:	2b04      	cmp	r3, #4
 800841e:	d003      	beq.n	8008428 <RCC_GetSystemClockFreq+0x28>
 8008420:	e00a      	b.n	8008438 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8008422:	4b09      	ldr	r3, [pc, #36]	; (8008448 <RCC_GetSystemClockFreq+0x48>)
 8008424:	607b      	str	r3, [r7, #4]
      break;
 8008426:	e00a      	b.n	800843e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8008428:	4b08      	ldr	r3, [pc, #32]	; (800844c <RCC_GetSystemClockFreq+0x4c>)
 800842a:	607b      	str	r3, [r7, #4]
      break;
 800842c:	e007      	b.n	800843e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800842e:	2008      	movs	r0, #8
 8008430:	f000 f84c 	bl	80084cc <RCC_PLL_GetFreqDomain_SYS>
 8008434:	6078      	str	r0, [r7, #4]
      break;
 8008436:	e002      	b.n	800843e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8008438:	4b03      	ldr	r3, [pc, #12]	; (8008448 <RCC_GetSystemClockFreq+0x48>)
 800843a:	607b      	str	r3, [r7, #4]
      break;
 800843c:	bf00      	nop
  }

  return frequency;
 800843e:	687b      	ldr	r3, [r7, #4]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	00f42400 	.word	0x00f42400
 800844c:	007a1200 	.word	0x007a1200

08008450 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008458:	f7ff ff4a 	bl	80082f0 <LL_RCC_GetAHBPrescaler>
 800845c:	4603      	mov	r3, r0
 800845e:	091b      	lsrs	r3, r3, #4
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	4a04      	ldr	r2, [pc, #16]	; (8008478 <RCC_GetHCLKClockFreq+0x28>)
 8008466:	5cd3      	ldrb	r3, [r2, r3]
 8008468:	461a      	mov	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	40d3      	lsrs	r3, r2
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	0800c90c 	.word	0x0800c90c

0800847c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008484:	f7ff ff42 	bl	800830c <LL_RCC_GetAPB1Prescaler>
 8008488:	4603      	mov	r3, r0
 800848a:	0a9b      	lsrs	r3, r3, #10
 800848c:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800848e:	5cd3      	ldrb	r3, [r2, r3]
 8008490:	461a      	mov	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	40d3      	lsrs	r3, r2
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	0800c91c 	.word	0x0800c91c

080084a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80084ac:	f7ff ff3c 	bl	8008328 <LL_RCC_GetAPB2Prescaler>
 80084b0:	4603      	mov	r3, r0
 80084b2:	0b5b      	lsrs	r3, r3, #13
 80084b4:	4a04      	ldr	r2, [pc, #16]	; (80084c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80084b6:	5cd3      	ldrb	r3, [r2, r3]
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	40d3      	lsrs	r3, r2
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	0800c91c 	.word	0x0800c91c

080084cc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	2300      	movs	r3, #0
 80084de:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80084e0:	f7ff ff30 	bl	8008344 <LL_RCC_PLL_GetMainSource>
 80084e4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d004      	beq.n	80084f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f2:	d003      	beq.n	80084fc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80084f4:	e005      	b.n	8008502 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80084f8:	617b      	str	r3, [r7, #20]
      break;
 80084fa:	e005      	b.n	8008508 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80084fe:	617b      	str	r3, [r7, #20]
      break;
 8008500:	e002      	b.n	8008508 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8008502:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8008504:	617b      	str	r3, [r7, #20]
      break;
 8008506:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b08      	cmp	r3, #8
 800850c:	d113      	bne.n	8008536 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800850e:	f7ff ff43 	bl	8008398 <LL_RCC_PLL_GetDivider>
 8008512:	4602      	mov	r2, r0
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	fbb3 f4f2 	udiv	r4, r3, r2
 800851a:	f7ff ff21 	bl	8008360 <LL_RCC_PLL_GetN>
 800851e:	4603      	mov	r3, r0
 8008520:	fb03 f404 	mul.w	r4, r3, r4
 8008524:	f7ff ff2a 	bl	800837c <LL_RCC_PLL_GetP>
 8008528:	4603      	mov	r3, r0
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	3301      	adds	r3, #1
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	fbb4 f3f3 	udiv	r3, r4, r3
 8008534:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8008536:	693b      	ldr	r3, [r7, #16]
}
 8008538:	4618      	mov	r0, r3
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	bd90      	pop	{r4, r7, pc}
 8008540:	00f42400 	.word	0x00f42400
 8008544:	007a1200 	.word	0x007a1200

08008548 <LL_SPI_IsEnabled>:
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d101      	bne.n	8008560 <LL_SPI_IsEnabled+0x18>
 800855c:	2301      	movs	r3, #1
 800855e:	e000      	b.n	8008562 <LL_SPI_IsEnabled+0x1a>
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <LL_SPI_SetCRCPolynomial>:
{
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	611a      	str	r2, [r3, #16]
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff ffd3 	bl	8008548 <LL_SPI_IsEnabled>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d139      	bne.n	800861c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085b0:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	6811      	ldr	r1, [r2, #0]
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	6852      	ldr	r2, [r2, #4]
 80085bc:	4311      	orrs	r1, r2
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	6892      	ldr	r2, [r2, #8]
 80085c2:	4311      	orrs	r1, r2
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	68d2      	ldr	r2, [r2, #12]
 80085c8:	4311      	orrs	r1, r2
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	6912      	ldr	r2, [r2, #16]
 80085ce:	4311      	orrs	r1, r2
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	6952      	ldr	r2, [r2, #20]
 80085d4:	4311      	orrs	r1, r2
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	6992      	ldr	r2, [r2, #24]
 80085da:	4311      	orrs	r1, r2
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	69d2      	ldr	r2, [r2, #28]
 80085e0:	4311      	orrs	r1, r2
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	6a12      	ldr	r2, [r2, #32]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f023 0204 	bic.w	r2, r3, #4
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	0c1b      	lsrs	r3, r3, #16
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860a:	d105      	bne.n	8008618 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff ffab 	bl	800856e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	61da      	str	r2, [r3, #28]
  return status;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <LL_TIM_SetPrescaler>:
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <LL_TIM_SetAutoReload>:
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <LL_TIM_SetRepetitionCounter>:
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	631a      	str	r2, [r3, #48]	; 0x30
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <LL_TIM_OC_SetCompareCH1>:
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <LL_TIM_OC_SetCompareCH2>:
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <LL_TIM_OC_SetCompareCH3>:
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <LL_TIM_OC_SetCompareCH4>:
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f043 0201 	orr.w	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	615a      	str	r2, [r3, #20]
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
	...

08008718 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a3d      	ldr	r2, [pc, #244]	; (8008820 <LL_TIM_Init+0x108>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d013      	beq.n	8008758 <LL_TIM_Init+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008736:	d00f      	beq.n	8008758 <LL_TIM_Init+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a3a      	ldr	r2, [pc, #232]	; (8008824 <LL_TIM_Init+0x10c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00b      	beq.n	8008758 <LL_TIM_Init+0x40>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a39      	ldr	r2, [pc, #228]	; (8008828 <LL_TIM_Init+0x110>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d007      	beq.n	8008758 <LL_TIM_Init+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a38      	ldr	r2, [pc, #224]	; (800882c <LL_TIM_Init+0x114>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d003      	beq.n	8008758 <LL_TIM_Init+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a37      	ldr	r2, [pc, #220]	; (8008830 <LL_TIM_Init+0x118>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d106      	bne.n	8008766 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a2d      	ldr	r2, [pc, #180]	; (8008820 <LL_TIM_Init+0x108>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d02b      	beq.n	80087c6 <LL_TIM_Init+0xae>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008774:	d027      	beq.n	80087c6 <LL_TIM_Init+0xae>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2a      	ldr	r2, [pc, #168]	; (8008824 <LL_TIM_Init+0x10c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d023      	beq.n	80087c6 <LL_TIM_Init+0xae>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a29      	ldr	r2, [pc, #164]	; (8008828 <LL_TIM_Init+0x110>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d01f      	beq.n	80087c6 <LL_TIM_Init+0xae>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a28      	ldr	r2, [pc, #160]	; (800882c <LL_TIM_Init+0x114>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d01b      	beq.n	80087c6 <LL_TIM_Init+0xae>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a27      	ldr	r2, [pc, #156]	; (8008830 <LL_TIM_Init+0x118>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d017      	beq.n	80087c6 <LL_TIM_Init+0xae>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a26      	ldr	r2, [pc, #152]	; (8008834 <LL_TIM_Init+0x11c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d013      	beq.n	80087c6 <LL_TIM_Init+0xae>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a25      	ldr	r2, [pc, #148]	; (8008838 <LL_TIM_Init+0x120>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00f      	beq.n	80087c6 <LL_TIM_Init+0xae>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a24      	ldr	r2, [pc, #144]	; (800883c <LL_TIM_Init+0x124>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00b      	beq.n	80087c6 <LL_TIM_Init+0xae>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a23      	ldr	r2, [pc, #140]	; (8008840 <LL_TIM_Init+0x128>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d007      	beq.n	80087c6 <LL_TIM_Init+0xae>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a22      	ldr	r2, [pc, #136]	; (8008844 <LL_TIM_Init+0x12c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <LL_TIM_Init+0xae>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a21      	ldr	r2, [pc, #132]	; (8008848 <LL_TIM_Init+0x130>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d106      	bne.n	80087d4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff ff34 	bl	800864e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff ff20 	bl	8008632 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a0a      	ldr	r2, [pc, #40]	; (8008820 <LL_TIM_Init+0x108>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <LL_TIM_Init+0xea>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a0c      	ldr	r2, [pc, #48]	; (8008830 <LL_TIM_Init+0x118>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d105      	bne.n	800880e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff ff2e 	bl	800866a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff ff71 	bl	80086f6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40010000 	.word	0x40010000
 8008824:	40000400 	.word	0x40000400
 8008828:	40000800 	.word	0x40000800
 800882c:	40000c00 	.word	0x40000c00
 8008830:	40010400 	.word	0x40010400
 8008834:	40014000 	.word	0x40014000
 8008838:	40014400 	.word	0x40014400
 800883c:	40014800 	.word	0x40014800
 8008840:	40001800 	.word	0x40001800
 8008844:	40001c00 	.word	0x40001c00
 8008848:	40002000 	.word	0x40002000

0800884c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008862:	d027      	beq.n	80088b4 <LL_TIM_OC_Init+0x68>
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886a:	d82a      	bhi.n	80088c2 <LL_TIM_OC_Init+0x76>
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008872:	d018      	beq.n	80088a6 <LL_TIM_OC_Init+0x5a>
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887a:	d822      	bhi.n	80088c2 <LL_TIM_OC_Init+0x76>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d003      	beq.n	800888a <LL_TIM_OC_Init+0x3e>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b10      	cmp	r3, #16
 8008886:	d007      	beq.n	8008898 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8008888:	e01b      	b.n	80088c2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f81f 	bl	80088d0 <OC1Config>
 8008892:	4603      	mov	r3, r0
 8008894:	75fb      	strb	r3, [r7, #23]
      break;
 8008896:	e015      	b.n	80088c4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 f884 	bl	80089a8 <OC2Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e00e      	b.n	80088c4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f8ed 	bl	8008a88 <OC3Config>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]
      break;
 80088b2:	e007      	b.n	80088c4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f956 	bl	8008b68 <OC4Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	75fb      	strb	r3, [r7, #23]
      break;
 80088c0:	e000      	b.n	80088c4 <LL_TIM_OC_Init+0x78>
      break;
 80088c2:	bf00      	nop
  }

  return result;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	f023 0201 	bic.w	r2, r3, #1
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f023 0202 	bic.w	r2, r3, #2
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f023 0201 	bic.w	r2, r3, #1
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	4313      	orrs	r3, r2
 8008928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <OC1Config+0xd0>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d003      	beq.n	800893a <OC1Config+0x6a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a1b      	ldr	r2, [pc, #108]	; (80089a4 <OC1Config+0xd4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d11e      	bne.n	8008978 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f023 0208 	bic.w	r2, r3, #8
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4313      	orrs	r3, r2
 8008948:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f023 0204 	bic.w	r2, r3, #4
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	4313      	orrs	r3, r2
 8008966:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	4313      	orrs	r3, r2
 8008976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fe7b 	bl	8008686 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40010000 	.word	0x40010000
 80089a4:	40010400 	.word	0x40010400

080089a8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f023 0210 	bic.w	r2, r3, #16
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0220 	bic.w	r2, r3, #32
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f023 0210 	bic.w	r2, r3, #16
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	4313      	orrs	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1d      	ldr	r2, [pc, #116]	; (8008a80 <OC2Config+0xd8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <OC2Config+0x70>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1c      	ldr	r2, [pc, #112]	; (8008a84 <OC2Config+0xdc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d11f      	bne.n	8008a58 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	019b      	lsls	r3, r3, #6
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	019b      	lsls	r3, r3, #6
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff fe19 	bl	80086a2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	40010000 	.word	0x40010000
 8008a84:	40010400 	.word	0x40010400

08008a88 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0303 	bic.w	r3, r3, #3
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a1d      	ldr	r2, [pc, #116]	; (8008b60 <OC3Config+0xd8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d003      	beq.n	8008af6 <OC3Config+0x6e>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a1c      	ldr	r2, [pc, #112]	; (8008b64 <OC3Config+0xdc>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d11f      	bne.n	8008b36 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	029b      	lsls	r3, r3, #10
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	015b      	lsls	r3, r3, #5
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fdb8 	bl	80086be <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	40010000 	.word	0x40010000
 8008b64:	40010400 	.word	0x40010400

08008b68 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	031b      	lsls	r3, r3, #12
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	031b      	lsls	r3, r3, #12
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a11      	ldr	r2, [pc, #68]	; (8008c10 <OC4Config+0xa8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d003      	beq.n	8008bd8 <OC4Config+0x70>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a10      	ldr	r2, [pc, #64]	; (8008c14 <OC4Config+0xac>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d107      	bne.n	8008be8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	019b      	lsls	r3, r3, #6
 8008be4:	4313      	orrs	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff fd6d 	bl	80086da <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	40010000 	.word	0x40010000
 8008c14:	40010400 	.word	0x40010400

08008c18 <LL_USART_IsEnabled>:
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c2c:	bf0c      	ite	eq
 8008c2e:	2301      	moveq	r3, #1
 8008c30:	2300      	movne	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <LL_USART_SetStopBitsLength>:
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	431a      	orrs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	611a      	str	r2, [r3, #16]
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <LL_USART_SetHWFlowCtrl>:
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	615a      	str	r2, [r3, #20]
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <LL_USART_SetBaudRate>:
{
 8008c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c90:	b0c0      	sub	sp, #256	; 0x100
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c98:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8008c9c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008ca0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cac:	f040 810c 	bne.w	8008ec8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8008cb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	1891      	adds	r1, r2, r2
 8008cc8:	6639      	str	r1, [r7, #96]	; 0x60
 8008cca:	415b      	adcs	r3, r3
 8008ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8008cce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	eb12 0801 	adds.w	r8, r2, r1
 8008cd8:	4629      	mov	r1, r5
 8008cda:	eb43 0901 	adc.w	r9, r3, r1
 8008cde:	f04f 0200 	mov.w	r2, #0
 8008ce2:	f04f 0300 	mov.w	r3, #0
 8008ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cf2:	4690      	mov	r8, r2
 8008cf4:	4699      	mov	r9, r3
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	eb18 0303 	adds.w	r3, r8, r3
 8008cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d00:	462b      	mov	r3, r5
 8008d02:	eb49 0303 	adc.w	r3, r9, r3
 8008d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d0e:	2200      	movs	r2, #0
 8008d10:	469a      	mov	sl, r3
 8008d12:	4693      	mov	fp, r2
 8008d14:	eb1a 030a 	adds.w	r3, sl, sl
 8008d18:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d1a:	eb4b 030b 	adc.w	r3, fp, fp
 8008d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d28:	f7f7 ff3e 	bl	8000ba8 <__aeabi_uldivmod>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4b64      	ldr	r3, [pc, #400]	; (8008ec4 <LL_USART_SetBaudRate+0x238>)
 8008d32:	fba3 2302 	umull	r2, r3, r3, r2
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	b29c      	uxth	r4, r3
 8008d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d48:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d4c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	1891      	adds	r1, r2, r2
 8008d56:	6539      	str	r1, [r7, #80]	; 0x50
 8008d58:	415b      	adcs	r3, r3
 8008d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8008d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d60:	4641      	mov	r1, r8
 8008d62:	1851      	adds	r1, r2, r1
 8008d64:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d66:	4649      	mov	r1, r9
 8008d68:	414b      	adcs	r3, r1
 8008d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8008d78:	4659      	mov	r1, fp
 8008d7a:	00cb      	lsls	r3, r1, #3
 8008d7c:	4651      	mov	r1, sl
 8008d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d82:	4651      	mov	r1, sl
 8008d84:	00ca      	lsls	r2, r1, #3
 8008d86:	4610      	mov	r0, r2
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	189b      	adds	r3, r3, r2
 8008d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d94:	464b      	mov	r3, r9
 8008d96:	460a      	mov	r2, r1
 8008d98:	eb42 0303 	adc.w	r3, r2, r3
 8008d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008da0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008daa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008dae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008db2:	460b      	mov	r3, r1
 8008db4:	18db      	adds	r3, r3, r3
 8008db6:	643b      	str	r3, [r7, #64]	; 0x40
 8008db8:	4613      	mov	r3, r2
 8008dba:	eb42 0303 	adc.w	r3, r2, r3
 8008dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8008dc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008dc4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008dc8:	f7f7 feee 	bl	8000ba8 <__aeabi_uldivmod>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4b3c      	ldr	r3, [pc, #240]	; (8008ec4 <LL_USART_SetBaudRate+0x238>)
 8008dd4:	fba3 2301 	umull	r2, r3, r3, r1
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	2264      	movs	r2, #100	; 0x64
 8008ddc:	fb02 f303 	mul.w	r3, r2, r3
 8008de0:	1acb      	subs	r3, r1, r3
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008de8:	4b36      	ldr	r3, [pc, #216]	; (8008ec4 <LL_USART_SetBaudRate+0x238>)
 8008dea:	fba3 2302 	umull	r2, r3, r3, r2
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4423      	add	r3, r4
 8008dfe:	b29c      	uxth	r4, r3
 8008e00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e0a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e0e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8008e12:	4642      	mov	r2, r8
 8008e14:	464b      	mov	r3, r9
 8008e16:	1891      	adds	r1, r2, r2
 8008e18:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e22:	4641      	mov	r1, r8
 8008e24:	1851      	adds	r1, r2, r1
 8008e26:	6339      	str	r1, [r7, #48]	; 0x30
 8008e28:	4649      	mov	r1, r9
 8008e2a:	414b      	adcs	r3, r1
 8008e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	00cb      	lsls	r3, r1, #3
 8008e3e:	4651      	mov	r1, sl
 8008e40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e44:	4651      	mov	r1, sl
 8008e46:	00ca      	lsls	r2, r1, #3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	4642      	mov	r2, r8
 8008e50:	189b      	adds	r3, r3, r2
 8008e52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e56:	464b      	mov	r3, r9
 8008e58:	460a      	mov	r2, r1
 8008e5a:	eb42 0303 	adc.w	r3, r2, r3
 8008e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e6c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008e70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008e74:	460b      	mov	r3, r1
 8008e76:	18db      	adds	r3, r3, r3
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	eb42 0303 	adc.w	r3, r2, r3
 8008e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e86:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008e8a:	f7f7 fe8d 	bl	8000ba8 <__aeabi_uldivmod>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <LL_USART_SetBaudRate+0x238>)
 8008e94:	fba3 1302 	umull	r1, r3, r3, r2
 8008e98:	095b      	lsrs	r3, r3, #5
 8008e9a:	2164      	movs	r1, #100	; 0x64
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	3332      	adds	r3, #50	; 0x32
 8008ea6:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <LL_USART_SetBaudRate+0x238>)
 8008ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4423      	add	r3, r4
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ec0:	609a      	str	r2, [r3, #8]
}
 8008ec2:	e107      	b.n	80090d4 <LL_USART_SetBaudRate+0x448>
 8008ec4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8008ec8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ed2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ed6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8008eda:	4642      	mov	r2, r8
 8008edc:	464b      	mov	r3, r9
 8008ede:	1891      	adds	r1, r2, r2
 8008ee0:	6239      	str	r1, [r7, #32]
 8008ee2:	415b      	adcs	r3, r3
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eea:	4641      	mov	r1, r8
 8008eec:	1854      	adds	r4, r2, r1
 8008eee:	4649      	mov	r1, r9
 8008ef0:	eb43 0501 	adc.w	r5, r3, r1
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	00eb      	lsls	r3, r5, #3
 8008efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f02:	00e2      	lsls	r2, r4, #3
 8008f04:	4614      	mov	r4, r2
 8008f06:	461d      	mov	r5, r3
 8008f08:	4643      	mov	r3, r8
 8008f0a:	18e3      	adds	r3, r4, r3
 8008f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f10:	464b      	mov	r3, r9
 8008f12:	eb45 0303 	adc.w	r3, r5, r3
 8008f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8008f34:	4629      	mov	r1, r5
 8008f36:	008b      	lsls	r3, r1, #2
 8008f38:	4621      	mov	r1, r4
 8008f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f3e:	4621      	mov	r1, r4
 8008f40:	008a      	lsls	r2, r1, #2
 8008f42:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008f46:	f7f7 fe2f 	bl	8000ba8 <__aeabi_uldivmod>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4b64      	ldr	r3, [pc, #400]	; (80090e0 <LL_USART_SetBaudRate+0x454>)
 8008f50:	fba3 2302 	umull	r2, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	011b      	lsls	r3, r3, #4
 8008f5a:	b29c      	uxth	r4, r3
 8008f5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f60:	2200      	movs	r2, #0
 8008f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f6a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8008f6e:	4642      	mov	r2, r8
 8008f70:	464b      	mov	r3, r9
 8008f72:	1891      	adds	r1, r2, r2
 8008f74:	61b9      	str	r1, [r7, #24]
 8008f76:	415b      	adcs	r3, r3
 8008f78:	61fb      	str	r3, [r7, #28]
 8008f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f7e:	4641      	mov	r1, r8
 8008f80:	1851      	adds	r1, r2, r1
 8008f82:	6139      	str	r1, [r7, #16]
 8008f84:	4649      	mov	r1, r9
 8008f86:	414b      	adcs	r3, r1
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f96:	4659      	mov	r1, fp
 8008f98:	00cb      	lsls	r3, r1, #3
 8008f9a:	4651      	mov	r1, sl
 8008f9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fa0:	4651      	mov	r1, sl
 8008fa2:	00ca      	lsls	r2, r1, #3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4642      	mov	r2, r8
 8008fac:	189b      	adds	r3, r3, r2
 8008fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	460a      	mov	r2, r1
 8008fb6:	eb42 0303 	adc.w	r3, r2, r3
 8008fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fc8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	f04f 0300 	mov.w	r3, #0
 8008fd4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8008fd8:	4649      	mov	r1, r9
 8008fda:	008b      	lsls	r3, r1, #2
 8008fdc:	4641      	mov	r1, r8
 8008fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fe2:	4641      	mov	r1, r8
 8008fe4:	008a      	lsls	r2, r1, #2
 8008fe6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008fea:	f7f7 fddd 	bl	8000ba8 <__aeabi_uldivmod>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4b3b      	ldr	r3, [pc, #236]	; (80090e0 <LL_USART_SetBaudRate+0x454>)
 8008ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	2164      	movs	r1, #100	; 0x64
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	3332      	adds	r3, #50	; 0x32
 8009006:	4a36      	ldr	r2, [pc, #216]	; (80090e0 <LL_USART_SetBaudRate+0x454>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	095b      	lsrs	r3, r3, #5
 800900e:	b29b      	uxth	r3, r3
 8009010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009014:	b29b      	uxth	r3, r3
 8009016:	4423      	add	r3, r4
 8009018:	b29c      	uxth	r4, r3
 800901a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800901e:	2200      	movs	r2, #0
 8009020:	67bb      	str	r3, [r7, #120]	; 0x78
 8009022:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009028:	4642      	mov	r2, r8
 800902a:	464b      	mov	r3, r9
 800902c:	1891      	adds	r1, r2, r2
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	415b      	adcs	r3, r3
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009038:	4641      	mov	r1, r8
 800903a:	1851      	adds	r1, r2, r1
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	4649      	mov	r1, r9
 8009040:	414b      	adcs	r3, r1
 8009042:	607b      	str	r3, [r7, #4]
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009050:	4659      	mov	r1, fp
 8009052:	00cb      	lsls	r3, r1, #3
 8009054:	4651      	mov	r1, sl
 8009056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800905a:	4651      	mov	r1, sl
 800905c:	00ca      	lsls	r2, r1, #3
 800905e:	4610      	mov	r0, r2
 8009060:	4619      	mov	r1, r3
 8009062:	4603      	mov	r3, r0
 8009064:	4642      	mov	r2, r8
 8009066:	189b      	adds	r3, r3, r2
 8009068:	673b      	str	r3, [r7, #112]	; 0x70
 800906a:	464b      	mov	r3, r9
 800906c:	460a      	mov	r2, r1
 800906e:	eb42 0303 	adc.w	r3, r2, r3
 8009072:	677b      	str	r3, [r7, #116]	; 0x74
 8009074:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009078:	2200      	movs	r2, #0
 800907a:	66bb      	str	r3, [r7, #104]	; 0x68
 800907c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	f04f 0300 	mov.w	r3, #0
 8009086:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800908a:	4649      	mov	r1, r9
 800908c:	008b      	lsls	r3, r1, #2
 800908e:	4641      	mov	r1, r8
 8009090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009094:	4641      	mov	r1, r8
 8009096:	008a      	lsls	r2, r1, #2
 8009098:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800909c:	f7f7 fd84 	bl	8000ba8 <__aeabi_uldivmod>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <LL_USART_SetBaudRate+0x454>)
 80090a6:	fba3 1302 	umull	r1, r3, r3, r2
 80090aa:	095b      	lsrs	r3, r3, #5
 80090ac:	2164      	movs	r1, #100	; 0x64
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	3332      	adds	r3, #50	; 0x32
 80090b8:	4a09      	ldr	r2, [pc, #36]	; (80090e0 <LL_USART_SetBaudRate+0x454>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	f003 030f 	and.w	r3, r3, #15
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	4423      	add	r3, r4
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d2:	609a      	str	r2, [r3, #8]
}
 80090d4:	bf00      	nop
 80090d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090da:	46bd      	mov	sp, r7
 80090dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090e0:	51eb851f 	.word	0x51eb851f

080090e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80090f2:	2300      	movs	r3, #0
 80090f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fd8e 	bl	8008c18 <LL_USART_IsEnabled>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d15e      	bne.n	80091c0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800910a:	f023 030c 	bic.w	r3, r3, #12
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	6851      	ldr	r1, [r2, #4]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	68d2      	ldr	r2, [r2, #12]
 8009116:	4311      	orrs	r1, r2
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	6912      	ldr	r2, [r2, #16]
 800911c:	4311      	orrs	r1, r2
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	6992      	ldr	r2, [r2, #24]
 8009122:	430a      	orrs	r2, r1
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fd85 	bl	8008c40 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff fd92 	bl	8008c66 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009142:	f107 0308 	add.w	r3, r7, #8
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff f934 	bl	80083b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a1f      	ldr	r2, [pc, #124]	; (80091cc <LL_USART_Init+0xe8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d102      	bne.n	800915a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	e021      	b.n	800919e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1c      	ldr	r2, [pc, #112]	; (80091d0 <LL_USART_Init+0xec>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d102      	bne.n	8009168 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	e01a      	b.n	800919e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a1a      	ldr	r2, [pc, #104]	; (80091d4 <LL_USART_Init+0xf0>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d102      	bne.n	8009176 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	61bb      	str	r3, [r7, #24]
 8009174:	e013      	b.n	800919e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <LL_USART_Init+0xf4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d102      	bne.n	8009184 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	e00c      	b.n	800919e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a15      	ldr	r2, [pc, #84]	; (80091dc <LL_USART_Init+0xf8>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d102      	bne.n	8009192 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	61bb      	str	r3, [r7, #24]
 8009190:	e005      	b.n	800919e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a12      	ldr	r2, [pc, #72]	; (80091e0 <LL_USART_Init+0xfc>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d101      	bne.n	800919e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00d      	beq.n	80091c0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d009      	beq.n	80091c0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80091ac:	2300      	movs	r3, #0
 80091ae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	69b9      	ldr	r1, [r7, #24]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff fd66 	bl	8008c8c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80091c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3720      	adds	r7, #32
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40011000 	.word	0x40011000
 80091d0:	40004400 	.word	0x40004400
 80091d4:	40004800 	.word	0x40004800
 80091d8:	40011400 	.word	0x40011400
 80091dc:	40004c00 	.word	0x40004c00
 80091e0:	40005000 	.word	0x40005000

080091e4 <__errno>:
 80091e4:	4b01      	ldr	r3, [pc, #4]	; (80091ec <__errno+0x8>)
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20000010 	.word	0x20000010

080091f0 <__libc_init_array>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	4d0d      	ldr	r5, [pc, #52]	; (8009228 <__libc_init_array+0x38>)
 80091f4:	4c0d      	ldr	r4, [pc, #52]	; (800922c <__libc_init_array+0x3c>)
 80091f6:	1b64      	subs	r4, r4, r5
 80091f8:	10a4      	asrs	r4, r4, #2
 80091fa:	2600      	movs	r6, #0
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	d109      	bne.n	8009214 <__libc_init_array+0x24>
 8009200:	4d0b      	ldr	r5, [pc, #44]	; (8009230 <__libc_init_array+0x40>)
 8009202:	4c0c      	ldr	r4, [pc, #48]	; (8009234 <__libc_init_array+0x44>)
 8009204:	f003 f994 	bl	800c530 <_init>
 8009208:	1b64      	subs	r4, r4, r5
 800920a:	10a4      	asrs	r4, r4, #2
 800920c:	2600      	movs	r6, #0
 800920e:	42a6      	cmp	r6, r4
 8009210:	d105      	bne.n	800921e <__libc_init_array+0x2e>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f855 3b04 	ldr.w	r3, [r5], #4
 8009218:	4798      	blx	r3
 800921a:	3601      	adds	r6, #1
 800921c:	e7ee      	b.n	80091fc <__libc_init_array+0xc>
 800921e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009222:	4798      	blx	r3
 8009224:	3601      	adds	r6, #1
 8009226:	e7f2      	b.n	800920e <__libc_init_array+0x1e>
 8009228:	0800cd34 	.word	0x0800cd34
 800922c:	0800cd34 	.word	0x0800cd34
 8009230:	0800cd34 	.word	0x0800cd34
 8009234:	0800cd38 	.word	0x0800cd38

08009238 <memset>:
 8009238:	4402      	add	r2, r0
 800923a:	4603      	mov	r3, r0
 800923c:	4293      	cmp	r3, r2
 800923e:	d100      	bne.n	8009242 <memset+0xa>
 8009240:	4770      	bx	lr
 8009242:	f803 1b01 	strb.w	r1, [r3], #1
 8009246:	e7f9      	b.n	800923c <memset+0x4>

08009248 <__cvt>:
 8009248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	ec55 4b10 	vmov	r4, r5, d0
 8009250:	2d00      	cmp	r5, #0
 8009252:	460e      	mov	r6, r1
 8009254:	4619      	mov	r1, r3
 8009256:	462b      	mov	r3, r5
 8009258:	bfbb      	ittet	lt
 800925a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800925e:	461d      	movlt	r5, r3
 8009260:	2300      	movge	r3, #0
 8009262:	232d      	movlt	r3, #45	; 0x2d
 8009264:	700b      	strb	r3, [r1, #0]
 8009266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800926c:	4691      	mov	r9, r2
 800926e:	f023 0820 	bic.w	r8, r3, #32
 8009272:	bfbc      	itt	lt
 8009274:	4622      	movlt	r2, r4
 8009276:	4614      	movlt	r4, r2
 8009278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800927c:	d005      	beq.n	800928a <__cvt+0x42>
 800927e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009282:	d100      	bne.n	8009286 <__cvt+0x3e>
 8009284:	3601      	adds	r6, #1
 8009286:	2102      	movs	r1, #2
 8009288:	e000      	b.n	800928c <__cvt+0x44>
 800928a:	2103      	movs	r1, #3
 800928c:	ab03      	add	r3, sp, #12
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	ab02      	add	r3, sp, #8
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	ec45 4b10 	vmov	d0, r4, r5
 8009298:	4653      	mov	r3, sl
 800929a:	4632      	mov	r2, r6
 800929c:	f000 fe18 	bl	8009ed0 <_dtoa_r>
 80092a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092a4:	4607      	mov	r7, r0
 80092a6:	d102      	bne.n	80092ae <__cvt+0x66>
 80092a8:	f019 0f01 	tst.w	r9, #1
 80092ac:	d022      	beq.n	80092f4 <__cvt+0xac>
 80092ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092b2:	eb07 0906 	add.w	r9, r7, r6
 80092b6:	d110      	bne.n	80092da <__cvt+0x92>
 80092b8:	783b      	ldrb	r3, [r7, #0]
 80092ba:	2b30      	cmp	r3, #48	; 0x30
 80092bc:	d10a      	bne.n	80092d4 <__cvt+0x8c>
 80092be:	2200      	movs	r2, #0
 80092c0:	2300      	movs	r3, #0
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f7 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ca:	b918      	cbnz	r0, 80092d4 <__cvt+0x8c>
 80092cc:	f1c6 0601 	rsb	r6, r6, #1
 80092d0:	f8ca 6000 	str.w	r6, [sl]
 80092d4:	f8da 3000 	ldr.w	r3, [sl]
 80092d8:	4499      	add	r9, r3
 80092da:	2200      	movs	r2, #0
 80092dc:	2300      	movs	r3, #0
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f7 fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80092e6:	b108      	cbz	r0, 80092ec <__cvt+0xa4>
 80092e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80092ec:	2230      	movs	r2, #48	; 0x30
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	454b      	cmp	r3, r9
 80092f2:	d307      	bcc.n	8009304 <__cvt+0xbc>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092f8:	1bdb      	subs	r3, r3, r7
 80092fa:	4638      	mov	r0, r7
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	b004      	add	sp, #16
 8009300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009304:	1c59      	adds	r1, r3, #1
 8009306:	9103      	str	r1, [sp, #12]
 8009308:	701a      	strb	r2, [r3, #0]
 800930a:	e7f0      	b.n	80092ee <__cvt+0xa6>

0800930c <__exponent>:
 800930c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800930e:	4603      	mov	r3, r0
 8009310:	2900      	cmp	r1, #0
 8009312:	bfb8      	it	lt
 8009314:	4249      	neglt	r1, r1
 8009316:	f803 2b02 	strb.w	r2, [r3], #2
 800931a:	bfb4      	ite	lt
 800931c:	222d      	movlt	r2, #45	; 0x2d
 800931e:	222b      	movge	r2, #43	; 0x2b
 8009320:	2909      	cmp	r1, #9
 8009322:	7042      	strb	r2, [r0, #1]
 8009324:	dd2a      	ble.n	800937c <__exponent+0x70>
 8009326:	f10d 0407 	add.w	r4, sp, #7
 800932a:	46a4      	mov	ip, r4
 800932c:	270a      	movs	r7, #10
 800932e:	46a6      	mov	lr, r4
 8009330:	460a      	mov	r2, r1
 8009332:	fb91 f6f7 	sdiv	r6, r1, r7
 8009336:	fb07 1516 	mls	r5, r7, r6, r1
 800933a:	3530      	adds	r5, #48	; 0x30
 800933c:	2a63      	cmp	r2, #99	; 0x63
 800933e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009346:	4631      	mov	r1, r6
 8009348:	dcf1      	bgt.n	800932e <__exponent+0x22>
 800934a:	3130      	adds	r1, #48	; 0x30
 800934c:	f1ae 0502 	sub.w	r5, lr, #2
 8009350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009354:	1c44      	adds	r4, r0, #1
 8009356:	4629      	mov	r1, r5
 8009358:	4561      	cmp	r1, ip
 800935a:	d30a      	bcc.n	8009372 <__exponent+0x66>
 800935c:	f10d 0209 	add.w	r2, sp, #9
 8009360:	eba2 020e 	sub.w	r2, r2, lr
 8009364:	4565      	cmp	r5, ip
 8009366:	bf88      	it	hi
 8009368:	2200      	movhi	r2, #0
 800936a:	4413      	add	r3, r2
 800936c:	1a18      	subs	r0, r3, r0
 800936e:	b003      	add	sp, #12
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009376:	f804 2f01 	strb.w	r2, [r4, #1]!
 800937a:	e7ed      	b.n	8009358 <__exponent+0x4c>
 800937c:	2330      	movs	r3, #48	; 0x30
 800937e:	3130      	adds	r1, #48	; 0x30
 8009380:	7083      	strb	r3, [r0, #2]
 8009382:	70c1      	strb	r1, [r0, #3]
 8009384:	1d03      	adds	r3, r0, #4
 8009386:	e7f1      	b.n	800936c <__exponent+0x60>

08009388 <_printf_float>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	ed2d 8b02 	vpush	{d8}
 8009390:	b08d      	sub	sp, #52	; 0x34
 8009392:	460c      	mov	r4, r1
 8009394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009398:	4616      	mov	r6, r2
 800939a:	461f      	mov	r7, r3
 800939c:	4605      	mov	r5, r0
 800939e:	f001 fd3d 	bl	800ae1c <_localeconv_r>
 80093a2:	f8d0 a000 	ldr.w	sl, [r0]
 80093a6:	4650      	mov	r0, sl
 80093a8:	f7f6 ff12 	bl	80001d0 <strlen>
 80093ac:	2300      	movs	r3, #0
 80093ae:	930a      	str	r3, [sp, #40]	; 0x28
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	f8d8 3000 	ldr.w	r3, [r8]
 80093b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093bc:	3307      	adds	r3, #7
 80093be:	f023 0307 	bic.w	r3, r3, #7
 80093c2:	f103 0208 	add.w	r2, r3, #8
 80093c6:	f8c8 2000 	str.w	r2, [r8]
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093da:	9307      	str	r3, [sp, #28]
 80093dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80093e0:	ee08 0a10 	vmov	s16, r0
 80093e4:	4b9f      	ldr	r3, [pc, #636]	; (8009664 <_printf_float+0x2dc>)
 80093e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295
 80093ee:	f7f7 fb9d 	bl	8000b2c <__aeabi_dcmpun>
 80093f2:	bb88      	cbnz	r0, 8009458 <_printf_float+0xd0>
 80093f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093f8:	4b9a      	ldr	r3, [pc, #616]	; (8009664 <_printf_float+0x2dc>)
 80093fa:	f04f 32ff 	mov.w	r2, #4294967295
 80093fe:	f7f7 fb77 	bl	8000af0 <__aeabi_dcmple>
 8009402:	bb48      	cbnz	r0, 8009458 <_printf_float+0xd0>
 8009404:	2200      	movs	r2, #0
 8009406:	2300      	movs	r3, #0
 8009408:	4640      	mov	r0, r8
 800940a:	4649      	mov	r1, r9
 800940c:	f7f7 fb66 	bl	8000adc <__aeabi_dcmplt>
 8009410:	b110      	cbz	r0, 8009418 <_printf_float+0x90>
 8009412:	232d      	movs	r3, #45	; 0x2d
 8009414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009418:	4b93      	ldr	r3, [pc, #588]	; (8009668 <_printf_float+0x2e0>)
 800941a:	4894      	ldr	r0, [pc, #592]	; (800966c <_printf_float+0x2e4>)
 800941c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009420:	bf94      	ite	ls
 8009422:	4698      	movls	r8, r3
 8009424:	4680      	movhi	r8, r0
 8009426:	2303      	movs	r3, #3
 8009428:	6123      	str	r3, [r4, #16]
 800942a:	9b05      	ldr	r3, [sp, #20]
 800942c:	f023 0204 	bic.w	r2, r3, #4
 8009430:	6022      	str	r2, [r4, #0]
 8009432:	f04f 0900 	mov.w	r9, #0
 8009436:	9700      	str	r7, [sp, #0]
 8009438:	4633      	mov	r3, r6
 800943a:	aa0b      	add	r2, sp, #44	; 0x2c
 800943c:	4621      	mov	r1, r4
 800943e:	4628      	mov	r0, r5
 8009440:	f000 f9d8 	bl	80097f4 <_printf_common>
 8009444:	3001      	adds	r0, #1
 8009446:	f040 8090 	bne.w	800956a <_printf_float+0x1e2>
 800944a:	f04f 30ff 	mov.w	r0, #4294967295
 800944e:	b00d      	add	sp, #52	; 0x34
 8009450:	ecbd 8b02 	vpop	{d8}
 8009454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009458:	4642      	mov	r2, r8
 800945a:	464b      	mov	r3, r9
 800945c:	4640      	mov	r0, r8
 800945e:	4649      	mov	r1, r9
 8009460:	f7f7 fb64 	bl	8000b2c <__aeabi_dcmpun>
 8009464:	b140      	cbz	r0, 8009478 <_printf_float+0xf0>
 8009466:	464b      	mov	r3, r9
 8009468:	2b00      	cmp	r3, #0
 800946a:	bfbc      	itt	lt
 800946c:	232d      	movlt	r3, #45	; 0x2d
 800946e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009472:	487f      	ldr	r0, [pc, #508]	; (8009670 <_printf_float+0x2e8>)
 8009474:	4b7f      	ldr	r3, [pc, #508]	; (8009674 <_printf_float+0x2ec>)
 8009476:	e7d1      	b.n	800941c <_printf_float+0x94>
 8009478:	6863      	ldr	r3, [r4, #4]
 800947a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800947e:	9206      	str	r2, [sp, #24]
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	d13f      	bne.n	8009504 <_printf_float+0x17c>
 8009484:	2306      	movs	r3, #6
 8009486:	6063      	str	r3, [r4, #4]
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	6861      	ldr	r1, [r4, #4]
 800948c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009490:	2300      	movs	r3, #0
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	ab0a      	add	r3, sp, #40	; 0x28
 8009496:	e9cd b301 	strd	fp, r3, [sp, #4]
 800949a:	ab09      	add	r3, sp, #36	; 0x24
 800949c:	ec49 8b10 	vmov	d0, r8, r9
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094a8:	4628      	mov	r0, r5
 80094aa:	f7ff fecd 	bl	8009248 <__cvt>
 80094ae:	9b06      	ldr	r3, [sp, #24]
 80094b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094b2:	2b47      	cmp	r3, #71	; 0x47
 80094b4:	4680      	mov	r8, r0
 80094b6:	d108      	bne.n	80094ca <_printf_float+0x142>
 80094b8:	1cc8      	adds	r0, r1, #3
 80094ba:	db02      	blt.n	80094c2 <_printf_float+0x13a>
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	4299      	cmp	r1, r3
 80094c0:	dd41      	ble.n	8009546 <_printf_float+0x1be>
 80094c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80094c6:	fa5f fb8b 	uxtb.w	fp, fp
 80094ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094ce:	d820      	bhi.n	8009512 <_printf_float+0x18a>
 80094d0:	3901      	subs	r1, #1
 80094d2:	465a      	mov	r2, fp
 80094d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094d8:	9109      	str	r1, [sp, #36]	; 0x24
 80094da:	f7ff ff17 	bl	800930c <__exponent>
 80094de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094e0:	1813      	adds	r3, r2, r0
 80094e2:	2a01      	cmp	r2, #1
 80094e4:	4681      	mov	r9, r0
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	dc02      	bgt.n	80094f0 <_printf_float+0x168>
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	07d2      	lsls	r2, r2, #31
 80094ee:	d501      	bpl.n	80094f4 <_printf_float+0x16c>
 80094f0:	3301      	adds	r3, #1
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d09c      	beq.n	8009436 <_printf_float+0xae>
 80094fc:	232d      	movs	r3, #45	; 0x2d
 80094fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009502:	e798      	b.n	8009436 <_printf_float+0xae>
 8009504:	9a06      	ldr	r2, [sp, #24]
 8009506:	2a47      	cmp	r2, #71	; 0x47
 8009508:	d1be      	bne.n	8009488 <_printf_float+0x100>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1bc      	bne.n	8009488 <_printf_float+0x100>
 800950e:	2301      	movs	r3, #1
 8009510:	e7b9      	b.n	8009486 <_printf_float+0xfe>
 8009512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009516:	d118      	bne.n	800954a <_printf_float+0x1c2>
 8009518:	2900      	cmp	r1, #0
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	dd0b      	ble.n	8009536 <_printf_float+0x1ae>
 800951e:	6121      	str	r1, [r4, #16]
 8009520:	b913      	cbnz	r3, 8009528 <_printf_float+0x1a0>
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	07d0      	lsls	r0, r2, #31
 8009526:	d502      	bpl.n	800952e <_printf_float+0x1a6>
 8009528:	3301      	adds	r3, #1
 800952a:	440b      	add	r3, r1
 800952c:	6123      	str	r3, [r4, #16]
 800952e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009530:	f04f 0900 	mov.w	r9, #0
 8009534:	e7de      	b.n	80094f4 <_printf_float+0x16c>
 8009536:	b913      	cbnz	r3, 800953e <_printf_float+0x1b6>
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	07d2      	lsls	r2, r2, #31
 800953c:	d501      	bpl.n	8009542 <_printf_float+0x1ba>
 800953e:	3302      	adds	r3, #2
 8009540:	e7f4      	b.n	800952c <_printf_float+0x1a4>
 8009542:	2301      	movs	r3, #1
 8009544:	e7f2      	b.n	800952c <_printf_float+0x1a4>
 8009546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800954a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800954c:	4299      	cmp	r1, r3
 800954e:	db05      	blt.n	800955c <_printf_float+0x1d4>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	6121      	str	r1, [r4, #16]
 8009554:	07d8      	lsls	r0, r3, #31
 8009556:	d5ea      	bpl.n	800952e <_printf_float+0x1a6>
 8009558:	1c4b      	adds	r3, r1, #1
 800955a:	e7e7      	b.n	800952c <_printf_float+0x1a4>
 800955c:	2900      	cmp	r1, #0
 800955e:	bfd4      	ite	le
 8009560:	f1c1 0202 	rsble	r2, r1, #2
 8009564:	2201      	movgt	r2, #1
 8009566:	4413      	add	r3, r2
 8009568:	e7e0      	b.n	800952c <_printf_float+0x1a4>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	055a      	lsls	r2, r3, #21
 800956e:	d407      	bmi.n	8009580 <_printf_float+0x1f8>
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	4642      	mov	r2, r8
 8009574:	4631      	mov	r1, r6
 8009576:	4628      	mov	r0, r5
 8009578:	47b8      	blx	r7
 800957a:	3001      	adds	r0, #1
 800957c:	d12c      	bne.n	80095d8 <_printf_float+0x250>
 800957e:	e764      	b.n	800944a <_printf_float+0xc2>
 8009580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009584:	f240 80e0 	bls.w	8009748 <_printf_float+0x3c0>
 8009588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800958c:	2200      	movs	r2, #0
 800958e:	2300      	movs	r3, #0
 8009590:	f7f7 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009594:	2800      	cmp	r0, #0
 8009596:	d034      	beq.n	8009602 <_printf_float+0x27a>
 8009598:	4a37      	ldr	r2, [pc, #220]	; (8009678 <_printf_float+0x2f0>)
 800959a:	2301      	movs	r3, #1
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f af51 	beq.w	800944a <_printf_float+0xc2>
 80095a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095ac:	429a      	cmp	r2, r3
 80095ae:	db02      	blt.n	80095b6 <_printf_float+0x22e>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	07d8      	lsls	r0, r3, #31
 80095b4:	d510      	bpl.n	80095d8 <_printf_float+0x250>
 80095b6:	ee18 3a10 	vmov	r3, s16
 80095ba:	4652      	mov	r2, sl
 80095bc:	4631      	mov	r1, r6
 80095be:	4628      	mov	r0, r5
 80095c0:	47b8      	blx	r7
 80095c2:	3001      	adds	r0, #1
 80095c4:	f43f af41 	beq.w	800944a <_printf_float+0xc2>
 80095c8:	f04f 0800 	mov.w	r8, #0
 80095cc:	f104 091a 	add.w	r9, r4, #26
 80095d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d2:	3b01      	subs	r3, #1
 80095d4:	4543      	cmp	r3, r8
 80095d6:	dc09      	bgt.n	80095ec <_printf_float+0x264>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	079b      	lsls	r3, r3, #30
 80095dc:	f100 8105 	bmi.w	80097ea <_printf_float+0x462>
 80095e0:	68e0      	ldr	r0, [r4, #12]
 80095e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e4:	4298      	cmp	r0, r3
 80095e6:	bfb8      	it	lt
 80095e8:	4618      	movlt	r0, r3
 80095ea:	e730      	b.n	800944e <_printf_float+0xc6>
 80095ec:	2301      	movs	r3, #1
 80095ee:	464a      	mov	r2, r9
 80095f0:	4631      	mov	r1, r6
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	f43f af27 	beq.w	800944a <_printf_float+0xc2>
 80095fc:	f108 0801 	add.w	r8, r8, #1
 8009600:	e7e6      	b.n	80095d0 <_printf_float+0x248>
 8009602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	dc39      	bgt.n	800967c <_printf_float+0x2f4>
 8009608:	4a1b      	ldr	r2, [pc, #108]	; (8009678 <_printf_float+0x2f0>)
 800960a:	2301      	movs	r3, #1
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f af19 	beq.w	800944a <_printf_float+0xc2>
 8009618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800961c:	4313      	orrs	r3, r2
 800961e:	d102      	bne.n	8009626 <_printf_float+0x29e>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	07d9      	lsls	r1, r3, #31
 8009624:	d5d8      	bpl.n	80095d8 <_printf_float+0x250>
 8009626:	ee18 3a10 	vmov	r3, s16
 800962a:	4652      	mov	r2, sl
 800962c:	4631      	mov	r1, r6
 800962e:	4628      	mov	r0, r5
 8009630:	47b8      	blx	r7
 8009632:	3001      	adds	r0, #1
 8009634:	f43f af09 	beq.w	800944a <_printf_float+0xc2>
 8009638:	f04f 0900 	mov.w	r9, #0
 800963c:	f104 0a1a 	add.w	sl, r4, #26
 8009640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009642:	425b      	negs	r3, r3
 8009644:	454b      	cmp	r3, r9
 8009646:	dc01      	bgt.n	800964c <_printf_float+0x2c4>
 8009648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964a:	e792      	b.n	8009572 <_printf_float+0x1ea>
 800964c:	2301      	movs	r3, #1
 800964e:	4652      	mov	r2, sl
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	47b8      	blx	r7
 8009656:	3001      	adds	r0, #1
 8009658:	f43f aef7 	beq.w	800944a <_printf_float+0xc2>
 800965c:	f109 0901 	add.w	r9, r9, #1
 8009660:	e7ee      	b.n	8009640 <_printf_float+0x2b8>
 8009662:	bf00      	nop
 8009664:	7fefffff 	.word	0x7fefffff
 8009668:	0800c940 	.word	0x0800c940
 800966c:	0800c944 	.word	0x0800c944
 8009670:	0800c94c 	.word	0x0800c94c
 8009674:	0800c948 	.word	0x0800c948
 8009678:	0800c950 	.word	0x0800c950
 800967c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800967e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009680:	429a      	cmp	r2, r3
 8009682:	bfa8      	it	ge
 8009684:	461a      	movge	r2, r3
 8009686:	2a00      	cmp	r2, #0
 8009688:	4691      	mov	r9, r2
 800968a:	dc37      	bgt.n	80096fc <_printf_float+0x374>
 800968c:	f04f 0b00 	mov.w	fp, #0
 8009690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009694:	f104 021a 	add.w	r2, r4, #26
 8009698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	eba3 0309 	sub.w	r3, r3, r9
 80096a0:	455b      	cmp	r3, fp
 80096a2:	dc33      	bgt.n	800970c <_printf_float+0x384>
 80096a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096a8:	429a      	cmp	r2, r3
 80096aa:	db3b      	blt.n	8009724 <_printf_float+0x39c>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	07da      	lsls	r2, r3, #31
 80096b0:	d438      	bmi.n	8009724 <_printf_float+0x39c>
 80096b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b4:	9a05      	ldr	r2, [sp, #20]
 80096b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096b8:	1a9a      	subs	r2, r3, r2
 80096ba:	eba3 0901 	sub.w	r9, r3, r1
 80096be:	4591      	cmp	r9, r2
 80096c0:	bfa8      	it	ge
 80096c2:	4691      	movge	r9, r2
 80096c4:	f1b9 0f00 	cmp.w	r9, #0
 80096c8:	dc35      	bgt.n	8009736 <_printf_float+0x3ae>
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096d2:	f104 0a1a 	add.w	sl, r4, #26
 80096d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096da:	1a9b      	subs	r3, r3, r2
 80096dc:	eba3 0309 	sub.w	r3, r3, r9
 80096e0:	4543      	cmp	r3, r8
 80096e2:	f77f af79 	ble.w	80095d8 <_printf_float+0x250>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4652      	mov	r2, sl
 80096ea:	4631      	mov	r1, r6
 80096ec:	4628      	mov	r0, r5
 80096ee:	47b8      	blx	r7
 80096f0:	3001      	adds	r0, #1
 80096f2:	f43f aeaa 	beq.w	800944a <_printf_float+0xc2>
 80096f6:	f108 0801 	add.w	r8, r8, #1
 80096fa:	e7ec      	b.n	80096d6 <_printf_float+0x34e>
 80096fc:	4613      	mov	r3, r2
 80096fe:	4631      	mov	r1, r6
 8009700:	4642      	mov	r2, r8
 8009702:	4628      	mov	r0, r5
 8009704:	47b8      	blx	r7
 8009706:	3001      	adds	r0, #1
 8009708:	d1c0      	bne.n	800968c <_printf_float+0x304>
 800970a:	e69e      	b.n	800944a <_printf_float+0xc2>
 800970c:	2301      	movs	r3, #1
 800970e:	4631      	mov	r1, r6
 8009710:	4628      	mov	r0, r5
 8009712:	9205      	str	r2, [sp, #20]
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f ae97 	beq.w	800944a <_printf_float+0xc2>
 800971c:	9a05      	ldr	r2, [sp, #20]
 800971e:	f10b 0b01 	add.w	fp, fp, #1
 8009722:	e7b9      	b.n	8009698 <_printf_float+0x310>
 8009724:	ee18 3a10 	vmov	r3, s16
 8009728:	4652      	mov	r2, sl
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	d1be      	bne.n	80096b2 <_printf_float+0x32a>
 8009734:	e689      	b.n	800944a <_printf_float+0xc2>
 8009736:	9a05      	ldr	r2, [sp, #20]
 8009738:	464b      	mov	r3, r9
 800973a:	4442      	add	r2, r8
 800973c:	4631      	mov	r1, r6
 800973e:	4628      	mov	r0, r5
 8009740:	47b8      	blx	r7
 8009742:	3001      	adds	r0, #1
 8009744:	d1c1      	bne.n	80096ca <_printf_float+0x342>
 8009746:	e680      	b.n	800944a <_printf_float+0xc2>
 8009748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800974a:	2a01      	cmp	r2, #1
 800974c:	dc01      	bgt.n	8009752 <_printf_float+0x3ca>
 800974e:	07db      	lsls	r3, r3, #31
 8009750:	d538      	bpl.n	80097c4 <_printf_float+0x43c>
 8009752:	2301      	movs	r3, #1
 8009754:	4642      	mov	r2, r8
 8009756:	4631      	mov	r1, r6
 8009758:	4628      	mov	r0, r5
 800975a:	47b8      	blx	r7
 800975c:	3001      	adds	r0, #1
 800975e:	f43f ae74 	beq.w	800944a <_printf_float+0xc2>
 8009762:	ee18 3a10 	vmov	r3, s16
 8009766:	4652      	mov	r2, sl
 8009768:	4631      	mov	r1, r6
 800976a:	4628      	mov	r0, r5
 800976c:	47b8      	blx	r7
 800976e:	3001      	adds	r0, #1
 8009770:	f43f ae6b 	beq.w	800944a <_printf_float+0xc2>
 8009774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009778:	2200      	movs	r2, #0
 800977a:	2300      	movs	r3, #0
 800977c:	f7f7 f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009780:	b9d8      	cbnz	r0, 80097ba <_printf_float+0x432>
 8009782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009784:	f108 0201 	add.w	r2, r8, #1
 8009788:	3b01      	subs	r3, #1
 800978a:	4631      	mov	r1, r6
 800978c:	4628      	mov	r0, r5
 800978e:	47b8      	blx	r7
 8009790:	3001      	adds	r0, #1
 8009792:	d10e      	bne.n	80097b2 <_printf_float+0x42a>
 8009794:	e659      	b.n	800944a <_printf_float+0xc2>
 8009796:	2301      	movs	r3, #1
 8009798:	4652      	mov	r2, sl
 800979a:	4631      	mov	r1, r6
 800979c:	4628      	mov	r0, r5
 800979e:	47b8      	blx	r7
 80097a0:	3001      	adds	r0, #1
 80097a2:	f43f ae52 	beq.w	800944a <_printf_float+0xc2>
 80097a6:	f108 0801 	add.w	r8, r8, #1
 80097aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ac:	3b01      	subs	r3, #1
 80097ae:	4543      	cmp	r3, r8
 80097b0:	dcf1      	bgt.n	8009796 <_printf_float+0x40e>
 80097b2:	464b      	mov	r3, r9
 80097b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097b8:	e6dc      	b.n	8009574 <_printf_float+0x1ec>
 80097ba:	f04f 0800 	mov.w	r8, #0
 80097be:	f104 0a1a 	add.w	sl, r4, #26
 80097c2:	e7f2      	b.n	80097aa <_printf_float+0x422>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4642      	mov	r2, r8
 80097c8:	e7df      	b.n	800978a <_printf_float+0x402>
 80097ca:	2301      	movs	r3, #1
 80097cc:	464a      	mov	r2, r9
 80097ce:	4631      	mov	r1, r6
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b8      	blx	r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	f43f ae38 	beq.w	800944a <_printf_float+0xc2>
 80097da:	f108 0801 	add.w	r8, r8, #1
 80097de:	68e3      	ldr	r3, [r4, #12]
 80097e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097e2:	1a5b      	subs	r3, r3, r1
 80097e4:	4543      	cmp	r3, r8
 80097e6:	dcf0      	bgt.n	80097ca <_printf_float+0x442>
 80097e8:	e6fa      	b.n	80095e0 <_printf_float+0x258>
 80097ea:	f04f 0800 	mov.w	r8, #0
 80097ee:	f104 0919 	add.w	r9, r4, #25
 80097f2:	e7f4      	b.n	80097de <_printf_float+0x456>

080097f4 <_printf_common>:
 80097f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f8:	4616      	mov	r6, r2
 80097fa:	4699      	mov	r9, r3
 80097fc:	688a      	ldr	r2, [r1, #8]
 80097fe:	690b      	ldr	r3, [r1, #16]
 8009800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009804:	4293      	cmp	r3, r2
 8009806:	bfb8      	it	lt
 8009808:	4613      	movlt	r3, r2
 800980a:	6033      	str	r3, [r6, #0]
 800980c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009810:	4607      	mov	r7, r0
 8009812:	460c      	mov	r4, r1
 8009814:	b10a      	cbz	r2, 800981a <_printf_common+0x26>
 8009816:	3301      	adds	r3, #1
 8009818:	6033      	str	r3, [r6, #0]
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	0699      	lsls	r1, r3, #26
 800981e:	bf42      	ittt	mi
 8009820:	6833      	ldrmi	r3, [r6, #0]
 8009822:	3302      	addmi	r3, #2
 8009824:	6033      	strmi	r3, [r6, #0]
 8009826:	6825      	ldr	r5, [r4, #0]
 8009828:	f015 0506 	ands.w	r5, r5, #6
 800982c:	d106      	bne.n	800983c <_printf_common+0x48>
 800982e:	f104 0a19 	add.w	sl, r4, #25
 8009832:	68e3      	ldr	r3, [r4, #12]
 8009834:	6832      	ldr	r2, [r6, #0]
 8009836:	1a9b      	subs	r3, r3, r2
 8009838:	42ab      	cmp	r3, r5
 800983a:	dc26      	bgt.n	800988a <_printf_common+0x96>
 800983c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009840:	1e13      	subs	r3, r2, #0
 8009842:	6822      	ldr	r2, [r4, #0]
 8009844:	bf18      	it	ne
 8009846:	2301      	movne	r3, #1
 8009848:	0692      	lsls	r2, r2, #26
 800984a:	d42b      	bmi.n	80098a4 <_printf_common+0xb0>
 800984c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009850:	4649      	mov	r1, r9
 8009852:	4638      	mov	r0, r7
 8009854:	47c0      	blx	r8
 8009856:	3001      	adds	r0, #1
 8009858:	d01e      	beq.n	8009898 <_printf_common+0xa4>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	68e5      	ldr	r5, [r4, #12]
 800985e:	6832      	ldr	r2, [r6, #0]
 8009860:	f003 0306 	and.w	r3, r3, #6
 8009864:	2b04      	cmp	r3, #4
 8009866:	bf08      	it	eq
 8009868:	1aad      	subeq	r5, r5, r2
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	6922      	ldr	r2, [r4, #16]
 800986e:	bf0c      	ite	eq
 8009870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009874:	2500      	movne	r5, #0
 8009876:	4293      	cmp	r3, r2
 8009878:	bfc4      	itt	gt
 800987a:	1a9b      	subgt	r3, r3, r2
 800987c:	18ed      	addgt	r5, r5, r3
 800987e:	2600      	movs	r6, #0
 8009880:	341a      	adds	r4, #26
 8009882:	42b5      	cmp	r5, r6
 8009884:	d11a      	bne.n	80098bc <_printf_common+0xc8>
 8009886:	2000      	movs	r0, #0
 8009888:	e008      	b.n	800989c <_printf_common+0xa8>
 800988a:	2301      	movs	r3, #1
 800988c:	4652      	mov	r2, sl
 800988e:	4649      	mov	r1, r9
 8009890:	4638      	mov	r0, r7
 8009892:	47c0      	blx	r8
 8009894:	3001      	adds	r0, #1
 8009896:	d103      	bne.n	80098a0 <_printf_common+0xac>
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a0:	3501      	adds	r5, #1
 80098a2:	e7c6      	b.n	8009832 <_printf_common+0x3e>
 80098a4:	18e1      	adds	r1, r4, r3
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	2030      	movs	r0, #48	; 0x30
 80098aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ae:	4422      	add	r2, r4
 80098b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098b8:	3302      	adds	r3, #2
 80098ba:	e7c7      	b.n	800984c <_printf_common+0x58>
 80098bc:	2301      	movs	r3, #1
 80098be:	4622      	mov	r2, r4
 80098c0:	4649      	mov	r1, r9
 80098c2:	4638      	mov	r0, r7
 80098c4:	47c0      	blx	r8
 80098c6:	3001      	adds	r0, #1
 80098c8:	d0e6      	beq.n	8009898 <_printf_common+0xa4>
 80098ca:	3601      	adds	r6, #1
 80098cc:	e7d9      	b.n	8009882 <_printf_common+0x8e>
	...

080098d0 <_printf_i>:
 80098d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	7e0f      	ldrb	r7, [r1, #24]
 80098d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098d8:	2f78      	cmp	r7, #120	; 0x78
 80098da:	4691      	mov	r9, r2
 80098dc:	4680      	mov	r8, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	469a      	mov	sl, r3
 80098e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098e6:	d807      	bhi.n	80098f8 <_printf_i+0x28>
 80098e8:	2f62      	cmp	r7, #98	; 0x62
 80098ea:	d80a      	bhi.n	8009902 <_printf_i+0x32>
 80098ec:	2f00      	cmp	r7, #0
 80098ee:	f000 80d8 	beq.w	8009aa2 <_printf_i+0x1d2>
 80098f2:	2f58      	cmp	r7, #88	; 0x58
 80098f4:	f000 80a3 	beq.w	8009a3e <_printf_i+0x16e>
 80098f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009900:	e03a      	b.n	8009978 <_printf_i+0xa8>
 8009902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009906:	2b15      	cmp	r3, #21
 8009908:	d8f6      	bhi.n	80098f8 <_printf_i+0x28>
 800990a:	a101      	add	r1, pc, #4	; (adr r1, 8009910 <_printf_i+0x40>)
 800990c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009910:	08009969 	.word	0x08009969
 8009914:	0800997d 	.word	0x0800997d
 8009918:	080098f9 	.word	0x080098f9
 800991c:	080098f9 	.word	0x080098f9
 8009920:	080098f9 	.word	0x080098f9
 8009924:	080098f9 	.word	0x080098f9
 8009928:	0800997d 	.word	0x0800997d
 800992c:	080098f9 	.word	0x080098f9
 8009930:	080098f9 	.word	0x080098f9
 8009934:	080098f9 	.word	0x080098f9
 8009938:	080098f9 	.word	0x080098f9
 800993c:	08009a89 	.word	0x08009a89
 8009940:	080099ad 	.word	0x080099ad
 8009944:	08009a6b 	.word	0x08009a6b
 8009948:	080098f9 	.word	0x080098f9
 800994c:	080098f9 	.word	0x080098f9
 8009950:	08009aab 	.word	0x08009aab
 8009954:	080098f9 	.word	0x080098f9
 8009958:	080099ad 	.word	0x080099ad
 800995c:	080098f9 	.word	0x080098f9
 8009960:	080098f9 	.word	0x080098f9
 8009964:	08009a73 	.word	0x08009a73
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	1d1a      	adds	r2, r3, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	602a      	str	r2, [r5, #0]
 8009970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009978:	2301      	movs	r3, #1
 800997a:	e0a3      	b.n	8009ac4 <_printf_i+0x1f4>
 800997c:	6820      	ldr	r0, [r4, #0]
 800997e:	6829      	ldr	r1, [r5, #0]
 8009980:	0606      	lsls	r6, r0, #24
 8009982:	f101 0304 	add.w	r3, r1, #4
 8009986:	d50a      	bpl.n	800999e <_printf_i+0xce>
 8009988:	680e      	ldr	r6, [r1, #0]
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	2e00      	cmp	r6, #0
 800998e:	da03      	bge.n	8009998 <_printf_i+0xc8>
 8009990:	232d      	movs	r3, #45	; 0x2d
 8009992:	4276      	negs	r6, r6
 8009994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009998:	485e      	ldr	r0, [pc, #376]	; (8009b14 <_printf_i+0x244>)
 800999a:	230a      	movs	r3, #10
 800999c:	e019      	b.n	80099d2 <_printf_i+0x102>
 800999e:	680e      	ldr	r6, [r1, #0]
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099a6:	bf18      	it	ne
 80099a8:	b236      	sxthne	r6, r6
 80099aa:	e7ef      	b.n	800998c <_printf_i+0xbc>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	6820      	ldr	r0, [r4, #0]
 80099b0:	1d19      	adds	r1, r3, #4
 80099b2:	6029      	str	r1, [r5, #0]
 80099b4:	0601      	lsls	r1, r0, #24
 80099b6:	d501      	bpl.n	80099bc <_printf_i+0xec>
 80099b8:	681e      	ldr	r6, [r3, #0]
 80099ba:	e002      	b.n	80099c2 <_printf_i+0xf2>
 80099bc:	0646      	lsls	r6, r0, #25
 80099be:	d5fb      	bpl.n	80099b8 <_printf_i+0xe8>
 80099c0:	881e      	ldrh	r6, [r3, #0]
 80099c2:	4854      	ldr	r0, [pc, #336]	; (8009b14 <_printf_i+0x244>)
 80099c4:	2f6f      	cmp	r7, #111	; 0x6f
 80099c6:	bf0c      	ite	eq
 80099c8:	2308      	moveq	r3, #8
 80099ca:	230a      	movne	r3, #10
 80099cc:	2100      	movs	r1, #0
 80099ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099d2:	6865      	ldr	r5, [r4, #4]
 80099d4:	60a5      	str	r5, [r4, #8]
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	bfa2      	ittt	ge
 80099da:	6821      	ldrge	r1, [r4, #0]
 80099dc:	f021 0104 	bicge.w	r1, r1, #4
 80099e0:	6021      	strge	r1, [r4, #0]
 80099e2:	b90e      	cbnz	r6, 80099e8 <_printf_i+0x118>
 80099e4:	2d00      	cmp	r5, #0
 80099e6:	d04d      	beq.n	8009a84 <_printf_i+0x1b4>
 80099e8:	4615      	mov	r5, r2
 80099ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80099ee:	fb03 6711 	mls	r7, r3, r1, r6
 80099f2:	5dc7      	ldrb	r7, [r0, r7]
 80099f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099f8:	4637      	mov	r7, r6
 80099fa:	42bb      	cmp	r3, r7
 80099fc:	460e      	mov	r6, r1
 80099fe:	d9f4      	bls.n	80099ea <_printf_i+0x11a>
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d10b      	bne.n	8009a1c <_printf_i+0x14c>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	07de      	lsls	r6, r3, #31
 8009a08:	d508      	bpl.n	8009a1c <_printf_i+0x14c>
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	6861      	ldr	r1, [r4, #4]
 8009a0e:	4299      	cmp	r1, r3
 8009a10:	bfde      	ittt	le
 8009a12:	2330      	movle	r3, #48	; 0x30
 8009a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a1c:	1b52      	subs	r2, r2, r5
 8009a1e:	6122      	str	r2, [r4, #16]
 8009a20:	f8cd a000 	str.w	sl, [sp]
 8009a24:	464b      	mov	r3, r9
 8009a26:	aa03      	add	r2, sp, #12
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	f7ff fee2 	bl	80097f4 <_printf_common>
 8009a30:	3001      	adds	r0, #1
 8009a32:	d14c      	bne.n	8009ace <_printf_i+0x1fe>
 8009a34:	f04f 30ff 	mov.w	r0, #4294967295
 8009a38:	b004      	add	sp, #16
 8009a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3e:	4835      	ldr	r0, [pc, #212]	; (8009b14 <_printf_i+0x244>)
 8009a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a44:	6829      	ldr	r1, [r5, #0]
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a4c:	6029      	str	r1, [r5, #0]
 8009a4e:	061d      	lsls	r5, r3, #24
 8009a50:	d514      	bpl.n	8009a7c <_printf_i+0x1ac>
 8009a52:	07df      	lsls	r7, r3, #31
 8009a54:	bf44      	itt	mi
 8009a56:	f043 0320 	orrmi.w	r3, r3, #32
 8009a5a:	6023      	strmi	r3, [r4, #0]
 8009a5c:	b91e      	cbnz	r6, 8009a66 <_printf_i+0x196>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	f023 0320 	bic.w	r3, r3, #32
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	2310      	movs	r3, #16
 8009a68:	e7b0      	b.n	80099cc <_printf_i+0xfc>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	f043 0320 	orr.w	r3, r3, #32
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	2378      	movs	r3, #120	; 0x78
 8009a74:	4828      	ldr	r0, [pc, #160]	; (8009b18 <_printf_i+0x248>)
 8009a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a7a:	e7e3      	b.n	8009a44 <_printf_i+0x174>
 8009a7c:	0659      	lsls	r1, r3, #25
 8009a7e:	bf48      	it	mi
 8009a80:	b2b6      	uxthmi	r6, r6
 8009a82:	e7e6      	b.n	8009a52 <_printf_i+0x182>
 8009a84:	4615      	mov	r5, r2
 8009a86:	e7bb      	b.n	8009a00 <_printf_i+0x130>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	6826      	ldr	r6, [r4, #0]
 8009a8c:	6961      	ldr	r1, [r4, #20]
 8009a8e:	1d18      	adds	r0, r3, #4
 8009a90:	6028      	str	r0, [r5, #0]
 8009a92:	0635      	lsls	r5, r6, #24
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	d501      	bpl.n	8009a9c <_printf_i+0x1cc>
 8009a98:	6019      	str	r1, [r3, #0]
 8009a9a:	e002      	b.n	8009aa2 <_printf_i+0x1d2>
 8009a9c:	0670      	lsls	r0, r6, #25
 8009a9e:	d5fb      	bpl.n	8009a98 <_printf_i+0x1c8>
 8009aa0:	8019      	strh	r1, [r3, #0]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	4615      	mov	r5, r2
 8009aa8:	e7ba      	b.n	8009a20 <_printf_i+0x150>
 8009aaa:	682b      	ldr	r3, [r5, #0]
 8009aac:	1d1a      	adds	r2, r3, #4
 8009aae:	602a      	str	r2, [r5, #0]
 8009ab0:	681d      	ldr	r5, [r3, #0]
 8009ab2:	6862      	ldr	r2, [r4, #4]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f7f6 fb92 	bl	80001e0 <memchr>
 8009abc:	b108      	cbz	r0, 8009ac2 <_printf_i+0x1f2>
 8009abe:	1b40      	subs	r0, r0, r5
 8009ac0:	6060      	str	r0, [r4, #4]
 8009ac2:	6863      	ldr	r3, [r4, #4]
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009acc:	e7a8      	b.n	8009a20 <_printf_i+0x150>
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	47d0      	blx	sl
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d0ab      	beq.n	8009a34 <_printf_i+0x164>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	079b      	lsls	r3, r3, #30
 8009ae0:	d413      	bmi.n	8009b0a <_printf_i+0x23a>
 8009ae2:	68e0      	ldr	r0, [r4, #12]
 8009ae4:	9b03      	ldr	r3, [sp, #12]
 8009ae6:	4298      	cmp	r0, r3
 8009ae8:	bfb8      	it	lt
 8009aea:	4618      	movlt	r0, r3
 8009aec:	e7a4      	b.n	8009a38 <_printf_i+0x168>
 8009aee:	2301      	movs	r3, #1
 8009af0:	4632      	mov	r2, r6
 8009af2:	4649      	mov	r1, r9
 8009af4:	4640      	mov	r0, r8
 8009af6:	47d0      	blx	sl
 8009af8:	3001      	adds	r0, #1
 8009afa:	d09b      	beq.n	8009a34 <_printf_i+0x164>
 8009afc:	3501      	adds	r5, #1
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	9903      	ldr	r1, [sp, #12]
 8009b02:	1a5b      	subs	r3, r3, r1
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	dcf2      	bgt.n	8009aee <_printf_i+0x21e>
 8009b08:	e7eb      	b.n	8009ae2 <_printf_i+0x212>
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	f104 0619 	add.w	r6, r4, #25
 8009b10:	e7f5      	b.n	8009afe <_printf_i+0x22e>
 8009b12:	bf00      	nop
 8009b14:	0800c952 	.word	0x0800c952
 8009b18:	0800c963 	.word	0x0800c963

08009b1c <iprintf>:
 8009b1c:	b40f      	push	{r0, r1, r2, r3}
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <iprintf+0x2c>)
 8009b20:	b513      	push	{r0, r1, r4, lr}
 8009b22:	681c      	ldr	r4, [r3, #0]
 8009b24:	b124      	cbz	r4, 8009b30 <iprintf+0x14>
 8009b26:	69a3      	ldr	r3, [r4, #24]
 8009b28:	b913      	cbnz	r3, 8009b30 <iprintf+0x14>
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f001 f8d8 	bl	800ace0 <__sinit>
 8009b30:	ab05      	add	r3, sp, #20
 8009b32:	9a04      	ldr	r2, [sp, #16]
 8009b34:	68a1      	ldr	r1, [r4, #8]
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f001 fe95 	bl	800b868 <_vfiprintf_r>
 8009b3e:	b002      	add	sp, #8
 8009b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b44:	b004      	add	sp, #16
 8009b46:	4770      	bx	lr
 8009b48:	20000010 	.word	0x20000010

08009b4c <_puts_r>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	460e      	mov	r6, r1
 8009b50:	4605      	mov	r5, r0
 8009b52:	b118      	cbz	r0, 8009b5c <_puts_r+0x10>
 8009b54:	6983      	ldr	r3, [r0, #24]
 8009b56:	b90b      	cbnz	r3, 8009b5c <_puts_r+0x10>
 8009b58:	f001 f8c2 	bl	800ace0 <__sinit>
 8009b5c:	69ab      	ldr	r3, [r5, #24]
 8009b5e:	68ac      	ldr	r4, [r5, #8]
 8009b60:	b913      	cbnz	r3, 8009b68 <_puts_r+0x1c>
 8009b62:	4628      	mov	r0, r5
 8009b64:	f001 f8bc 	bl	800ace0 <__sinit>
 8009b68:	4b2c      	ldr	r3, [pc, #176]	; (8009c1c <_puts_r+0xd0>)
 8009b6a:	429c      	cmp	r4, r3
 8009b6c:	d120      	bne.n	8009bb0 <_puts_r+0x64>
 8009b6e:	686c      	ldr	r4, [r5, #4]
 8009b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	d405      	bmi.n	8009b82 <_puts_r+0x36>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	0598      	lsls	r0, r3, #22
 8009b7a:	d402      	bmi.n	8009b82 <_puts_r+0x36>
 8009b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b7e:	f001 f952 	bl	800ae26 <__retarget_lock_acquire_recursive>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	0719      	lsls	r1, r3, #28
 8009b86:	d51d      	bpl.n	8009bc4 <_puts_r+0x78>
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	b1db      	cbz	r3, 8009bc4 <_puts_r+0x78>
 8009b8c:	3e01      	subs	r6, #1
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b94:	3b01      	subs	r3, #1
 8009b96:	60a3      	str	r3, [r4, #8]
 8009b98:	bb39      	cbnz	r1, 8009bea <_puts_r+0x9e>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	da38      	bge.n	8009c10 <_puts_r+0xc4>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	210a      	movs	r1, #10
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f000 f848 	bl	8009c38 <__swbuf_r>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d011      	beq.n	8009bd0 <_puts_r+0x84>
 8009bac:	250a      	movs	r5, #10
 8009bae:	e011      	b.n	8009bd4 <_puts_r+0x88>
 8009bb0:	4b1b      	ldr	r3, [pc, #108]	; (8009c20 <_puts_r+0xd4>)
 8009bb2:	429c      	cmp	r4, r3
 8009bb4:	d101      	bne.n	8009bba <_puts_r+0x6e>
 8009bb6:	68ac      	ldr	r4, [r5, #8]
 8009bb8:	e7da      	b.n	8009b70 <_puts_r+0x24>
 8009bba:	4b1a      	ldr	r3, [pc, #104]	; (8009c24 <_puts_r+0xd8>)
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	bf08      	it	eq
 8009bc0:	68ec      	ldreq	r4, [r5, #12]
 8009bc2:	e7d5      	b.n	8009b70 <_puts_r+0x24>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f888 	bl	8009cdc <__swsetup_r>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d0dd      	beq.n	8009b8c <_puts_r+0x40>
 8009bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8009bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bd6:	07da      	lsls	r2, r3, #31
 8009bd8:	d405      	bmi.n	8009be6 <_puts_r+0x9a>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	059b      	lsls	r3, r3, #22
 8009bde:	d402      	bmi.n	8009be6 <_puts_r+0x9a>
 8009be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009be2:	f001 f921 	bl	800ae28 <__retarget_lock_release_recursive>
 8009be6:	4628      	mov	r0, r5
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	da04      	bge.n	8009bf8 <_puts_r+0xac>
 8009bee:	69a2      	ldr	r2, [r4, #24]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	dc06      	bgt.n	8009c02 <_puts_r+0xb6>
 8009bf4:	290a      	cmp	r1, #10
 8009bf6:	d004      	beq.n	8009c02 <_puts_r+0xb6>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	6022      	str	r2, [r4, #0]
 8009bfe:	7019      	strb	r1, [r3, #0]
 8009c00:	e7c5      	b.n	8009b8e <_puts_r+0x42>
 8009c02:	4622      	mov	r2, r4
 8009c04:	4628      	mov	r0, r5
 8009c06:	f000 f817 	bl	8009c38 <__swbuf_r>
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d1bf      	bne.n	8009b8e <_puts_r+0x42>
 8009c0e:	e7df      	b.n	8009bd0 <_puts_r+0x84>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	250a      	movs	r5, #10
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	6022      	str	r2, [r4, #0]
 8009c18:	701d      	strb	r5, [r3, #0]
 8009c1a:	e7db      	b.n	8009bd4 <_puts_r+0x88>
 8009c1c:	0800ca24 	.word	0x0800ca24
 8009c20:	0800ca44 	.word	0x0800ca44
 8009c24:	0800ca04 	.word	0x0800ca04

08009c28 <puts>:
 8009c28:	4b02      	ldr	r3, [pc, #8]	; (8009c34 <puts+0xc>)
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	f7ff bf8d 	b.w	8009b4c <_puts_r>
 8009c32:	bf00      	nop
 8009c34:	20000010 	.word	0x20000010

08009c38 <__swbuf_r>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	460e      	mov	r6, r1
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	4605      	mov	r5, r0
 8009c40:	b118      	cbz	r0, 8009c4a <__swbuf_r+0x12>
 8009c42:	6983      	ldr	r3, [r0, #24]
 8009c44:	b90b      	cbnz	r3, 8009c4a <__swbuf_r+0x12>
 8009c46:	f001 f84b 	bl	800ace0 <__sinit>
 8009c4a:	4b21      	ldr	r3, [pc, #132]	; (8009cd0 <__swbuf_r+0x98>)
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	d12b      	bne.n	8009ca8 <__swbuf_r+0x70>
 8009c50:	686c      	ldr	r4, [r5, #4]
 8009c52:	69a3      	ldr	r3, [r4, #24]
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	071a      	lsls	r2, r3, #28
 8009c5a:	d52f      	bpl.n	8009cbc <__swbuf_r+0x84>
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	b36b      	cbz	r3, 8009cbc <__swbuf_r+0x84>
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	1ac0      	subs	r0, r0, r3
 8009c66:	6963      	ldr	r3, [r4, #20]
 8009c68:	b2f6      	uxtb	r6, r6
 8009c6a:	4283      	cmp	r3, r0
 8009c6c:	4637      	mov	r7, r6
 8009c6e:	dc04      	bgt.n	8009c7a <__swbuf_r+0x42>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 ffa0 	bl	800abb8 <_fflush_r>
 8009c78:	bb30      	cbnz	r0, 8009cc8 <__swbuf_r+0x90>
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	6022      	str	r2, [r4, #0]
 8009c86:	701e      	strb	r6, [r3, #0]
 8009c88:	6963      	ldr	r3, [r4, #20]
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	4283      	cmp	r3, r0
 8009c8e:	d004      	beq.n	8009c9a <__swbuf_r+0x62>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	07db      	lsls	r3, r3, #31
 8009c94:	d506      	bpl.n	8009ca4 <__swbuf_r+0x6c>
 8009c96:	2e0a      	cmp	r6, #10
 8009c98:	d104      	bne.n	8009ca4 <__swbuf_r+0x6c>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f000 ff8b 	bl	800abb8 <_fflush_r>
 8009ca2:	b988      	cbnz	r0, 8009cc8 <__swbuf_r+0x90>
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca8:	4b0a      	ldr	r3, [pc, #40]	; (8009cd4 <__swbuf_r+0x9c>)
 8009caa:	429c      	cmp	r4, r3
 8009cac:	d101      	bne.n	8009cb2 <__swbuf_r+0x7a>
 8009cae:	68ac      	ldr	r4, [r5, #8]
 8009cb0:	e7cf      	b.n	8009c52 <__swbuf_r+0x1a>
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <__swbuf_r+0xa0>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	bf08      	it	eq
 8009cb8:	68ec      	ldreq	r4, [r5, #12]
 8009cba:	e7ca      	b.n	8009c52 <__swbuf_r+0x1a>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f000 f80c 	bl	8009cdc <__swsetup_r>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d0cb      	beq.n	8009c60 <__swbuf_r+0x28>
 8009cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8009ccc:	e7ea      	b.n	8009ca4 <__swbuf_r+0x6c>
 8009cce:	bf00      	nop
 8009cd0:	0800ca24 	.word	0x0800ca24
 8009cd4:	0800ca44 	.word	0x0800ca44
 8009cd8:	0800ca04 	.word	0x0800ca04

08009cdc <__swsetup_r>:
 8009cdc:	4b32      	ldr	r3, [pc, #200]	; (8009da8 <__swsetup_r+0xcc>)
 8009cde:	b570      	push	{r4, r5, r6, lr}
 8009ce0:	681d      	ldr	r5, [r3, #0]
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	b125      	cbz	r5, 8009cf2 <__swsetup_r+0x16>
 8009ce8:	69ab      	ldr	r3, [r5, #24]
 8009cea:	b913      	cbnz	r3, 8009cf2 <__swsetup_r+0x16>
 8009cec:	4628      	mov	r0, r5
 8009cee:	f000 fff7 	bl	800ace0 <__sinit>
 8009cf2:	4b2e      	ldr	r3, [pc, #184]	; (8009dac <__swsetup_r+0xd0>)
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	d10f      	bne.n	8009d18 <__swsetup_r+0x3c>
 8009cf8:	686c      	ldr	r4, [r5, #4]
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d00:	0719      	lsls	r1, r3, #28
 8009d02:	d42c      	bmi.n	8009d5e <__swsetup_r+0x82>
 8009d04:	06dd      	lsls	r5, r3, #27
 8009d06:	d411      	bmi.n	8009d2c <__swsetup_r+0x50>
 8009d08:	2309      	movs	r3, #9
 8009d0a:	6033      	str	r3, [r6, #0]
 8009d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	f04f 30ff 	mov.w	r0, #4294967295
 8009d16:	e03e      	b.n	8009d96 <__swsetup_r+0xba>
 8009d18:	4b25      	ldr	r3, [pc, #148]	; (8009db0 <__swsetup_r+0xd4>)
 8009d1a:	429c      	cmp	r4, r3
 8009d1c:	d101      	bne.n	8009d22 <__swsetup_r+0x46>
 8009d1e:	68ac      	ldr	r4, [r5, #8]
 8009d20:	e7eb      	b.n	8009cfa <__swsetup_r+0x1e>
 8009d22:	4b24      	ldr	r3, [pc, #144]	; (8009db4 <__swsetup_r+0xd8>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	bf08      	it	eq
 8009d28:	68ec      	ldreq	r4, [r5, #12]
 8009d2a:	e7e6      	b.n	8009cfa <__swsetup_r+0x1e>
 8009d2c:	0758      	lsls	r0, r3, #29
 8009d2e:	d512      	bpl.n	8009d56 <__swsetup_r+0x7a>
 8009d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d32:	b141      	cbz	r1, 8009d46 <__swsetup_r+0x6a>
 8009d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d002      	beq.n	8009d42 <__swsetup_r+0x66>
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f001 fc89 	bl	800b654 <_free_r>
 8009d42:	2300      	movs	r3, #0
 8009d44:	6363      	str	r3, [r4, #52]	; 0x34
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f043 0308 	orr.w	r3, r3, #8
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	b94b      	cbnz	r3, 8009d76 <__swsetup_r+0x9a>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d6c:	d003      	beq.n	8009d76 <__swsetup_r+0x9a>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4630      	mov	r0, r6
 8009d72:	f001 f87f 	bl	800ae74 <__smakebuf_r>
 8009d76:	89a0      	ldrh	r0, [r4, #12]
 8009d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7c:	f010 0301 	ands.w	r3, r0, #1
 8009d80:	d00a      	beq.n	8009d98 <__swsetup_r+0xbc>
 8009d82:	2300      	movs	r3, #0
 8009d84:	60a3      	str	r3, [r4, #8]
 8009d86:	6963      	ldr	r3, [r4, #20]
 8009d88:	425b      	negs	r3, r3
 8009d8a:	61a3      	str	r3, [r4, #24]
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	b943      	cbnz	r3, 8009da2 <__swsetup_r+0xc6>
 8009d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d94:	d1ba      	bne.n	8009d0c <__swsetup_r+0x30>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}
 8009d98:	0781      	lsls	r1, r0, #30
 8009d9a:	bf58      	it	pl
 8009d9c:	6963      	ldrpl	r3, [r4, #20]
 8009d9e:	60a3      	str	r3, [r4, #8]
 8009da0:	e7f4      	b.n	8009d8c <__swsetup_r+0xb0>
 8009da2:	2000      	movs	r0, #0
 8009da4:	e7f7      	b.n	8009d96 <__swsetup_r+0xba>
 8009da6:	bf00      	nop
 8009da8:	20000010 	.word	0x20000010
 8009dac:	0800ca24 	.word	0x0800ca24
 8009db0:	0800ca44 	.word	0x0800ca44
 8009db4:	0800ca04 	.word	0x0800ca04

08009db8 <quorem>:
 8009db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	6903      	ldr	r3, [r0, #16]
 8009dbe:	690c      	ldr	r4, [r1, #16]
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	f2c0 8081 	blt.w	8009eca <quorem+0x112>
 8009dc8:	3c01      	subs	r4, #1
 8009dca:	f101 0814 	add.w	r8, r1, #20
 8009dce:	f100 0514 	add.w	r5, r0, #20
 8009dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ddc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009de0:	3301      	adds	r3, #1
 8009de2:	429a      	cmp	r2, r3
 8009de4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009de8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dec:	fbb2 f6f3 	udiv	r6, r2, r3
 8009df0:	d331      	bcc.n	8009e56 <quorem+0x9e>
 8009df2:	f04f 0e00 	mov.w	lr, #0
 8009df6:	4640      	mov	r0, r8
 8009df8:	46ac      	mov	ip, r5
 8009dfa:	46f2      	mov	sl, lr
 8009dfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e00:	b293      	uxth	r3, r2
 8009e02:	fb06 e303 	mla	r3, r6, r3, lr
 8009e06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e10:	f8dc a000 	ldr.w	sl, [ip]
 8009e14:	0c12      	lsrs	r2, r2, #16
 8009e16:	fa13 f38a 	uxtah	r3, r3, sl
 8009e1a:	fb06 e202 	mla	r2, r6, r2, lr
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e26:	b292      	uxth	r2, r2
 8009e28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e30:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e34:	4581      	cmp	r9, r0
 8009e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e3a:	f84c 3b04 	str.w	r3, [ip], #4
 8009e3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e42:	d2db      	bcs.n	8009dfc <quorem+0x44>
 8009e44:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e48:	b92b      	cbnz	r3, 8009e56 <quorem+0x9e>
 8009e4a:	9b01      	ldr	r3, [sp, #4]
 8009e4c:	3b04      	subs	r3, #4
 8009e4e:	429d      	cmp	r5, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	d32e      	bcc.n	8009eb2 <quorem+0xfa>
 8009e54:	613c      	str	r4, [r7, #16]
 8009e56:	4638      	mov	r0, r7
 8009e58:	f001 fae4 	bl	800b424 <__mcmp>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	db24      	blt.n	8009eaa <quorem+0xf2>
 8009e60:	3601      	adds	r6, #1
 8009e62:	4628      	mov	r0, r5
 8009e64:	f04f 0c00 	mov.w	ip, #0
 8009e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e6c:	f8d0 e000 	ldr.w	lr, [r0]
 8009e70:	b293      	uxth	r3, r2
 8009e72:	ebac 0303 	sub.w	r3, ip, r3
 8009e76:	0c12      	lsrs	r2, r2, #16
 8009e78:	fa13 f38e 	uxtah	r3, r3, lr
 8009e7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e8a:	45c1      	cmp	r9, r8
 8009e8c:	f840 3b04 	str.w	r3, [r0], #4
 8009e90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e94:	d2e8      	bcs.n	8009e68 <quorem+0xb0>
 8009e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e9e:	b922      	cbnz	r2, 8009eaa <quorem+0xf2>
 8009ea0:	3b04      	subs	r3, #4
 8009ea2:	429d      	cmp	r5, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	d30a      	bcc.n	8009ebe <quorem+0x106>
 8009ea8:	613c      	str	r4, [r7, #16]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	b003      	add	sp, #12
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	3b04      	subs	r3, #4
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	d1cc      	bne.n	8009e54 <quorem+0x9c>
 8009eba:	3c01      	subs	r4, #1
 8009ebc:	e7c7      	b.n	8009e4e <quorem+0x96>
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	d1f0      	bne.n	8009ea8 <quorem+0xf0>
 8009ec6:	3c01      	subs	r4, #1
 8009ec8:	e7eb      	b.n	8009ea2 <quorem+0xea>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e7ee      	b.n	8009eac <quorem+0xf4>
	...

08009ed0 <_dtoa_r>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	ed2d 8b04 	vpush	{d8-d9}
 8009ed8:	ec57 6b10 	vmov	r6, r7, d0
 8009edc:	b093      	sub	sp, #76	; 0x4c
 8009ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ee0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ee4:	9106      	str	r1, [sp, #24]
 8009ee6:	ee10 aa10 	vmov	sl, s0
 8009eea:	4604      	mov	r4, r0
 8009eec:	9209      	str	r2, [sp, #36]	; 0x24
 8009eee:	930c      	str	r3, [sp, #48]	; 0x30
 8009ef0:	46bb      	mov	fp, r7
 8009ef2:	b975      	cbnz	r5, 8009f12 <_dtoa_r+0x42>
 8009ef4:	2010      	movs	r0, #16
 8009ef6:	f000 fffd 	bl	800aef4 <malloc>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6260      	str	r0, [r4, #36]	; 0x24
 8009efe:	b920      	cbnz	r0, 8009f0a <_dtoa_r+0x3a>
 8009f00:	4ba7      	ldr	r3, [pc, #668]	; (800a1a0 <_dtoa_r+0x2d0>)
 8009f02:	21ea      	movs	r1, #234	; 0xea
 8009f04:	48a7      	ldr	r0, [pc, #668]	; (800a1a4 <_dtoa_r+0x2d4>)
 8009f06:	f001 fe45 	bl	800bb94 <__assert_func>
 8009f0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f0e:	6005      	str	r5, [r0, #0]
 8009f10:	60c5      	str	r5, [r0, #12]
 8009f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f14:	6819      	ldr	r1, [r3, #0]
 8009f16:	b151      	cbz	r1, 8009f2e <_dtoa_r+0x5e>
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	604a      	str	r2, [r1, #4]
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	4093      	lsls	r3, r2
 8009f20:	608b      	str	r3, [r1, #8]
 8009f22:	4620      	mov	r0, r4
 8009f24:	f001 f83c 	bl	800afa0 <_Bfree>
 8009f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	1e3b      	subs	r3, r7, #0
 8009f30:	bfaa      	itet	ge
 8009f32:	2300      	movge	r3, #0
 8009f34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f38:	f8c8 3000 	strge.w	r3, [r8]
 8009f3c:	4b9a      	ldr	r3, [pc, #616]	; (800a1a8 <_dtoa_r+0x2d8>)
 8009f3e:	bfbc      	itt	lt
 8009f40:	2201      	movlt	r2, #1
 8009f42:	f8c8 2000 	strlt.w	r2, [r8]
 8009f46:	ea33 030b 	bics.w	r3, r3, fp
 8009f4a:	d11b      	bne.n	8009f84 <_dtoa_r+0xb4>
 8009f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f58:	4333      	orrs	r3, r6
 8009f5a:	f000 8592 	beq.w	800aa82 <_dtoa_r+0xbb2>
 8009f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f60:	b963      	cbnz	r3, 8009f7c <_dtoa_r+0xac>
 8009f62:	4b92      	ldr	r3, [pc, #584]	; (800a1ac <_dtoa_r+0x2dc>)
 8009f64:	e022      	b.n	8009fac <_dtoa_r+0xdc>
 8009f66:	4b92      	ldr	r3, [pc, #584]	; (800a1b0 <_dtoa_r+0x2e0>)
 8009f68:	9301      	str	r3, [sp, #4]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	9801      	ldr	r0, [sp, #4]
 8009f72:	b013      	add	sp, #76	; 0x4c
 8009f74:	ecbd 8b04 	vpop	{d8-d9}
 8009f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	4b8b      	ldr	r3, [pc, #556]	; (800a1ac <_dtoa_r+0x2dc>)
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	3303      	adds	r3, #3
 8009f82:	e7f3      	b.n	8009f6c <_dtoa_r+0x9c>
 8009f84:	2200      	movs	r2, #0
 8009f86:	2300      	movs	r3, #0
 8009f88:	4650      	mov	r0, sl
 8009f8a:	4659      	mov	r1, fp
 8009f8c:	f7f6 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f90:	ec4b ab19 	vmov	d9, sl, fp
 8009f94:	4680      	mov	r8, r0
 8009f96:	b158      	cbz	r0, 8009fb0 <_dtoa_r+0xe0>
 8009f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 856b 	beq.w	800aa7c <_dtoa_r+0xbac>
 8009fa6:	4883      	ldr	r0, [pc, #524]	; (800a1b4 <_dtoa_r+0x2e4>)
 8009fa8:	6018      	str	r0, [r3, #0]
 8009faa:	1e43      	subs	r3, r0, #1
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	e7df      	b.n	8009f70 <_dtoa_r+0xa0>
 8009fb0:	ec4b ab10 	vmov	d0, sl, fp
 8009fb4:	aa10      	add	r2, sp, #64	; 0x40
 8009fb6:	a911      	add	r1, sp, #68	; 0x44
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f001 fad9 	bl	800b570 <__d2b>
 8009fbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009fc2:	ee08 0a10 	vmov	s16, r0
 8009fc6:	2d00      	cmp	r5, #0
 8009fc8:	f000 8084 	beq.w	800a0d4 <_dtoa_r+0x204>
 8009fcc:	ee19 3a90 	vmov	r3, s19
 8009fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009fd8:	4656      	mov	r6, sl
 8009fda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009fde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fe2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009fe6:	4b74      	ldr	r3, [pc, #464]	; (800a1b8 <_dtoa_r+0x2e8>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 f94b 	bl	8000288 <__aeabi_dsub>
 8009ff2:	a365      	add	r3, pc, #404	; (adr r3, 800a188 <_dtoa_r+0x2b8>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 fafe 	bl	80005f8 <__aeabi_dmul>
 8009ffc:	a364      	add	r3, pc, #400	; (adr r3, 800a190 <_dtoa_r+0x2c0>)
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	f7f6 f943 	bl	800028c <__adddf3>
 800a006:	4606      	mov	r6, r0
 800a008:	4628      	mov	r0, r5
 800a00a:	460f      	mov	r7, r1
 800a00c:	f7f6 fa8a 	bl	8000524 <__aeabi_i2d>
 800a010:	a361      	add	r3, pc, #388	; (adr r3, 800a198 <_dtoa_r+0x2c8>)
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f7f6 faef 	bl	80005f8 <__aeabi_dmul>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4630      	mov	r0, r6
 800a020:	4639      	mov	r1, r7
 800a022:	f7f6 f933 	bl	800028c <__adddf3>
 800a026:	4606      	mov	r6, r0
 800a028:	460f      	mov	r7, r1
 800a02a:	f7f6 fd95 	bl	8000b58 <__aeabi_d2iz>
 800a02e:	2200      	movs	r2, #0
 800a030:	9000      	str	r0, [sp, #0]
 800a032:	2300      	movs	r3, #0
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 fd50 	bl	8000adc <__aeabi_dcmplt>
 800a03c:	b150      	cbz	r0, 800a054 <_dtoa_r+0x184>
 800a03e:	9800      	ldr	r0, [sp, #0]
 800a040:	f7f6 fa70 	bl	8000524 <__aeabi_i2d>
 800a044:	4632      	mov	r2, r6
 800a046:	463b      	mov	r3, r7
 800a048:	f7f6 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a04c:	b910      	cbnz	r0, 800a054 <_dtoa_r+0x184>
 800a04e:	9b00      	ldr	r3, [sp, #0]
 800a050:	3b01      	subs	r3, #1
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	2b16      	cmp	r3, #22
 800a058:	d85a      	bhi.n	800a110 <_dtoa_r+0x240>
 800a05a:	9a00      	ldr	r2, [sp, #0]
 800a05c:	4b57      	ldr	r3, [pc, #348]	; (800a1bc <_dtoa_r+0x2ec>)
 800a05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	ec51 0b19 	vmov	r0, r1, d9
 800a06a:	f7f6 fd37 	bl	8000adc <__aeabi_dcmplt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d050      	beq.n	800a114 <_dtoa_r+0x244>
 800a072:	9b00      	ldr	r3, [sp, #0]
 800a074:	3b01      	subs	r3, #1
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a07e:	1b5d      	subs	r5, r3, r5
 800a080:	1e6b      	subs	r3, r5, #1
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	bf45      	ittet	mi
 800a086:	f1c5 0301 	rsbmi	r3, r5, #1
 800a08a:	9304      	strmi	r3, [sp, #16]
 800a08c:	2300      	movpl	r3, #0
 800a08e:	2300      	movmi	r3, #0
 800a090:	bf4c      	ite	mi
 800a092:	9305      	strmi	r3, [sp, #20]
 800a094:	9304      	strpl	r3, [sp, #16]
 800a096:	9b00      	ldr	r3, [sp, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	db3d      	blt.n	800a118 <_dtoa_r+0x248>
 800a09c:	9b05      	ldr	r3, [sp, #20]
 800a09e:	9a00      	ldr	r2, [sp, #0]
 800a0a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a0a2:	4413      	add	r3, r2
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9307      	str	r3, [sp, #28]
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	f200 8089 	bhi.w	800a1c4 <_dtoa_r+0x2f4>
 800a0b2:	2b05      	cmp	r3, #5
 800a0b4:	bfc4      	itt	gt
 800a0b6:	3b04      	subgt	r3, #4
 800a0b8:	9306      	strgt	r3, [sp, #24]
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	f1a3 0302 	sub.w	r3, r3, #2
 800a0c0:	bfcc      	ite	gt
 800a0c2:	2500      	movgt	r5, #0
 800a0c4:	2501      	movle	r5, #1
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	f200 8087 	bhi.w	800a1da <_dtoa_r+0x30a>
 800a0cc:	e8df f003 	tbb	[pc, r3]
 800a0d0:	59383a2d 	.word	0x59383a2d
 800a0d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0d8:	441d      	add	r5, r3
 800a0da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	bfc1      	itttt	gt
 800a0e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a0ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800a0ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a0f2:	bfda      	itte	le
 800a0f4:	f1c3 0320 	rsble	r3, r3, #32
 800a0f8:	fa06 f003 	lslle.w	r0, r6, r3
 800a0fc:	4318      	orrgt	r0, r3
 800a0fe:	f7f6 fa01 	bl	8000504 <__aeabi_ui2d>
 800a102:	2301      	movs	r3, #1
 800a104:	4606      	mov	r6, r0
 800a106:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a10a:	3d01      	subs	r5, #1
 800a10c:	930e      	str	r3, [sp, #56]	; 0x38
 800a10e:	e76a      	b.n	8009fe6 <_dtoa_r+0x116>
 800a110:	2301      	movs	r3, #1
 800a112:	e7b2      	b.n	800a07a <_dtoa_r+0x1aa>
 800a114:	900b      	str	r0, [sp, #44]	; 0x2c
 800a116:	e7b1      	b.n	800a07c <_dtoa_r+0x1ac>
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	9a00      	ldr	r2, [sp, #0]
 800a11c:	1a9b      	subs	r3, r3, r2
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	4253      	negs	r3, r2
 800a122:	9307      	str	r3, [sp, #28]
 800a124:	2300      	movs	r3, #0
 800a126:	930a      	str	r3, [sp, #40]	; 0x28
 800a128:	e7bf      	b.n	800a0aa <_dtoa_r+0x1da>
 800a12a:	2300      	movs	r3, #0
 800a12c:	9308      	str	r3, [sp, #32]
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc55      	bgt.n	800a1e0 <_dtoa_r+0x310>
 800a134:	2301      	movs	r3, #1
 800a136:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a13a:	461a      	mov	r2, r3
 800a13c:	9209      	str	r2, [sp, #36]	; 0x24
 800a13e:	e00c      	b.n	800a15a <_dtoa_r+0x28a>
 800a140:	2301      	movs	r3, #1
 800a142:	e7f3      	b.n	800a12c <_dtoa_r+0x25c>
 800a144:	2300      	movs	r3, #0
 800a146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a148:	9308      	str	r3, [sp, #32]
 800a14a:	9b00      	ldr	r3, [sp, #0]
 800a14c:	4413      	add	r3, r2
 800a14e:	9302      	str	r3, [sp, #8]
 800a150:	3301      	adds	r3, #1
 800a152:	2b01      	cmp	r3, #1
 800a154:	9303      	str	r3, [sp, #12]
 800a156:	bfb8      	it	lt
 800a158:	2301      	movlt	r3, #1
 800a15a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a15c:	2200      	movs	r2, #0
 800a15e:	6042      	str	r2, [r0, #4]
 800a160:	2204      	movs	r2, #4
 800a162:	f102 0614 	add.w	r6, r2, #20
 800a166:	429e      	cmp	r6, r3
 800a168:	6841      	ldr	r1, [r0, #4]
 800a16a:	d93d      	bls.n	800a1e8 <_dtoa_r+0x318>
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 fed7 	bl	800af20 <_Balloc>
 800a172:	9001      	str	r0, [sp, #4]
 800a174:	2800      	cmp	r0, #0
 800a176:	d13b      	bne.n	800a1f0 <_dtoa_r+0x320>
 800a178:	4b11      	ldr	r3, [pc, #68]	; (800a1c0 <_dtoa_r+0x2f0>)
 800a17a:	4602      	mov	r2, r0
 800a17c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a180:	e6c0      	b.n	8009f04 <_dtoa_r+0x34>
 800a182:	2301      	movs	r3, #1
 800a184:	e7df      	b.n	800a146 <_dtoa_r+0x276>
 800a186:	bf00      	nop
 800a188:	636f4361 	.word	0x636f4361
 800a18c:	3fd287a7 	.word	0x3fd287a7
 800a190:	8b60c8b3 	.word	0x8b60c8b3
 800a194:	3fc68a28 	.word	0x3fc68a28
 800a198:	509f79fb 	.word	0x509f79fb
 800a19c:	3fd34413 	.word	0x3fd34413
 800a1a0:	0800c981 	.word	0x0800c981
 800a1a4:	0800c998 	.word	0x0800c998
 800a1a8:	7ff00000 	.word	0x7ff00000
 800a1ac:	0800c97d 	.word	0x0800c97d
 800a1b0:	0800c974 	.word	0x0800c974
 800a1b4:	0800c951 	.word	0x0800c951
 800a1b8:	3ff80000 	.word	0x3ff80000
 800a1bc:	0800cae8 	.word	0x0800cae8
 800a1c0:	0800c9f3 	.word	0x0800c9f3
 800a1c4:	2501      	movs	r5, #1
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	9306      	str	r3, [sp, #24]
 800a1ca:	9508      	str	r5, [sp, #32]
 800a1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2312      	movs	r3, #18
 800a1d8:	e7b0      	b.n	800a13c <_dtoa_r+0x26c>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	9308      	str	r3, [sp, #32]
 800a1de:	e7f5      	b.n	800a1cc <_dtoa_r+0x2fc>
 800a1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1e6:	e7b8      	b.n	800a15a <_dtoa_r+0x28a>
 800a1e8:	3101      	adds	r1, #1
 800a1ea:	6041      	str	r1, [r0, #4]
 800a1ec:	0052      	lsls	r2, r2, #1
 800a1ee:	e7b8      	b.n	800a162 <_dtoa_r+0x292>
 800a1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f2:	9a01      	ldr	r2, [sp, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	2b0e      	cmp	r3, #14
 800a1fa:	f200 809d 	bhi.w	800a338 <_dtoa_r+0x468>
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	f000 809a 	beq.w	800a338 <_dtoa_r+0x468>
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	dd32      	ble.n	800a270 <_dtoa_r+0x3a0>
 800a20a:	4ab7      	ldr	r2, [pc, #732]	; (800a4e8 <_dtoa_r+0x618>)
 800a20c:	f003 030f 	and.w	r3, r3, #15
 800a210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a214:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a218:	9b00      	ldr	r3, [sp, #0]
 800a21a:	05d8      	lsls	r0, r3, #23
 800a21c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a220:	d516      	bpl.n	800a250 <_dtoa_r+0x380>
 800a222:	4bb2      	ldr	r3, [pc, #712]	; (800a4ec <_dtoa_r+0x61c>)
 800a224:	ec51 0b19 	vmov	r0, r1, d9
 800a228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a22c:	f7f6 fb0e 	bl	800084c <__aeabi_ddiv>
 800a230:	f007 070f 	and.w	r7, r7, #15
 800a234:	4682      	mov	sl, r0
 800a236:	468b      	mov	fp, r1
 800a238:	2503      	movs	r5, #3
 800a23a:	4eac      	ldr	r6, [pc, #688]	; (800a4ec <_dtoa_r+0x61c>)
 800a23c:	b957      	cbnz	r7, 800a254 <_dtoa_r+0x384>
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	4650      	mov	r0, sl
 800a244:	4659      	mov	r1, fp
 800a246:	f7f6 fb01 	bl	800084c <__aeabi_ddiv>
 800a24a:	4682      	mov	sl, r0
 800a24c:	468b      	mov	fp, r1
 800a24e:	e028      	b.n	800a2a2 <_dtoa_r+0x3d2>
 800a250:	2502      	movs	r5, #2
 800a252:	e7f2      	b.n	800a23a <_dtoa_r+0x36a>
 800a254:	07f9      	lsls	r1, r7, #31
 800a256:	d508      	bpl.n	800a26a <_dtoa_r+0x39a>
 800a258:	4640      	mov	r0, r8
 800a25a:	4649      	mov	r1, r9
 800a25c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a260:	f7f6 f9ca 	bl	80005f8 <__aeabi_dmul>
 800a264:	3501      	adds	r5, #1
 800a266:	4680      	mov	r8, r0
 800a268:	4689      	mov	r9, r1
 800a26a:	107f      	asrs	r7, r7, #1
 800a26c:	3608      	adds	r6, #8
 800a26e:	e7e5      	b.n	800a23c <_dtoa_r+0x36c>
 800a270:	f000 809b 	beq.w	800a3aa <_dtoa_r+0x4da>
 800a274:	9b00      	ldr	r3, [sp, #0]
 800a276:	4f9d      	ldr	r7, [pc, #628]	; (800a4ec <_dtoa_r+0x61c>)
 800a278:	425e      	negs	r6, r3
 800a27a:	4b9b      	ldr	r3, [pc, #620]	; (800a4e8 <_dtoa_r+0x618>)
 800a27c:	f006 020f 	and.w	r2, r6, #15
 800a280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	ec51 0b19 	vmov	r0, r1, d9
 800a28c:	f7f6 f9b4 	bl	80005f8 <__aeabi_dmul>
 800a290:	1136      	asrs	r6, r6, #4
 800a292:	4682      	mov	sl, r0
 800a294:	468b      	mov	fp, r1
 800a296:	2300      	movs	r3, #0
 800a298:	2502      	movs	r5, #2
 800a29a:	2e00      	cmp	r6, #0
 800a29c:	d17a      	bne.n	800a394 <_dtoa_r+0x4c4>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1d3      	bne.n	800a24a <_dtoa_r+0x37a>
 800a2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 8082 	beq.w	800a3ae <_dtoa_r+0x4de>
 800a2aa:	4b91      	ldr	r3, [pc, #580]	; (800a4f0 <_dtoa_r+0x620>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	f7f6 fc13 	bl	8000adc <__aeabi_dcmplt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d079      	beq.n	800a3ae <_dtoa_r+0x4de>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d076      	beq.n	800a3ae <_dtoa_r+0x4de>
 800a2c0:	9b02      	ldr	r3, [sp, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dd36      	ble.n	800a334 <_dtoa_r+0x464>
 800a2c6:	9b00      	ldr	r3, [sp, #0]
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	1e5f      	subs	r7, r3, #1
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4b88      	ldr	r3, [pc, #544]	; (800a4f4 <_dtoa_r+0x624>)
 800a2d2:	f7f6 f991 	bl	80005f8 <__aeabi_dmul>
 800a2d6:	9e02      	ldr	r6, [sp, #8]
 800a2d8:	4682      	mov	sl, r0
 800a2da:	468b      	mov	fp, r1
 800a2dc:	3501      	adds	r5, #1
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f7f6 f920 	bl	8000524 <__aeabi_i2d>
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	f7f6 f986 	bl	80005f8 <__aeabi_dmul>
 800a2ec:	4b82      	ldr	r3, [pc, #520]	; (800a4f8 <_dtoa_r+0x628>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f7f5 ffcc 	bl	800028c <__adddf3>
 800a2f4:	46d0      	mov	r8, sl
 800a2f6:	46d9      	mov	r9, fp
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	d158      	bne.n	800a3b4 <_dtoa_r+0x4e4>
 800a302:	4b7e      	ldr	r3, [pc, #504]	; (800a4fc <_dtoa_r+0x62c>)
 800a304:	2200      	movs	r2, #0
 800a306:	4640      	mov	r0, r8
 800a308:	4649      	mov	r1, r9
 800a30a:	f7f5 ffbd 	bl	8000288 <__aeabi_dsub>
 800a30e:	4652      	mov	r2, sl
 800a310:	465b      	mov	r3, fp
 800a312:	4680      	mov	r8, r0
 800a314:	4689      	mov	r9, r1
 800a316:	f7f6 fbff 	bl	8000b18 <__aeabi_dcmpgt>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	f040 8295 	bne.w	800a84a <_dtoa_r+0x97a>
 800a320:	4652      	mov	r2, sl
 800a322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a326:	4640      	mov	r0, r8
 800a328:	4649      	mov	r1, r9
 800a32a:	f7f6 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800a32e:	2800      	cmp	r0, #0
 800a330:	f040 8289 	bne.w	800a846 <_dtoa_r+0x976>
 800a334:	ec5b ab19 	vmov	sl, fp, d9
 800a338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f2c0 8148 	blt.w	800a5d0 <_dtoa_r+0x700>
 800a340:	9a00      	ldr	r2, [sp, #0]
 800a342:	2a0e      	cmp	r2, #14
 800a344:	f300 8144 	bgt.w	800a5d0 <_dtoa_r+0x700>
 800a348:	4b67      	ldr	r3, [pc, #412]	; (800a4e8 <_dtoa_r+0x618>)
 800a34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a34e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	f280 80d5 	bge.w	800a504 <_dtoa_r+0x634>
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f300 80d1 	bgt.w	800a504 <_dtoa_r+0x634>
 800a362:	f040 826f 	bne.w	800a844 <_dtoa_r+0x974>
 800a366:	4b65      	ldr	r3, [pc, #404]	; (800a4fc <_dtoa_r+0x62c>)
 800a368:	2200      	movs	r2, #0
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f6 f943 	bl	80005f8 <__aeabi_dmul>
 800a372:	4652      	mov	r2, sl
 800a374:	465b      	mov	r3, fp
 800a376:	f7f6 fbc5 	bl	8000b04 <__aeabi_dcmpge>
 800a37a:	9e03      	ldr	r6, [sp, #12]
 800a37c:	4637      	mov	r7, r6
 800a37e:	2800      	cmp	r0, #0
 800a380:	f040 8245 	bne.w	800a80e <_dtoa_r+0x93e>
 800a384:	9d01      	ldr	r5, [sp, #4]
 800a386:	2331      	movs	r3, #49	; 0x31
 800a388:	f805 3b01 	strb.w	r3, [r5], #1
 800a38c:	9b00      	ldr	r3, [sp, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	e240      	b.n	800a816 <_dtoa_r+0x946>
 800a394:	07f2      	lsls	r2, r6, #31
 800a396:	d505      	bpl.n	800a3a4 <_dtoa_r+0x4d4>
 800a398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a39c:	f7f6 f92c 	bl	80005f8 <__aeabi_dmul>
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	1076      	asrs	r6, r6, #1
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	e777      	b.n	800a29a <_dtoa_r+0x3ca>
 800a3aa:	2502      	movs	r5, #2
 800a3ac:	e779      	b.n	800a2a2 <_dtoa_r+0x3d2>
 800a3ae:	9f00      	ldr	r7, [sp, #0]
 800a3b0:	9e03      	ldr	r6, [sp, #12]
 800a3b2:	e794      	b.n	800a2de <_dtoa_r+0x40e>
 800a3b4:	9901      	ldr	r1, [sp, #4]
 800a3b6:	4b4c      	ldr	r3, [pc, #304]	; (800a4e8 <_dtoa_r+0x618>)
 800a3b8:	4431      	add	r1, r6
 800a3ba:	910d      	str	r1, [sp, #52]	; 0x34
 800a3bc:	9908      	ldr	r1, [sp, #32]
 800a3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d043      	beq.n	800a452 <_dtoa_r+0x582>
 800a3ca:	494d      	ldr	r1, [pc, #308]	; (800a500 <_dtoa_r+0x630>)
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	f7f6 fa3d 	bl	800084c <__aeabi_ddiv>
 800a3d2:	4652      	mov	r2, sl
 800a3d4:	465b      	mov	r3, fp
 800a3d6:	f7f5 ff57 	bl	8000288 <__aeabi_dsub>
 800a3da:	9d01      	ldr	r5, [sp, #4]
 800a3dc:	4682      	mov	sl, r0
 800a3de:	468b      	mov	fp, r1
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	f7f6 fbb8 	bl	8000b58 <__aeabi_d2iz>
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	f7f6 f89b 	bl	8000524 <__aeabi_i2d>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f5 ff47 	bl	8000288 <__aeabi_dsub>
 800a3fa:	3630      	adds	r6, #48	; 0x30
 800a3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a400:	4652      	mov	r2, sl
 800a402:	465b      	mov	r3, fp
 800a404:	4680      	mov	r8, r0
 800a406:	4689      	mov	r9, r1
 800a408:	f7f6 fb68 	bl	8000adc <__aeabi_dcmplt>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d163      	bne.n	800a4d8 <_dtoa_r+0x608>
 800a410:	4642      	mov	r2, r8
 800a412:	464b      	mov	r3, r9
 800a414:	4936      	ldr	r1, [pc, #216]	; (800a4f0 <_dtoa_r+0x620>)
 800a416:	2000      	movs	r0, #0
 800a418:	f7f5 ff36 	bl	8000288 <__aeabi_dsub>
 800a41c:	4652      	mov	r2, sl
 800a41e:	465b      	mov	r3, fp
 800a420:	f7f6 fb5c 	bl	8000adc <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	f040 80b5 	bne.w	800a594 <_dtoa_r+0x6c4>
 800a42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a42c:	429d      	cmp	r5, r3
 800a42e:	d081      	beq.n	800a334 <_dtoa_r+0x464>
 800a430:	4b30      	ldr	r3, [pc, #192]	; (800a4f4 <_dtoa_r+0x624>)
 800a432:	2200      	movs	r2, #0
 800a434:	4650      	mov	r0, sl
 800a436:	4659      	mov	r1, fp
 800a438:	f7f6 f8de 	bl	80005f8 <__aeabi_dmul>
 800a43c:	4b2d      	ldr	r3, [pc, #180]	; (800a4f4 <_dtoa_r+0x624>)
 800a43e:	4682      	mov	sl, r0
 800a440:	468b      	mov	fp, r1
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	2200      	movs	r2, #0
 800a448:	f7f6 f8d6 	bl	80005f8 <__aeabi_dmul>
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	e7c6      	b.n	800a3e0 <_dtoa_r+0x510>
 800a452:	4650      	mov	r0, sl
 800a454:	4659      	mov	r1, fp
 800a456:	f7f6 f8cf 	bl	80005f8 <__aeabi_dmul>
 800a45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a45c:	9d01      	ldr	r5, [sp, #4]
 800a45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a460:	4682      	mov	sl, r0
 800a462:	468b      	mov	fp, r1
 800a464:	4649      	mov	r1, r9
 800a466:	4640      	mov	r0, r8
 800a468:	f7f6 fb76 	bl	8000b58 <__aeabi_d2iz>
 800a46c:	4606      	mov	r6, r0
 800a46e:	f7f6 f859 	bl	8000524 <__aeabi_i2d>
 800a472:	3630      	adds	r6, #48	; 0x30
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4640      	mov	r0, r8
 800a47a:	4649      	mov	r1, r9
 800a47c:	f7f5 ff04 	bl	8000288 <__aeabi_dsub>
 800a480:	f805 6b01 	strb.w	r6, [r5], #1
 800a484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a486:	429d      	cmp	r5, r3
 800a488:	4680      	mov	r8, r0
 800a48a:	4689      	mov	r9, r1
 800a48c:	f04f 0200 	mov.w	r2, #0
 800a490:	d124      	bne.n	800a4dc <_dtoa_r+0x60c>
 800a492:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <_dtoa_r+0x630>)
 800a494:	4650      	mov	r0, sl
 800a496:	4659      	mov	r1, fp
 800a498:	f7f5 fef8 	bl	800028c <__adddf3>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7f6 fb38 	bl	8000b18 <__aeabi_dcmpgt>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d173      	bne.n	800a594 <_dtoa_r+0x6c4>
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	465b      	mov	r3, fp
 800a4b0:	4913      	ldr	r1, [pc, #76]	; (800a500 <_dtoa_r+0x630>)
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f7f5 fee8 	bl	8000288 <__aeabi_dsub>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4640      	mov	r0, r8
 800a4be:	4649      	mov	r1, r9
 800a4c0:	f7f6 fb0c 	bl	8000adc <__aeabi_dcmplt>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f43f af35 	beq.w	800a334 <_dtoa_r+0x464>
 800a4ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4cc:	1e6b      	subs	r3, r5, #1
 800a4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4d4:	2b30      	cmp	r3, #48	; 0x30
 800a4d6:	d0f8      	beq.n	800a4ca <_dtoa_r+0x5fa>
 800a4d8:	9700      	str	r7, [sp, #0]
 800a4da:	e049      	b.n	800a570 <_dtoa_r+0x6a0>
 800a4dc:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <_dtoa_r+0x624>)
 800a4de:	f7f6 f88b 	bl	80005f8 <__aeabi_dmul>
 800a4e2:	4680      	mov	r8, r0
 800a4e4:	4689      	mov	r9, r1
 800a4e6:	e7bd      	b.n	800a464 <_dtoa_r+0x594>
 800a4e8:	0800cae8 	.word	0x0800cae8
 800a4ec:	0800cac0 	.word	0x0800cac0
 800a4f0:	3ff00000 	.word	0x3ff00000
 800a4f4:	40240000 	.word	0x40240000
 800a4f8:	401c0000 	.word	0x401c0000
 800a4fc:	40140000 	.word	0x40140000
 800a500:	3fe00000 	.word	0x3fe00000
 800a504:	9d01      	ldr	r5, [sp, #4]
 800a506:	4656      	mov	r6, sl
 800a508:	465f      	mov	r7, fp
 800a50a:	4642      	mov	r2, r8
 800a50c:	464b      	mov	r3, r9
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f6 f99b 	bl	800084c <__aeabi_ddiv>
 800a516:	f7f6 fb1f 	bl	8000b58 <__aeabi_d2iz>
 800a51a:	4682      	mov	sl, r0
 800a51c:	f7f6 f802 	bl	8000524 <__aeabi_i2d>
 800a520:	4642      	mov	r2, r8
 800a522:	464b      	mov	r3, r9
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a534:	f7f5 fea8 	bl	8000288 <__aeabi_dsub>
 800a538:	f805 6b01 	strb.w	r6, [r5], #1
 800a53c:	9e01      	ldr	r6, [sp, #4]
 800a53e:	9f03      	ldr	r7, [sp, #12]
 800a540:	1bae      	subs	r6, r5, r6
 800a542:	42b7      	cmp	r7, r6
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	d135      	bne.n	800a5b6 <_dtoa_r+0x6e6>
 800a54a:	f7f5 fe9f 	bl	800028c <__adddf3>
 800a54e:	4642      	mov	r2, r8
 800a550:	464b      	mov	r3, r9
 800a552:	4606      	mov	r6, r0
 800a554:	460f      	mov	r7, r1
 800a556:	f7f6 fadf 	bl	8000b18 <__aeabi_dcmpgt>
 800a55a:	b9d0      	cbnz	r0, 800a592 <_dtoa_r+0x6c2>
 800a55c:	4642      	mov	r2, r8
 800a55e:	464b      	mov	r3, r9
 800a560:	4630      	mov	r0, r6
 800a562:	4639      	mov	r1, r7
 800a564:	f7f6 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a568:	b110      	cbz	r0, 800a570 <_dtoa_r+0x6a0>
 800a56a:	f01a 0f01 	tst.w	sl, #1
 800a56e:	d110      	bne.n	800a592 <_dtoa_r+0x6c2>
 800a570:	4620      	mov	r0, r4
 800a572:	ee18 1a10 	vmov	r1, s16
 800a576:	f000 fd13 	bl	800afa0 <_Bfree>
 800a57a:	2300      	movs	r3, #0
 800a57c:	9800      	ldr	r0, [sp, #0]
 800a57e:	702b      	strb	r3, [r5, #0]
 800a580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a582:	3001      	adds	r0, #1
 800a584:	6018      	str	r0, [r3, #0]
 800a586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f43f acf1 	beq.w	8009f70 <_dtoa_r+0xa0>
 800a58e:	601d      	str	r5, [r3, #0]
 800a590:	e4ee      	b.n	8009f70 <_dtoa_r+0xa0>
 800a592:	9f00      	ldr	r7, [sp, #0]
 800a594:	462b      	mov	r3, r5
 800a596:	461d      	mov	r5, r3
 800a598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a59c:	2a39      	cmp	r2, #57	; 0x39
 800a59e:	d106      	bne.n	800a5ae <_dtoa_r+0x6de>
 800a5a0:	9a01      	ldr	r2, [sp, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d1f7      	bne.n	800a596 <_dtoa_r+0x6c6>
 800a5a6:	9901      	ldr	r1, [sp, #4]
 800a5a8:	2230      	movs	r2, #48	; 0x30
 800a5aa:	3701      	adds	r7, #1
 800a5ac:	700a      	strb	r2, [r1, #0]
 800a5ae:	781a      	ldrb	r2, [r3, #0]
 800a5b0:	3201      	adds	r2, #1
 800a5b2:	701a      	strb	r2, [r3, #0]
 800a5b4:	e790      	b.n	800a4d8 <_dtoa_r+0x608>
 800a5b6:	4ba6      	ldr	r3, [pc, #664]	; (800a850 <_dtoa_r+0x980>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f7f6 f81d 	bl	80005f8 <__aeabi_dmul>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	f7f6 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d09d      	beq.n	800a50a <_dtoa_r+0x63a>
 800a5ce:	e7cf      	b.n	800a570 <_dtoa_r+0x6a0>
 800a5d0:	9a08      	ldr	r2, [sp, #32]
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	f000 80d7 	beq.w	800a786 <_dtoa_r+0x8b6>
 800a5d8:	9a06      	ldr	r2, [sp, #24]
 800a5da:	2a01      	cmp	r2, #1
 800a5dc:	f300 80ba 	bgt.w	800a754 <_dtoa_r+0x884>
 800a5e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	f000 80b2 	beq.w	800a74c <_dtoa_r+0x87c>
 800a5e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5ec:	9e07      	ldr	r6, [sp, #28]
 800a5ee:	9d04      	ldr	r5, [sp, #16]
 800a5f0:	9a04      	ldr	r2, [sp, #16]
 800a5f2:	441a      	add	r2, r3
 800a5f4:	9204      	str	r2, [sp, #16]
 800a5f6:	9a05      	ldr	r2, [sp, #20]
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	441a      	add	r2, r3
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	9205      	str	r2, [sp, #20]
 800a600:	f000 fd86 	bl	800b110 <__i2b>
 800a604:	4607      	mov	r7, r0
 800a606:	2d00      	cmp	r5, #0
 800a608:	dd0c      	ble.n	800a624 <_dtoa_r+0x754>
 800a60a:	9b05      	ldr	r3, [sp, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd09      	ble.n	800a624 <_dtoa_r+0x754>
 800a610:	42ab      	cmp	r3, r5
 800a612:	9a04      	ldr	r2, [sp, #16]
 800a614:	bfa8      	it	ge
 800a616:	462b      	movge	r3, r5
 800a618:	1ad2      	subs	r2, r2, r3
 800a61a:	9204      	str	r2, [sp, #16]
 800a61c:	9a05      	ldr	r2, [sp, #20]
 800a61e:	1aed      	subs	r5, r5, r3
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	9305      	str	r3, [sp, #20]
 800a624:	9b07      	ldr	r3, [sp, #28]
 800a626:	b31b      	cbz	r3, 800a670 <_dtoa_r+0x7a0>
 800a628:	9b08      	ldr	r3, [sp, #32]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 80af 	beq.w	800a78e <_dtoa_r+0x8be>
 800a630:	2e00      	cmp	r6, #0
 800a632:	dd13      	ble.n	800a65c <_dtoa_r+0x78c>
 800a634:	4639      	mov	r1, r7
 800a636:	4632      	mov	r2, r6
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 fe29 	bl	800b290 <__pow5mult>
 800a63e:	ee18 2a10 	vmov	r2, s16
 800a642:	4601      	mov	r1, r0
 800a644:	4607      	mov	r7, r0
 800a646:	4620      	mov	r0, r4
 800a648:	f000 fd78 	bl	800b13c <__multiply>
 800a64c:	ee18 1a10 	vmov	r1, s16
 800a650:	4680      	mov	r8, r0
 800a652:	4620      	mov	r0, r4
 800a654:	f000 fca4 	bl	800afa0 <_Bfree>
 800a658:	ee08 8a10 	vmov	s16, r8
 800a65c:	9b07      	ldr	r3, [sp, #28]
 800a65e:	1b9a      	subs	r2, r3, r6
 800a660:	d006      	beq.n	800a670 <_dtoa_r+0x7a0>
 800a662:	ee18 1a10 	vmov	r1, s16
 800a666:	4620      	mov	r0, r4
 800a668:	f000 fe12 	bl	800b290 <__pow5mult>
 800a66c:	ee08 0a10 	vmov	s16, r0
 800a670:	2101      	movs	r1, #1
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fd4c 	bl	800b110 <__i2b>
 800a678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	4606      	mov	r6, r0
 800a67e:	f340 8088 	ble.w	800a792 <_dtoa_r+0x8c2>
 800a682:	461a      	mov	r2, r3
 800a684:	4601      	mov	r1, r0
 800a686:	4620      	mov	r0, r4
 800a688:	f000 fe02 	bl	800b290 <__pow5mult>
 800a68c:	9b06      	ldr	r3, [sp, #24]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	4606      	mov	r6, r0
 800a692:	f340 8081 	ble.w	800a798 <_dtoa_r+0x8c8>
 800a696:	f04f 0800 	mov.w	r8, #0
 800a69a:	6933      	ldr	r3, [r6, #16]
 800a69c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6a0:	6918      	ldr	r0, [r3, #16]
 800a6a2:	f000 fce5 	bl	800b070 <__hi0bits>
 800a6a6:	f1c0 0020 	rsb	r0, r0, #32
 800a6aa:	9b05      	ldr	r3, [sp, #20]
 800a6ac:	4418      	add	r0, r3
 800a6ae:	f010 001f 	ands.w	r0, r0, #31
 800a6b2:	f000 8092 	beq.w	800a7da <_dtoa_r+0x90a>
 800a6b6:	f1c0 0320 	rsb	r3, r0, #32
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	f340 808a 	ble.w	800a7d4 <_dtoa_r+0x904>
 800a6c0:	f1c0 001c 	rsb	r0, r0, #28
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	4403      	add	r3, r0
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	4403      	add	r3, r0
 800a6ce:	4405      	add	r5, r0
 800a6d0:	9305      	str	r3, [sp, #20]
 800a6d2:	9b04      	ldr	r3, [sp, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd07      	ble.n	800a6e8 <_dtoa_r+0x818>
 800a6d8:	ee18 1a10 	vmov	r1, s16
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 fe30 	bl	800b344 <__lshift>
 800a6e4:	ee08 0a10 	vmov	s16, r0
 800a6e8:	9b05      	ldr	r3, [sp, #20]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dd05      	ble.n	800a6fa <_dtoa_r+0x82a>
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fe26 	bl	800b344 <__lshift>
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d06e      	beq.n	800a7de <_dtoa_r+0x90e>
 800a700:	ee18 0a10 	vmov	r0, s16
 800a704:	4631      	mov	r1, r6
 800a706:	f000 fe8d 	bl	800b424 <__mcmp>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	da67      	bge.n	800a7de <_dtoa_r+0x90e>
 800a70e:	9b00      	ldr	r3, [sp, #0]
 800a710:	3b01      	subs	r3, #1
 800a712:	ee18 1a10 	vmov	r1, s16
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	220a      	movs	r2, #10
 800a71a:	2300      	movs	r3, #0
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 fc61 	bl	800afe4 <__multadd>
 800a722:	9b08      	ldr	r3, [sp, #32]
 800a724:	ee08 0a10 	vmov	s16, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 81b1 	beq.w	800aa90 <_dtoa_r+0xbc0>
 800a72e:	2300      	movs	r3, #0
 800a730:	4639      	mov	r1, r7
 800a732:	220a      	movs	r2, #10
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fc55 	bl	800afe4 <__multadd>
 800a73a:	9b02      	ldr	r3, [sp, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	4607      	mov	r7, r0
 800a740:	f300 808e 	bgt.w	800a860 <_dtoa_r+0x990>
 800a744:	9b06      	ldr	r3, [sp, #24]
 800a746:	2b02      	cmp	r3, #2
 800a748:	dc51      	bgt.n	800a7ee <_dtoa_r+0x91e>
 800a74a:	e089      	b.n	800a860 <_dtoa_r+0x990>
 800a74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a74e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a752:	e74b      	b.n	800a5ec <_dtoa_r+0x71c>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	1e5e      	subs	r6, r3, #1
 800a758:	9b07      	ldr	r3, [sp, #28]
 800a75a:	42b3      	cmp	r3, r6
 800a75c:	bfbf      	itttt	lt
 800a75e:	9b07      	ldrlt	r3, [sp, #28]
 800a760:	9607      	strlt	r6, [sp, #28]
 800a762:	1af2      	sublt	r2, r6, r3
 800a764:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a766:	bfb6      	itet	lt
 800a768:	189b      	addlt	r3, r3, r2
 800a76a:	1b9e      	subge	r6, r3, r6
 800a76c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	bfb8      	it	lt
 800a772:	2600      	movlt	r6, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfb7      	itett	lt
 800a778:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a77c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a780:	1a9d      	sublt	r5, r3, r2
 800a782:	2300      	movlt	r3, #0
 800a784:	e734      	b.n	800a5f0 <_dtoa_r+0x720>
 800a786:	9e07      	ldr	r6, [sp, #28]
 800a788:	9d04      	ldr	r5, [sp, #16]
 800a78a:	9f08      	ldr	r7, [sp, #32]
 800a78c:	e73b      	b.n	800a606 <_dtoa_r+0x736>
 800a78e:	9a07      	ldr	r2, [sp, #28]
 800a790:	e767      	b.n	800a662 <_dtoa_r+0x792>
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	2b01      	cmp	r3, #1
 800a796:	dc18      	bgt.n	800a7ca <_dtoa_r+0x8fa>
 800a798:	f1ba 0f00 	cmp.w	sl, #0
 800a79c:	d115      	bne.n	800a7ca <_dtoa_r+0x8fa>
 800a79e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7a2:	b993      	cbnz	r3, 800a7ca <_dtoa_r+0x8fa>
 800a7a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7a8:	0d1b      	lsrs	r3, r3, #20
 800a7aa:	051b      	lsls	r3, r3, #20
 800a7ac:	b183      	cbz	r3, 800a7d0 <_dtoa_r+0x900>
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	9305      	str	r3, [sp, #20]
 800a7ba:	f04f 0801 	mov.w	r8, #1
 800a7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f47f af6a 	bne.w	800a69a <_dtoa_r+0x7ca>
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	e76f      	b.n	800a6aa <_dtoa_r+0x7da>
 800a7ca:	f04f 0800 	mov.w	r8, #0
 800a7ce:	e7f6      	b.n	800a7be <_dtoa_r+0x8ee>
 800a7d0:	4698      	mov	r8, r3
 800a7d2:	e7f4      	b.n	800a7be <_dtoa_r+0x8ee>
 800a7d4:	f43f af7d 	beq.w	800a6d2 <_dtoa_r+0x802>
 800a7d8:	4618      	mov	r0, r3
 800a7da:	301c      	adds	r0, #28
 800a7dc:	e772      	b.n	800a6c4 <_dtoa_r+0x7f4>
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	dc37      	bgt.n	800a854 <_dtoa_r+0x984>
 800a7e4:	9b06      	ldr	r3, [sp, #24]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	dd34      	ble.n	800a854 <_dtoa_r+0x984>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	9302      	str	r3, [sp, #8]
 800a7ee:	9b02      	ldr	r3, [sp, #8]
 800a7f0:	b96b      	cbnz	r3, 800a80e <_dtoa_r+0x93e>
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	2205      	movs	r2, #5
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fbf4 	bl	800afe4 <__multadd>
 800a7fc:	4601      	mov	r1, r0
 800a7fe:	4606      	mov	r6, r0
 800a800:	ee18 0a10 	vmov	r0, s16
 800a804:	f000 fe0e 	bl	800b424 <__mcmp>
 800a808:	2800      	cmp	r0, #0
 800a80a:	f73f adbb 	bgt.w	800a384 <_dtoa_r+0x4b4>
 800a80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a810:	9d01      	ldr	r5, [sp, #4]
 800a812:	43db      	mvns	r3, r3
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	f04f 0800 	mov.w	r8, #0
 800a81a:	4631      	mov	r1, r6
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 fbbf 	bl	800afa0 <_Bfree>
 800a822:	2f00      	cmp	r7, #0
 800a824:	f43f aea4 	beq.w	800a570 <_dtoa_r+0x6a0>
 800a828:	f1b8 0f00 	cmp.w	r8, #0
 800a82c:	d005      	beq.n	800a83a <_dtoa_r+0x96a>
 800a82e:	45b8      	cmp	r8, r7
 800a830:	d003      	beq.n	800a83a <_dtoa_r+0x96a>
 800a832:	4641      	mov	r1, r8
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fbb3 	bl	800afa0 <_Bfree>
 800a83a:	4639      	mov	r1, r7
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 fbaf 	bl	800afa0 <_Bfree>
 800a842:	e695      	b.n	800a570 <_dtoa_r+0x6a0>
 800a844:	2600      	movs	r6, #0
 800a846:	4637      	mov	r7, r6
 800a848:	e7e1      	b.n	800a80e <_dtoa_r+0x93e>
 800a84a:	9700      	str	r7, [sp, #0]
 800a84c:	4637      	mov	r7, r6
 800a84e:	e599      	b.n	800a384 <_dtoa_r+0x4b4>
 800a850:	40240000 	.word	0x40240000
 800a854:	9b08      	ldr	r3, [sp, #32]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80ca 	beq.w	800a9f0 <_dtoa_r+0xb20>
 800a85c:	9b03      	ldr	r3, [sp, #12]
 800a85e:	9302      	str	r3, [sp, #8]
 800a860:	2d00      	cmp	r5, #0
 800a862:	dd05      	ble.n	800a870 <_dtoa_r+0x9a0>
 800a864:	4639      	mov	r1, r7
 800a866:	462a      	mov	r2, r5
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fd6b 	bl	800b344 <__lshift>
 800a86e:	4607      	mov	r7, r0
 800a870:	f1b8 0f00 	cmp.w	r8, #0
 800a874:	d05b      	beq.n	800a92e <_dtoa_r+0xa5e>
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fb51 	bl	800af20 <_Balloc>
 800a87e:	4605      	mov	r5, r0
 800a880:	b928      	cbnz	r0, 800a88e <_dtoa_r+0x9be>
 800a882:	4b87      	ldr	r3, [pc, #540]	; (800aaa0 <_dtoa_r+0xbd0>)
 800a884:	4602      	mov	r2, r0
 800a886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a88a:	f7ff bb3b 	b.w	8009f04 <_dtoa_r+0x34>
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	3202      	adds	r2, #2
 800a892:	0092      	lsls	r2, r2, #2
 800a894:	f107 010c 	add.w	r1, r7, #12
 800a898:	300c      	adds	r0, #12
 800a89a:	f000 fb33 	bl	800af04 <memcpy>
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 fd4e 	bl	800b344 <__lshift>
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	f103 0901 	add.w	r9, r3, #1
 800a8ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	9305      	str	r3, [sp, #20]
 800a8b6:	f00a 0301 	and.w	r3, sl, #1
 800a8ba:	46b8      	mov	r8, r7
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	4607      	mov	r7, r0
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	ee18 0a10 	vmov	r0, s16
 800a8c6:	f7ff fa77 	bl	8009db8 <quorem>
 800a8ca:	4641      	mov	r1, r8
 800a8cc:	9002      	str	r0, [sp, #8]
 800a8ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8d2:	ee18 0a10 	vmov	r0, s16
 800a8d6:	f000 fda5 	bl	800b424 <__mcmp>
 800a8da:	463a      	mov	r2, r7
 800a8dc:	9003      	str	r0, [sp, #12]
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fdbb 	bl	800b45c <__mdiff>
 800a8e6:	68c2      	ldr	r2, [r0, #12]
 800a8e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	bb02      	cbnz	r2, 800a932 <_dtoa_r+0xa62>
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	ee18 0a10 	vmov	r0, s16
 800a8f6:	f000 fd95 	bl	800b424 <__mcmp>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4620      	mov	r0, r4
 800a900:	9207      	str	r2, [sp, #28]
 800a902:	f000 fb4d 	bl	800afa0 <_Bfree>
 800a906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a90a:	ea43 0102 	orr.w	r1, r3, r2
 800a90e:	9b04      	ldr	r3, [sp, #16]
 800a910:	430b      	orrs	r3, r1
 800a912:	464d      	mov	r5, r9
 800a914:	d10f      	bne.n	800a936 <_dtoa_r+0xa66>
 800a916:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a91a:	d02a      	beq.n	800a972 <_dtoa_r+0xaa2>
 800a91c:	9b03      	ldr	r3, [sp, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dd02      	ble.n	800a928 <_dtoa_r+0xa58>
 800a922:	9b02      	ldr	r3, [sp, #8]
 800a924:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a928:	f88b a000 	strb.w	sl, [fp]
 800a92c:	e775      	b.n	800a81a <_dtoa_r+0x94a>
 800a92e:	4638      	mov	r0, r7
 800a930:	e7ba      	b.n	800a8a8 <_dtoa_r+0x9d8>
 800a932:	2201      	movs	r2, #1
 800a934:	e7e2      	b.n	800a8fc <_dtoa_r+0xa2c>
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	db04      	blt.n	800a946 <_dtoa_r+0xa76>
 800a93c:	9906      	ldr	r1, [sp, #24]
 800a93e:	430b      	orrs	r3, r1
 800a940:	9904      	ldr	r1, [sp, #16]
 800a942:	430b      	orrs	r3, r1
 800a944:	d122      	bne.n	800a98c <_dtoa_r+0xabc>
 800a946:	2a00      	cmp	r2, #0
 800a948:	ddee      	ble.n	800a928 <_dtoa_r+0xa58>
 800a94a:	ee18 1a10 	vmov	r1, s16
 800a94e:	2201      	movs	r2, #1
 800a950:	4620      	mov	r0, r4
 800a952:	f000 fcf7 	bl	800b344 <__lshift>
 800a956:	4631      	mov	r1, r6
 800a958:	ee08 0a10 	vmov	s16, r0
 800a95c:	f000 fd62 	bl	800b424 <__mcmp>
 800a960:	2800      	cmp	r0, #0
 800a962:	dc03      	bgt.n	800a96c <_dtoa_r+0xa9c>
 800a964:	d1e0      	bne.n	800a928 <_dtoa_r+0xa58>
 800a966:	f01a 0f01 	tst.w	sl, #1
 800a96a:	d0dd      	beq.n	800a928 <_dtoa_r+0xa58>
 800a96c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a970:	d1d7      	bne.n	800a922 <_dtoa_r+0xa52>
 800a972:	2339      	movs	r3, #57	; 0x39
 800a974:	f88b 3000 	strb.w	r3, [fp]
 800a978:	462b      	mov	r3, r5
 800a97a:	461d      	mov	r5, r3
 800a97c:	3b01      	subs	r3, #1
 800a97e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a982:	2a39      	cmp	r2, #57	; 0x39
 800a984:	d071      	beq.n	800aa6a <_dtoa_r+0xb9a>
 800a986:	3201      	adds	r2, #1
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	e746      	b.n	800a81a <_dtoa_r+0x94a>
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	dd07      	ble.n	800a9a0 <_dtoa_r+0xad0>
 800a990:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a994:	d0ed      	beq.n	800a972 <_dtoa_r+0xaa2>
 800a996:	f10a 0301 	add.w	r3, sl, #1
 800a99a:	f88b 3000 	strb.w	r3, [fp]
 800a99e:	e73c      	b.n	800a81a <_dtoa_r+0x94a>
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a9a6:	4599      	cmp	r9, r3
 800a9a8:	d047      	beq.n	800aa3a <_dtoa_r+0xb6a>
 800a9aa:	ee18 1a10 	vmov	r1, s16
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	220a      	movs	r2, #10
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 fb16 	bl	800afe4 <__multadd>
 800a9b8:	45b8      	cmp	r8, r7
 800a9ba:	ee08 0a10 	vmov	s16, r0
 800a9be:	f04f 0300 	mov.w	r3, #0
 800a9c2:	f04f 020a 	mov.w	r2, #10
 800a9c6:	4641      	mov	r1, r8
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	d106      	bne.n	800a9da <_dtoa_r+0xb0a>
 800a9cc:	f000 fb0a 	bl	800afe4 <__multadd>
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	4607      	mov	r7, r0
 800a9d4:	f109 0901 	add.w	r9, r9, #1
 800a9d8:	e772      	b.n	800a8c0 <_dtoa_r+0x9f0>
 800a9da:	f000 fb03 	bl	800afe4 <__multadd>
 800a9de:	4639      	mov	r1, r7
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	220a      	movs	r2, #10
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 fafc 	bl	800afe4 <__multadd>
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	e7f1      	b.n	800a9d4 <_dtoa_r+0xb04>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	9302      	str	r3, [sp, #8]
 800a9f4:	9d01      	ldr	r5, [sp, #4]
 800a9f6:	ee18 0a10 	vmov	r0, s16
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	f7ff f9dc 	bl	8009db8 <quorem>
 800aa00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	f805 ab01 	strb.w	sl, [r5], #1
 800aa0a:	1aea      	subs	r2, r5, r3
 800aa0c:	9b02      	ldr	r3, [sp, #8]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	dd09      	ble.n	800aa26 <_dtoa_r+0xb56>
 800aa12:	ee18 1a10 	vmov	r1, s16
 800aa16:	2300      	movs	r3, #0
 800aa18:	220a      	movs	r2, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fae2 	bl	800afe4 <__multadd>
 800aa20:	ee08 0a10 	vmov	s16, r0
 800aa24:	e7e7      	b.n	800a9f6 <_dtoa_r+0xb26>
 800aa26:	9b02      	ldr	r3, [sp, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	bfc8      	it	gt
 800aa2c:	461d      	movgt	r5, r3
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	bfd8      	it	le
 800aa32:	2501      	movle	r5, #1
 800aa34:	441d      	add	r5, r3
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	ee18 1a10 	vmov	r1, s16
 800aa3e:	2201      	movs	r2, #1
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fc7f 	bl	800b344 <__lshift>
 800aa46:	4631      	mov	r1, r6
 800aa48:	ee08 0a10 	vmov	s16, r0
 800aa4c:	f000 fcea 	bl	800b424 <__mcmp>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	dc91      	bgt.n	800a978 <_dtoa_r+0xaa8>
 800aa54:	d102      	bne.n	800aa5c <_dtoa_r+0xb8c>
 800aa56:	f01a 0f01 	tst.w	sl, #1
 800aa5a:	d18d      	bne.n	800a978 <_dtoa_r+0xaa8>
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	461d      	mov	r5, r3
 800aa60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa64:	2a30      	cmp	r2, #48	; 0x30
 800aa66:	d0fa      	beq.n	800aa5e <_dtoa_r+0xb8e>
 800aa68:	e6d7      	b.n	800a81a <_dtoa_r+0x94a>
 800aa6a:	9a01      	ldr	r2, [sp, #4]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d184      	bne.n	800a97a <_dtoa_r+0xaaa>
 800aa70:	9b00      	ldr	r3, [sp, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	2331      	movs	r3, #49	; 0x31
 800aa78:	7013      	strb	r3, [r2, #0]
 800aa7a:	e6ce      	b.n	800a81a <_dtoa_r+0x94a>
 800aa7c:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <_dtoa_r+0xbd4>)
 800aa7e:	f7ff ba95 	b.w	8009fac <_dtoa_r+0xdc>
 800aa82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f47f aa6e 	bne.w	8009f66 <_dtoa_r+0x96>
 800aa8a:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <_dtoa_r+0xbd8>)
 800aa8c:	f7ff ba8e 	b.w	8009fac <_dtoa_r+0xdc>
 800aa90:	9b02      	ldr	r3, [sp, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	dcae      	bgt.n	800a9f4 <_dtoa_r+0xb24>
 800aa96:	9b06      	ldr	r3, [sp, #24]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	f73f aea8 	bgt.w	800a7ee <_dtoa_r+0x91e>
 800aa9e:	e7a9      	b.n	800a9f4 <_dtoa_r+0xb24>
 800aaa0:	0800c9f3 	.word	0x0800c9f3
 800aaa4:	0800c950 	.word	0x0800c950
 800aaa8:	0800c974 	.word	0x0800c974

0800aaac <__sflush_r>:
 800aaac:	898a      	ldrh	r2, [r1, #12]
 800aaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	4605      	mov	r5, r0
 800aab4:	0710      	lsls	r0, r2, #28
 800aab6:	460c      	mov	r4, r1
 800aab8:	d458      	bmi.n	800ab6c <__sflush_r+0xc0>
 800aaba:	684b      	ldr	r3, [r1, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dc05      	bgt.n	800aacc <__sflush_r+0x20>
 800aac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dc02      	bgt.n	800aacc <__sflush_r+0x20>
 800aac6:	2000      	movs	r0, #0
 800aac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aacc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d0f9      	beq.n	800aac6 <__sflush_r+0x1a>
 800aad2:	2300      	movs	r3, #0
 800aad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aad8:	682f      	ldr	r7, [r5, #0]
 800aada:	602b      	str	r3, [r5, #0]
 800aadc:	d032      	beq.n	800ab44 <__sflush_r+0x98>
 800aade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	075a      	lsls	r2, r3, #29
 800aae4:	d505      	bpl.n	800aaf2 <__sflush_r+0x46>
 800aae6:	6863      	ldr	r3, [r4, #4]
 800aae8:	1ac0      	subs	r0, r0, r3
 800aaea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaec:	b10b      	cbz	r3, 800aaf2 <__sflush_r+0x46>
 800aaee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aaf0:	1ac0      	subs	r0, r0, r3
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaf8:	6a21      	ldr	r1, [r4, #32]
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b0      	blx	r6
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	d106      	bne.n	800ab12 <__sflush_r+0x66>
 800ab04:	6829      	ldr	r1, [r5, #0]
 800ab06:	291d      	cmp	r1, #29
 800ab08:	d82c      	bhi.n	800ab64 <__sflush_r+0xb8>
 800ab0a:	4a2a      	ldr	r2, [pc, #168]	; (800abb4 <__sflush_r+0x108>)
 800ab0c:	40ca      	lsrs	r2, r1
 800ab0e:	07d6      	lsls	r6, r2, #31
 800ab10:	d528      	bpl.n	800ab64 <__sflush_r+0xb8>
 800ab12:	2200      	movs	r2, #0
 800ab14:	6062      	str	r2, [r4, #4]
 800ab16:	04d9      	lsls	r1, r3, #19
 800ab18:	6922      	ldr	r2, [r4, #16]
 800ab1a:	6022      	str	r2, [r4, #0]
 800ab1c:	d504      	bpl.n	800ab28 <__sflush_r+0x7c>
 800ab1e:	1c42      	adds	r2, r0, #1
 800ab20:	d101      	bne.n	800ab26 <__sflush_r+0x7a>
 800ab22:	682b      	ldr	r3, [r5, #0]
 800ab24:	b903      	cbnz	r3, 800ab28 <__sflush_r+0x7c>
 800ab26:	6560      	str	r0, [r4, #84]	; 0x54
 800ab28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab2a:	602f      	str	r7, [r5, #0]
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d0ca      	beq.n	800aac6 <__sflush_r+0x1a>
 800ab30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab34:	4299      	cmp	r1, r3
 800ab36:	d002      	beq.n	800ab3e <__sflush_r+0x92>
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f000 fd8b 	bl	800b654 <_free_r>
 800ab3e:	2000      	movs	r0, #0
 800ab40:	6360      	str	r0, [r4, #52]	; 0x34
 800ab42:	e7c1      	b.n	800aac8 <__sflush_r+0x1c>
 800ab44:	6a21      	ldr	r1, [r4, #32]
 800ab46:	2301      	movs	r3, #1
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b0      	blx	r6
 800ab4c:	1c41      	adds	r1, r0, #1
 800ab4e:	d1c7      	bne.n	800aae0 <__sflush_r+0x34>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0c4      	beq.n	800aae0 <__sflush_r+0x34>
 800ab56:	2b1d      	cmp	r3, #29
 800ab58:	d001      	beq.n	800ab5e <__sflush_r+0xb2>
 800ab5a:	2b16      	cmp	r3, #22
 800ab5c:	d101      	bne.n	800ab62 <__sflush_r+0xb6>
 800ab5e:	602f      	str	r7, [r5, #0]
 800ab60:	e7b1      	b.n	800aac6 <__sflush_r+0x1a>
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	e7ad      	b.n	800aac8 <__sflush_r+0x1c>
 800ab6c:	690f      	ldr	r7, [r1, #16]
 800ab6e:	2f00      	cmp	r7, #0
 800ab70:	d0a9      	beq.n	800aac6 <__sflush_r+0x1a>
 800ab72:	0793      	lsls	r3, r2, #30
 800ab74:	680e      	ldr	r6, [r1, #0]
 800ab76:	bf08      	it	eq
 800ab78:	694b      	ldreq	r3, [r1, #20]
 800ab7a:	600f      	str	r7, [r1, #0]
 800ab7c:	bf18      	it	ne
 800ab7e:	2300      	movne	r3, #0
 800ab80:	eba6 0807 	sub.w	r8, r6, r7
 800ab84:	608b      	str	r3, [r1, #8]
 800ab86:	f1b8 0f00 	cmp.w	r8, #0
 800ab8a:	dd9c      	ble.n	800aac6 <__sflush_r+0x1a>
 800ab8c:	6a21      	ldr	r1, [r4, #32]
 800ab8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab90:	4643      	mov	r3, r8
 800ab92:	463a      	mov	r2, r7
 800ab94:	4628      	mov	r0, r5
 800ab96:	47b0      	blx	r6
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	dc06      	bgt.n	800abaa <__sflush_r+0xfe>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e78e      	b.n	800aac8 <__sflush_r+0x1c>
 800abaa:	4407      	add	r7, r0
 800abac:	eba8 0800 	sub.w	r8, r8, r0
 800abb0:	e7e9      	b.n	800ab86 <__sflush_r+0xda>
 800abb2:	bf00      	nop
 800abb4:	20400001 	.word	0x20400001

0800abb8 <_fflush_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	690b      	ldr	r3, [r1, #16]
 800abbc:	4605      	mov	r5, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	b913      	cbnz	r3, 800abc8 <_fflush_r+0x10>
 800abc2:	2500      	movs	r5, #0
 800abc4:	4628      	mov	r0, r5
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	b118      	cbz	r0, 800abd2 <_fflush_r+0x1a>
 800abca:	6983      	ldr	r3, [r0, #24]
 800abcc:	b90b      	cbnz	r3, 800abd2 <_fflush_r+0x1a>
 800abce:	f000 f887 	bl	800ace0 <__sinit>
 800abd2:	4b14      	ldr	r3, [pc, #80]	; (800ac24 <_fflush_r+0x6c>)
 800abd4:	429c      	cmp	r4, r3
 800abd6:	d11b      	bne.n	800ac10 <_fflush_r+0x58>
 800abd8:	686c      	ldr	r4, [r5, #4]
 800abda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0ef      	beq.n	800abc2 <_fflush_r+0xa>
 800abe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abe4:	07d0      	lsls	r0, r2, #31
 800abe6:	d404      	bmi.n	800abf2 <_fflush_r+0x3a>
 800abe8:	0599      	lsls	r1, r3, #22
 800abea:	d402      	bmi.n	800abf2 <_fflush_r+0x3a>
 800abec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abee:	f000 f91a 	bl	800ae26 <__retarget_lock_acquire_recursive>
 800abf2:	4628      	mov	r0, r5
 800abf4:	4621      	mov	r1, r4
 800abf6:	f7ff ff59 	bl	800aaac <__sflush_r>
 800abfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abfc:	07da      	lsls	r2, r3, #31
 800abfe:	4605      	mov	r5, r0
 800ac00:	d4e0      	bmi.n	800abc4 <_fflush_r+0xc>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	059b      	lsls	r3, r3, #22
 800ac06:	d4dd      	bmi.n	800abc4 <_fflush_r+0xc>
 800ac08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac0a:	f000 f90d 	bl	800ae28 <__retarget_lock_release_recursive>
 800ac0e:	e7d9      	b.n	800abc4 <_fflush_r+0xc>
 800ac10:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <_fflush_r+0x70>)
 800ac12:	429c      	cmp	r4, r3
 800ac14:	d101      	bne.n	800ac1a <_fflush_r+0x62>
 800ac16:	68ac      	ldr	r4, [r5, #8]
 800ac18:	e7df      	b.n	800abda <_fflush_r+0x22>
 800ac1a:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <_fflush_r+0x74>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	bf08      	it	eq
 800ac20:	68ec      	ldreq	r4, [r5, #12]
 800ac22:	e7da      	b.n	800abda <_fflush_r+0x22>
 800ac24:	0800ca24 	.word	0x0800ca24
 800ac28:	0800ca44 	.word	0x0800ca44
 800ac2c:	0800ca04 	.word	0x0800ca04

0800ac30 <std>:
 800ac30:	2300      	movs	r3, #0
 800ac32:	b510      	push	{r4, lr}
 800ac34:	4604      	mov	r4, r0
 800ac36:	e9c0 3300 	strd	r3, r3, [r0]
 800ac3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac3e:	6083      	str	r3, [r0, #8]
 800ac40:	8181      	strh	r1, [r0, #12]
 800ac42:	6643      	str	r3, [r0, #100]	; 0x64
 800ac44:	81c2      	strh	r2, [r0, #14]
 800ac46:	6183      	str	r3, [r0, #24]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	2208      	movs	r2, #8
 800ac4c:	305c      	adds	r0, #92	; 0x5c
 800ac4e:	f7fe faf3 	bl	8009238 <memset>
 800ac52:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <std+0x38>)
 800ac54:	6263      	str	r3, [r4, #36]	; 0x24
 800ac56:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <std+0x3c>)
 800ac58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <std+0x40>)
 800ac5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <std+0x44>)
 800ac60:	6224      	str	r4, [r4, #32]
 800ac62:	6323      	str	r3, [r4, #48]	; 0x30
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	bf00      	nop
 800ac68:	0800bae9 	.word	0x0800bae9
 800ac6c:	0800bb0b 	.word	0x0800bb0b
 800ac70:	0800bb43 	.word	0x0800bb43
 800ac74:	0800bb67 	.word	0x0800bb67

0800ac78 <_cleanup_r>:
 800ac78:	4901      	ldr	r1, [pc, #4]	; (800ac80 <_cleanup_r+0x8>)
 800ac7a:	f000 b8af 	b.w	800addc <_fwalk_reent>
 800ac7e:	bf00      	nop
 800ac80:	0800abb9 	.word	0x0800abb9

0800ac84 <__sfmoreglue>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	2268      	movs	r2, #104	; 0x68
 800ac88:	1e4d      	subs	r5, r1, #1
 800ac8a:	4355      	muls	r5, r2
 800ac8c:	460e      	mov	r6, r1
 800ac8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac92:	f000 fd4b 	bl	800b72c <_malloc_r>
 800ac96:	4604      	mov	r4, r0
 800ac98:	b140      	cbz	r0, 800acac <__sfmoreglue+0x28>
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	e9c0 1600 	strd	r1, r6, [r0]
 800aca0:	300c      	adds	r0, #12
 800aca2:	60a0      	str	r0, [r4, #8]
 800aca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aca8:	f7fe fac6 	bl	8009238 <memset>
 800acac:	4620      	mov	r0, r4
 800acae:	bd70      	pop	{r4, r5, r6, pc}

0800acb0 <__sfp_lock_acquire>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__sfp_lock_acquire+0x8>)
 800acb2:	f000 b8b8 	b.w	800ae26 <__retarget_lock_acquire_recursive>
 800acb6:	bf00      	nop
 800acb8:	20000485 	.word	0x20000485

0800acbc <__sfp_lock_release>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__sfp_lock_release+0x8>)
 800acbe:	f000 b8b3 	b.w	800ae28 <__retarget_lock_release_recursive>
 800acc2:	bf00      	nop
 800acc4:	20000485 	.word	0x20000485

0800acc8 <__sinit_lock_acquire>:
 800acc8:	4801      	ldr	r0, [pc, #4]	; (800acd0 <__sinit_lock_acquire+0x8>)
 800acca:	f000 b8ac 	b.w	800ae26 <__retarget_lock_acquire_recursive>
 800acce:	bf00      	nop
 800acd0:	20000486 	.word	0x20000486

0800acd4 <__sinit_lock_release>:
 800acd4:	4801      	ldr	r0, [pc, #4]	; (800acdc <__sinit_lock_release+0x8>)
 800acd6:	f000 b8a7 	b.w	800ae28 <__retarget_lock_release_recursive>
 800acda:	bf00      	nop
 800acdc:	20000486 	.word	0x20000486

0800ace0 <__sinit>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	4604      	mov	r4, r0
 800ace4:	f7ff fff0 	bl	800acc8 <__sinit_lock_acquire>
 800ace8:	69a3      	ldr	r3, [r4, #24]
 800acea:	b11b      	cbz	r3, 800acf4 <__sinit+0x14>
 800acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf0:	f7ff bff0 	b.w	800acd4 <__sinit_lock_release>
 800acf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acf8:	6523      	str	r3, [r4, #80]	; 0x50
 800acfa:	4b13      	ldr	r3, [pc, #76]	; (800ad48 <__sinit+0x68>)
 800acfc:	4a13      	ldr	r2, [pc, #76]	; (800ad4c <__sinit+0x6c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad02:	42a3      	cmp	r3, r4
 800ad04:	bf04      	itt	eq
 800ad06:	2301      	moveq	r3, #1
 800ad08:	61a3      	streq	r3, [r4, #24]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 f820 	bl	800ad50 <__sfp>
 800ad10:	6060      	str	r0, [r4, #4]
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 f81c 	bl	800ad50 <__sfp>
 800ad18:	60a0      	str	r0, [r4, #8]
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 f818 	bl	800ad50 <__sfp>
 800ad20:	2200      	movs	r2, #0
 800ad22:	60e0      	str	r0, [r4, #12]
 800ad24:	2104      	movs	r1, #4
 800ad26:	6860      	ldr	r0, [r4, #4]
 800ad28:	f7ff ff82 	bl	800ac30 <std>
 800ad2c:	68a0      	ldr	r0, [r4, #8]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	2109      	movs	r1, #9
 800ad32:	f7ff ff7d 	bl	800ac30 <std>
 800ad36:	68e0      	ldr	r0, [r4, #12]
 800ad38:	2202      	movs	r2, #2
 800ad3a:	2112      	movs	r1, #18
 800ad3c:	f7ff ff78 	bl	800ac30 <std>
 800ad40:	2301      	movs	r3, #1
 800ad42:	61a3      	str	r3, [r4, #24]
 800ad44:	e7d2      	b.n	800acec <__sinit+0xc>
 800ad46:	bf00      	nop
 800ad48:	0800c93c 	.word	0x0800c93c
 800ad4c:	0800ac79 	.word	0x0800ac79

0800ad50 <__sfp>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	4607      	mov	r7, r0
 800ad54:	f7ff ffac 	bl	800acb0 <__sfp_lock_acquire>
 800ad58:	4b1e      	ldr	r3, [pc, #120]	; (800add4 <__sfp+0x84>)
 800ad5a:	681e      	ldr	r6, [r3, #0]
 800ad5c:	69b3      	ldr	r3, [r6, #24]
 800ad5e:	b913      	cbnz	r3, 800ad66 <__sfp+0x16>
 800ad60:	4630      	mov	r0, r6
 800ad62:	f7ff ffbd 	bl	800ace0 <__sinit>
 800ad66:	3648      	adds	r6, #72	; 0x48
 800ad68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	d503      	bpl.n	800ad78 <__sfp+0x28>
 800ad70:	6833      	ldr	r3, [r6, #0]
 800ad72:	b30b      	cbz	r3, 800adb8 <__sfp+0x68>
 800ad74:	6836      	ldr	r6, [r6, #0]
 800ad76:	e7f7      	b.n	800ad68 <__sfp+0x18>
 800ad78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad7c:	b9d5      	cbnz	r5, 800adb4 <__sfp+0x64>
 800ad7e:	4b16      	ldr	r3, [pc, #88]	; (800add8 <__sfp+0x88>)
 800ad80:	60e3      	str	r3, [r4, #12]
 800ad82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad86:	6665      	str	r5, [r4, #100]	; 0x64
 800ad88:	f000 f84c 	bl	800ae24 <__retarget_lock_init_recursive>
 800ad8c:	f7ff ff96 	bl	800acbc <__sfp_lock_release>
 800ad90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad98:	6025      	str	r5, [r4, #0]
 800ad9a:	61a5      	str	r5, [r4, #24]
 800ad9c:	2208      	movs	r2, #8
 800ad9e:	4629      	mov	r1, r5
 800ada0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ada4:	f7fe fa48 	bl	8009238 <memset>
 800ada8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adb0:	4620      	mov	r0, r4
 800adb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb4:	3468      	adds	r4, #104	; 0x68
 800adb6:	e7d9      	b.n	800ad6c <__sfp+0x1c>
 800adb8:	2104      	movs	r1, #4
 800adba:	4638      	mov	r0, r7
 800adbc:	f7ff ff62 	bl	800ac84 <__sfmoreglue>
 800adc0:	4604      	mov	r4, r0
 800adc2:	6030      	str	r0, [r6, #0]
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d1d5      	bne.n	800ad74 <__sfp+0x24>
 800adc8:	f7ff ff78 	bl	800acbc <__sfp_lock_release>
 800adcc:	230c      	movs	r3, #12
 800adce:	603b      	str	r3, [r7, #0]
 800add0:	e7ee      	b.n	800adb0 <__sfp+0x60>
 800add2:	bf00      	nop
 800add4:	0800c93c 	.word	0x0800c93c
 800add8:	ffff0001 	.word	0xffff0001

0800addc <_fwalk_reent>:
 800addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade0:	4606      	mov	r6, r0
 800ade2:	4688      	mov	r8, r1
 800ade4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ade8:	2700      	movs	r7, #0
 800adea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adee:	f1b9 0901 	subs.w	r9, r9, #1
 800adf2:	d505      	bpl.n	800ae00 <_fwalk_reent+0x24>
 800adf4:	6824      	ldr	r4, [r4, #0]
 800adf6:	2c00      	cmp	r4, #0
 800adf8:	d1f7      	bne.n	800adea <_fwalk_reent+0xe>
 800adfa:	4638      	mov	r0, r7
 800adfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae00:	89ab      	ldrh	r3, [r5, #12]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d907      	bls.n	800ae16 <_fwalk_reent+0x3a>
 800ae06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	d003      	beq.n	800ae16 <_fwalk_reent+0x3a>
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4630      	mov	r0, r6
 800ae12:	47c0      	blx	r8
 800ae14:	4307      	orrs	r7, r0
 800ae16:	3568      	adds	r5, #104	; 0x68
 800ae18:	e7e9      	b.n	800adee <_fwalk_reent+0x12>
	...

0800ae1c <_localeconv_r>:
 800ae1c:	4800      	ldr	r0, [pc, #0]	; (800ae20 <_localeconv_r+0x4>)
 800ae1e:	4770      	bx	lr
 800ae20:	20000164 	.word	0x20000164

0800ae24 <__retarget_lock_init_recursive>:
 800ae24:	4770      	bx	lr

0800ae26 <__retarget_lock_acquire_recursive>:
 800ae26:	4770      	bx	lr

0800ae28 <__retarget_lock_release_recursive>:
 800ae28:	4770      	bx	lr

0800ae2a <__swhatbuf_r>:
 800ae2a:	b570      	push	{r4, r5, r6, lr}
 800ae2c:	460e      	mov	r6, r1
 800ae2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae32:	2900      	cmp	r1, #0
 800ae34:	b096      	sub	sp, #88	; 0x58
 800ae36:	4614      	mov	r4, r2
 800ae38:	461d      	mov	r5, r3
 800ae3a:	da08      	bge.n	800ae4e <__swhatbuf_r+0x24>
 800ae3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	602a      	str	r2, [r5, #0]
 800ae44:	061a      	lsls	r2, r3, #24
 800ae46:	d410      	bmi.n	800ae6a <__swhatbuf_r+0x40>
 800ae48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae4c:	e00e      	b.n	800ae6c <__swhatbuf_r+0x42>
 800ae4e:	466a      	mov	r2, sp
 800ae50:	f000 fee0 	bl	800bc14 <_fstat_r>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	dbf1      	blt.n	800ae3c <__swhatbuf_r+0x12>
 800ae58:	9a01      	ldr	r2, [sp, #4]
 800ae5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae62:	425a      	negs	r2, r3
 800ae64:	415a      	adcs	r2, r3
 800ae66:	602a      	str	r2, [r5, #0]
 800ae68:	e7ee      	b.n	800ae48 <__swhatbuf_r+0x1e>
 800ae6a:	2340      	movs	r3, #64	; 0x40
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	6023      	str	r3, [r4, #0]
 800ae70:	b016      	add	sp, #88	; 0x58
 800ae72:	bd70      	pop	{r4, r5, r6, pc}

0800ae74 <__smakebuf_r>:
 800ae74:	898b      	ldrh	r3, [r1, #12]
 800ae76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae78:	079d      	lsls	r5, r3, #30
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	d507      	bpl.n	800ae90 <__smakebuf_r+0x1c>
 800ae80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	2301      	movs	r3, #1
 800ae8a:	6163      	str	r3, [r4, #20]
 800ae8c:	b002      	add	sp, #8
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	ab01      	add	r3, sp, #4
 800ae92:	466a      	mov	r2, sp
 800ae94:	f7ff ffc9 	bl	800ae2a <__swhatbuf_r>
 800ae98:	9900      	ldr	r1, [sp, #0]
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f000 fc45 	bl	800b72c <_malloc_r>
 800aea2:	b948      	cbnz	r0, 800aeb8 <__smakebuf_r+0x44>
 800aea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea8:	059a      	lsls	r2, r3, #22
 800aeaa:	d4ef      	bmi.n	800ae8c <__smakebuf_r+0x18>
 800aeac:	f023 0303 	bic.w	r3, r3, #3
 800aeb0:	f043 0302 	orr.w	r3, r3, #2
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	e7e3      	b.n	800ae80 <__smakebuf_r+0xc>
 800aeb8:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <__smakebuf_r+0x7c>)
 800aeba:	62b3      	str	r3, [r6, #40]	; 0x28
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	6020      	str	r0, [r4, #0]
 800aec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec4:	81a3      	strh	r3, [r4, #12]
 800aec6:	9b00      	ldr	r3, [sp, #0]
 800aec8:	6163      	str	r3, [r4, #20]
 800aeca:	9b01      	ldr	r3, [sp, #4]
 800aecc:	6120      	str	r0, [r4, #16]
 800aece:	b15b      	cbz	r3, 800aee8 <__smakebuf_r+0x74>
 800aed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed4:	4630      	mov	r0, r6
 800aed6:	f000 feaf 	bl	800bc38 <_isatty_r>
 800aeda:	b128      	cbz	r0, 800aee8 <__smakebuf_r+0x74>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f023 0303 	bic.w	r3, r3, #3
 800aee2:	f043 0301 	orr.w	r3, r3, #1
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	89a0      	ldrh	r0, [r4, #12]
 800aeea:	4305      	orrs	r5, r0
 800aeec:	81a5      	strh	r5, [r4, #12]
 800aeee:	e7cd      	b.n	800ae8c <__smakebuf_r+0x18>
 800aef0:	0800ac79 	.word	0x0800ac79

0800aef4 <malloc>:
 800aef4:	4b02      	ldr	r3, [pc, #8]	; (800af00 <malloc+0xc>)
 800aef6:	4601      	mov	r1, r0
 800aef8:	6818      	ldr	r0, [r3, #0]
 800aefa:	f000 bc17 	b.w	800b72c <_malloc_r>
 800aefe:	bf00      	nop
 800af00:	20000010 	.word	0x20000010

0800af04 <memcpy>:
 800af04:	440a      	add	r2, r1
 800af06:	4291      	cmp	r1, r2
 800af08:	f100 33ff 	add.w	r3, r0, #4294967295
 800af0c:	d100      	bne.n	800af10 <memcpy+0xc>
 800af0e:	4770      	bx	lr
 800af10:	b510      	push	{r4, lr}
 800af12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af1a:	4291      	cmp	r1, r2
 800af1c:	d1f9      	bne.n	800af12 <memcpy+0xe>
 800af1e:	bd10      	pop	{r4, pc}

0800af20 <_Balloc>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af24:	4604      	mov	r4, r0
 800af26:	460d      	mov	r5, r1
 800af28:	b976      	cbnz	r6, 800af48 <_Balloc+0x28>
 800af2a:	2010      	movs	r0, #16
 800af2c:	f7ff ffe2 	bl	800aef4 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	6260      	str	r0, [r4, #36]	; 0x24
 800af34:	b920      	cbnz	r0, 800af40 <_Balloc+0x20>
 800af36:	4b18      	ldr	r3, [pc, #96]	; (800af98 <_Balloc+0x78>)
 800af38:	4818      	ldr	r0, [pc, #96]	; (800af9c <_Balloc+0x7c>)
 800af3a:	2166      	movs	r1, #102	; 0x66
 800af3c:	f000 fe2a 	bl	800bb94 <__assert_func>
 800af40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af44:	6006      	str	r6, [r0, #0]
 800af46:	60c6      	str	r6, [r0, #12]
 800af48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af4a:	68f3      	ldr	r3, [r6, #12]
 800af4c:	b183      	cbz	r3, 800af70 <_Balloc+0x50>
 800af4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af56:	b9b8      	cbnz	r0, 800af88 <_Balloc+0x68>
 800af58:	2101      	movs	r1, #1
 800af5a:	fa01 f605 	lsl.w	r6, r1, r5
 800af5e:	1d72      	adds	r2, r6, #5
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fb60 	bl	800b628 <_calloc_r>
 800af68:	b160      	cbz	r0, 800af84 <_Balloc+0x64>
 800af6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af6e:	e00e      	b.n	800af8e <_Balloc+0x6e>
 800af70:	2221      	movs	r2, #33	; 0x21
 800af72:	2104      	movs	r1, #4
 800af74:	4620      	mov	r0, r4
 800af76:	f000 fb57 	bl	800b628 <_calloc_r>
 800af7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af7c:	60f0      	str	r0, [r6, #12]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e4      	bne.n	800af4e <_Balloc+0x2e>
 800af84:	2000      	movs	r0, #0
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	6802      	ldr	r2, [r0, #0]
 800af8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af8e:	2300      	movs	r3, #0
 800af90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af94:	e7f7      	b.n	800af86 <_Balloc+0x66>
 800af96:	bf00      	nop
 800af98:	0800c981 	.word	0x0800c981
 800af9c:	0800ca64 	.word	0x0800ca64

0800afa0 <_Bfree>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b976      	cbnz	r6, 800afc8 <_Bfree+0x28>
 800afaa:	2010      	movs	r0, #16
 800afac:	f7ff ffa2 	bl	800aef4 <malloc>
 800afb0:	4602      	mov	r2, r0
 800afb2:	6268      	str	r0, [r5, #36]	; 0x24
 800afb4:	b920      	cbnz	r0, 800afc0 <_Bfree+0x20>
 800afb6:	4b09      	ldr	r3, [pc, #36]	; (800afdc <_Bfree+0x3c>)
 800afb8:	4809      	ldr	r0, [pc, #36]	; (800afe0 <_Bfree+0x40>)
 800afba:	218a      	movs	r1, #138	; 0x8a
 800afbc:	f000 fdea 	bl	800bb94 <__assert_func>
 800afc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc4:	6006      	str	r6, [r0, #0]
 800afc6:	60c6      	str	r6, [r0, #12]
 800afc8:	b13c      	cbz	r4, 800afda <_Bfree+0x3a>
 800afca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afcc:	6862      	ldr	r2, [r4, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd4:	6021      	str	r1, [r4, #0]
 800afd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	0800c981 	.word	0x0800c981
 800afe0:	0800ca64 	.word	0x0800ca64

0800afe4 <__multadd>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	690d      	ldr	r5, [r1, #16]
 800afea:	4607      	mov	r7, r0
 800afec:	460c      	mov	r4, r1
 800afee:	461e      	mov	r6, r3
 800aff0:	f101 0c14 	add.w	ip, r1, #20
 800aff4:	2000      	movs	r0, #0
 800aff6:	f8dc 3000 	ldr.w	r3, [ip]
 800affa:	b299      	uxth	r1, r3
 800affc:	fb02 6101 	mla	r1, r2, r1, r6
 800b000:	0c1e      	lsrs	r6, r3, #16
 800b002:	0c0b      	lsrs	r3, r1, #16
 800b004:	fb02 3306 	mla	r3, r2, r6, r3
 800b008:	b289      	uxth	r1, r1
 800b00a:	3001      	adds	r0, #1
 800b00c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b010:	4285      	cmp	r5, r0
 800b012:	f84c 1b04 	str.w	r1, [ip], #4
 800b016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b01a:	dcec      	bgt.n	800aff6 <__multadd+0x12>
 800b01c:	b30e      	cbz	r6, 800b062 <__multadd+0x7e>
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	42ab      	cmp	r3, r5
 800b022:	dc19      	bgt.n	800b058 <__multadd+0x74>
 800b024:	6861      	ldr	r1, [r4, #4]
 800b026:	4638      	mov	r0, r7
 800b028:	3101      	adds	r1, #1
 800b02a:	f7ff ff79 	bl	800af20 <_Balloc>
 800b02e:	4680      	mov	r8, r0
 800b030:	b928      	cbnz	r0, 800b03e <__multadd+0x5a>
 800b032:	4602      	mov	r2, r0
 800b034:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <__multadd+0x84>)
 800b036:	480d      	ldr	r0, [pc, #52]	; (800b06c <__multadd+0x88>)
 800b038:	21b5      	movs	r1, #181	; 0xb5
 800b03a:	f000 fdab 	bl	800bb94 <__assert_func>
 800b03e:	6922      	ldr	r2, [r4, #16]
 800b040:	3202      	adds	r2, #2
 800b042:	f104 010c 	add.w	r1, r4, #12
 800b046:	0092      	lsls	r2, r2, #2
 800b048:	300c      	adds	r0, #12
 800b04a:	f7ff ff5b 	bl	800af04 <memcpy>
 800b04e:	4621      	mov	r1, r4
 800b050:	4638      	mov	r0, r7
 800b052:	f7ff ffa5 	bl	800afa0 <_Bfree>
 800b056:	4644      	mov	r4, r8
 800b058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b05c:	3501      	adds	r5, #1
 800b05e:	615e      	str	r6, [r3, #20]
 800b060:	6125      	str	r5, [r4, #16]
 800b062:	4620      	mov	r0, r4
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	0800c9f3 	.word	0x0800c9f3
 800b06c:	0800ca64 	.word	0x0800ca64

0800b070 <__hi0bits>:
 800b070:	0c03      	lsrs	r3, r0, #16
 800b072:	041b      	lsls	r3, r3, #16
 800b074:	b9d3      	cbnz	r3, 800b0ac <__hi0bits+0x3c>
 800b076:	0400      	lsls	r0, r0, #16
 800b078:	2310      	movs	r3, #16
 800b07a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b07e:	bf04      	itt	eq
 800b080:	0200      	lsleq	r0, r0, #8
 800b082:	3308      	addeq	r3, #8
 800b084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b088:	bf04      	itt	eq
 800b08a:	0100      	lsleq	r0, r0, #4
 800b08c:	3304      	addeq	r3, #4
 800b08e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b092:	bf04      	itt	eq
 800b094:	0080      	lsleq	r0, r0, #2
 800b096:	3302      	addeq	r3, #2
 800b098:	2800      	cmp	r0, #0
 800b09a:	db05      	blt.n	800b0a8 <__hi0bits+0x38>
 800b09c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0a0:	f103 0301 	add.w	r3, r3, #1
 800b0a4:	bf08      	it	eq
 800b0a6:	2320      	moveq	r3, #32
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	4770      	bx	lr
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e7e4      	b.n	800b07a <__hi0bits+0xa>

0800b0b0 <__lo0bits>:
 800b0b0:	6803      	ldr	r3, [r0, #0]
 800b0b2:	f013 0207 	ands.w	r2, r3, #7
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	d00b      	beq.n	800b0d2 <__lo0bits+0x22>
 800b0ba:	07da      	lsls	r2, r3, #31
 800b0bc:	d423      	bmi.n	800b106 <__lo0bits+0x56>
 800b0be:	0798      	lsls	r0, r3, #30
 800b0c0:	bf49      	itett	mi
 800b0c2:	085b      	lsrmi	r3, r3, #1
 800b0c4:	089b      	lsrpl	r3, r3, #2
 800b0c6:	2001      	movmi	r0, #1
 800b0c8:	600b      	strmi	r3, [r1, #0]
 800b0ca:	bf5c      	itt	pl
 800b0cc:	600b      	strpl	r3, [r1, #0]
 800b0ce:	2002      	movpl	r0, #2
 800b0d0:	4770      	bx	lr
 800b0d2:	b298      	uxth	r0, r3
 800b0d4:	b9a8      	cbnz	r0, 800b102 <__lo0bits+0x52>
 800b0d6:	0c1b      	lsrs	r3, r3, #16
 800b0d8:	2010      	movs	r0, #16
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	b90a      	cbnz	r2, 800b0e2 <__lo0bits+0x32>
 800b0de:	3008      	adds	r0, #8
 800b0e0:	0a1b      	lsrs	r3, r3, #8
 800b0e2:	071a      	lsls	r2, r3, #28
 800b0e4:	bf04      	itt	eq
 800b0e6:	091b      	lsreq	r3, r3, #4
 800b0e8:	3004      	addeq	r0, #4
 800b0ea:	079a      	lsls	r2, r3, #30
 800b0ec:	bf04      	itt	eq
 800b0ee:	089b      	lsreq	r3, r3, #2
 800b0f0:	3002      	addeq	r0, #2
 800b0f2:	07da      	lsls	r2, r3, #31
 800b0f4:	d403      	bmi.n	800b0fe <__lo0bits+0x4e>
 800b0f6:	085b      	lsrs	r3, r3, #1
 800b0f8:	f100 0001 	add.w	r0, r0, #1
 800b0fc:	d005      	beq.n	800b10a <__lo0bits+0x5a>
 800b0fe:	600b      	str	r3, [r1, #0]
 800b100:	4770      	bx	lr
 800b102:	4610      	mov	r0, r2
 800b104:	e7e9      	b.n	800b0da <__lo0bits+0x2a>
 800b106:	2000      	movs	r0, #0
 800b108:	4770      	bx	lr
 800b10a:	2020      	movs	r0, #32
 800b10c:	4770      	bx	lr
	...

0800b110 <__i2b>:
 800b110:	b510      	push	{r4, lr}
 800b112:	460c      	mov	r4, r1
 800b114:	2101      	movs	r1, #1
 800b116:	f7ff ff03 	bl	800af20 <_Balloc>
 800b11a:	4602      	mov	r2, r0
 800b11c:	b928      	cbnz	r0, 800b12a <__i2b+0x1a>
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <__i2b+0x24>)
 800b120:	4805      	ldr	r0, [pc, #20]	; (800b138 <__i2b+0x28>)
 800b122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b126:	f000 fd35 	bl	800bb94 <__assert_func>
 800b12a:	2301      	movs	r3, #1
 800b12c:	6144      	str	r4, [r0, #20]
 800b12e:	6103      	str	r3, [r0, #16]
 800b130:	bd10      	pop	{r4, pc}
 800b132:	bf00      	nop
 800b134:	0800c9f3 	.word	0x0800c9f3
 800b138:	0800ca64 	.word	0x0800ca64

0800b13c <__multiply>:
 800b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	4691      	mov	r9, r2
 800b142:	690a      	ldr	r2, [r1, #16]
 800b144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b148:	429a      	cmp	r2, r3
 800b14a:	bfb8      	it	lt
 800b14c:	460b      	movlt	r3, r1
 800b14e:	460c      	mov	r4, r1
 800b150:	bfbc      	itt	lt
 800b152:	464c      	movlt	r4, r9
 800b154:	4699      	movlt	r9, r3
 800b156:	6927      	ldr	r7, [r4, #16]
 800b158:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b15c:	68a3      	ldr	r3, [r4, #8]
 800b15e:	6861      	ldr	r1, [r4, #4]
 800b160:	eb07 060a 	add.w	r6, r7, sl
 800b164:	42b3      	cmp	r3, r6
 800b166:	b085      	sub	sp, #20
 800b168:	bfb8      	it	lt
 800b16a:	3101      	addlt	r1, #1
 800b16c:	f7ff fed8 	bl	800af20 <_Balloc>
 800b170:	b930      	cbnz	r0, 800b180 <__multiply+0x44>
 800b172:	4602      	mov	r2, r0
 800b174:	4b44      	ldr	r3, [pc, #272]	; (800b288 <__multiply+0x14c>)
 800b176:	4845      	ldr	r0, [pc, #276]	; (800b28c <__multiply+0x150>)
 800b178:	f240 115d 	movw	r1, #349	; 0x15d
 800b17c:	f000 fd0a 	bl	800bb94 <__assert_func>
 800b180:	f100 0514 	add.w	r5, r0, #20
 800b184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b188:	462b      	mov	r3, r5
 800b18a:	2200      	movs	r2, #0
 800b18c:	4543      	cmp	r3, r8
 800b18e:	d321      	bcc.n	800b1d4 <__multiply+0x98>
 800b190:	f104 0314 	add.w	r3, r4, #20
 800b194:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b198:	f109 0314 	add.w	r3, r9, #20
 800b19c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1a0:	9202      	str	r2, [sp, #8]
 800b1a2:	1b3a      	subs	r2, r7, r4
 800b1a4:	3a15      	subs	r2, #21
 800b1a6:	f022 0203 	bic.w	r2, r2, #3
 800b1aa:	3204      	adds	r2, #4
 800b1ac:	f104 0115 	add.w	r1, r4, #21
 800b1b0:	428f      	cmp	r7, r1
 800b1b2:	bf38      	it	cc
 800b1b4:	2204      	movcc	r2, #4
 800b1b6:	9201      	str	r2, [sp, #4]
 800b1b8:	9a02      	ldr	r2, [sp, #8]
 800b1ba:	9303      	str	r3, [sp, #12]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d80c      	bhi.n	800b1da <__multiply+0x9e>
 800b1c0:	2e00      	cmp	r6, #0
 800b1c2:	dd03      	ble.n	800b1cc <__multiply+0x90>
 800b1c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d05a      	beq.n	800b282 <__multiply+0x146>
 800b1cc:	6106      	str	r6, [r0, #16]
 800b1ce:	b005      	add	sp, #20
 800b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d4:	f843 2b04 	str.w	r2, [r3], #4
 800b1d8:	e7d8      	b.n	800b18c <__multiply+0x50>
 800b1da:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1de:	f1ba 0f00 	cmp.w	sl, #0
 800b1e2:	d024      	beq.n	800b22e <__multiply+0xf2>
 800b1e4:	f104 0e14 	add.w	lr, r4, #20
 800b1e8:	46a9      	mov	r9, r5
 800b1ea:	f04f 0c00 	mov.w	ip, #0
 800b1ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1f2:	f8d9 1000 	ldr.w	r1, [r9]
 800b1f6:	fa1f fb82 	uxth.w	fp, r2
 800b1fa:	b289      	uxth	r1, r1
 800b1fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b200:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b204:	f8d9 2000 	ldr.w	r2, [r9]
 800b208:	4461      	add	r1, ip
 800b20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b20e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b212:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b216:	b289      	uxth	r1, r1
 800b218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b21c:	4577      	cmp	r7, lr
 800b21e:	f849 1b04 	str.w	r1, [r9], #4
 800b222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b226:	d8e2      	bhi.n	800b1ee <__multiply+0xb2>
 800b228:	9a01      	ldr	r2, [sp, #4]
 800b22a:	f845 c002 	str.w	ip, [r5, r2]
 800b22e:	9a03      	ldr	r2, [sp, #12]
 800b230:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b234:	3304      	adds	r3, #4
 800b236:	f1b9 0f00 	cmp.w	r9, #0
 800b23a:	d020      	beq.n	800b27e <__multiply+0x142>
 800b23c:	6829      	ldr	r1, [r5, #0]
 800b23e:	f104 0c14 	add.w	ip, r4, #20
 800b242:	46ae      	mov	lr, r5
 800b244:	f04f 0a00 	mov.w	sl, #0
 800b248:	f8bc b000 	ldrh.w	fp, [ip]
 800b24c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b250:	fb09 220b 	mla	r2, r9, fp, r2
 800b254:	4492      	add	sl, r2
 800b256:	b289      	uxth	r1, r1
 800b258:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b25c:	f84e 1b04 	str.w	r1, [lr], #4
 800b260:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b264:	f8be 1000 	ldrh.w	r1, [lr]
 800b268:	0c12      	lsrs	r2, r2, #16
 800b26a:	fb09 1102 	mla	r1, r9, r2, r1
 800b26e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b272:	4567      	cmp	r7, ip
 800b274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b278:	d8e6      	bhi.n	800b248 <__multiply+0x10c>
 800b27a:	9a01      	ldr	r2, [sp, #4]
 800b27c:	50a9      	str	r1, [r5, r2]
 800b27e:	3504      	adds	r5, #4
 800b280:	e79a      	b.n	800b1b8 <__multiply+0x7c>
 800b282:	3e01      	subs	r6, #1
 800b284:	e79c      	b.n	800b1c0 <__multiply+0x84>
 800b286:	bf00      	nop
 800b288:	0800c9f3 	.word	0x0800c9f3
 800b28c:	0800ca64 	.word	0x0800ca64

0800b290 <__pow5mult>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	4615      	mov	r5, r2
 800b296:	f012 0203 	ands.w	r2, r2, #3
 800b29a:	4606      	mov	r6, r0
 800b29c:	460f      	mov	r7, r1
 800b29e:	d007      	beq.n	800b2b0 <__pow5mult+0x20>
 800b2a0:	4c25      	ldr	r4, [pc, #148]	; (800b338 <__pow5mult+0xa8>)
 800b2a2:	3a01      	subs	r2, #1
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2aa:	f7ff fe9b 	bl	800afe4 <__multadd>
 800b2ae:	4607      	mov	r7, r0
 800b2b0:	10ad      	asrs	r5, r5, #2
 800b2b2:	d03d      	beq.n	800b330 <__pow5mult+0xa0>
 800b2b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2b6:	b97c      	cbnz	r4, 800b2d8 <__pow5mult+0x48>
 800b2b8:	2010      	movs	r0, #16
 800b2ba:	f7ff fe1b 	bl	800aef4 <malloc>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	6270      	str	r0, [r6, #36]	; 0x24
 800b2c2:	b928      	cbnz	r0, 800b2d0 <__pow5mult+0x40>
 800b2c4:	4b1d      	ldr	r3, [pc, #116]	; (800b33c <__pow5mult+0xac>)
 800b2c6:	481e      	ldr	r0, [pc, #120]	; (800b340 <__pow5mult+0xb0>)
 800b2c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2cc:	f000 fc62 	bl	800bb94 <__assert_func>
 800b2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d4:	6004      	str	r4, [r0, #0]
 800b2d6:	60c4      	str	r4, [r0, #12]
 800b2d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2e0:	b94c      	cbnz	r4, 800b2f6 <__pow5mult+0x66>
 800b2e2:	f240 2171 	movw	r1, #625	; 0x271
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff ff12 	bl	800b110 <__i2b>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	6003      	str	r3, [r0, #0]
 800b2f6:	f04f 0900 	mov.w	r9, #0
 800b2fa:	07eb      	lsls	r3, r5, #31
 800b2fc:	d50a      	bpl.n	800b314 <__pow5mult+0x84>
 800b2fe:	4639      	mov	r1, r7
 800b300:	4622      	mov	r2, r4
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ff1a 	bl	800b13c <__multiply>
 800b308:	4639      	mov	r1, r7
 800b30a:	4680      	mov	r8, r0
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff fe47 	bl	800afa0 <_Bfree>
 800b312:	4647      	mov	r7, r8
 800b314:	106d      	asrs	r5, r5, #1
 800b316:	d00b      	beq.n	800b330 <__pow5mult+0xa0>
 800b318:	6820      	ldr	r0, [r4, #0]
 800b31a:	b938      	cbnz	r0, 800b32c <__pow5mult+0x9c>
 800b31c:	4622      	mov	r2, r4
 800b31e:	4621      	mov	r1, r4
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff ff0b 	bl	800b13c <__multiply>
 800b326:	6020      	str	r0, [r4, #0]
 800b328:	f8c0 9000 	str.w	r9, [r0]
 800b32c:	4604      	mov	r4, r0
 800b32e:	e7e4      	b.n	800b2fa <__pow5mult+0x6a>
 800b330:	4638      	mov	r0, r7
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	bf00      	nop
 800b338:	0800cbb0 	.word	0x0800cbb0
 800b33c:	0800c981 	.word	0x0800c981
 800b340:	0800ca64 	.word	0x0800ca64

0800b344 <__lshift>:
 800b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	460c      	mov	r4, r1
 800b34a:	6849      	ldr	r1, [r1, #4]
 800b34c:	6923      	ldr	r3, [r4, #16]
 800b34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	4607      	mov	r7, r0
 800b356:	4691      	mov	r9, r2
 800b358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b35c:	f108 0601 	add.w	r6, r8, #1
 800b360:	42b3      	cmp	r3, r6
 800b362:	db0b      	blt.n	800b37c <__lshift+0x38>
 800b364:	4638      	mov	r0, r7
 800b366:	f7ff fddb 	bl	800af20 <_Balloc>
 800b36a:	4605      	mov	r5, r0
 800b36c:	b948      	cbnz	r0, 800b382 <__lshift+0x3e>
 800b36e:	4602      	mov	r2, r0
 800b370:	4b2a      	ldr	r3, [pc, #168]	; (800b41c <__lshift+0xd8>)
 800b372:	482b      	ldr	r0, [pc, #172]	; (800b420 <__lshift+0xdc>)
 800b374:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b378:	f000 fc0c 	bl	800bb94 <__assert_func>
 800b37c:	3101      	adds	r1, #1
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	e7ee      	b.n	800b360 <__lshift+0x1c>
 800b382:	2300      	movs	r3, #0
 800b384:	f100 0114 	add.w	r1, r0, #20
 800b388:	f100 0210 	add.w	r2, r0, #16
 800b38c:	4618      	mov	r0, r3
 800b38e:	4553      	cmp	r3, sl
 800b390:	db37      	blt.n	800b402 <__lshift+0xbe>
 800b392:	6920      	ldr	r0, [r4, #16]
 800b394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b398:	f104 0314 	add.w	r3, r4, #20
 800b39c:	f019 091f 	ands.w	r9, r9, #31
 800b3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3a8:	d02f      	beq.n	800b40a <__lshift+0xc6>
 800b3aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ae:	468a      	mov	sl, r1
 800b3b0:	f04f 0c00 	mov.w	ip, #0
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	fa02 f209 	lsl.w	r2, r2, r9
 800b3ba:	ea42 020c 	orr.w	r2, r2, ip
 800b3be:	f84a 2b04 	str.w	r2, [sl], #4
 800b3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c6:	4298      	cmp	r0, r3
 800b3c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3cc:	d8f2      	bhi.n	800b3b4 <__lshift+0x70>
 800b3ce:	1b03      	subs	r3, r0, r4
 800b3d0:	3b15      	subs	r3, #21
 800b3d2:	f023 0303 	bic.w	r3, r3, #3
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	f104 0215 	add.w	r2, r4, #21
 800b3dc:	4290      	cmp	r0, r2
 800b3de:	bf38      	it	cc
 800b3e0:	2304      	movcc	r3, #4
 800b3e2:	f841 c003 	str.w	ip, [r1, r3]
 800b3e6:	f1bc 0f00 	cmp.w	ip, #0
 800b3ea:	d001      	beq.n	800b3f0 <__lshift+0xac>
 800b3ec:	f108 0602 	add.w	r6, r8, #2
 800b3f0:	3e01      	subs	r6, #1
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	612e      	str	r6, [r5, #16]
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	f7ff fdd2 	bl	800afa0 <_Bfree>
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b402:	f842 0f04 	str.w	r0, [r2, #4]!
 800b406:	3301      	adds	r3, #1
 800b408:	e7c1      	b.n	800b38e <__lshift+0x4a>
 800b40a:	3904      	subs	r1, #4
 800b40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b410:	f841 2f04 	str.w	r2, [r1, #4]!
 800b414:	4298      	cmp	r0, r3
 800b416:	d8f9      	bhi.n	800b40c <__lshift+0xc8>
 800b418:	e7ea      	b.n	800b3f0 <__lshift+0xac>
 800b41a:	bf00      	nop
 800b41c:	0800c9f3 	.word	0x0800c9f3
 800b420:	0800ca64 	.word	0x0800ca64

0800b424 <__mcmp>:
 800b424:	b530      	push	{r4, r5, lr}
 800b426:	6902      	ldr	r2, [r0, #16]
 800b428:	690c      	ldr	r4, [r1, #16]
 800b42a:	1b12      	subs	r2, r2, r4
 800b42c:	d10e      	bne.n	800b44c <__mcmp+0x28>
 800b42e:	f100 0314 	add.w	r3, r0, #20
 800b432:	3114      	adds	r1, #20
 800b434:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b438:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b43c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b440:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b444:	42a5      	cmp	r5, r4
 800b446:	d003      	beq.n	800b450 <__mcmp+0x2c>
 800b448:	d305      	bcc.n	800b456 <__mcmp+0x32>
 800b44a:	2201      	movs	r2, #1
 800b44c:	4610      	mov	r0, r2
 800b44e:	bd30      	pop	{r4, r5, pc}
 800b450:	4283      	cmp	r3, r0
 800b452:	d3f3      	bcc.n	800b43c <__mcmp+0x18>
 800b454:	e7fa      	b.n	800b44c <__mcmp+0x28>
 800b456:	f04f 32ff 	mov.w	r2, #4294967295
 800b45a:	e7f7      	b.n	800b44c <__mcmp+0x28>

0800b45c <__mdiff>:
 800b45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	460c      	mov	r4, r1
 800b462:	4606      	mov	r6, r0
 800b464:	4611      	mov	r1, r2
 800b466:	4620      	mov	r0, r4
 800b468:	4690      	mov	r8, r2
 800b46a:	f7ff ffdb 	bl	800b424 <__mcmp>
 800b46e:	1e05      	subs	r5, r0, #0
 800b470:	d110      	bne.n	800b494 <__mdiff+0x38>
 800b472:	4629      	mov	r1, r5
 800b474:	4630      	mov	r0, r6
 800b476:	f7ff fd53 	bl	800af20 <_Balloc>
 800b47a:	b930      	cbnz	r0, 800b48a <__mdiff+0x2e>
 800b47c:	4b3a      	ldr	r3, [pc, #232]	; (800b568 <__mdiff+0x10c>)
 800b47e:	4602      	mov	r2, r0
 800b480:	f240 2132 	movw	r1, #562	; 0x232
 800b484:	4839      	ldr	r0, [pc, #228]	; (800b56c <__mdiff+0x110>)
 800b486:	f000 fb85 	bl	800bb94 <__assert_func>
 800b48a:	2301      	movs	r3, #1
 800b48c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	bfa4      	itt	ge
 800b496:	4643      	movge	r3, r8
 800b498:	46a0      	movge	r8, r4
 800b49a:	4630      	mov	r0, r6
 800b49c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4a0:	bfa6      	itte	ge
 800b4a2:	461c      	movge	r4, r3
 800b4a4:	2500      	movge	r5, #0
 800b4a6:	2501      	movlt	r5, #1
 800b4a8:	f7ff fd3a 	bl	800af20 <_Balloc>
 800b4ac:	b920      	cbnz	r0, 800b4b8 <__mdiff+0x5c>
 800b4ae:	4b2e      	ldr	r3, [pc, #184]	; (800b568 <__mdiff+0x10c>)
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4b6:	e7e5      	b.n	800b484 <__mdiff+0x28>
 800b4b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4bc:	6926      	ldr	r6, [r4, #16]
 800b4be:	60c5      	str	r5, [r0, #12]
 800b4c0:	f104 0914 	add.w	r9, r4, #20
 800b4c4:	f108 0514 	add.w	r5, r8, #20
 800b4c8:	f100 0e14 	add.w	lr, r0, #20
 800b4cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4d4:	f108 0210 	add.w	r2, r8, #16
 800b4d8:	46f2      	mov	sl, lr
 800b4da:	2100      	movs	r1, #0
 800b4dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4e4:	fa1f f883 	uxth.w	r8, r3
 800b4e8:	fa11 f18b 	uxtah	r1, r1, fp
 800b4ec:	0c1b      	lsrs	r3, r3, #16
 800b4ee:	eba1 0808 	sub.w	r8, r1, r8
 800b4f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4fa:	fa1f f888 	uxth.w	r8, r8
 800b4fe:	1419      	asrs	r1, r3, #16
 800b500:	454e      	cmp	r6, r9
 800b502:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b506:	f84a 3b04 	str.w	r3, [sl], #4
 800b50a:	d8e7      	bhi.n	800b4dc <__mdiff+0x80>
 800b50c:	1b33      	subs	r3, r6, r4
 800b50e:	3b15      	subs	r3, #21
 800b510:	f023 0303 	bic.w	r3, r3, #3
 800b514:	3304      	adds	r3, #4
 800b516:	3415      	adds	r4, #21
 800b518:	42a6      	cmp	r6, r4
 800b51a:	bf38      	it	cc
 800b51c:	2304      	movcc	r3, #4
 800b51e:	441d      	add	r5, r3
 800b520:	4473      	add	r3, lr
 800b522:	469e      	mov	lr, r3
 800b524:	462e      	mov	r6, r5
 800b526:	4566      	cmp	r6, ip
 800b528:	d30e      	bcc.n	800b548 <__mdiff+0xec>
 800b52a:	f10c 0203 	add.w	r2, ip, #3
 800b52e:	1b52      	subs	r2, r2, r5
 800b530:	f022 0203 	bic.w	r2, r2, #3
 800b534:	3d03      	subs	r5, #3
 800b536:	45ac      	cmp	ip, r5
 800b538:	bf38      	it	cc
 800b53a:	2200      	movcc	r2, #0
 800b53c:	441a      	add	r2, r3
 800b53e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b542:	b17b      	cbz	r3, 800b564 <__mdiff+0x108>
 800b544:	6107      	str	r7, [r0, #16]
 800b546:	e7a3      	b.n	800b490 <__mdiff+0x34>
 800b548:	f856 8b04 	ldr.w	r8, [r6], #4
 800b54c:	fa11 f288 	uxtah	r2, r1, r8
 800b550:	1414      	asrs	r4, r2, #16
 800b552:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b556:	b292      	uxth	r2, r2
 800b558:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b55c:	f84e 2b04 	str.w	r2, [lr], #4
 800b560:	1421      	asrs	r1, r4, #16
 800b562:	e7e0      	b.n	800b526 <__mdiff+0xca>
 800b564:	3f01      	subs	r7, #1
 800b566:	e7ea      	b.n	800b53e <__mdiff+0xe2>
 800b568:	0800c9f3 	.word	0x0800c9f3
 800b56c:	0800ca64 	.word	0x0800ca64

0800b570 <__d2b>:
 800b570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b574:	4689      	mov	r9, r1
 800b576:	2101      	movs	r1, #1
 800b578:	ec57 6b10 	vmov	r6, r7, d0
 800b57c:	4690      	mov	r8, r2
 800b57e:	f7ff fccf 	bl	800af20 <_Balloc>
 800b582:	4604      	mov	r4, r0
 800b584:	b930      	cbnz	r0, 800b594 <__d2b+0x24>
 800b586:	4602      	mov	r2, r0
 800b588:	4b25      	ldr	r3, [pc, #148]	; (800b620 <__d2b+0xb0>)
 800b58a:	4826      	ldr	r0, [pc, #152]	; (800b624 <__d2b+0xb4>)
 800b58c:	f240 310a 	movw	r1, #778	; 0x30a
 800b590:	f000 fb00 	bl	800bb94 <__assert_func>
 800b594:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b59c:	bb35      	cbnz	r5, 800b5ec <__d2b+0x7c>
 800b59e:	2e00      	cmp	r6, #0
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	d028      	beq.n	800b5f6 <__d2b+0x86>
 800b5a4:	4668      	mov	r0, sp
 800b5a6:	9600      	str	r6, [sp, #0]
 800b5a8:	f7ff fd82 	bl	800b0b0 <__lo0bits>
 800b5ac:	9900      	ldr	r1, [sp, #0]
 800b5ae:	b300      	cbz	r0, 800b5f2 <__d2b+0x82>
 800b5b0:	9a01      	ldr	r2, [sp, #4]
 800b5b2:	f1c0 0320 	rsb	r3, r0, #32
 800b5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ba:	430b      	orrs	r3, r1
 800b5bc:	40c2      	lsrs	r2, r0
 800b5be:	6163      	str	r3, [r4, #20]
 800b5c0:	9201      	str	r2, [sp, #4]
 800b5c2:	9b01      	ldr	r3, [sp, #4]
 800b5c4:	61a3      	str	r3, [r4, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	bf14      	ite	ne
 800b5ca:	2202      	movne	r2, #2
 800b5cc:	2201      	moveq	r2, #1
 800b5ce:	6122      	str	r2, [r4, #16]
 800b5d0:	b1d5      	cbz	r5, 800b608 <__d2b+0x98>
 800b5d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5d6:	4405      	add	r5, r0
 800b5d8:	f8c9 5000 	str.w	r5, [r9]
 800b5dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5e0:	f8c8 0000 	str.w	r0, [r8]
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	b003      	add	sp, #12
 800b5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5f0:	e7d5      	b.n	800b59e <__d2b+0x2e>
 800b5f2:	6161      	str	r1, [r4, #20]
 800b5f4:	e7e5      	b.n	800b5c2 <__d2b+0x52>
 800b5f6:	a801      	add	r0, sp, #4
 800b5f8:	f7ff fd5a 	bl	800b0b0 <__lo0bits>
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	6163      	str	r3, [r4, #20]
 800b600:	2201      	movs	r2, #1
 800b602:	6122      	str	r2, [r4, #16]
 800b604:	3020      	adds	r0, #32
 800b606:	e7e3      	b.n	800b5d0 <__d2b+0x60>
 800b608:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b60c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b610:	f8c9 0000 	str.w	r0, [r9]
 800b614:	6918      	ldr	r0, [r3, #16]
 800b616:	f7ff fd2b 	bl	800b070 <__hi0bits>
 800b61a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b61e:	e7df      	b.n	800b5e0 <__d2b+0x70>
 800b620:	0800c9f3 	.word	0x0800c9f3
 800b624:	0800ca64 	.word	0x0800ca64

0800b628 <_calloc_r>:
 800b628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b62a:	fba1 2402 	umull	r2, r4, r1, r2
 800b62e:	b94c      	cbnz	r4, 800b644 <_calloc_r+0x1c>
 800b630:	4611      	mov	r1, r2
 800b632:	9201      	str	r2, [sp, #4]
 800b634:	f000 f87a 	bl	800b72c <_malloc_r>
 800b638:	9a01      	ldr	r2, [sp, #4]
 800b63a:	4605      	mov	r5, r0
 800b63c:	b930      	cbnz	r0, 800b64c <_calloc_r+0x24>
 800b63e:	4628      	mov	r0, r5
 800b640:	b003      	add	sp, #12
 800b642:	bd30      	pop	{r4, r5, pc}
 800b644:	220c      	movs	r2, #12
 800b646:	6002      	str	r2, [r0, #0]
 800b648:	2500      	movs	r5, #0
 800b64a:	e7f8      	b.n	800b63e <_calloc_r+0x16>
 800b64c:	4621      	mov	r1, r4
 800b64e:	f7fd fdf3 	bl	8009238 <memset>
 800b652:	e7f4      	b.n	800b63e <_calloc_r+0x16>

0800b654 <_free_r>:
 800b654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b656:	2900      	cmp	r1, #0
 800b658:	d044      	beq.n	800b6e4 <_free_r+0x90>
 800b65a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65e:	9001      	str	r0, [sp, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	f1a1 0404 	sub.w	r4, r1, #4
 800b666:	bfb8      	it	lt
 800b668:	18e4      	addlt	r4, r4, r3
 800b66a:	f000 fb19 	bl	800bca0 <__malloc_lock>
 800b66e:	4a1e      	ldr	r2, [pc, #120]	; (800b6e8 <_free_r+0x94>)
 800b670:	9801      	ldr	r0, [sp, #4]
 800b672:	6813      	ldr	r3, [r2, #0]
 800b674:	b933      	cbnz	r3, 800b684 <_free_r+0x30>
 800b676:	6063      	str	r3, [r4, #4]
 800b678:	6014      	str	r4, [r2, #0]
 800b67a:	b003      	add	sp, #12
 800b67c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b680:	f000 bb14 	b.w	800bcac <__malloc_unlock>
 800b684:	42a3      	cmp	r3, r4
 800b686:	d908      	bls.n	800b69a <_free_r+0x46>
 800b688:	6825      	ldr	r5, [r4, #0]
 800b68a:	1961      	adds	r1, r4, r5
 800b68c:	428b      	cmp	r3, r1
 800b68e:	bf01      	itttt	eq
 800b690:	6819      	ldreq	r1, [r3, #0]
 800b692:	685b      	ldreq	r3, [r3, #4]
 800b694:	1949      	addeq	r1, r1, r5
 800b696:	6021      	streq	r1, [r4, #0]
 800b698:	e7ed      	b.n	800b676 <_free_r+0x22>
 800b69a:	461a      	mov	r2, r3
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	b10b      	cbz	r3, 800b6a4 <_free_r+0x50>
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d9fa      	bls.n	800b69a <_free_r+0x46>
 800b6a4:	6811      	ldr	r1, [r2, #0]
 800b6a6:	1855      	adds	r5, r2, r1
 800b6a8:	42a5      	cmp	r5, r4
 800b6aa:	d10b      	bne.n	800b6c4 <_free_r+0x70>
 800b6ac:	6824      	ldr	r4, [r4, #0]
 800b6ae:	4421      	add	r1, r4
 800b6b0:	1854      	adds	r4, r2, r1
 800b6b2:	42a3      	cmp	r3, r4
 800b6b4:	6011      	str	r1, [r2, #0]
 800b6b6:	d1e0      	bne.n	800b67a <_free_r+0x26>
 800b6b8:	681c      	ldr	r4, [r3, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	6053      	str	r3, [r2, #4]
 800b6be:	4421      	add	r1, r4
 800b6c0:	6011      	str	r1, [r2, #0]
 800b6c2:	e7da      	b.n	800b67a <_free_r+0x26>
 800b6c4:	d902      	bls.n	800b6cc <_free_r+0x78>
 800b6c6:	230c      	movs	r3, #12
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	e7d6      	b.n	800b67a <_free_r+0x26>
 800b6cc:	6825      	ldr	r5, [r4, #0]
 800b6ce:	1961      	adds	r1, r4, r5
 800b6d0:	428b      	cmp	r3, r1
 800b6d2:	bf04      	itt	eq
 800b6d4:	6819      	ldreq	r1, [r3, #0]
 800b6d6:	685b      	ldreq	r3, [r3, #4]
 800b6d8:	6063      	str	r3, [r4, #4]
 800b6da:	bf04      	itt	eq
 800b6dc:	1949      	addeq	r1, r1, r5
 800b6de:	6021      	streq	r1, [r4, #0]
 800b6e0:	6054      	str	r4, [r2, #4]
 800b6e2:	e7ca      	b.n	800b67a <_free_r+0x26>
 800b6e4:	b003      	add	sp, #12
 800b6e6:	bd30      	pop	{r4, r5, pc}
 800b6e8:	20000488 	.word	0x20000488

0800b6ec <sbrk_aligned>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	4e0e      	ldr	r6, [pc, #56]	; (800b728 <sbrk_aligned+0x3c>)
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	6831      	ldr	r1, [r6, #0]
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	b911      	cbnz	r1, 800b6fe <sbrk_aligned+0x12>
 800b6f8:	f000 f9e6 	bl	800bac8 <_sbrk_r>
 800b6fc:	6030      	str	r0, [r6, #0]
 800b6fe:	4621      	mov	r1, r4
 800b700:	4628      	mov	r0, r5
 800b702:	f000 f9e1 	bl	800bac8 <_sbrk_r>
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	d00a      	beq.n	800b720 <sbrk_aligned+0x34>
 800b70a:	1cc4      	adds	r4, r0, #3
 800b70c:	f024 0403 	bic.w	r4, r4, #3
 800b710:	42a0      	cmp	r0, r4
 800b712:	d007      	beq.n	800b724 <sbrk_aligned+0x38>
 800b714:	1a21      	subs	r1, r4, r0
 800b716:	4628      	mov	r0, r5
 800b718:	f000 f9d6 	bl	800bac8 <_sbrk_r>
 800b71c:	3001      	adds	r0, #1
 800b71e:	d101      	bne.n	800b724 <sbrk_aligned+0x38>
 800b720:	f04f 34ff 	mov.w	r4, #4294967295
 800b724:	4620      	mov	r0, r4
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	2000048c 	.word	0x2000048c

0800b72c <_malloc_r>:
 800b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b730:	1ccd      	adds	r5, r1, #3
 800b732:	f025 0503 	bic.w	r5, r5, #3
 800b736:	3508      	adds	r5, #8
 800b738:	2d0c      	cmp	r5, #12
 800b73a:	bf38      	it	cc
 800b73c:	250c      	movcc	r5, #12
 800b73e:	2d00      	cmp	r5, #0
 800b740:	4607      	mov	r7, r0
 800b742:	db01      	blt.n	800b748 <_malloc_r+0x1c>
 800b744:	42a9      	cmp	r1, r5
 800b746:	d905      	bls.n	800b754 <_malloc_r+0x28>
 800b748:	230c      	movs	r3, #12
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	2600      	movs	r6, #0
 800b74e:	4630      	mov	r0, r6
 800b750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b754:	4e2e      	ldr	r6, [pc, #184]	; (800b810 <_malloc_r+0xe4>)
 800b756:	f000 faa3 	bl	800bca0 <__malloc_lock>
 800b75a:	6833      	ldr	r3, [r6, #0]
 800b75c:	461c      	mov	r4, r3
 800b75e:	bb34      	cbnz	r4, 800b7ae <_malloc_r+0x82>
 800b760:	4629      	mov	r1, r5
 800b762:	4638      	mov	r0, r7
 800b764:	f7ff ffc2 	bl	800b6ec <sbrk_aligned>
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	4604      	mov	r4, r0
 800b76c:	d14d      	bne.n	800b80a <_malloc_r+0xde>
 800b76e:	6834      	ldr	r4, [r6, #0]
 800b770:	4626      	mov	r6, r4
 800b772:	2e00      	cmp	r6, #0
 800b774:	d140      	bne.n	800b7f8 <_malloc_r+0xcc>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	4631      	mov	r1, r6
 800b77a:	4638      	mov	r0, r7
 800b77c:	eb04 0803 	add.w	r8, r4, r3
 800b780:	f000 f9a2 	bl	800bac8 <_sbrk_r>
 800b784:	4580      	cmp	r8, r0
 800b786:	d13a      	bne.n	800b7fe <_malloc_r+0xd2>
 800b788:	6821      	ldr	r1, [r4, #0]
 800b78a:	3503      	adds	r5, #3
 800b78c:	1a6d      	subs	r5, r5, r1
 800b78e:	f025 0503 	bic.w	r5, r5, #3
 800b792:	3508      	adds	r5, #8
 800b794:	2d0c      	cmp	r5, #12
 800b796:	bf38      	it	cc
 800b798:	250c      	movcc	r5, #12
 800b79a:	4629      	mov	r1, r5
 800b79c:	4638      	mov	r0, r7
 800b79e:	f7ff ffa5 	bl	800b6ec <sbrk_aligned>
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	d02b      	beq.n	800b7fe <_malloc_r+0xd2>
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	442b      	add	r3, r5
 800b7aa:	6023      	str	r3, [r4, #0]
 800b7ac:	e00e      	b.n	800b7cc <_malloc_r+0xa0>
 800b7ae:	6822      	ldr	r2, [r4, #0]
 800b7b0:	1b52      	subs	r2, r2, r5
 800b7b2:	d41e      	bmi.n	800b7f2 <_malloc_r+0xc6>
 800b7b4:	2a0b      	cmp	r2, #11
 800b7b6:	d916      	bls.n	800b7e6 <_malloc_r+0xba>
 800b7b8:	1961      	adds	r1, r4, r5
 800b7ba:	42a3      	cmp	r3, r4
 800b7bc:	6025      	str	r5, [r4, #0]
 800b7be:	bf18      	it	ne
 800b7c0:	6059      	strne	r1, [r3, #4]
 800b7c2:	6863      	ldr	r3, [r4, #4]
 800b7c4:	bf08      	it	eq
 800b7c6:	6031      	streq	r1, [r6, #0]
 800b7c8:	5162      	str	r2, [r4, r5]
 800b7ca:	604b      	str	r3, [r1, #4]
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f104 060b 	add.w	r6, r4, #11
 800b7d2:	f000 fa6b 	bl	800bcac <__malloc_unlock>
 800b7d6:	f026 0607 	bic.w	r6, r6, #7
 800b7da:	1d23      	adds	r3, r4, #4
 800b7dc:	1af2      	subs	r2, r6, r3
 800b7de:	d0b6      	beq.n	800b74e <_malloc_r+0x22>
 800b7e0:	1b9b      	subs	r3, r3, r6
 800b7e2:	50a3      	str	r3, [r4, r2]
 800b7e4:	e7b3      	b.n	800b74e <_malloc_r+0x22>
 800b7e6:	6862      	ldr	r2, [r4, #4]
 800b7e8:	42a3      	cmp	r3, r4
 800b7ea:	bf0c      	ite	eq
 800b7ec:	6032      	streq	r2, [r6, #0]
 800b7ee:	605a      	strne	r2, [r3, #4]
 800b7f0:	e7ec      	b.n	800b7cc <_malloc_r+0xa0>
 800b7f2:	4623      	mov	r3, r4
 800b7f4:	6864      	ldr	r4, [r4, #4]
 800b7f6:	e7b2      	b.n	800b75e <_malloc_r+0x32>
 800b7f8:	4634      	mov	r4, r6
 800b7fa:	6876      	ldr	r6, [r6, #4]
 800b7fc:	e7b9      	b.n	800b772 <_malloc_r+0x46>
 800b7fe:	230c      	movs	r3, #12
 800b800:	603b      	str	r3, [r7, #0]
 800b802:	4638      	mov	r0, r7
 800b804:	f000 fa52 	bl	800bcac <__malloc_unlock>
 800b808:	e7a1      	b.n	800b74e <_malloc_r+0x22>
 800b80a:	6025      	str	r5, [r4, #0]
 800b80c:	e7de      	b.n	800b7cc <_malloc_r+0xa0>
 800b80e:	bf00      	nop
 800b810:	20000488 	.word	0x20000488

0800b814 <__sfputc_r>:
 800b814:	6893      	ldr	r3, [r2, #8]
 800b816:	3b01      	subs	r3, #1
 800b818:	2b00      	cmp	r3, #0
 800b81a:	b410      	push	{r4}
 800b81c:	6093      	str	r3, [r2, #8]
 800b81e:	da08      	bge.n	800b832 <__sfputc_r+0x1e>
 800b820:	6994      	ldr	r4, [r2, #24]
 800b822:	42a3      	cmp	r3, r4
 800b824:	db01      	blt.n	800b82a <__sfputc_r+0x16>
 800b826:	290a      	cmp	r1, #10
 800b828:	d103      	bne.n	800b832 <__sfputc_r+0x1e>
 800b82a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b82e:	f7fe ba03 	b.w	8009c38 <__swbuf_r>
 800b832:	6813      	ldr	r3, [r2, #0]
 800b834:	1c58      	adds	r0, r3, #1
 800b836:	6010      	str	r0, [r2, #0]
 800b838:	7019      	strb	r1, [r3, #0]
 800b83a:	4608      	mov	r0, r1
 800b83c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <__sfputs_r>:
 800b842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b844:	4606      	mov	r6, r0
 800b846:	460f      	mov	r7, r1
 800b848:	4614      	mov	r4, r2
 800b84a:	18d5      	adds	r5, r2, r3
 800b84c:	42ac      	cmp	r4, r5
 800b84e:	d101      	bne.n	800b854 <__sfputs_r+0x12>
 800b850:	2000      	movs	r0, #0
 800b852:	e007      	b.n	800b864 <__sfputs_r+0x22>
 800b854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b858:	463a      	mov	r2, r7
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7ff ffda 	bl	800b814 <__sfputc_r>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d1f3      	bne.n	800b84c <__sfputs_r+0xa>
 800b864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b868 <_vfiprintf_r>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	460d      	mov	r5, r1
 800b86e:	b09d      	sub	sp, #116	; 0x74
 800b870:	4614      	mov	r4, r2
 800b872:	4698      	mov	r8, r3
 800b874:	4606      	mov	r6, r0
 800b876:	b118      	cbz	r0, 800b880 <_vfiprintf_r+0x18>
 800b878:	6983      	ldr	r3, [r0, #24]
 800b87a:	b90b      	cbnz	r3, 800b880 <_vfiprintf_r+0x18>
 800b87c:	f7ff fa30 	bl	800ace0 <__sinit>
 800b880:	4b89      	ldr	r3, [pc, #548]	; (800baa8 <_vfiprintf_r+0x240>)
 800b882:	429d      	cmp	r5, r3
 800b884:	d11b      	bne.n	800b8be <_vfiprintf_r+0x56>
 800b886:	6875      	ldr	r5, [r6, #4]
 800b888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b88a:	07d9      	lsls	r1, r3, #31
 800b88c:	d405      	bmi.n	800b89a <_vfiprintf_r+0x32>
 800b88e:	89ab      	ldrh	r3, [r5, #12]
 800b890:	059a      	lsls	r2, r3, #22
 800b892:	d402      	bmi.n	800b89a <_vfiprintf_r+0x32>
 800b894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b896:	f7ff fac6 	bl	800ae26 <__retarget_lock_acquire_recursive>
 800b89a:	89ab      	ldrh	r3, [r5, #12]
 800b89c:	071b      	lsls	r3, r3, #28
 800b89e:	d501      	bpl.n	800b8a4 <_vfiprintf_r+0x3c>
 800b8a0:	692b      	ldr	r3, [r5, #16]
 800b8a2:	b9eb      	cbnz	r3, 800b8e0 <_vfiprintf_r+0x78>
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7fe fa18 	bl	8009cdc <__swsetup_r>
 800b8ac:	b1c0      	cbz	r0, 800b8e0 <_vfiprintf_r+0x78>
 800b8ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b0:	07dc      	lsls	r4, r3, #31
 800b8b2:	d50e      	bpl.n	800b8d2 <_vfiprintf_r+0x6a>
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	b01d      	add	sp, #116	; 0x74
 800b8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8be:	4b7b      	ldr	r3, [pc, #492]	; (800baac <_vfiprintf_r+0x244>)
 800b8c0:	429d      	cmp	r5, r3
 800b8c2:	d101      	bne.n	800b8c8 <_vfiprintf_r+0x60>
 800b8c4:	68b5      	ldr	r5, [r6, #8]
 800b8c6:	e7df      	b.n	800b888 <_vfiprintf_r+0x20>
 800b8c8:	4b79      	ldr	r3, [pc, #484]	; (800bab0 <_vfiprintf_r+0x248>)
 800b8ca:	429d      	cmp	r5, r3
 800b8cc:	bf08      	it	eq
 800b8ce:	68f5      	ldreq	r5, [r6, #12]
 800b8d0:	e7da      	b.n	800b888 <_vfiprintf_r+0x20>
 800b8d2:	89ab      	ldrh	r3, [r5, #12]
 800b8d4:	0598      	lsls	r0, r3, #22
 800b8d6:	d4ed      	bmi.n	800b8b4 <_vfiprintf_r+0x4c>
 800b8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8da:	f7ff faa5 	bl	800ae28 <__retarget_lock_release_recursive>
 800b8de:	e7e9      	b.n	800b8b4 <_vfiprintf_r+0x4c>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e4:	2320      	movs	r3, #32
 800b8e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ee:	2330      	movs	r3, #48	; 0x30
 800b8f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bab4 <_vfiprintf_r+0x24c>
 800b8f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8f8:	f04f 0901 	mov.w	r9, #1
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	469a      	mov	sl, r3
 800b900:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b904:	b10a      	cbz	r2, 800b90a <_vfiprintf_r+0xa2>
 800b906:	2a25      	cmp	r2, #37	; 0x25
 800b908:	d1f9      	bne.n	800b8fe <_vfiprintf_r+0x96>
 800b90a:	ebba 0b04 	subs.w	fp, sl, r4
 800b90e:	d00b      	beq.n	800b928 <_vfiprintf_r+0xc0>
 800b910:	465b      	mov	r3, fp
 800b912:	4622      	mov	r2, r4
 800b914:	4629      	mov	r1, r5
 800b916:	4630      	mov	r0, r6
 800b918:	f7ff ff93 	bl	800b842 <__sfputs_r>
 800b91c:	3001      	adds	r0, #1
 800b91e:	f000 80aa 	beq.w	800ba76 <_vfiprintf_r+0x20e>
 800b922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b924:	445a      	add	r2, fp
 800b926:	9209      	str	r2, [sp, #36]	; 0x24
 800b928:	f89a 3000 	ldrb.w	r3, [sl]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f000 80a2 	beq.w	800ba76 <_vfiprintf_r+0x20e>
 800b932:	2300      	movs	r3, #0
 800b934:	f04f 32ff 	mov.w	r2, #4294967295
 800b938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b93c:	f10a 0a01 	add.w	sl, sl, #1
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	9307      	str	r3, [sp, #28]
 800b944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b948:	931a      	str	r3, [sp, #104]	; 0x68
 800b94a:	4654      	mov	r4, sl
 800b94c:	2205      	movs	r2, #5
 800b94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b952:	4858      	ldr	r0, [pc, #352]	; (800bab4 <_vfiprintf_r+0x24c>)
 800b954:	f7f4 fc44 	bl	80001e0 <memchr>
 800b958:	9a04      	ldr	r2, [sp, #16]
 800b95a:	b9d8      	cbnz	r0, 800b994 <_vfiprintf_r+0x12c>
 800b95c:	06d1      	lsls	r1, r2, #27
 800b95e:	bf44      	itt	mi
 800b960:	2320      	movmi	r3, #32
 800b962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b966:	0713      	lsls	r3, r2, #28
 800b968:	bf44      	itt	mi
 800b96a:	232b      	movmi	r3, #43	; 0x2b
 800b96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b970:	f89a 3000 	ldrb.w	r3, [sl]
 800b974:	2b2a      	cmp	r3, #42	; 0x2a
 800b976:	d015      	beq.n	800b9a4 <_vfiprintf_r+0x13c>
 800b978:	9a07      	ldr	r2, [sp, #28]
 800b97a:	4654      	mov	r4, sl
 800b97c:	2000      	movs	r0, #0
 800b97e:	f04f 0c0a 	mov.w	ip, #10
 800b982:	4621      	mov	r1, r4
 800b984:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b988:	3b30      	subs	r3, #48	; 0x30
 800b98a:	2b09      	cmp	r3, #9
 800b98c:	d94e      	bls.n	800ba2c <_vfiprintf_r+0x1c4>
 800b98e:	b1b0      	cbz	r0, 800b9be <_vfiprintf_r+0x156>
 800b990:	9207      	str	r2, [sp, #28]
 800b992:	e014      	b.n	800b9be <_vfiprintf_r+0x156>
 800b994:	eba0 0308 	sub.w	r3, r0, r8
 800b998:	fa09 f303 	lsl.w	r3, r9, r3
 800b99c:	4313      	orrs	r3, r2
 800b99e:	9304      	str	r3, [sp, #16]
 800b9a0:	46a2      	mov	sl, r4
 800b9a2:	e7d2      	b.n	800b94a <_vfiprintf_r+0xe2>
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	1d19      	adds	r1, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	9103      	str	r1, [sp, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	bfbb      	ittet	lt
 800b9b0:	425b      	neglt	r3, r3
 800b9b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b9b6:	9307      	strge	r3, [sp, #28]
 800b9b8:	9307      	strlt	r3, [sp, #28]
 800b9ba:	bfb8      	it	lt
 800b9bc:	9204      	strlt	r2, [sp, #16]
 800b9be:	7823      	ldrb	r3, [r4, #0]
 800b9c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b9c2:	d10c      	bne.n	800b9de <_vfiprintf_r+0x176>
 800b9c4:	7863      	ldrb	r3, [r4, #1]
 800b9c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c8:	d135      	bne.n	800ba36 <_vfiprintf_r+0x1ce>
 800b9ca:	9b03      	ldr	r3, [sp, #12]
 800b9cc:	1d1a      	adds	r2, r3, #4
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	9203      	str	r2, [sp, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	bfb8      	it	lt
 800b9d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9da:	3402      	adds	r4, #2
 800b9dc:	9305      	str	r3, [sp, #20]
 800b9de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bac4 <_vfiprintf_r+0x25c>
 800b9e2:	7821      	ldrb	r1, [r4, #0]
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	4650      	mov	r0, sl
 800b9e8:	f7f4 fbfa 	bl	80001e0 <memchr>
 800b9ec:	b140      	cbz	r0, 800ba00 <_vfiprintf_r+0x198>
 800b9ee:	2340      	movs	r3, #64	; 0x40
 800b9f0:	eba0 000a 	sub.w	r0, r0, sl
 800b9f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b9f8:	9b04      	ldr	r3, [sp, #16]
 800b9fa:	4303      	orrs	r3, r0
 800b9fc:	3401      	adds	r4, #1
 800b9fe:	9304      	str	r3, [sp, #16]
 800ba00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba04:	482c      	ldr	r0, [pc, #176]	; (800bab8 <_vfiprintf_r+0x250>)
 800ba06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba0a:	2206      	movs	r2, #6
 800ba0c:	f7f4 fbe8 	bl	80001e0 <memchr>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d03f      	beq.n	800ba94 <_vfiprintf_r+0x22c>
 800ba14:	4b29      	ldr	r3, [pc, #164]	; (800babc <_vfiprintf_r+0x254>)
 800ba16:	bb1b      	cbnz	r3, 800ba60 <_vfiprintf_r+0x1f8>
 800ba18:	9b03      	ldr	r3, [sp, #12]
 800ba1a:	3307      	adds	r3, #7
 800ba1c:	f023 0307 	bic.w	r3, r3, #7
 800ba20:	3308      	adds	r3, #8
 800ba22:	9303      	str	r3, [sp, #12]
 800ba24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba26:	443b      	add	r3, r7
 800ba28:	9309      	str	r3, [sp, #36]	; 0x24
 800ba2a:	e767      	b.n	800b8fc <_vfiprintf_r+0x94>
 800ba2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba30:	460c      	mov	r4, r1
 800ba32:	2001      	movs	r0, #1
 800ba34:	e7a5      	b.n	800b982 <_vfiprintf_r+0x11a>
 800ba36:	2300      	movs	r3, #0
 800ba38:	3401      	adds	r4, #1
 800ba3a:	9305      	str	r3, [sp, #20]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	f04f 0c0a 	mov.w	ip, #10
 800ba42:	4620      	mov	r0, r4
 800ba44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba48:	3a30      	subs	r2, #48	; 0x30
 800ba4a:	2a09      	cmp	r2, #9
 800ba4c:	d903      	bls.n	800ba56 <_vfiprintf_r+0x1ee>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0c5      	beq.n	800b9de <_vfiprintf_r+0x176>
 800ba52:	9105      	str	r1, [sp, #20]
 800ba54:	e7c3      	b.n	800b9de <_vfiprintf_r+0x176>
 800ba56:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e7f0      	b.n	800ba42 <_vfiprintf_r+0x1da>
 800ba60:	ab03      	add	r3, sp, #12
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	462a      	mov	r2, r5
 800ba66:	4b16      	ldr	r3, [pc, #88]	; (800bac0 <_vfiprintf_r+0x258>)
 800ba68:	a904      	add	r1, sp, #16
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7fd fc8c 	bl	8009388 <_printf_float>
 800ba70:	4607      	mov	r7, r0
 800ba72:	1c78      	adds	r0, r7, #1
 800ba74:	d1d6      	bne.n	800ba24 <_vfiprintf_r+0x1bc>
 800ba76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba78:	07d9      	lsls	r1, r3, #31
 800ba7a:	d405      	bmi.n	800ba88 <_vfiprintf_r+0x220>
 800ba7c:	89ab      	ldrh	r3, [r5, #12]
 800ba7e:	059a      	lsls	r2, r3, #22
 800ba80:	d402      	bmi.n	800ba88 <_vfiprintf_r+0x220>
 800ba82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba84:	f7ff f9d0 	bl	800ae28 <__retarget_lock_release_recursive>
 800ba88:	89ab      	ldrh	r3, [r5, #12]
 800ba8a:	065b      	lsls	r3, r3, #25
 800ba8c:	f53f af12 	bmi.w	800b8b4 <_vfiprintf_r+0x4c>
 800ba90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba92:	e711      	b.n	800b8b8 <_vfiprintf_r+0x50>
 800ba94:	ab03      	add	r3, sp, #12
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	462a      	mov	r2, r5
 800ba9a:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <_vfiprintf_r+0x258>)
 800ba9c:	a904      	add	r1, sp, #16
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7fd ff16 	bl	80098d0 <_printf_i>
 800baa4:	e7e4      	b.n	800ba70 <_vfiprintf_r+0x208>
 800baa6:	bf00      	nop
 800baa8:	0800ca24 	.word	0x0800ca24
 800baac:	0800ca44 	.word	0x0800ca44
 800bab0:	0800ca04 	.word	0x0800ca04
 800bab4:	0800cbbc 	.word	0x0800cbbc
 800bab8:	0800cbc6 	.word	0x0800cbc6
 800babc:	08009389 	.word	0x08009389
 800bac0:	0800b843 	.word	0x0800b843
 800bac4:	0800cbc2 	.word	0x0800cbc2

0800bac8 <_sbrk_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d06      	ldr	r5, [pc, #24]	; (800bae4 <_sbrk_r+0x1c>)
 800bacc:	2300      	movs	r3, #0
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	602b      	str	r3, [r5, #0]
 800bad4:	f7f8 fc48 	bl	8004368 <_sbrk>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d102      	bne.n	800bae2 <_sbrk_r+0x1a>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	b103      	cbz	r3, 800bae2 <_sbrk_r+0x1a>
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	20000490 	.word	0x20000490

0800bae8 <__sread>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	460c      	mov	r4, r1
 800baec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf0:	f000 f8e2 	bl	800bcb8 <_read_r>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	bfab      	itete	ge
 800baf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bafa:	89a3      	ldrhlt	r3, [r4, #12]
 800bafc:	181b      	addge	r3, r3, r0
 800bafe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb02:	bfac      	ite	ge
 800bb04:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb06:	81a3      	strhlt	r3, [r4, #12]
 800bb08:	bd10      	pop	{r4, pc}

0800bb0a <__swrite>:
 800bb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0e:	461f      	mov	r7, r3
 800bb10:	898b      	ldrh	r3, [r1, #12]
 800bb12:	05db      	lsls	r3, r3, #23
 800bb14:	4605      	mov	r5, r0
 800bb16:	460c      	mov	r4, r1
 800bb18:	4616      	mov	r6, r2
 800bb1a:	d505      	bpl.n	800bb28 <__swrite+0x1e>
 800bb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb20:	2302      	movs	r3, #2
 800bb22:	2200      	movs	r2, #0
 800bb24:	f000 f898 	bl	800bc58 <_lseek_r>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	4632      	mov	r2, r6
 800bb36:	463b      	mov	r3, r7
 800bb38:	4628      	mov	r0, r5
 800bb3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3e:	f000 b817 	b.w	800bb70 <_write_r>

0800bb42 <__sseek>:
 800bb42:	b510      	push	{r4, lr}
 800bb44:	460c      	mov	r4, r1
 800bb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4a:	f000 f885 	bl	800bc58 <_lseek_r>
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	bf15      	itete	ne
 800bb54:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb5e:	81a3      	strheq	r3, [r4, #12]
 800bb60:	bf18      	it	ne
 800bb62:	81a3      	strhne	r3, [r4, #12]
 800bb64:	bd10      	pop	{r4, pc}

0800bb66 <__sclose>:
 800bb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb6a:	f000 b831 	b.w	800bbd0 <_close_r>
	...

0800bb70 <_write_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d07      	ldr	r5, [pc, #28]	; (800bb90 <_write_r+0x20>)
 800bb74:	4604      	mov	r4, r0
 800bb76:	4608      	mov	r0, r1
 800bb78:	4611      	mov	r1, r2
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	602a      	str	r2, [r5, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f7f7 f9d6 	bl	8002f30 <_write>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_write_r+0x1e>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_write_r+0x1e>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	20000490 	.word	0x20000490

0800bb94 <__assert_func>:
 800bb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb96:	4614      	mov	r4, r2
 800bb98:	461a      	mov	r2, r3
 800bb9a:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <__assert_func+0x2c>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4605      	mov	r5, r0
 800bba0:	68d8      	ldr	r0, [r3, #12]
 800bba2:	b14c      	cbz	r4, 800bbb8 <__assert_func+0x24>
 800bba4:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <__assert_func+0x30>)
 800bba6:	9100      	str	r1, [sp, #0]
 800bba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbac:	4906      	ldr	r1, [pc, #24]	; (800bbc8 <__assert_func+0x34>)
 800bbae:	462b      	mov	r3, r5
 800bbb0:	f000 f81e 	bl	800bbf0 <fiprintf>
 800bbb4:	f000 f89f 	bl	800bcf6 <abort>
 800bbb8:	4b04      	ldr	r3, [pc, #16]	; (800bbcc <__assert_func+0x38>)
 800bbba:	461c      	mov	r4, r3
 800bbbc:	e7f3      	b.n	800bba6 <__assert_func+0x12>
 800bbbe:	bf00      	nop
 800bbc0:	20000010 	.word	0x20000010
 800bbc4:	0800cbcd 	.word	0x0800cbcd
 800bbc8:	0800cbda 	.word	0x0800cbda
 800bbcc:	0800cc08 	.word	0x0800cc08

0800bbd0 <_close_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d06      	ldr	r5, [pc, #24]	; (800bbec <_close_r+0x1c>)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	f7f8 fb8f 	bl	80042fe <_close>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_close_r+0x1a>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_close_r+0x1a>
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	20000490 	.word	0x20000490

0800bbf0 <fiprintf>:
 800bbf0:	b40e      	push	{r1, r2, r3}
 800bbf2:	b503      	push	{r0, r1, lr}
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	ab03      	add	r3, sp, #12
 800bbf8:	4805      	ldr	r0, [pc, #20]	; (800bc10 <fiprintf+0x20>)
 800bbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbfe:	6800      	ldr	r0, [r0, #0]
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	f7ff fe31 	bl	800b868 <_vfiprintf_r>
 800bc06:	b002      	add	sp, #8
 800bc08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc0c:	b003      	add	sp, #12
 800bc0e:	4770      	bx	lr
 800bc10:	20000010 	.word	0x20000010

0800bc14 <_fstat_r>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4d07      	ldr	r5, [pc, #28]	; (800bc34 <_fstat_r+0x20>)
 800bc18:	2300      	movs	r3, #0
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	4611      	mov	r1, r2
 800bc20:	602b      	str	r3, [r5, #0]
 800bc22:	f7f8 fb78 	bl	8004316 <_fstat>
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	d102      	bne.n	800bc30 <_fstat_r+0x1c>
 800bc2a:	682b      	ldr	r3, [r5, #0]
 800bc2c:	b103      	cbz	r3, 800bc30 <_fstat_r+0x1c>
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	bd38      	pop	{r3, r4, r5, pc}
 800bc32:	bf00      	nop
 800bc34:	20000490 	.word	0x20000490

0800bc38 <_isatty_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4d06      	ldr	r5, [pc, #24]	; (800bc54 <_isatty_r+0x1c>)
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	f7f8 fb77 	bl	8004336 <_isatty>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_isatty_r+0x1a>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_isatty_r+0x1a>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	20000490 	.word	0x20000490

0800bc58 <_lseek_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d07      	ldr	r5, [pc, #28]	; (800bc78 <_lseek_r+0x20>)
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	4608      	mov	r0, r1
 800bc60:	4611      	mov	r1, r2
 800bc62:	2200      	movs	r2, #0
 800bc64:	602a      	str	r2, [r5, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	f7f8 fb70 	bl	800434c <_lseek>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	d102      	bne.n	800bc76 <_lseek_r+0x1e>
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	b103      	cbz	r3, 800bc76 <_lseek_r+0x1e>
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	20000490 	.word	0x20000490

0800bc7c <__ascii_mbtowc>:
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	b901      	cbnz	r1, 800bc82 <__ascii_mbtowc+0x6>
 800bc80:	a901      	add	r1, sp, #4
 800bc82:	b142      	cbz	r2, 800bc96 <__ascii_mbtowc+0x1a>
 800bc84:	b14b      	cbz	r3, 800bc9a <__ascii_mbtowc+0x1e>
 800bc86:	7813      	ldrb	r3, [r2, #0]
 800bc88:	600b      	str	r3, [r1, #0]
 800bc8a:	7812      	ldrb	r2, [r2, #0]
 800bc8c:	1e10      	subs	r0, r2, #0
 800bc8e:	bf18      	it	ne
 800bc90:	2001      	movne	r0, #1
 800bc92:	b002      	add	sp, #8
 800bc94:	4770      	bx	lr
 800bc96:	4610      	mov	r0, r2
 800bc98:	e7fb      	b.n	800bc92 <__ascii_mbtowc+0x16>
 800bc9a:	f06f 0001 	mvn.w	r0, #1
 800bc9e:	e7f8      	b.n	800bc92 <__ascii_mbtowc+0x16>

0800bca0 <__malloc_lock>:
 800bca0:	4801      	ldr	r0, [pc, #4]	; (800bca8 <__malloc_lock+0x8>)
 800bca2:	f7ff b8c0 	b.w	800ae26 <__retarget_lock_acquire_recursive>
 800bca6:	bf00      	nop
 800bca8:	20000484 	.word	0x20000484

0800bcac <__malloc_unlock>:
 800bcac:	4801      	ldr	r0, [pc, #4]	; (800bcb4 <__malloc_unlock+0x8>)
 800bcae:	f7ff b8bb 	b.w	800ae28 <__retarget_lock_release_recursive>
 800bcb2:	bf00      	nop
 800bcb4:	20000484 	.word	0x20000484

0800bcb8 <_read_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4d07      	ldr	r5, [pc, #28]	; (800bcd8 <_read_r+0x20>)
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	602a      	str	r2, [r5, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f7f8 fafc 	bl	80042c4 <_read>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_read_r+0x1e>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_read_r+0x1e>
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	20000490 	.word	0x20000490

0800bcdc <__ascii_wctomb>:
 800bcdc:	b149      	cbz	r1, 800bcf2 <__ascii_wctomb+0x16>
 800bcde:	2aff      	cmp	r2, #255	; 0xff
 800bce0:	bf85      	ittet	hi
 800bce2:	238a      	movhi	r3, #138	; 0x8a
 800bce4:	6003      	strhi	r3, [r0, #0]
 800bce6:	700a      	strbls	r2, [r1, #0]
 800bce8:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcec:	bf98      	it	ls
 800bcee:	2001      	movls	r0, #1
 800bcf0:	4770      	bx	lr
 800bcf2:	4608      	mov	r0, r1
 800bcf4:	4770      	bx	lr

0800bcf6 <abort>:
 800bcf6:	b508      	push	{r3, lr}
 800bcf8:	2006      	movs	r0, #6
 800bcfa:	f000 f82b 	bl	800bd54 <raise>
 800bcfe:	2001      	movs	r0, #1
 800bd00:	f7f8 fad6 	bl	80042b0 <_exit>

0800bd04 <_raise_r>:
 800bd04:	291f      	cmp	r1, #31
 800bd06:	b538      	push	{r3, r4, r5, lr}
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	d904      	bls.n	800bd18 <_raise_r+0x14>
 800bd0e:	2316      	movs	r3, #22
 800bd10:	6003      	str	r3, [r0, #0]
 800bd12:	f04f 30ff 	mov.w	r0, #4294967295
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd1a:	b112      	cbz	r2, 800bd22 <_raise_r+0x1e>
 800bd1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd20:	b94b      	cbnz	r3, 800bd36 <_raise_r+0x32>
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 f830 	bl	800bd88 <_getpid_r>
 800bd28:	462a      	mov	r2, r5
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd32:	f000 b817 	b.w	800bd64 <_kill_r>
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d00a      	beq.n	800bd50 <_raise_r+0x4c>
 800bd3a:	1c59      	adds	r1, r3, #1
 800bd3c:	d103      	bne.n	800bd46 <_raise_r+0x42>
 800bd3e:	2316      	movs	r3, #22
 800bd40:	6003      	str	r3, [r0, #0]
 800bd42:	2001      	movs	r0, #1
 800bd44:	e7e7      	b.n	800bd16 <_raise_r+0x12>
 800bd46:	2400      	movs	r4, #0
 800bd48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	4798      	blx	r3
 800bd50:	2000      	movs	r0, #0
 800bd52:	e7e0      	b.n	800bd16 <_raise_r+0x12>

0800bd54 <raise>:
 800bd54:	4b02      	ldr	r3, [pc, #8]	; (800bd60 <raise+0xc>)
 800bd56:	4601      	mov	r1, r0
 800bd58:	6818      	ldr	r0, [r3, #0]
 800bd5a:	f7ff bfd3 	b.w	800bd04 <_raise_r>
 800bd5e:	bf00      	nop
 800bd60:	20000010 	.word	0x20000010

0800bd64 <_kill_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d07      	ldr	r5, [pc, #28]	; (800bd84 <_kill_r+0x20>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	4611      	mov	r1, r2
 800bd70:	602b      	str	r3, [r5, #0]
 800bd72:	f7f8 fa8d 	bl	8004290 <_kill>
 800bd76:	1c43      	adds	r3, r0, #1
 800bd78:	d102      	bne.n	800bd80 <_kill_r+0x1c>
 800bd7a:	682b      	ldr	r3, [r5, #0]
 800bd7c:	b103      	cbz	r3, 800bd80 <_kill_r+0x1c>
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	bd38      	pop	{r3, r4, r5, pc}
 800bd82:	bf00      	nop
 800bd84:	20000490 	.word	0x20000490

0800bd88 <_getpid_r>:
 800bd88:	f7f8 ba7a 	b.w	8004280 <_getpid>

0800bd8c <powf>:
 800bd8c:	b508      	push	{r3, lr}
 800bd8e:	ed2d 8b04 	vpush	{d8-d9}
 800bd92:	eeb0 8a60 	vmov.f32	s16, s1
 800bd96:	eeb0 9a40 	vmov.f32	s18, s0
 800bd9a:	f000 f84f 	bl	800be3c <__ieee754_powf>
 800bd9e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	eef0 8a40 	vmov.f32	s17, s0
 800bdaa:	d63e      	bvs.n	800be2a <powf+0x9e>
 800bdac:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb4:	d112      	bne.n	800bddc <powf+0x50>
 800bdb6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdbe:	d039      	beq.n	800be34 <powf+0xa8>
 800bdc0:	eeb0 0a48 	vmov.f32	s0, s16
 800bdc4:	f000 fb35 	bl	800c432 <finitef>
 800bdc8:	b378      	cbz	r0, 800be2a <powf+0x9e>
 800bdca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd2:	d52a      	bpl.n	800be2a <powf+0x9e>
 800bdd4:	f7fd fa06 	bl	80091e4 <__errno>
 800bdd8:	2322      	movs	r3, #34	; 0x22
 800bdda:	e014      	b.n	800be06 <powf+0x7a>
 800bddc:	f000 fb29 	bl	800c432 <finitef>
 800bde0:	b998      	cbnz	r0, 800be0a <powf+0x7e>
 800bde2:	eeb0 0a49 	vmov.f32	s0, s18
 800bde6:	f000 fb24 	bl	800c432 <finitef>
 800bdea:	b170      	cbz	r0, 800be0a <powf+0x7e>
 800bdec:	eeb0 0a48 	vmov.f32	s0, s16
 800bdf0:	f000 fb1f 	bl	800c432 <finitef>
 800bdf4:	b148      	cbz	r0, 800be0a <powf+0x7e>
 800bdf6:	eef4 8a68 	vcmp.f32	s17, s17
 800bdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdfe:	d7e9      	bvc.n	800bdd4 <powf+0x48>
 800be00:	f7fd f9f0 	bl	80091e4 <__errno>
 800be04:	2321      	movs	r3, #33	; 0x21
 800be06:	6003      	str	r3, [r0, #0]
 800be08:	e00f      	b.n	800be2a <powf+0x9e>
 800be0a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800be0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be12:	d10a      	bne.n	800be2a <powf+0x9e>
 800be14:	eeb0 0a49 	vmov.f32	s0, s18
 800be18:	f000 fb0b 	bl	800c432 <finitef>
 800be1c:	b128      	cbz	r0, 800be2a <powf+0x9e>
 800be1e:	eeb0 0a48 	vmov.f32	s0, s16
 800be22:	f000 fb06 	bl	800c432 <finitef>
 800be26:	2800      	cmp	r0, #0
 800be28:	d1d4      	bne.n	800bdd4 <powf+0x48>
 800be2a:	eeb0 0a68 	vmov.f32	s0, s17
 800be2e:	ecbd 8b04 	vpop	{d8-d9}
 800be32:	bd08      	pop	{r3, pc}
 800be34:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800be38:	e7f7      	b.n	800be2a <powf+0x9e>
	...

0800be3c <__ieee754_powf>:
 800be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be40:	ee10 4a90 	vmov	r4, s1
 800be44:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800be48:	ed2d 8b02 	vpush	{d8}
 800be4c:	ee10 6a10 	vmov	r6, s0
 800be50:	eeb0 8a40 	vmov.f32	s16, s0
 800be54:	eef0 8a60 	vmov.f32	s17, s1
 800be58:	d10c      	bne.n	800be74 <__ieee754_powf+0x38>
 800be5a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800be5e:	0076      	lsls	r6, r6, #1
 800be60:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800be64:	f240 8296 	bls.w	800c394 <__ieee754_powf+0x558>
 800be68:	ee38 0a28 	vadd.f32	s0, s16, s17
 800be6c:	ecbd 8b02 	vpop	{d8}
 800be70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be74:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800be78:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800be7c:	dcf4      	bgt.n	800be68 <__ieee754_powf+0x2c>
 800be7e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800be82:	dd08      	ble.n	800be96 <__ieee754_powf+0x5a>
 800be84:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800be88:	d1ee      	bne.n	800be68 <__ieee754_powf+0x2c>
 800be8a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800be8e:	0064      	lsls	r4, r4, #1
 800be90:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800be94:	e7e6      	b.n	800be64 <__ieee754_powf+0x28>
 800be96:	2e00      	cmp	r6, #0
 800be98:	da20      	bge.n	800bedc <__ieee754_powf+0xa0>
 800be9a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800be9e:	da2d      	bge.n	800befc <__ieee754_powf+0xc0>
 800bea0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bea4:	f2c0 827f 	blt.w	800c3a6 <__ieee754_powf+0x56a>
 800bea8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800beac:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800beb0:	fa48 f703 	asr.w	r7, r8, r3
 800beb4:	fa07 f303 	lsl.w	r3, r7, r3
 800beb8:	4543      	cmp	r3, r8
 800beba:	f040 8274 	bne.w	800c3a6 <__ieee754_powf+0x56a>
 800bebe:	f007 0701 	and.w	r7, r7, #1
 800bec2:	f1c7 0702 	rsb	r7, r7, #2
 800bec6:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800beca:	d11f      	bne.n	800bf0c <__ieee754_powf+0xd0>
 800becc:	2c00      	cmp	r4, #0
 800bece:	f280 8267 	bge.w	800c3a0 <__ieee754_powf+0x564>
 800bed2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bed6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800beda:	e7c7      	b.n	800be6c <__ieee754_powf+0x30>
 800bedc:	2700      	movs	r7, #0
 800bede:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bee2:	d1f0      	bne.n	800bec6 <__ieee754_powf+0x8a>
 800bee4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800bee8:	f000 8254 	beq.w	800c394 <__ieee754_powf+0x558>
 800beec:	dd08      	ble.n	800bf00 <__ieee754_powf+0xc4>
 800beee:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800c1f8 <__ieee754_powf+0x3bc>
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	bfa8      	it	ge
 800bef6:	eeb0 0a68 	vmovge.f32	s0, s17
 800befa:	e7b7      	b.n	800be6c <__ieee754_powf+0x30>
 800befc:	2702      	movs	r7, #2
 800befe:	e7ee      	b.n	800bede <__ieee754_powf+0xa2>
 800bf00:	2c00      	cmp	r4, #0
 800bf02:	f280 824a 	bge.w	800c39a <__ieee754_powf+0x55e>
 800bf06:	eeb1 0a68 	vneg.f32	s0, s17
 800bf0a:	e7af      	b.n	800be6c <__ieee754_powf+0x30>
 800bf0c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800bf10:	d102      	bne.n	800bf18 <__ieee754_powf+0xdc>
 800bf12:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bf16:	e7a9      	b.n	800be6c <__ieee754_powf+0x30>
 800bf18:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bf1c:	eeb0 0a48 	vmov.f32	s0, s16
 800bf20:	d107      	bne.n	800bf32 <__ieee754_powf+0xf6>
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	db05      	blt.n	800bf32 <__ieee754_powf+0xf6>
 800bf26:	ecbd 8b02 	vpop	{d8}
 800bf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2e:	f000 ba53 	b.w	800c3d8 <__ieee754_sqrtf>
 800bf32:	f000 fa77 	bl	800c424 <fabsf>
 800bf36:	b125      	cbz	r5, 800bf42 <__ieee754_powf+0x106>
 800bf38:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800bf3c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800bf40:	d116      	bne.n	800bf70 <__ieee754_powf+0x134>
 800bf42:	2c00      	cmp	r4, #0
 800bf44:	bfbc      	itt	lt
 800bf46:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800bf4a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	da8c      	bge.n	800be6c <__ieee754_powf+0x30>
 800bf52:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800bf56:	ea55 0307 	orrs.w	r3, r5, r7
 800bf5a:	d104      	bne.n	800bf66 <__ieee754_powf+0x12a>
 800bf5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bf60:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bf64:	e782      	b.n	800be6c <__ieee754_powf+0x30>
 800bf66:	2f01      	cmp	r7, #1
 800bf68:	d180      	bne.n	800be6c <__ieee754_powf+0x30>
 800bf6a:	eeb1 0a40 	vneg.f32	s0, s0
 800bf6e:	e77d      	b.n	800be6c <__ieee754_powf+0x30>
 800bf70:	0ff0      	lsrs	r0, r6, #31
 800bf72:	3801      	subs	r0, #1
 800bf74:	ea57 0300 	orrs.w	r3, r7, r0
 800bf78:	d104      	bne.n	800bf84 <__ieee754_powf+0x148>
 800bf7a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bf7e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bf82:	e773      	b.n	800be6c <__ieee754_powf+0x30>
 800bf84:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800bf88:	dd74      	ble.n	800c074 <__ieee754_powf+0x238>
 800bf8a:	4b9c      	ldr	r3, [pc, #624]	; (800c1fc <__ieee754_powf+0x3c0>)
 800bf8c:	429d      	cmp	r5, r3
 800bf8e:	dc08      	bgt.n	800bfa2 <__ieee754_powf+0x166>
 800bf90:	2c00      	cmp	r4, #0
 800bf92:	da0b      	bge.n	800bfac <__ieee754_powf+0x170>
 800bf94:	2000      	movs	r0, #0
 800bf96:	ecbd 8b02 	vpop	{d8}
 800bf9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9e:	f000 ba3b 	b.w	800c418 <__math_oflowf>
 800bfa2:	4b97      	ldr	r3, [pc, #604]	; (800c200 <__ieee754_powf+0x3c4>)
 800bfa4:	429d      	cmp	r5, r3
 800bfa6:	dd08      	ble.n	800bfba <__ieee754_powf+0x17e>
 800bfa8:	2c00      	cmp	r4, #0
 800bfaa:	dcf3      	bgt.n	800bf94 <__ieee754_powf+0x158>
 800bfac:	2000      	movs	r0, #0
 800bfae:	ecbd 8b02 	vpop	{d8}
 800bfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb6:	f000 ba29 	b.w	800c40c <__math_uflowf>
 800bfba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bfbe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bfc2:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c204 <__ieee754_powf+0x3c8>
 800bfc6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800bfca:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bfce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bfd2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bfd6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfde:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c208 <__ieee754_powf+0x3cc>
 800bfe2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800bfe6:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c20c <__ieee754_powf+0x3d0>
 800bfea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bfee:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c210 <__ieee754_powf+0x3d4>
 800bff2:	eef0 6a67 	vmov.f32	s13, s15
 800bff6:	eee0 6a07 	vfma.f32	s13, s0, s14
 800bffa:	ee16 3a90 	vmov	r3, s13
 800bffe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c002:	f023 030f 	bic.w	r3, r3, #15
 800c006:	ee00 3a90 	vmov	s1, r3
 800c00a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800c00e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c012:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800c016:	f024 040f 	bic.w	r4, r4, #15
 800c01a:	ee07 4a10 	vmov	s14, r4
 800c01e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c022:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c026:	ee07 3a90 	vmov	s15, r3
 800c02a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c02e:	3f01      	subs	r7, #1
 800c030:	ea57 0200 	orrs.w	r2, r7, r0
 800c034:	ee07 4a10 	vmov	s14, r4
 800c038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c03c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c040:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c044:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c048:	ee17 4a10 	vmov	r4, s14
 800c04c:	bf08      	it	eq
 800c04e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c052:	2c00      	cmp	r4, #0
 800c054:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c058:	f340 817e 	ble.w	800c358 <__ieee754_powf+0x51c>
 800c05c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c060:	f340 80f8 	ble.w	800c254 <__ieee754_powf+0x418>
 800c064:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06c:	bf4c      	ite	mi
 800c06e:	2001      	movmi	r0, #1
 800c070:	2000      	movpl	r0, #0
 800c072:	e790      	b.n	800bf96 <__ieee754_powf+0x15a>
 800c074:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800c078:	bf01      	itttt	eq
 800c07a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c214 <__ieee754_powf+0x3d8>
 800c07e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c082:	f06f 0217 	mvneq.w	r2, #23
 800c086:	ee17 5a90 	vmoveq	r5, s15
 800c08a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c08e:	bf18      	it	ne
 800c090:	2200      	movne	r2, #0
 800c092:	3b7f      	subs	r3, #127	; 0x7f
 800c094:	4413      	add	r3, r2
 800c096:	4a60      	ldr	r2, [pc, #384]	; (800c218 <__ieee754_powf+0x3dc>)
 800c098:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800c09c:	4295      	cmp	r5, r2
 800c09e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800c0a2:	dd06      	ble.n	800c0b2 <__ieee754_powf+0x276>
 800c0a4:	4a5d      	ldr	r2, [pc, #372]	; (800c21c <__ieee754_powf+0x3e0>)
 800c0a6:	4295      	cmp	r5, r2
 800c0a8:	f340 80a4 	ble.w	800c1f4 <__ieee754_powf+0x3b8>
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c0b2:	2500      	movs	r5, #0
 800c0b4:	4a5a      	ldr	r2, [pc, #360]	; (800c220 <__ieee754_powf+0x3e4>)
 800c0b6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c0ba:	ee07 1a90 	vmov	s15, r1
 800c0be:	ed92 7a00 	vldr	s14, [r2]
 800c0c2:	4a58      	ldr	r2, [pc, #352]	; (800c224 <__ieee754_powf+0x3e8>)
 800c0c4:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c0c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c0cc:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800c0d0:	1049      	asrs	r1, r1, #1
 800c0d2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c0d6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c0da:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800c0de:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800c0e2:	ee06 1a10 	vmov	s12, r1
 800c0e6:	ee65 4a26 	vmul.f32	s9, s10, s13
 800c0ea:	ee36 7a47 	vsub.f32	s14, s12, s14
 800c0ee:	ee14 6a90 	vmov	r6, s9
 800c0f2:	4016      	ands	r6, r2
 800c0f4:	ee05 6a90 	vmov	s11, r6
 800c0f8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800c0fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c100:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c228 <__ieee754_powf+0x3ec>
 800c104:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800c108:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c10c:	ee25 6a26 	vmul.f32	s12, s10, s13
 800c110:	eddf 6a46 	vldr	s13, [pc, #280]	; 800c22c <__ieee754_powf+0x3f0>
 800c114:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c118:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c230 <__ieee754_powf+0x3f4>
 800c11c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c120:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c204 <__ieee754_powf+0x3c8>
 800c124:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c128:	eddf 6a42 	vldr	s13, [pc, #264]	; 800c234 <__ieee754_powf+0x3f8>
 800c12c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c130:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c238 <__ieee754_powf+0x3fc>
 800c134:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c138:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800c13c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800c140:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c144:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c148:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800c14c:	eef0 7a45 	vmov.f32	s15, s10
 800c150:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800c154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c158:	ee17 1a90 	vmov	r1, s15
 800c15c:	4011      	ands	r1, r2
 800c15e:	ee07 1a90 	vmov	s15, r1
 800c162:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800c166:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800c16a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c16e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c172:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c176:	eeb0 6a47 	vmov.f32	s12, s14
 800c17a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800c17e:	ee16 1a10 	vmov	r1, s12
 800c182:	4011      	ands	r1, r2
 800c184:	ee06 1a90 	vmov	s13, r1
 800c188:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800c18c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c23c <__ieee754_powf+0x400>
 800c190:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800c240 <__ieee754_powf+0x404>
 800c194:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c198:	ee06 1a10 	vmov	s12, r1
 800c19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1a0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c244 <__ieee754_powf+0x408>
 800c1a4:	4928      	ldr	r1, [pc, #160]	; (800c248 <__ieee754_powf+0x40c>)
 800c1a6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c1aa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c1ae:	edd1 7a00 	vldr	s15, [r1]
 800c1b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1b6:	ee07 3a90 	vmov	s15, r3
 800c1ba:	4b24      	ldr	r3, [pc, #144]	; (800c24c <__ieee754_powf+0x410>)
 800c1bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c1c0:	eef0 7a47 	vmov.f32	s15, s14
 800c1c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c1c8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c1cc:	edd5 0a00 	vldr	s1, [r5]
 800c1d0:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c1d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1d8:	ee17 3a90 	vmov	r3, s15
 800c1dc:	4013      	ands	r3, r2
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c1e6:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800c1ea:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c1ee:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c1f2:	e70e      	b.n	800c012 <__ieee754_powf+0x1d6>
 800c1f4:	2501      	movs	r5, #1
 800c1f6:	e75d      	b.n	800c0b4 <__ieee754_powf+0x278>
 800c1f8:	00000000 	.word	0x00000000
 800c1fc:	3f7ffff3 	.word	0x3f7ffff3
 800c200:	3f800007 	.word	0x3f800007
 800c204:	3eaaaaab 	.word	0x3eaaaaab
 800c208:	3fb8aa3b 	.word	0x3fb8aa3b
 800c20c:	36eca570 	.word	0x36eca570
 800c210:	3fb8aa00 	.word	0x3fb8aa00
 800c214:	4b800000 	.word	0x4b800000
 800c218:	001cc471 	.word	0x001cc471
 800c21c:	005db3d6 	.word	0x005db3d6
 800c220:	0800cd14 	.word	0x0800cd14
 800c224:	fffff000 	.word	0xfffff000
 800c228:	3e6c3255 	.word	0x3e6c3255
 800c22c:	3e53f142 	.word	0x3e53f142
 800c230:	3e8ba305 	.word	0x3e8ba305
 800c234:	3edb6db7 	.word	0x3edb6db7
 800c238:	3f19999a 	.word	0x3f19999a
 800c23c:	3f76384f 	.word	0x3f76384f
 800c240:	3f763800 	.word	0x3f763800
 800c244:	369dc3a0 	.word	0x369dc3a0
 800c248:	0800cd24 	.word	0x0800cd24
 800c24c:	0800cd1c 	.word	0x0800cd1c
 800c250:	3338aa3c 	.word	0x3338aa3c
 800c254:	f040 8095 	bne.w	800c382 <__ieee754_powf+0x546>
 800c258:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c250 <__ieee754_powf+0x414>
 800c25c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c260:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c264:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26c:	f73f aefa 	bgt.w	800c064 <__ieee754_powf+0x228>
 800c270:	15db      	asrs	r3, r3, #23
 800c272:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c276:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c27a:	4103      	asrs	r3, r0
 800c27c:	4423      	add	r3, r4
 800c27e:	494b      	ldr	r1, [pc, #300]	; (800c3ac <__ieee754_powf+0x570>)
 800c280:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c284:	3a7f      	subs	r2, #127	; 0x7f
 800c286:	4111      	asrs	r1, r2
 800c288:	ea23 0101 	bic.w	r1, r3, r1
 800c28c:	ee07 1a10 	vmov	s14, r1
 800c290:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c294:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c298:	f1c2 0217 	rsb	r2, r2, #23
 800c29c:	4110      	asrs	r0, r2
 800c29e:	2c00      	cmp	r4, #0
 800c2a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2a4:	bfb8      	it	lt
 800c2a6:	4240      	neglt	r0, r0
 800c2a8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c2ac:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800c3b0 <__ieee754_powf+0x574>
 800c2b0:	eddf 6a40 	vldr	s13, [pc, #256]	; 800c3b4 <__ieee754_powf+0x578>
 800c2b4:	ee17 3a10 	vmov	r3, s14
 800c2b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c2bc:	f023 030f 	bic.w	r3, r3, #15
 800c2c0:	ee07 3a10 	vmov	s14, r3
 800c2c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2c8:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c2cc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c2d0:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c3b8 <__ieee754_powf+0x57c>
 800c2d4:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800c2d8:	eef0 7a40 	vmov.f32	s15, s0
 800c2dc:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c2e0:	eeb0 6a67 	vmov.f32	s12, s15
 800c2e4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c2e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c2ec:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c2f0:	eddf 6a32 	vldr	s13, [pc, #200]	; 800c3bc <__ieee754_powf+0x580>
 800c2f4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800c3c0 <__ieee754_powf+0x584>
 800c2f8:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c2fc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800c3c4 <__ieee754_powf+0x588>
 800c300:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c304:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c3c8 <__ieee754_powf+0x58c>
 800c308:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c30c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800c3cc <__ieee754_powf+0x590>
 800c310:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c314:	eef0 6a67 	vmov.f32	s13, s15
 800c318:	eee6 6a47 	vfms.f32	s13, s12, s14
 800c31c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c320:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c324:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800c328:	eea7 0a80 	vfma.f32	s0, s15, s0
 800c32c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c330:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c334:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c338:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c33c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c340:	ee10 3a10 	vmov	r3, s0
 800c344:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c34c:	da1f      	bge.n	800c38e <__ieee754_powf+0x552>
 800c34e:	f000 f87d 	bl	800c44c <scalbnf>
 800c352:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c356:	e589      	b.n	800be6c <__ieee754_powf+0x30>
 800c358:	4a1d      	ldr	r2, [pc, #116]	; (800c3d0 <__ieee754_powf+0x594>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	dd07      	ble.n	800c36e <__ieee754_powf+0x532>
 800c35e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c366:	bf4c      	ite	mi
 800c368:	2001      	movmi	r0, #1
 800c36a:	2000      	movpl	r0, #0
 800c36c:	e61f      	b.n	800bfae <__ieee754_powf+0x172>
 800c36e:	d108      	bne.n	800c382 <__ieee754_powf+0x546>
 800c370:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c374:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37c:	f6ff af78 	blt.w	800c270 <__ieee754_powf+0x434>
 800c380:	e7ed      	b.n	800c35e <__ieee754_powf+0x522>
 800c382:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c386:	f73f af73 	bgt.w	800c270 <__ieee754_powf+0x434>
 800c38a:	2000      	movs	r0, #0
 800c38c:	e78c      	b.n	800c2a8 <__ieee754_powf+0x46c>
 800c38e:	ee00 3a10 	vmov	s0, r3
 800c392:	e7de      	b.n	800c352 <__ieee754_powf+0x516>
 800c394:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c398:	e568      	b.n	800be6c <__ieee754_powf+0x30>
 800c39a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c3d4 <__ieee754_powf+0x598>
 800c39e:	e565      	b.n	800be6c <__ieee754_powf+0x30>
 800c3a0:	eeb0 0a48 	vmov.f32	s0, s16
 800c3a4:	e562      	b.n	800be6c <__ieee754_powf+0x30>
 800c3a6:	2700      	movs	r7, #0
 800c3a8:	e58d      	b.n	800bec6 <__ieee754_powf+0x8a>
 800c3aa:	bf00      	nop
 800c3ac:	007fffff 	.word	0x007fffff
 800c3b0:	35bfbe8c 	.word	0x35bfbe8c
 800c3b4:	3f317200 	.word	0x3f317200
 800c3b8:	3f317218 	.word	0x3f317218
 800c3bc:	b5ddea0e 	.word	0xb5ddea0e
 800c3c0:	3331bb4c 	.word	0x3331bb4c
 800c3c4:	388ab355 	.word	0x388ab355
 800c3c8:	bb360b61 	.word	0xbb360b61
 800c3cc:	3e2aaaab 	.word	0x3e2aaaab
 800c3d0:	43160000 	.word	0x43160000
 800c3d4:	00000000 	.word	0x00000000

0800c3d8 <__ieee754_sqrtf>:
 800c3d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c3dc:	4770      	bx	lr

0800c3de <with_errnof>:
 800c3de:	b513      	push	{r0, r1, r4, lr}
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c3e6:	f7fc fefd 	bl	80091e4 <__errno>
 800c3ea:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c3ee:	6004      	str	r4, [r0, #0]
 800c3f0:	b002      	add	sp, #8
 800c3f2:	bd10      	pop	{r4, pc}

0800c3f4 <xflowf>:
 800c3f4:	b130      	cbz	r0, 800c404 <xflowf+0x10>
 800c3f6:	eef1 7a40 	vneg.f32	s15, s0
 800c3fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c3fe:	2022      	movs	r0, #34	; 0x22
 800c400:	f7ff bfed 	b.w	800c3de <with_errnof>
 800c404:	eef0 7a40 	vmov.f32	s15, s0
 800c408:	e7f7      	b.n	800c3fa <xflowf+0x6>
	...

0800c40c <__math_uflowf>:
 800c40c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c414 <__math_uflowf+0x8>
 800c410:	f7ff bff0 	b.w	800c3f4 <xflowf>
 800c414:	10000000 	.word	0x10000000

0800c418 <__math_oflowf>:
 800c418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c420 <__math_oflowf+0x8>
 800c41c:	f7ff bfea 	b.w	800c3f4 <xflowf>
 800c420:	70000000 	.word	0x70000000

0800c424 <fabsf>:
 800c424:	ee10 3a10 	vmov	r3, s0
 800c428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c42c:	ee00 3a10 	vmov	s0, r3
 800c430:	4770      	bx	lr

0800c432 <finitef>:
 800c432:	b082      	sub	sp, #8
 800c434:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c438:	9801      	ldr	r0, [sp, #4]
 800c43a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c43e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c442:	bfac      	ite	ge
 800c444:	2000      	movge	r0, #0
 800c446:	2001      	movlt	r0, #1
 800c448:	b002      	add	sp, #8
 800c44a:	4770      	bx	lr

0800c44c <scalbnf>:
 800c44c:	ee10 3a10 	vmov	r3, s0
 800c450:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c454:	d025      	beq.n	800c4a2 <scalbnf+0x56>
 800c456:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c45a:	d302      	bcc.n	800c462 <scalbnf+0x16>
 800c45c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c460:	4770      	bx	lr
 800c462:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c466:	d122      	bne.n	800c4ae <scalbnf+0x62>
 800c468:	4b2a      	ldr	r3, [pc, #168]	; (800c514 <scalbnf+0xc8>)
 800c46a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c518 <scalbnf+0xcc>
 800c46e:	4298      	cmp	r0, r3
 800c470:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c474:	db16      	blt.n	800c4a4 <scalbnf+0x58>
 800c476:	ee10 3a10 	vmov	r3, s0
 800c47a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c47e:	3a19      	subs	r2, #25
 800c480:	4402      	add	r2, r0
 800c482:	2afe      	cmp	r2, #254	; 0xfe
 800c484:	dd15      	ble.n	800c4b2 <scalbnf+0x66>
 800c486:	ee10 3a10 	vmov	r3, s0
 800c48a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c51c <scalbnf+0xd0>
 800c48e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c520 <scalbnf+0xd4>
 800c492:	2b00      	cmp	r3, #0
 800c494:	eeb0 7a67 	vmov.f32	s14, s15
 800c498:	bfb8      	it	lt
 800c49a:	eef0 7a66 	vmovlt.f32	s15, s13
 800c49e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c4a2:	4770      	bx	lr
 800c4a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c524 <scalbnf+0xd8>
 800c4a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c4ac:	4770      	bx	lr
 800c4ae:	0dd2      	lsrs	r2, r2, #23
 800c4b0:	e7e6      	b.n	800c480 <scalbnf+0x34>
 800c4b2:	2a00      	cmp	r2, #0
 800c4b4:	dd06      	ble.n	800c4c4 <scalbnf+0x78>
 800c4b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4ba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c4be:	ee00 3a10 	vmov	s0, r3
 800c4c2:	4770      	bx	lr
 800c4c4:	f112 0f16 	cmn.w	r2, #22
 800c4c8:	da1a      	bge.n	800c500 <scalbnf+0xb4>
 800c4ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c4ce:	4298      	cmp	r0, r3
 800c4d0:	ee10 3a10 	vmov	r3, s0
 800c4d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4d8:	dd0a      	ble.n	800c4f0 <scalbnf+0xa4>
 800c4da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c51c <scalbnf+0xd0>
 800c4de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c520 <scalbnf+0xd4>
 800c4e2:	eef0 7a40 	vmov.f32	s15, s0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bf18      	it	ne
 800c4ea:	eeb0 0a47 	vmovne.f32	s0, s14
 800c4ee:	e7db      	b.n	800c4a8 <scalbnf+0x5c>
 800c4f0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c524 <scalbnf+0xd8>
 800c4f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c528 <scalbnf+0xdc>
 800c4f8:	eef0 7a40 	vmov.f32	s15, s0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	e7f3      	b.n	800c4e8 <scalbnf+0x9c>
 800c500:	3219      	adds	r2, #25
 800c502:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c506:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c50a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c52c <scalbnf+0xe0>
 800c50e:	ee07 3a10 	vmov	s14, r3
 800c512:	e7c4      	b.n	800c49e <scalbnf+0x52>
 800c514:	ffff3cb0 	.word	0xffff3cb0
 800c518:	4c000000 	.word	0x4c000000
 800c51c:	7149f2ca 	.word	0x7149f2ca
 800c520:	f149f2ca 	.word	0xf149f2ca
 800c524:	0da24260 	.word	0x0da24260
 800c528:	8da24260 	.word	0x8da24260
 800c52c:	33000000 	.word	0x33000000

0800c530 <_init>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr

0800c53c <_fini>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	bf00      	nop
 800c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c542:	bc08      	pop	{r3}
 800c544:	469e      	mov	lr, r3
 800c546:	4770      	bx	lr
