
11. Roll Pitch Double PID Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  0800ffe8  0800ffe8  0001ffe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010834  08010834  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010834  08010834  00020834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801083c  0801083c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801083c  0801083c  0002083c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010840  08010840  00020840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010844  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e0  2**0
                  CONTENTS
 10 .bss          000004c0  200001e0  200001e0  000301e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006a0  200006a0  000301e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a86a  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004744  00000000  00000000  0004aa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0004f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b0  00000000  00000000  00050938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002781d  00000000  00000000  00051ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce2c  00000000  00000000  00079705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc7ad  00000000  00000000  00096531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00172cde  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000739c  00000000  00000000  00172d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ffcc 	.word	0x0800ffcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ffcc 	.word	0x0800ffcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	619a      	str	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	041a      	lsls	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	619a      	str	r2, [r3, #24]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <AT24C08_Page_Write>:
 *      Author: hyeon
 */
#include "i2c.h"
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	121b      	asrs	r3, r3, #8
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page* 16) & 0xff;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	480e      	ldr	r0, [pc, #56]	; (8000f50 <AT24C08_Page_Write+0x68>)
 8000f16:	f7ff ffd7 	bl	8000ec8 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	2301      	movs	r3, #1
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2310      	movs	r3, #16
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4808      	ldr	r0, [pc, #32]	; (8000f54 <AT24C08_Page_Write+0x6c>)
 8000f32:	f007 ff47 	bl	8008dc4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f006 fb1a 	bl	8007570 <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <AT24C08_Page_Write+0x68>)
 8000f42:	f7ff ffb3 	bl	8000eac <LL_GPIO_SetOutputPin>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40020800 	.word	0x40020800
 8000f54:	2000054c 	.word	0x2000054c

08000f58 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	121b      	asrs	r3, r3, #8
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page* 16) & 0xff;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	b299      	uxth	r1, r3
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <AT24C08_Page_Read+0x4c>)
 8000f98:	f008 f80e 	bl	8008fb8 <HAL_I2C_Mem_Read>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000054c 	.word	0x2000054c

08000fa8 <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fb4:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fb8:	ed87 1a00 	vstr	s2, [r7]
 8000fbc:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 8000fbe:	2345      	movs	r3, #69	; 0x45
 8000fc0:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000fc2:	2350      	movs	r3, #80	; 0x50
 8000fc4:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	76bb      	strb	r3, [r7, #26]

	parser.f = PGain;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000fce:	7d3b      	ldrb	r3, [r7, #20]
 8000fd0:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000fd2:	7d7b      	ldrb	r3, [r7, #21]
 8000fd4:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8000fd6:	7dbb      	ldrb	r3, [r7, #22]
 8000fd8:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8000fe2:	7d3b      	ldrb	r3, [r7, #20]
 8000fe4:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8000fe6:	7d7b      	ldrb	r3, [r7, #21]
 8000fe8:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8000ffc:	7d3b      	ldrb	r3, [r7, #20]
 8000ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 8001002:	7d7b      	ldrb	r3, [r7, #21]
 8001004:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 8001008:	7dbb      	ldrb	r3, [r7, #22]
 800100a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char chksum = 0xff;
 8001014:	23ff      	movs	r3, #255	; 0xff
 8001016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i = 0; i < 15; i++)
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
 800101e:	e00c      	b.n	800103a <EP_PIDGain_Write+0x92>
		chksum -= buf_write[i];
 8001020:	f107 0218 	add.w	r2, r7, #24
 8001024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i = 0; i < 15; i++)
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	3301      	adds	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	2b0e      	cmp	r3, #14
 800103e:	ddef      	ble.n	8001020 <EP_PIDGain_Write+0x78>

	buf_write[15] = chksum;
 8001040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	switch(id)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b05      	cmp	r3, #5
 800104c:	d83e      	bhi.n	80010cc <EP_PIDGain_Write+0x124>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <EP_PIDGain_Write+0xac>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	0800106d 	.word	0x0800106d
 8001058:	0800107d 	.word	0x0800107d
 800105c:	0800108d 	.word	0x0800108d
 8001060:	0800109d 	.word	0x0800109d
 8001064:	080010ad 	.word	0x080010ad
 8001068:	080010bd 	.word	0x080010bd
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	2210      	movs	r2, #16
 8001072:	4619      	mov	r1, r3
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ff37 	bl	8000ee8 <AT24C08_Page_Write>
		break;
 800107a:	e027      	b.n	80010cc <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	2210      	movs	r2, #16
 8001082:	4619      	mov	r1, r3
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ff2f 	bl	8000ee8 <AT24C08_Page_Write>
		break;
 800108a:	e01f      	b.n	80010cc <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	2210      	movs	r2, #16
 8001092:	4619      	mov	r1, r3
 8001094:	2002      	movs	r0, #2
 8001096:	f7ff ff27 	bl	8000ee8 <AT24C08_Page_Write>
		break;
 800109a:	e017      	b.n	80010cc <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2210      	movs	r2, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	2003      	movs	r0, #3
 80010a6:	f7ff ff1f 	bl	8000ee8 <AT24C08_Page_Write>
		break;
 80010aa:	e00f      	b.n	80010cc <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	2210      	movs	r2, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	2004      	movs	r0, #4
 80010b6:	f7ff ff17 	bl	8000ee8 <AT24C08_Page_Write>
		break;
 80010ba:	e007      	b.n	80010cc <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	2210      	movs	r2, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	2005      	movs	r0, #5
 80010c6:	f7ff ff0f 	bl	8000ee8 <AT24C08_Page_Write>
		break;
 80010ca:	bf00      	nop
	}
}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d83e      	bhi.n	8001168 <EP_PIDGain_Read+0x94>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <EP_PIDGain_Read+0x1c>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001109 	.word	0x08001109
 80010f4:	08001119 	.word	0x08001119
 80010f8:	08001129 	.word	0x08001129
 80010fc:	08001139 	.word	0x08001139
 8001100:	08001149 	.word	0x08001149
 8001104:	08001159 	.word	0x08001159
	{
	case 0:
		AT24C08_Page_Read(0, &buf_read[0], 16);
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	2210      	movs	r2, #16
 800110e:	4619      	mov	r1, r3
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ff21 	bl	8000f58 <AT24C08_Page_Read>
		break;
 8001116:	e027      	b.n	8001168 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1, &buf_read[0], 16);
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	2210      	movs	r2, #16
 800111e:	4619      	mov	r1, r3
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff ff19 	bl	8000f58 <AT24C08_Page_Read>
		break;
 8001126:	e01f      	b.n	8001168 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2, &buf_read[0], 16);
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	2210      	movs	r2, #16
 800112e:	4619      	mov	r1, r3
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff ff11 	bl	8000f58 <AT24C08_Page_Read>
		break;
 8001136:	e017      	b.n	8001168 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3, &buf_read[0], 16);
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	2210      	movs	r2, #16
 800113e:	4619      	mov	r1, r3
 8001140:	2003      	movs	r0, #3
 8001142:	f7ff ff09 	bl	8000f58 <AT24C08_Page_Read>
		break;
 8001146:	e00f      	b.n	8001168 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4, &buf_read[0], 16);
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	2210      	movs	r2, #16
 800114e:	4619      	mov	r1, r3
 8001150:	2004      	movs	r0, #4
 8001152:	f7ff ff01 	bl	8000f58 <AT24C08_Page_Read>
		break;
 8001156:	e007      	b.n	8001168 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5, &buf_read[0], 16);
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	2210      	movs	r2, #16
 800115e:	4619      	mov	r1, r3
 8001160:	2005      	movs	r0, #5
 8001162:	f7ff fef9 	bl	8000f58 <AT24C08_Page_Read>
		break;
 8001166:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i = 0; i<15; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
 8001172:	e00c      	b.n	800118e <EP_PIDGain_Read+0xba>
		chksum -= buf_read[i];
 8001174:	f107 0218 	add.w	r2, r7, #24
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i = 0; i<15; i++)
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	3301      	adds	r3, #1
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	2b0e      	cmp	r3, #14
 8001192:	ddef      	ble.n	8001174 <EP_PIDGain_Read+0xa0>

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50) {
 8001194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001198:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800119c:	429a      	cmp	r2, r3
 800119e:	d12f      	bne.n	8001200 <EP_PIDGain_Read+0x12c>
 80011a0:	7e3b      	ldrb	r3, [r7, #24]
 80011a2:	2b45      	cmp	r3, #69	; 0x45
 80011a4:	d12c      	bne.n	8001200 <EP_PIDGain_Read+0x12c>
 80011a6:	7e7b      	ldrb	r3, [r7, #25]
 80011a8:	2b50      	cmp	r3, #80	; 0x50
 80011aa:	d129      	bne.n	8001200 <EP_PIDGain_Read+0x12c>
		parser.byte[0] = buf_read[3];
 80011ac:	7efb      	ldrb	r3, [r7, #27]
 80011ae:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 80011b0:	7f3b      	ldrb	r3, [r7, #28]
 80011b2:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80011b4:	7f7b      	ldrb	r3, [r7, #29]
 80011b6:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80011b8:	7fbb      	ldrb	r3, [r7, #30]
 80011ba:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80011c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011ca:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 80011cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80011d0:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 80011d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011d6:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 80011de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011e2:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 80011e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011e8:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 80011ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011ee:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f4:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	601a      	str	r2, [r3, #0]

		return 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e000      	b.n	8001202 <EP_PIDGain_Read+0x12e>
	}

	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop

0800120c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f023 0210 	bic.w	r2, r3, #16
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	605a      	str	r2, [r3, #4]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b02      	cmp	r3, #2
 800128a:	d101      	bne.n	8001290 <LL_SPI_IsActiveFlag_TXE+0x18>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	330c      	adds	r3, #12
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	330c      	adds	r3, #12
 80012ca:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_GPIO_IsInputPinSet>:
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4013      	ands	r3, r2
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	bf0c      	ite	eq
 80012f6:	2301      	moveq	r3, #1
 80012f8:	2300      	movne	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_GPIO_SetOutputPin>:
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	619a      	str	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_GPIO_ResetOutputPin>:
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800135a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4013      	ands	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800

08001374 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b090      	sub	sp, #64	; 0x40
 80013a8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2228      	movs	r2, #40	; 0x28
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00b fa00 	bl	800c7b8 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80013c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013cc:	f7ff ffd2 	bl	8001374 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013d0:	2002      	movs	r0, #2
 80013d2:	f7ff ffb7 	bl	8001344 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80013d6:	2004      	movs	r0, #4
 80013d8:	f7ff ffb4 	bl	8001344 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ffb1 	bl	8001344 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80013e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013e8:	2302      	movs	r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013f8:	2305      	movs	r3, #5
 80013fa:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4841      	ldr	r0, [pc, #260]	; (8001508 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001402:	f00a f9b4 	bl	800b76e <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800140a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800140e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001414:	2302      	movs	r3, #2
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001418:	2301      	movs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800141c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001422:	2318      	movs	r3, #24
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001426:	2300      	movs	r3, #0
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800142e:	230a      	movs	r3, #10
 8001430:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	4619      	mov	r1, r3
 8001438:	4834      	ldr	r0, [pc, #208]	; (800150c <BNO080_GPIO_SPI_Initialization+0x168>)
 800143a:	f00a fb68 	bl	800bb0e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800143e:	2100      	movs	r1, #0
 8001440:	4832      	ldr	r0, [pc, #200]	; (800150c <BNO080_GPIO_SPI_Initialization+0x168>)
 8001442:	f7ff fef3 	bl	800122c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144a:	4831      	ldr	r0, [pc, #196]	; (8001510 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800144c:	f7ff ff6a 	bl	8001324 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001454:	482c      	ldr	r0, [pc, #176]	; (8001508 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001456:	f7ff ff65 	bl	8001324 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	482d      	ldr	r0, [pc, #180]	; (8001514 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001460:	f7ff ff60 	bl	8001324 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800146a:	2301      	movs	r3, #1
 800146c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4822      	ldr	r0, [pc, #136]	; (8001508 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001480:	f00a f975 	bl	800b76e <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001488:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800148a:	2301      	movs	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	481c      	ldr	r0, [pc, #112]	; (8001510 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014a0:	f00a f965 	bl	800b76e <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014aa:	2301      	movs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014c0:	f00a f955 	bl	800b76e <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014d8:	f00a f949 	bl	800b76e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <BNO080_GPIO_SPI_Initialization+0x168>)
 80014de:	f7ff fe95 	bl	800120c <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80014e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014e8:	f7ff ff0e 	bl	8001308 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80014ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014f2:	f7ff ff09 	bl	8001308 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014fc:	f7ff ff04 	bl	8001308 <LL_GPIO_SetOutputPin>
}
 8001500:	bf00      	nop
 8001502:	3740      	adds	r7, #64	; 0x40
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020400 	.word	0x40020400
 800150c:	40003800 	.word	0x40003800
 8001510:	40020800 	.word	0x40020800
 8001514:	40020000 	.word	0x40020000

08001518 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800151e:	f7ff ff41 	bl	80013a4 <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...");
 8001522:	482e      	ldr	r0, [pc, #184]	; (80015dc <BNO080_Initialization+0xc4>)
 8001524:	f00b fdba 	bl	800d09c <iprintf>

	CHIP_DESELECT(BNO080);
 8001528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800152c:	482c      	ldr	r0, [pc, #176]	; (80015e0 <BNO080_Initialization+0xc8>)
 800152e:	f7ff feeb 	bl	8001308 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8001532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001536:	482b      	ldr	r0, [pc, #172]	; (80015e4 <BNO080_Initialization+0xcc>)
 8001538:	f7ff fee6 	bl	8001308 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800153c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001540:	4829      	ldr	r0, [pc, #164]	; (80015e8 <BNO080_Initialization+0xd0>)
 8001542:	f7ff feef 	bl	8001324 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001546:	20c8      	movs	r0, #200	; 0xc8
 8001548:	f006 f812 	bl	8007570 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 800154c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001550:	4825      	ldr	r0, [pc, #148]	; (80015e8 <BNO080_Initialization+0xd0>)
 8001552:	f7ff fed9 	bl	8001308 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001556:	f000 fc43 	bl	8001de0 <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800155a:	f000 fc41 	bl	8001de0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800155e:	f000 fc63 	bl	8001e28 <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001562:	f000 fc3d 	bl	8001de0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001566:	f000 fc5f 	bl	8001e28 <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <BNO080_Initialization+0xd4>)
 800156c:	22f9      	movs	r2, #249	; 0xf9
 800156e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <BNO080_Initialization+0xd4>)
 8001572:	2200      	movs	r2, #0
 8001574:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001576:	2102      	movs	r1, #2
 8001578:	2002      	movs	r0, #2
 800157a:	f000 fcc5 	bl	8001f08 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 800157e:	f000 fc2f 	bl	8001de0 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001582:	f000 fc51 	bl	8001e28 <BNO080_receivePacket>
 8001586:	4603      	mov	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	d11b      	bne.n	80015c4 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <BNO080_Initialization+0xd8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <BNO080_Initialization+0xd8>)
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	461a      	mov	r2, r3
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <BNO080_Initialization+0xd8>)
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	4618      	mov	r0, r3
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <BNO080_Initialization+0xd8>)
 80015a0:	78db      	ldrb	r3, [r3, #3]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4603      	mov	r3, r0
 80015a6:	4813      	ldr	r0, [pc, #76]	; (80015f4 <BNO080_Initialization+0xdc>)
 80015a8:	f00b fd78 	bl	800d09c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <BNO080_Initialization+0xd4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2bf8      	cmp	r3, #248	; 0xf8
 80015b2:	d107      	bne.n	80015c4 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <BNO080_Initialization+0xd4>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <BNO080_Initialization+0xe0>)
 80015bc:	f00b fd6e 	bl	800d09c <iprintf>
			return (0);
 80015c0:	2300      	movs	r3, #0
 80015c2:	e007      	b.n	80015d4 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <BNO080_Initialization+0xd4>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	22f8      	movs	r2, #248	; 0xf8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <BNO080_Initialization+0xe4>)
 80015ce:	f00b fd65 	bl	800d09c <iprintf>
	return (1); //Something went wrong
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	0800ffe8 	.word	0x0800ffe8
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020800 	.word	0x40020800
 80015ec:	20000200 	.word	0x20000200
 80015f0:	200001fc 	.word	0x200001fc
 80015f4:	0800fffc 	.word	0x0800fffc
 80015f8:	08010014 	.word	0x08010014
 80015fc:	08010034 	.word	0x08010034

08001600 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800160a:	bf00      	nop
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <SPI2_SendByte+0x40>)
 800160e:	f7ff fe33 	bl	8001278 <LL_SPI_IsActiveFlag_TXE>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f9      	beq.n	800160c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4619      	mov	r1, r3
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <SPI2_SendByte+0x40>)
 800161e:	f7ff fe4c 	bl	80012ba <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8001622:	bf00      	nop
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <SPI2_SendByte+0x40>)
 8001626:	f7ff fe14 	bl	8001252 <LL_SPI_IsActiveFlag_RXNE>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f9      	beq.n	8001624 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <SPI2_SendByte+0x40>)
 8001632:	f7ff fe34 	bl	800129e <LL_SPI_ReceiveData8>
 8001636:	4603      	mov	r3, r0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40003800 	.word	0x40003800

08001644 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	4811      	ldr	r0, [pc, #68]	; (8001694 <BNO080_dataAvailable+0x50>)
 800164e:	f7ff fe46 	bl	80012de <LL_GPIO_IsInputPinSet>
 8001652:	4603      	mov	r3, r0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <BNO080_dataAvailable+0x18>
		return (0);
 8001658:	2300      	movs	r3, #0
 800165a:	e019      	b.n	8001690 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 800165c:	f000 fbe4 	bl	8001e28 <BNO080_receivePacket>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d113      	bne.n	800168e <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <BNO080_dataAvailable+0x54>)
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <BNO080_dataAvailable+0x3a>
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <BNO080_dataAvailable+0x58>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2bfb      	cmp	r3, #251	; 0xfb
 8001674:	d103      	bne.n	800167e <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001676:	f000 f82f 	bl	80016d8 <BNO080_parseInputReport>
			return (1);
 800167a:	2301      	movs	r3, #1
 800167c:	e008      	b.n	8001690 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <BNO080_dataAvailable+0x54>)
 8001680:	789b      	ldrb	r3, [r3, #2]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d103      	bne.n	800168e <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001686:	f000 f80b 	bl	80016a0 <BNO080_parseCommandReport>
			return (1);
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020800 	.word	0x40020800
 8001698:	200001fc 	.word	0x200001fc
 800169c:	20000200 	.word	0x20000200

080016a0 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <BNO080_parseCommandReport+0x30>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2bf1      	cmp	r3, #241	; 0xf1
 80016ac:	d109      	bne.n	80016c2 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <BNO080_parseCommandReport+0x30>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b07      	cmp	r3, #7
 80016b8:	d103      	bne.n	80016c2 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <BNO080_parseCommandReport+0x30>)
 80016bc:	795a      	ldrb	r2, [r3, #5]
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <BNO080_parseCommandReport+0x34>)
 80016c0:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000200 	.word	0x20000200
 80016d4:	200002c4 	.word	0x200002c4

080016d8 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80016de:	4b98      	ldr	r3, [pc, #608]	; (8001940 <BNO080_parseInputReport+0x268>)
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b96      	ldr	r3, [pc, #600]	; (8001940 <BNO080_parseInputReport+0x268>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80016f0:	8a3b      	ldrh	r3, [r7, #16]
 80016f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016f6:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80016f8:	8a3b      	ldrh	r3, [r7, #16]
 80016fa:	3b04      	subs	r3, #4
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001700:	4b90      	ldr	r3, [pc, #576]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001702:	791b      	ldrb	r3, [r3, #4]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	4a8f      	ldr	r2, [pc, #572]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001708:	78d2      	ldrb	r2, [r2, #3]
 800170a:	0412      	lsls	r2, r2, #16
 800170c:	4313      	orrs	r3, r2
 800170e:	4a8d      	ldr	r2, [pc, #564]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001710:	7892      	ldrb	r2, [r2, #2]
 8001712:	0212      	lsls	r2, r2, #8
 8001714:	4313      	orrs	r3, r2
 8001716:	4a8b      	ldr	r2, [pc, #556]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001718:	7852      	ldrb	r2, [r2, #1]
 800171a:	4313      	orrs	r3, r2
 800171c:	4a8a      	ldr	r2, [pc, #552]	; (8001948 <BNO080_parseInputReport+0x270>)
 800171e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001720:	4b88      	ldr	r3, [pc, #544]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001722:	79db      	ldrb	r3, [r3, #7]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 800172a:	4b86      	ldr	r3, [pc, #536]	; (8001944 <BNO080_parseInputReport+0x26c>)
 800172c:	7a9b      	ldrb	r3, [r3, #10]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b84      	ldr	r3, [pc, #528]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001734:	7a5b      	ldrb	r3, [r3, #9]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800173e:	4b81      	ldr	r3, [pc, #516]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001740:	7b1b      	ldrb	r3, [r3, #12]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001748:	7adb      	ldrb	r3, [r3, #11]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001752:	4b7c      	ldr	r3, [pc, #496]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001754:	7b9b      	ldrb	r3, [r3, #14]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <BNO080_parseInputReport+0x26c>)
 800175c:	7b5b      	ldrb	r3, [r3, #13]
 800175e:	b21b      	sxth	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b21b      	sxth	r3, r3
 8001764:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800176e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001772:	2b0e      	cmp	r3, #14
 8001774:	dd09      	ble.n	800178a <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001778:	7c1b      	ldrb	r3, [r3, #16]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	4b71      	ldr	r3, [pc, #452]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001780:	7bdb      	ldrb	r3, [r3, #15]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21b      	sxth	r3, r3
 8001788:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800178a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800178e:	2b10      	cmp	r3, #16
 8001790:	dd09      	ble.n	80017a6 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001792:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <BNO080_parseInputReport+0x26c>)
 8001794:	7c9b      	ldrb	r3, [r3, #18]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <BNO080_parseInputReport+0x26c>)
 800179c:	7c5b      	ldrb	r3, [r3, #17]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80017a6:	4b67      	ldr	r3, [pc, #412]	; (8001944 <BNO080_parseInputReport+0x26c>)
 80017a8:	795b      	ldrb	r3, [r3, #5]
 80017aa:	2b1e      	cmp	r3, #30
 80017ac:	dc46      	bgt.n	800183c <BNO080_parseInputReport+0x164>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f340 80bf 	ble.w	8001932 <BNO080_parseInputReport+0x25a>
 80017b4:	3b01      	subs	r3, #1
 80017b6:	2b1d      	cmp	r3, #29
 80017b8:	f200 80bb 	bhi.w	8001932 <BNO080_parseInputReport+0x25a>
 80017bc:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <BNO080_parseInputReport+0xec>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	08001843 	.word	0x08001843
 80017c8:	0800187b 	.word	0x0800187b
 80017cc:	08001897 	.word	0x08001897
 80017d0:	0800185f 	.word	0x0800185f
 80017d4:	080018b3 	.word	0x080018b3
 80017d8:	08001933 	.word	0x08001933
 80017dc:	08001933 	.word	0x08001933
 80017e0:	080018b3 	.word	0x080018b3
 80017e4:	08001933 	.word	0x08001933
 80017e8:	08001933 	.word	0x08001933
 80017ec:	08001933 	.word	0x08001933
 80017f0:	08001933 	.word	0x08001933
 80017f4:	08001933 	.word	0x08001933
 80017f8:	08001933 	.word	0x08001933
 80017fc:	08001933 	.word	0x08001933
 8001800:	08001933 	.word	0x08001933
 8001804:	080018db 	.word	0x080018db
 8001808:	08001933 	.word	0x08001933
 800180c:	080018e3 	.word	0x080018e3
 8001810:	08001933 	.word	0x08001933
 8001814:	08001933 	.word	0x08001933
 8001818:	08001933 	.word	0x08001933
 800181c:	08001933 	.word	0x08001933
 8001820:	08001933 	.word	0x08001933
 8001824:	08001933 	.word	0x08001933
 8001828:	08001933 	.word	0x08001933
 800182c:	08001933 	.word	0x08001933
 8001830:	08001933 	.word	0x08001933
 8001834:	08001933 	.word	0x08001933
 8001838:	080018ed 	.word	0x080018ed
 800183c:	2bf1      	cmp	r3, #241	; 0xf1
 800183e:	d06d      	beq.n	800191c <BNO080_parseInputReport+0x244>
		//See reference manual to add additional feature reports as needed
	}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001840:	e077      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		accelAccuracy = status;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <BNO080_parseInputReport+0x274>)
 8001848:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 800184a:	4a41      	ldr	r2, [pc, #260]	; (8001950 <BNO080_parseInputReport+0x278>)
 800184c:	89bb      	ldrh	r3, [r7, #12]
 800184e:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001850:	4a40      	ldr	r2, [pc, #256]	; (8001954 <BNO080_parseInputReport+0x27c>)
 8001852:	897b      	ldrh	r3, [r7, #10]
 8001854:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001856:	4a40      	ldr	r2, [pc, #256]	; (8001958 <BNO080_parseInputReport+0x280>)
 8001858:	893b      	ldrh	r3, [r7, #8]
 800185a:	8013      	strh	r3, [r2, #0]
		break;
 800185c:	e069      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		accelLinAccuracy = status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b3e      	ldr	r3, [pc, #248]	; (800195c <BNO080_parseInputReport+0x284>)
 8001864:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001866:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <BNO080_parseInputReport+0x288>)
 8001868:	89bb      	ldrh	r3, [r7, #12]
 800186a:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 800186c:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <BNO080_parseInputReport+0x28c>)
 800186e:	897b      	ldrh	r3, [r7, #10]
 8001870:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001872:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <BNO080_parseInputReport+0x290>)
 8001874:	893b      	ldrh	r3, [r7, #8]
 8001876:	8013      	strh	r3, [r2, #0]
		break;
 8001878:	e05b      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		gyroAccuracy = status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <BNO080_parseInputReport+0x294>)
 8001880:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001882:	4a3b      	ldr	r2, [pc, #236]	; (8001970 <BNO080_parseInputReport+0x298>)
 8001884:	89bb      	ldrh	r3, [r7, #12]
 8001886:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001888:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <BNO080_parseInputReport+0x29c>)
 800188a:	897b      	ldrh	r3, [r7, #10]
 800188c:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 800188e:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <BNO080_parseInputReport+0x2a0>)
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	8013      	strh	r3, [r2, #0]
		break;
 8001894:	e04d      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		magAccuracy = status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <BNO080_parseInputReport+0x2a4>)
 800189c:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 800189e:	4a38      	ldr	r2, [pc, #224]	; (8001980 <BNO080_parseInputReport+0x2a8>)
 80018a0:	89bb      	ldrh	r3, [r7, #12]
 80018a2:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 80018a4:	4a37      	ldr	r2, [pc, #220]	; (8001984 <BNO080_parseInputReport+0x2ac>)
 80018a6:	897b      	ldrh	r3, [r7, #10]
 80018a8:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 80018aa:	4a37      	ldr	r2, [pc, #220]	; (8001988 <BNO080_parseInputReport+0x2b0>)
 80018ac:	893b      	ldrh	r3, [r7, #8]
 80018ae:	8013      	strh	r3, [r2, #0]
		break;
 80018b0:	e03f      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		quatAccuracy = status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <BNO080_parseInputReport+0x2b4>)
 80018b8:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 80018ba:	4a35      	ldr	r2, [pc, #212]	; (8001990 <BNO080_parseInputReport+0x2b8>)
 80018bc:	89bb      	ldrh	r3, [r7, #12]
 80018be:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 80018c0:	4a34      	ldr	r2, [pc, #208]	; (8001994 <BNO080_parseInputReport+0x2bc>)
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <BNO080_parseInputReport+0x2c0>)
 80018c8:	893b      	ldrh	r3, [r7, #8]
 80018ca:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 80018cc:	4a33      	ldr	r2, [pc, #204]	; (800199c <BNO080_parseInputReport+0x2c4>)
 80018ce:	8afb      	ldrh	r3, [r7, #22]
 80018d0:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80018d2:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <BNO080_parseInputReport+0x2c8>)
 80018d4:	8abb      	ldrh	r3, [r7, #20]
 80018d6:	8013      	strh	r3, [r2, #0]
		break;
 80018d8:	e02b      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		stepCount = data3; //Bytes 8/9
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <BNO080_parseInputReport+0x2cc>)
 80018dc:	893b      	ldrh	r3, [r7, #8]
 80018de:	8013      	strh	r3, [r2, #0]
		break;
 80018e0:	e027      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <BNO080_parseInputReport+0x26c>)
 80018e4:	7a5a      	ldrb	r2, [r3, #9]
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <BNO080_parseInputReport+0x2d0>)
 80018e8:	701a      	strb	r2, [r3, #0]
		break;
 80018ea:	e022      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <BNO080_parseInputReport+0x26c>)
 80018ee:	7a9a      	ldrb	r2, [r3, #10]
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <BNO080_parseInputReport+0x2d4>)
 80018f2:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018f4:	2300      	movs	r3, #0
 80018f6:	74fb      	strb	r3, [r7, #19]
 80018f8:	e00c      	b.n	8001914 <BNO080_parseInputReport+0x23c>
			_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	f103 020b 	add.w	r2, r3, #11
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <BNO080_parseInputReport+0x2d8>)
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	7cfb      	ldrb	r3, [r7, #19]
 8001906:	440b      	add	r3, r1
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <BNO080_parseInputReport+0x26c>)
 800190a:	5c8a      	ldrb	r2, [r1, r2]
 800190c:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800190e:	7cfb      	ldrb	r3, [r7, #19]
 8001910:	3301      	adds	r3, #1
 8001912:	74fb      	strb	r3, [r7, #19]
 8001914:	7cfb      	ldrb	r3, [r7, #19]
 8001916:	2b08      	cmp	r3, #8
 8001918:	d9ef      	bls.n	80018fa <BNO080_parseInputReport+0x222>
		break;
 800191a:	e00a      	b.n	8001932 <BNO080_parseInputReport+0x25a>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <BNO080_parseInputReport+0x26c>)
 800191e:	79db      	ldrb	r3, [r3, #7]
 8001920:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b07      	cmp	r3, #7
 8001926:	d103      	bne.n	8001930 <BNO080_parseInputReport+0x258>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <BNO080_parseInputReport+0x26c>)
 800192a:	7a9a      	ldrb	r2, [r3, #10]
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <BNO080_parseInputReport+0x2dc>)
 800192e:	701a      	strb	r2, [r3, #0]
		break;
 8001930:	bf00      	nop
}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200001fc 	.word	0x200001fc
 8001944:	20000200 	.word	0x20000200
 8001948:	200002b8 	.word	0x200002b8
 800194c:	2000028e 	.word	0x2000028e
 8001950:	20000288 	.word	0x20000288
 8001954:	2000028a 	.word	0x2000028a
 8001958:	2000028c 	.word	0x2000028c
 800195c:	20000296 	.word	0x20000296
 8001960:	20000290 	.word	0x20000290
 8001964:	20000292 	.word	0x20000292
 8001968:	20000294 	.word	0x20000294
 800196c:	2000029e 	.word	0x2000029e
 8001970:	20000298 	.word	0x20000298
 8001974:	2000029a 	.word	0x2000029a
 8001978:	2000029c 	.word	0x2000029c
 800197c:	200002a6 	.word	0x200002a6
 8001980:	200002a0 	.word	0x200002a0
 8001984:	200002a2 	.word	0x200002a2
 8001988:	200002a4 	.word	0x200002a4
 800198c:	200002b2 	.word	0x200002b2
 8001990:	200002a8 	.word	0x200002a8
 8001994:	200002aa 	.word	0x200002aa
 8001998:	200002ac 	.word	0x200002ac
 800199c:	200002ae 	.word	0x200002ae
 80019a0:	200002b0 	.word	0x200002b0
 80019a4:	200002b4 	.word	0x200002b4
 80019a8:	200002bc 	.word	0x200002bc
 80019ac:	200002bd 	.word	0x200002bd
 80019b0:	200002c0 	.word	0x200002c0
 80019b4:	200002c4 	.word	0x200002c4

080019b8 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <BNO080_getQuatI+0x24>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <BNO080_getQuatI+0x28>)
 80019c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 f8bb 	bl	8001b48 <BNO080_qToFloat>
 80019d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200002a8 	.word	0x200002a8
 80019e0:	20000000 	.word	0x20000000

080019e4 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <BNO080_getQuatJ+0x24>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <BNO080_getQuatJ+0x28>)
 80019f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f8a5 	bl	8001b48 <BNO080_qToFloat>
 80019fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a02:	eeb0 0a67 	vmov.f32	s0, s15
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002aa 	.word	0x200002aa
 8001a0c:	20000000 	.word	0x20000000

08001a10 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <BNO080_getQuatK+0x24>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <BNO080_getQuatK+0x28>)
 8001a1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f88f 	bl	8001b48 <BNO080_qToFloat>
 8001a2a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200002ac 	.word	0x200002ac
 8001a38:	20000000 	.word	0x20000000

08001a3c <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <BNO080_getQuatReal+0x24>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <BNO080_getQuatReal+0x28>)
 8001a48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f879 	bl	8001b48 <BNO080_qToFloat>
 8001a56:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200002ae 	.word	0x200002ae
 8001a64:	20000000 	.word	0x20000000

08001a68 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <BNO080_getQuatRadianAccuracy+0x24>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <BNO080_getQuatRadianAccuracy+0x28>)
 8001a74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f863 	bl	8001b48 <BNO080_qToFloat>
 8001a82:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200002b0 	.word	0x200002b0
 8001a90:	20000000 	.word	0x20000000

08001a94 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <BNO080_getQuatAccuracy+0x14>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	200002b2 	.word	0x200002b2

08001aac <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <BNO080_getMagX+0x24>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <BNO080_getMagX+0x28>)
 8001ab8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f841 	bl	8001b48 <BNO080_qToFloat>
 8001ac6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200002a0 	.word	0x200002a0
 8001ad4:	20000002 	.word	0x20000002

08001ad8 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <BNO080_getMagY+0x24>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <BNO080_getMagY+0x28>)
 8001ae4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f82b 	bl	8001b48 <BNO080_qToFloat>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200002a2 	.word	0x200002a2
 8001b00:	20000002 	.word	0x20000002

08001b04 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <BNO080_getMagZ+0x24>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <BNO080_getMagZ+0x28>)
 8001b10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f815 	bl	8001b48 <BNO080_qToFloat>
 8001b1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200002a4 	.word	0x200002a4
 8001b2c:	20000002 	.word	0x20000002

08001b30 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <BNO080_getMagAccuracy+0x14>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	200002a6 	.word	0x200002a6

08001b48 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	ed2d 8b02 	vpush	{d8}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	460a      	mov	r2, r1
 8001b56:	80fb      	strh	r3, [r7, #6]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	425b      	negs	r3, r3
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b74:	eef0 0a67 	vmov.f32	s1, s15
 8001b78:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b7c:	f00d fbf4 	bl	800f368 <powf>
 8001b80:	eef0 7a40 	vmov.f32	s15, s0
 8001b84:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	ecbd 8b02 	vpop	{d8}
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2008      	movs	r0, #8
 8001ba8:	f000 f82a 	bl	8001c00 <BNO080_setFeatureCommand>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f81b 	bl	8001c00 <BNO080_setFeatureCommand>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001bd6:	2004      	movs	r0, #4
 8001bd8:	f000 f884 	bl	8001ce4 <BNO080_sendCalibrateCommand>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <BNO080_calibrationComplete+0x1c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <BNO080_calibrationComplete+0x10>
		return (1);
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <BNO080_calibrationComplete+0x12>
	return (0);
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	200002c4 	.word	0x200002c4

08001c00 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c10:	22fd      	movs	r2, #253	; 0xfd
 8001c12:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001c14:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c32:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c3c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c46:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	0e1b      	lsrs	r3, r3, #24
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c50:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c70:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c7a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c84:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0e1b      	lsrs	r3, r3, #24
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <BNO080_setFeatureCommand+0xa0>)
 8001c8e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001c90:	2111      	movs	r1, #17
 8001c92:	2002      	movs	r0, #2
 8001c94:	f000 f938 	bl	8001f08 <BNO080_sendPacket>
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000200 	.word	0x20000200

08001ca4 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <BNO080_sendCommand+0x38>)
 8001cb0:	22f2      	movs	r2, #242	; 0xf2
 8001cb2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <BNO080_sendCommand+0x3c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	b2d1      	uxtb	r1, r2
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <BNO080_sendCommand+0x3c>)
 8001cbe:	7011      	strb	r1, [r2, #0]
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <BNO080_sendCommand+0x38>)
 8001cc2:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <BNO080_sendCommand+0x38>)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001cca:	210c      	movs	r1, #12
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f000 f91b 	bl	8001f08 <BNO080_sendPacket>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000200 	.word	0x20000200
 8001ce0:	20000286 	.word	0x20000286

08001ce4 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001cee:	2303      	movs	r3, #3
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	e006      	b.n	8001d02 <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	2b0b      	cmp	r3, #11
 8001d06:	d9f5      	bls.n	8001cf4 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	70da      	strb	r2, [r3, #3]
 8001d14:	e020      	b.n	8001d58 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d103      	bne.n	8001d24 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	711a      	strb	r2, [r3, #4]
 8001d22:	e019      	b.n	8001d58 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d103      	bne.n	8001d32 <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	715a      	strb	r2, [r3, #5]
 8001d30:	e012      	b.n	8001d58 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d103      	bne.n	8001d40 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	71da      	strb	r2, [r3, #7]
 8001d3e:	e00b      	b.n	8001d58 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d108      	bne.n	8001d58 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <BNO080_sendCalibrateCommand+0x88>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <BNO080_sendCalibrateCommand+0x8c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d5e:	2007      	movs	r0, #7
 8001d60:	f7ff ffa0 	bl	8001ca4 <BNO080_sendCommand>
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000200 	.word	0x20000200
 8001d70:	200002c4 	.word	0x200002c4

08001d74 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	e006      	b.n	8001d8e <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <BNO080_requestCalibrationStatus+0x34>)
 8001d84:	2100      	movs	r1, #0
 8001d86:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b0b      	cmp	r3, #11
 8001d92:	d9f5      	bls.n	8001d80 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <BNO080_requestCalibrationStatus+0x34>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d9a:	2007      	movs	r0, #7
 8001d9c:	f7ff ff82 	bl	8001ca4 <BNO080_sendCommand>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000200 	.word	0x20000200

08001dac <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001db2:	2303      	movs	r3, #3
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	e006      	b.n	8001dc6 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <BNO080_saveCalibration+0x30>)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b0b      	cmp	r3, #11
 8001dca:	d9f5      	bls.n	8001db8 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001dcc:	2006      	movs	r0, #6
 8001dce:	f7ff ff69 	bl	8001ca4 <BNO080_sendCommand>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000200 	.word	0x20000200

08001de0 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	e00c      	b.n	8001e06 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <BNO080_waitForSPI+0x40>)
 8001df2:	f7ff fa74 	bl	80012de <LL_GPIO_IsInputPinSet>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e00a      	b.n	8001e16 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d1ee      	bne.n	8001dec <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <BNO080_waitForSPI+0x44>)
 8001e10:	f00b f9ca 	bl	800d1a8 <puts>
	return (0);
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40020800 	.word	0x40020800
 8001e24:	08010080 	.word	0x08010080

08001e28 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e32:	4831      	ldr	r0, [pc, #196]	; (8001ef8 <BNO080_receivePacket+0xd0>)
 8001e34:	f7ff fa53 	bl	80012de <LL_GPIO_IsInputPinSet>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e056      	b.n	8001ef0 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e46:	482d      	ldr	r0, [pc, #180]	; (8001efc <BNO080_receivePacket+0xd4>)
 8001e48:	f7ff fa6c 	bl	8001324 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fbd7 	bl	8001600 <SPI2_SendByte>
 8001e52:	4603      	mov	r3, r0
 8001e54:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fbd2 	bl	8001600 <SPI2_SendByte>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fbcd 	bl	8001600 <SPI2_SendByte>
 8001e66:	4603      	mov	r3, r0
 8001e68:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fbc8 	bl	8001600 <SPI2_SendByte>
 8001e70:	4603      	mov	r3, r0
 8001e72:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <BNO080_receivePacket+0xd8>)
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <BNO080_receivePacket+0xd8>)
 8001e7c:	7b3b      	ldrb	r3, [r7, #12]
 8001e7e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <BNO080_receivePacket+0xd8>)
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <BNO080_receivePacket+0xd8>)
 8001e88:	7abb      	ldrb	r3, [r7, #10]
 8001e8a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001e8c:	7b3b      	ldrb	r3, [r7, #12]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	7b7b      	ldrb	r3, [r7, #13]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001e9a:	893b      	ldrh	r3, [r7, #8]
 8001e9c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ea0:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001ea2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e020      	b.n	8001ef0 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001eae:	893b      	ldrh	r3, [r7, #8]
 8001eb0:	3b04      	subs	r3, #4
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	81fb      	strh	r3, [r7, #14]
 8001eba:	e00e      	b.n	8001eda <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001ebc:	20ff      	movs	r0, #255	; 0xff
 8001ebe:	f7ff fb9f 	bl	8001600 <SPI2_SendByte>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eca:	d803      	bhi.n	8001ed4 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	490d      	ldr	r1, [pc, #52]	; (8001f04 <BNO080_receivePacket+0xdc>)
 8001ed0:	79fa      	ldrb	r2, [r7, #7]
 8001ed2:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	81fb      	strh	r3, [r7, #14]
 8001eda:	89fa      	ldrh	r2, [r7, #14]
 8001edc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbeb      	blt.n	8001ebc <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <BNO080_receivePacket+0xd4>)
 8001eea:	f7ff fa0d 	bl	8001308 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020400 	.word	0x40020400
 8001f00:	200001fc 	.word	0x200001fc
 8001f04:	20000200 	.word	0x20000200

08001f08 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460a      	mov	r2, r1
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001f1e:	f7ff ff5f 	bl	8001de0 <BNO080_waitForSPI>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e032      	b.n	8001f92 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	481a      	ldr	r0, [pc, #104]	; (8001f9c <BNO080_sendPacket+0x94>)
 8001f32:	f7ff f9f7 	bl	8001324 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fb61 	bl	8001600 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	121b      	asrs	r3, r3, #8
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fb5b 	bl	8001600 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fb57 	bl	8001600 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <BNO080_sendPacket+0x98>)
 8001f56:	5cd2      	ldrb	r2, [r2, r3]
 8001f58:	1c51      	adds	r1, r2, #1
 8001f5a:	b2c8      	uxtb	r0, r1
 8001f5c:	4910      	ldr	r1, [pc, #64]	; (8001fa0 <BNO080_sendPacket+0x98>)
 8001f5e:	54c8      	strb	r0, [r1, r3]
 8001f60:	4610      	mov	r0, r2
 8001f62:	f7ff fb4d 	bl	8001600 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e008      	b.n	8001f7e <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <BNO080_sendPacket+0x9c>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fb44 	bl	8001600 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3f2      	bcc.n	8001f6c <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001f86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f8a:	4804      	ldr	r0, [pc, #16]	; (8001f9c <BNO080_sendPacket+0x94>)
 8001f8c:	f7ff f9bc 	bl	8001308 <LL_GPIO_SetOutputPin>

	return (1);
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	20000280 	.word	0x20000280
 8001fa4:	20000200 	.word	0x20000200

08001fa8 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8001fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb8:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	e00a      	b.n	8001fd6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	89fa      	ldrh	r2, [r7, #14]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	3b02      	subs	r3, #2
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbef      	blt.n	8001fc0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	321e      	adds	r2, #30
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10a      	bne.n	8002004 <iBus_Check_CHKSUM+0x5c>
 8001fee:	89fb      	ldrh	r3, [r7, #14]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	331f      	adds	r3, #31
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d101      	bne.n	8002004 <iBus_Check_CHKSUM+0x5c>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <iBus_Check_CHKSUM+0x5e>
 8002004:	2300      	movs	r3, #0
 8002006:	b2db      	uxtb	r3, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3302      	adds	r3, #2
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b21a      	sxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3303      	adds	r3, #3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21b      	sxth	r3, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	b29a      	uxth	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b21a      	sxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3305      	adds	r3, #5
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	b21b      	sxth	r3, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	b21b      	sxth	r3, r3
 8002056:	b29b      	uxth	r3, r3
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	b29a      	uxth	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3306      	adds	r3, #6
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b21a      	sxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3307      	adds	r3, #7
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	b21b      	sxth	r3, r3
 8002074:	4313      	orrs	r3, r2
 8002076:	b21b      	sxth	r3, r3
 8002078:	b29b      	uxth	r3, r3
 800207a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207e:	b29a      	uxth	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3308      	adds	r3, #8
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b21a      	sxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3309      	adds	r3, #9
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21b      	sxth	r3, r3
 800209a:	b29b      	uxth	r3, r3
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	330a      	adds	r3, #10
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	330b      	adds	r3, #11
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	330c      	adds	r3, #12
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	330d      	adds	r3, #13
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	819a      	strh	r2, [r3, #12]

	//CH6의 값이 변하지 않아서 failsafe 발생 X -> CH5로 대체하여 failsafe 진행
	iBus->FailSafe = (data[11] >> 4);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	330b      	adds	r3, #11
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	751a      	strb	r2, [r3, #20]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <iBus_isActive_Failsafe>:

unsigned char iBus_isActive_Failsafe(FSiA6B_iBus* iBus) {
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7d1b      	ldrb	r3, [r3, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_SPI_Enable>:
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_SPI_SetStandard>:
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 0210 	bic.w	r2, r3, #16
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	605a      	str	r2, [r3, #4]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_SPI_IsActiveFlag_RXNE>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_SPI_IsActiveFlag_TXE>:
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d101      	bne.n	80021aa <LL_SPI_IsActiveFlag_TXE+0x18>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <LL_SPI_IsActiveFlag_TXE+0x1a>
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_SPI_ReceiveData8>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	330c      	adds	r3, #12
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_SPI_TransmitData8>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	330c      	adds	r3, #12
 80021e4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	701a      	strb	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_GPIO_IsInputPinSet>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	4013      	ands	r3, r2
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_GPIO_SetOutputPin>:
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_GPIO_ResetOutputPin>:
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	041a      	lsls	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_AHB1_GRP1_EnableClock>:
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002268:	4907      	ldr	r1, [pc, #28]	; (8002288 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4013      	ands	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40023800 	.word	0x40023800

0800228c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40023800 	.word	0x40023800

080022bc <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80022c2:	f107 0318 	add.w	r3, r7, #24
 80022c6:	2228      	movs	r2, #40	; 0x28
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00a fa74 	bl	800c7b8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	463b      	mov	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80022e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022e4:	f7ff ffd2 	bl	800228c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7ff ffb7 	bl	800225c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80022ee:	2004      	movs	r0, #4
 80022f0:	f7ff ffb4 	bl	800225c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80022f4:	23e0      	movs	r3, #224	; 0xe0
 80022f6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022f8:	2302      	movs	r3, #2
 80022fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002308:	2305      	movs	r3, #5
 800230a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	463b      	mov	r3, r7
 800230e:	4619      	mov	r1, r3
 8002310:	4825      	ldr	r0, [pc, #148]	; (80023a8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002312:	f009 fa2c 	bl	800b76e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800231a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800231e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002324:	2302      	movs	r3, #2
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002328:	2301      	movs	r3, #1
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800232c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002332:	2310      	movs	r3, #16
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800233e:	230a      	movs	r3, #10
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8002342:	f107 0318 	add.w	r3, r7, #24
 8002346:	4619      	mov	r1, r3
 8002348:	4818      	ldr	r0, [pc, #96]	; (80023ac <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800234a:	f009 fbe0 	bl	800bb0e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800234e:	2100      	movs	r1, #0
 8002350:	4816      	ldr	r0, [pc, #88]	; (80023ac <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002352:	f7ff fef8 	bl	8002146 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002356:	2110      	movs	r1, #16
 8002358:	4815      	ldr	r0, [pc, #84]	; (80023b0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800235a:	f7ff ff70 	bl	800223e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800235e:	2310      	movs	r3, #16
 8002360:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002362:	2301      	movs	r3, #1
 8002364:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002372:	463b      	mov	r3, r7
 8002374:	4619      	mov	r1, r3
 8002376:	480e      	ldr	r0, [pc, #56]	; (80023b0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002378:	f009 f9f9 	bl	800b76e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800237c:	2320      	movs	r3, #32
 800237e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002384:	2301      	movs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	4808      	ldr	r0, [pc, #32]	; (80023b0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800238e:	f009 f9ee 	bl	800b76e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002392:	4806      	ldr	r0, [pc, #24]	; (80023ac <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002394:	f7ff fec7 	bl	8002126 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002398:	2110      	movs	r1, #16
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800239c:	f7ff ff41 	bl	8002222 <LL_GPIO_SetOutputPin>
}
 80023a0:	bf00      	nop
 80023a2:	3740      	adds	r7, #64	; 0x40
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40013000 	.word	0x40013000
 80023b0:	40020800 	.word	0x40020800

080023b4 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80023be:	bf00      	nop
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <SPI1_SendByte+0x40>)
 80023c2:	f7ff fee6 	bl	8002192 <LL_SPI_IsActiveFlag_TXE>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f9      	beq.n	80023c0 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4808      	ldr	r0, [pc, #32]	; (80023f4 <SPI1_SendByte+0x40>)
 80023d2:	f7ff feff 	bl	80021d4 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80023d6:	bf00      	nop
 80023d8:	4806      	ldr	r0, [pc, #24]	; (80023f4 <SPI1_SendByte+0x40>)
 80023da:	f7ff fec7 	bl	800216c <LL_SPI_IsActiveFlag_RXNE>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f9      	beq.n	80023d8 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <SPI1_SendByte+0x40>)
 80023e6:	f7ff fee7 	bl	80021b8 <LL_SPI_ReceiveData8>
 80023ea:	4603      	mov	r3, r0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40013000 	.word	0x40013000

080023f8 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002402:	2110      	movs	r1, #16
 8002404:	480b      	ldr	r0, [pc, #44]	; (8002434 <ICM20602_Readbyte+0x3c>)
 8002406:	f7ff ff1a 	bl	800223e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002410:	b2db      	uxtb	r3, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffce 	bl	80023b4 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff ffcb 	bl	80023b4 <SPI1_SendByte>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002422:	2110      	movs	r1, #16
 8002424:	4803      	ldr	r0, [pc, #12]	; (8002434 <ICM20602_Readbyte+0x3c>)
 8002426:	f7ff fefc 	bl	8002222 <LL_GPIO_SetOutputPin>
	
	return val;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40020800 	.word	0x40020800

08002438 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	603a      	str	r2, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	460b      	mov	r3, r1
 8002446:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 800244c:	2110      	movs	r1, #16
 800244e:	4810      	ldr	r0, [pc, #64]	; (8002490 <ICM20602_Readbytes+0x58>)
 8002450:	f7ff fef5 	bl	800223e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ffa9 	bl	80023b4 <SPI1_SendByte>
	while(i < len)
 8002462:	e009      	b.n	8002478 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	60fa      	str	r2, [r7, #12]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	18d4      	adds	r4, r2, r3
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff ffa0 	bl	80023b4 <SPI1_SendByte>
 8002474:	4603      	mov	r3, r0
 8002476:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002478:	79bb      	ldrb	r3, [r7, #6]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3f1      	bcc.n	8002464 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002480:	2110      	movs	r1, #16
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <ICM20602_Readbytes+0x58>)
 8002484:	f7ff fecd 	bl	8002222 <LL_GPIO_SetOutputPin>
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	40020800 	.word	0x40020800

08002494 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	460a      	mov	r2, r1
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80024a4:	2110      	movs	r1, #16
 80024a6:	480b      	ldr	r0, [pc, #44]	; (80024d4 <ICM20602_Writebyte+0x40>)
 80024a8:	f7ff fec9 	bl	800223e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff7d 	bl	80023b4 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff79 	bl	80023b4 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80024c2:	2110      	movs	r1, #16
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <ICM20602_Writebyte+0x40>)
 80024c6:	f7ff feac 	bl	8002222 <LL_GPIO_SetOutputPin>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40020800 	.word	0x40020800

080024d8 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80024f4:	f7ff fee2 	bl	80022bc <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80024f8:	4833      	ldr	r0, [pc, #204]	; (80025c8 <ICM20602_Initialization+0xf0>)
 80024fa:	f00a fdcf 	bl	800d09c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80024fe:	2075      	movs	r0, #117	; 0x75
 8002500:	f7ff ff7a 	bl	80023f8 <ICM20602_Readbyte>
 8002504:	4603      	mov	r3, r0
 8002506:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b12      	cmp	r3, #18
 800250c:	d105      	bne.n	800251a <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	4619      	mov	r1, r3
 8002512:	482e      	ldr	r0, [pc, #184]	; (80025cc <ICM20602_Initialization+0xf4>)
 8002514:	f00a fdc2 	bl	800d09c <iprintf>
 8002518:	e012      	b.n	8002540 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b12      	cmp	r3, #18
 800251e:	d00f      	beq.n	8002540 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002520:	2075      	movs	r0, #117	; 0x75
 8002522:	f7ff ff69 	bl	80023f8 <ICM20602_Readbyte>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b12      	cmp	r3, #18
 800252e:	d007      	beq.n	8002540 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2212      	movs	r2, #18
 8002534:	4619      	mov	r1, r3
 8002536:	4826      	ldr	r0, [pc, #152]	; (80025d0 <ICM20602_Initialization+0xf8>)
 8002538:	f00a fdb0 	bl	800d09c <iprintf>
			return 1; //ERROR
 800253c:	2301      	movs	r3, #1
 800253e:	e03f      	b.n	80025c0 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	206b      	movs	r0, #107	; 0x6b
 8002544:	f7ff ffa6 	bl	8002494 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002548:	2032      	movs	r0, #50	; 0x32
 800254a:	f005 f811 	bl	8007570 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800254e:	2101      	movs	r1, #1
 8002550:	206b      	movs	r0, #107	; 0x6b
 8002552:	f7ff ff9f 	bl	8002494 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002556:	2032      	movs	r0, #50	; 0x32
 8002558:	f005 f80a 	bl	8007570 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800255c:	2138      	movs	r1, #56	; 0x38
 800255e:	206c      	movs	r0, #108	; 0x6c
 8002560:	f7ff ff98 	bl	8002494 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002564:	2032      	movs	r0, #50	; 0x32
 8002566:	f005 f803 	bl	8007570 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800256a:	2100      	movs	r1, #0
 800256c:	2019      	movs	r0, #25
 800256e:	f7ff ff91 	bl	8002494 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002572:	2032      	movs	r0, #50	; 0x32
 8002574:	f004 fffc 	bl	8007570 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002578:	2105      	movs	r1, #5
 800257a:	201a      	movs	r0, #26
 800257c:	f7ff ff8a 	bl	8002494 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002580:	2032      	movs	r0, #50	; 0x32
 8002582:	f004 fff5 	bl	8007570 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002586:	2118      	movs	r1, #24
 8002588:	201b      	movs	r0, #27
 800258a:	f7ff ff83 	bl	8002494 <ICM20602_Writebyte>
	HAL_Delay(50);
 800258e:	2032      	movs	r0, #50	; 0x32
 8002590:	f004 ffee 	bl	8007570 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002594:	2118      	movs	r1, #24
 8002596:	201c      	movs	r0, #28
 8002598:	f7ff ff7c 	bl	8002494 <ICM20602_Writebyte>
	HAL_Delay(50);
 800259c:	2032      	movs	r0, #50	; 0x32
 800259e:	f004 ffe7 	bl	8007570 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80025a2:	2103      	movs	r1, #3
 80025a4:	201d      	movs	r0, #29
 80025a6:	f7ff ff75 	bl	8002494 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025aa:	2032      	movs	r0, #50	; 0x32
 80025ac:	f004 ffe0 	bl	8007570 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80025b0:	2101      	movs	r1, #1
 80025b2:	2038      	movs	r0, #56	; 0x38
 80025b4:	f7ff ff6e 	bl	8002494 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025b8:	2032      	movs	r0, #50	; 0x32
 80025ba:	f004 ffd9 	bl	8007570 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	08010094 	.word	0x08010094
 80025cc:	080100ac 	.word	0x080100ac
 80025d0:	080100d0 	.word	0x080100d0

080025d4 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	461a      	mov	r2, r3
 80025e2:	2106      	movs	r1, #6
 80025e4:	2043      	movs	r0, #67	; 0x43
 80025e6:	f7ff ff27 	bl	8002438 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80025ea:	7a3b      	ldrb	r3, [r7, #8]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	7a7b      	ldrb	r3, [r7, #9]
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b21a      	sxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80025fc:	7abb      	ldrb	r3, [r7, #10]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	b219      	sxth	r1, r3
 8002602:	7afb      	ldrb	r3, [r7, #11]
 8002604:	b21a      	sxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3302      	adds	r3, #2
 800260a:	430a      	orrs	r2, r1
 800260c:	b212      	sxth	r2, r2
 800260e:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8002610:	7b3b      	ldrb	r3, [r7, #12]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	b219      	sxth	r1, r3
 8002616:	7b7b      	ldrb	r3, [r7, #13]
 8002618:	b21a      	sxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	430a      	orrs	r2, r1
 8002620:	b212      	sxth	r2, r2
 8002622:	801a      	strh	r2, [r3, #0]
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002630:	2120      	movs	r1, #32
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <ICM20602_DataReady+0x14>)
 8002634:	f7ff fde0 	bl	80021f8 <LL_GPIO_IsInputPinSet>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40020800 	.word	0x40020800

08002644 <LL_SPI_Enable>:
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	601a      	str	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_SPI_SetStandard>:
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f023 0210 	bic.w	r2, r3, #16
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	605a      	str	r2, [r3, #4]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_SPI_IsActiveFlag_RXNE>:
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_SPI_IsActiveFlag_TXE>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d101      	bne.n	80026c8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <LL_SPI_IsActiveFlag_TXE+0x1a>
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_SPI_ReceiveData8>:
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	330c      	adds	r3, #12
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_SPI_TransmitData8>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	330c      	adds	r3, #12
 8002702:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	701a      	strb	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_GPIO_IsInputPinSet>:
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4013      	ands	r3, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_GPIO_SetOutputPin>:
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	619a      	str	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_GPIO_ResetOutputPin>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <LL_AHB1_GRP1_EnableClock>:
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40023800 	.word	0x40023800

080027ac <LL_APB1_GRP1_EnableClock>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4313      	orrs	r3, r2
 80027be:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40023800 	.word	0x40023800

080027dc <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b090      	sub	sp, #64	; 0x40
 80027e0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	2228      	movs	r2, #40	; 0x28
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f009 ffe4 	bl	800c7b8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	463b      	mov	r3, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002800:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002804:	f7ff ffd2 	bl	80027ac <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002808:	2002      	movs	r0, #2
 800280a:	f7ff ffb7 	bl	800277c <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800280e:	2338      	movs	r3, #56	; 0x38
 8002810:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002812:	2302      	movs	r3, #2
 8002814:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002822:	2306      	movs	r3, #6
 8002824:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002826:	463b      	mov	r3, r7
 8002828:	4619      	mov	r1, r3
 800282a:	4826      	ldr	r0, [pc, #152]	; (80028c4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800282c:	f008 ff9f 	bl	800b76e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002834:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002838:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800283e:	2302      	movs	r3, #2
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002842:	2301      	movs	r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800284c:	2308      	movs	r3, #8
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002850:	2300      	movs	r3, #0
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002858:	230a      	movs	r3, #10
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 800285c:	f107 0318 	add.w	r3, r7, #24
 8002860:	4619      	mov	r1, r3
 8002862:	4819      	ldr	r0, [pc, #100]	; (80028c8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002864:	f009 f953 	bl	800bb0e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002868:	2100      	movs	r1, #0
 800286a:	4817      	ldr	r0, [pc, #92]	; (80028c8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800286c:	f7ff fefa 	bl	8002664 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	4814      	ldr	r0, [pc, #80]	; (80028c4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002874:	f7ff ff72 	bl	800275c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002878:	2340      	movs	r3, #64	; 0x40
 800287a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800287c:	2301      	movs	r3, #1
 800287e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002892:	f008 ff6c 	bl	800b76e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800289e:	2301      	movs	r3, #1
 80028a0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80028a2:	463b      	mov	r3, r7
 80028a4:	4619      	mov	r1, r3
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028a8:	f008 ff61 	bl	800b76e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80028ae:	f7ff fec9 	bl	8002644 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	4803      	ldr	r0, [pc, #12]	; (80028c4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028b6:	f7ff ff43 	bl	8002740 <LL_GPIO_SetOutputPin>
}
 80028ba:	bf00      	nop
 80028bc:	3740      	adds	r7, #64	; 0x40
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40003c00 	.word	0x40003c00

080028cc <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80028d6:	bf00      	nop
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <SPI3_SendByte+0x40>)
 80028da:	f7ff fee9 	bl	80026b0 <LL_SPI_IsActiveFlag_TXE>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f9      	beq.n	80028d8 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <SPI3_SendByte+0x40>)
 80028ea:	f7ff ff02 	bl	80026f2 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80028ee:	bf00      	nop
 80028f0:	4806      	ldr	r0, [pc, #24]	; (800290c <SPI3_SendByte+0x40>)
 80028f2:	f7ff feca 	bl	800268a <LL_SPI_IsActiveFlag_RXNE>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f9      	beq.n	80028f0 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <SPI3_SendByte+0x40>)
 80028fe:	f7ff feea 	bl	80026d6 <LL_SPI_ReceiveData8>
 8002902:	4603      	mov	r3, r0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40003c00 	.word	0x40003c00

08002910 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800291a:	2140      	movs	r1, #64	; 0x40
 800291c:	480b      	ldr	r0, [pc, #44]	; (800294c <LPS22HH_Readbyte+0x3c>)
 800291e:	f7ff ff1d 	bl	800275c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ffce 	bl	80028cc <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002930:	2000      	movs	r0, #0
 8002932:	f7ff ffcb 	bl	80028cc <SPI3_SendByte>
 8002936:	4603      	mov	r3, r0
 8002938:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800293a:	2140      	movs	r1, #64	; 0x40
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <LPS22HH_Readbyte+0x3c>)
 800293e:	f7ff feff 	bl	8002740 <LL_GPIO_SetOutputPin>
	
	return val;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40020400 	.word	0x40020400

08002950 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	603a      	str	r2, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	460b      	mov	r3, r1
 800295e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8002964:	2140      	movs	r1, #64	; 0x40
 8002966:	4810      	ldr	r0, [pc, #64]	; (80029a8 <LPS22HH_Readbytes+0x58>)
 8002968:	f7ff fef8 	bl	800275c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffa9 	bl	80028cc <SPI3_SendByte>
	while(i < len)
 800297a:	e009      	b.n	8002990 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60fa      	str	r2, [r7, #12]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	18d4      	adds	r4, r2, r3
 8002986:	2000      	movs	r0, #0
 8002988:	f7ff ffa0 	bl	80028cc <SPI3_SendByte>
 800298c:	4603      	mov	r3, r0
 800298e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d3f1      	bcc.n	800297c <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <LPS22HH_Readbytes+0x58>)
 800299c:	f7ff fed0 	bl	8002740 <LL_GPIO_SetOutputPin>
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	40020400 	.word	0x40020400

080029ac <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	460a      	mov	r2, r1
 80029b6:	71fb      	strb	r3, [r7, #7]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80029bc:	2140      	movs	r1, #64	; 0x40
 80029be:	480b      	ldr	r0, [pc, #44]	; (80029ec <LPS22HH_Writebyte+0x40>)
 80029c0:	f7ff fecc 	bl	800275c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff7d 	bl	80028cc <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80029d2:	79bb      	ldrb	r3, [r7, #6]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff79 	bl	80028cc <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80029da:	2140      	movs	r1, #64	; 0x40
 80029dc:	4803      	ldr	r0, [pc, #12]	; (80029ec <LPS22HH_Writebyte+0x40>)
 80029de:	f7ff feaf 	bl	8002740 <LL_GPIO_SetOutputPin>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40020400 	.word	0x40020400

080029f0 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80029fa:	f7ff feef 	bl	80027dc <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80029fe:	4841      	ldr	r0, [pc, #260]	; (8002b04 <LPS22HH_Initialization+0x114>)
 8002a00:	f00a fb4c 	bl	800d09c <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002a04:	200f      	movs	r0, #15
 8002a06:	f7ff ff83 	bl	8002910 <LPS22HH_Readbyte>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2bb3      	cmp	r3, #179	; 0xb3
 8002a12:	d105      	bne.n	8002a20 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4619      	mov	r1, r3
 8002a18:	483b      	ldr	r0, [pc, #236]	; (8002b08 <LPS22HH_Initialization+0x118>)
 8002a1a:	f00a fb3f 	bl	800d09c <iprintf>
 8002a1e:	e012      	b.n	8002a46 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2bb3      	cmp	r3, #179	; 0xb3
 8002a24:	d00f      	beq.n	8002a46 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002a26:	200f      	movs	r0, #15
 8002a28:	f7ff ff72 	bl	8002910 <LPS22HH_Readbyte>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2bb3      	cmp	r3, #179	; 0xb3
 8002a34:	d007      	beq.n	8002a46 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	22b3      	movs	r2, #179	; 0xb3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4833      	ldr	r0, [pc, #204]	; (8002b0c <LPS22HH_Initialization+0x11c>)
 8002a3e:	f00a fb2d 	bl	800d09c <iprintf>
			return 1; //ERROR
 8002a42:	2301      	movs	r3, #1
 8002a44:	e059      	b.n	8002afa <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002a46:	2104      	movs	r1, #4
 8002a48:	2011      	movs	r0, #17
 8002a4a:	f7ff ffaf 	bl	80029ac <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002a4e:	2011      	movs	r0, #17
 8002a50:	f7ff ff5e 	bl	8002910 <LPS22HH_Readbyte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f7      	bne.n	8002a4e <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a5e:	2010      	movs	r0, #16
 8002a60:	f7ff ff56 	bl	8002910 <LPS22HH_Readbyte>
 8002a64:	4603      	mov	r3, r0
 8002a66:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002a68:	79bb      	ldrb	r3, [r7, #6]
 8002a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a6e:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a70:	79bb      	ldrb	r3, [r7, #6]
 8002a72:	4619      	mov	r1, r3
 8002a74:	2010      	movs	r0, #16
 8002a76:	f7ff ff99 	bl	80029ac <LPS22HH_Writebyte>
	temp_reg = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a7e:	2010      	movs	r0, #16
 8002a80:	f7ff ff46 	bl	8002910 <LPS22HH_Readbyte>
 8002a84:	4603      	mov	r3, r0
 8002a86:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a88:	2010      	movs	r0, #16
 8002a8a:	f7ff ff41 	bl	8002910 <LPS22HH_Readbyte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002a92:	79bb      	ldrb	r3, [r7, #6]
 8002a94:	f043 030c 	orr.w	r3, r3, #12
 8002a98:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a9a:	79bb      	ldrb	r3, [r7, #6]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	2010      	movs	r0, #16
 8002aa0:	f7ff ff84 	bl	80029ac <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002aa4:	2010      	movs	r0, #16
 8002aa6:	f7ff ff33 	bl	8002910 <LPS22HH_Readbyte>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002aae:	79bb      	ldrb	r3, [r7, #6]
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002ab6:	79bb      	ldrb	r3, [r7, #6]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	2010      	movs	r0, #16
 8002abc:	f7ff ff76 	bl	80029ac <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002ac0:	2011      	movs	r0, #17
 8002ac2:	f7ff ff25 	bl	8002910 <LPS22HH_Readbyte>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002aca:	79bb      	ldrb	r3, [r7, #6]
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002ad2:	79bb      	ldrb	r3, [r7, #6]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	2011      	movs	r0, #17
 8002ad8:	f7ff ff68 	bl	80029ac <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002adc:	2012      	movs	r0, #18
 8002ade:	f7ff ff17 	bl	8002910 <LPS22HH_Readbyte>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002ae6:	79bb      	ldrb	r3, [r7, #6]
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002aee:	79bb      	ldrb	r3, [r7, #6]
 8002af0:	4619      	mov	r1, r3
 8002af2:	2012      	movs	r0, #18
 8002af4:	f7ff ff5a 	bl	80029ac <LPS22HH_Writebyte>
	
	return 0; //OK
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	080100fc 	.word	0x080100fc
 8002b08:	08010110 	.word	0x08010110
 8002b0c:	08010134 	.word	0x08010134

08002b10 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	4803      	ldr	r0, [pc, #12]	; (8002b24 <LPS22HH_DataReady+0x14>)
 8002b18:	f7ff fdfd 	bl	8002716 <LL_GPIO_IsInputPinSet>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40020400 	.word	0x40020400

08002b28 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	2103      	movs	r1, #3
 8002b34:	2028      	movs	r0, #40	; 0x28
 8002b36:	f7ff ff0b 	bl	8002950 <LPS22HH_Readbytes>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	202b      	movs	r0, #43	; 0x2b
 8002b50:	f7ff fefe 	bl	8002950 <LPS22HH_Readbytes>
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b66:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 8002b6a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002bb4 <getAltitude2+0x58>
 8002b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b76:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002bb8 <getAltitude2+0x5c>
 8002b7a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b7e:	f00c fbf3 	bl	800f368 <powf>
 8002b82:	eef0 7a40 	vmov.f32	s15, s0
 8002b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b8a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b8e:	edd7 7a00 	vldr	s15, [r7]
 8002b92:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002bbc <getAltitude2+0x60>
 8002b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002bc0 <getAltitude2+0x64>
 8002ba2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ba6:	eef0 7a66 	vmov.f32	s15, s13
}
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	447d5000 	.word	0x447d5000
 8002bb8:	3e42c9b7 	.word	0x3e42c9b7
 8002bbc:	43889333 	.word	0x43889333
 8002bc0:	3bd4fdf4 	.word	0x3bd4fdf4

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60da      	str	r2, [r3, #12]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	615a      	str	r2, [r3, #20]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b80      	cmp	r3, #128	; 0x80
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	605a      	str	r2, [r3, #4]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <LL_AHB1_GRP1_EnableClock>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40023800 	.word	0x40023800

08002d98 <LL_APB1_GRP1_EnableClock>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da4:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4013      	ands	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <M8N_TransmitDATA>:
	0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitDATA(unsigned char* data, unsigned char len) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < len; i++) {
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e011      	b.n	8002dfe <M8N_TransmitDATA+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002dda:	bf00      	nop
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <M8N_TransmitDATA+0x48>)
 8002dde:	f7ff ffa0 	bl	8002d22 <LL_USART_IsActiveFlag_TXE>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f9      	beq.n	8002ddc <M8N_TransmitDATA+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	4807      	ldr	r0, [pc, #28]	; (8002e10 <M8N_TransmitDATA+0x48>)
 8002df4:	f7ff ffa8 	bl	8002d48 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++) {
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dbe9      	blt.n	8002dda <M8N_TransmitDATA+0x12>
	}
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40004c00 	.word	0x40004c00

08002e14 <M8N_UART4_Initialzation>:

void M8N_UART4_Initialzation(void){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08e      	sub	sp, #56	; 0x38
 8002e18:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */

	  /* USER CODE END UART4_Init 0 */

	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	615a      	str	r2, [r3, #20]
 8002e2c:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
 8002e3c:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002e3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e42:	f7ff ffa9 	bl	8002d98 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002e46:	2004      	movs	r0, #4
 8002e48:	f7ff ff8e 	bl	8002d68 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002e4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e50:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e52:	2302      	movs	r3, #2
 8002e54:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002e62:	2308      	movs	r3, #8
 8002e64:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4819      	ldr	r0, [pc, #100]	; (8002ed0 <M8N_UART4_Initialzation+0xbc>)
 8002e6c:	f008 fc7f 	bl	800b76e <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002e70:	f7ff fea8 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fef8 	bl	8002c70 <NVIC_EncodePriority>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4619      	mov	r1, r3
 8002e84:	2034      	movs	r0, #52	; 0x34
 8002e86:	f7ff fec9 	bl	8002c1c <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002e8a:	2034      	movs	r0, #52	; 0x34
 8002e8c:	f7ff fea8 	bl	8002be0 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002e90:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002e94:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e96:	2300      	movs	r3, #0
 8002e98:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <M8N_UART4_Initialzation+0xc0>)
 8002eb6:	f009 fbd5 	bl	800c664 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002eba:	4806      	ldr	r0, [pc, #24]	; (8002ed4 <M8N_UART4_Initialzation+0xc0>)
 8002ebc:	f7ff ff1b 	bl	8002cf6 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <M8N_UART4_Initialzation+0xc0>)
 8002ec2:	f7ff ff08 	bl	8002cd6 <LL_USART_Enable>
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */
}
 8002ec6:	bf00      	nop
 8002ec8:	3738      	adds	r7, #56	; 0x38
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40004c00 	.word	0x40004c00

08002ed8 <M8N_Initialzation>:

void M8N_Initialzation(void) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
	M8N_UART4_Initialzation();
 8002edc:	f7ff ff9a 	bl	8002e14 <M8N_UART4_Initialzation>

	M8N_TransmitDATA(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002ee0:	211c      	movs	r1, #28
 8002ee2:	480d      	ldr	r0, [pc, #52]	; (8002f18 <M8N_Initialzation+0x40>)
 8002ee4:	f7ff ff70 	bl	8002dc8 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002ee8:	2064      	movs	r0, #100	; 0x64
 8002eea:	f004 fb41 	bl	8007570 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002eee:	2110      	movs	r1, #16
 8002ef0:	480a      	ldr	r0, [pc, #40]	; (8002f1c <M8N_Initialzation+0x44>)
 8002ef2:	f7ff ff69 	bl	8002dc8 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002ef6:	2064      	movs	r0, #100	; 0x64
 8002ef8:	f004 fb3a 	bl	8007570 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002efc:	210e      	movs	r1, #14
 8002efe:	4808      	ldr	r0, [pc, #32]	; (8002f20 <M8N_Initialzation+0x48>)
 8002f00:	f7ff ff62 	bl	8002dc8 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002f04:	2064      	movs	r0, #100	; 0x64
 8002f06:	f004 fb33 	bl	8007570 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002f0a:	2115      	movs	r1, #21
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <M8N_Initialzation+0x4c>)
 8002f0e:	f7ff ff5b 	bl	8002dc8 <M8N_TransmitDATA>
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08010388 	.word	0x08010388
 8002f1c:	080103a4 	.word	0x080103a4
 8002f20:	080103b4 	.word	0x080103b4
 8002f24:	080103c4 	.word	0x080103c4

08002f28 <M8N_UBX_CHKSUM_Check>:
unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len) {
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73bb      	strb	r3, [r7, #14]

	for(int i = 2; i< len-2; i++) {
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	e00d      	b.n	8002f5e <M8N_UBX_CHKSUM_Check+0x36>
		CK_A = CK_A + data[i];
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002f50:	7bba      	ldrb	r2, [r7, #14]
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	4413      	add	r3, r2
 8002f56:	73bb      	strb	r3, [r7, #14]
	for(int i = 2; i< len-2; i++) {
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	3b02      	subs	r3, #2
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	dbec      	blt.n	8002f42 <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return(CK_A == data[len-2] && CK_B == data[len-1]);
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	3b02      	subs	r3, #2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d109      	bne.n	8002f8c <M8N_UBX_CHKSUM_Check+0x64>
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	7bba      	ldrb	r2, [r7, #14]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d101      	bne.n	8002f8c <M8N_UBX_CHKSUM_Check+0x64>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <M8N_UBX_CHKSUM_Check+0x66>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <M8N_UBX_NAV_POSLLH_Pasing>:

void M8N_UBX_NAV_POSLLH_Pasing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh){
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	789a      	ldrb	r2, [r3, #2]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	78da      	ldrb	r2, [r3, #3]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data[5]<<8;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3305      	adds	r3, #5
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	b21b      	sxth	r3, r3
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3306      	adds	r3, #6
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3307      	adds	r3, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3309      	adds	r3, #9
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	330a      	adds	r3, #10
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	330b      	adds	r3, #11
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	330c      	adds	r3, #12
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	330d      	adds	r3, #13
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	330e      	adds	r3, #14
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	330f      	adds	r3, #15
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3310      	adds	r3, #16
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3311      	adds	r3, #17
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	431a      	orrs	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3312      	adds	r3, #18
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3313      	adds	r3, #19
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3314      	adds	r3, #20
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3315      	adds	r3, #21
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	431a      	orrs	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3316      	adds	r3, #22
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3317      	adds	r3, #23
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3318      	adds	r3, #24
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3319      	adds	r3, #25
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	061b      	lsls	r3, r3, #24
 80030a0:	431a      	orrs	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	331a      	adds	r3, #26
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	331b      	adds	r3, #27
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	331c      	adds	r3, #28
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	331d      	adds	r3, #29
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	4313      	orrs	r3, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	331e      	adds	r3, #30
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	331f      	adds	r3, #31
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3320      	adds	r3, #32
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3321      	adds	r3, #33	; 0x21
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	4313      	orrs	r3, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;
//	posllh->lat_f64 = posllh->lat / 10000000.;
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	ed87 0a02 	vstr	s0, [r7, #8]
 8003118:	edc7 0a01 	vstr	s1, [r7, #4]
 800311c:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	649a      	str	r2, [r3, #72]	; 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003164:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8003364 <Double_Roll_Pitch_PID_Calculation+0x258>
 8003168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800316c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800317c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003368 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8003180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	dd03      	ble.n	8003192 <Double_Roll_Pitch_PID_Calculation+0x86>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a77      	ldr	r2, [pc, #476]	; (800336c <Double_Roll_Pitch_PID_Calculation+0x260>)
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
 8003190:	e00c      	b.n	80031ac <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003198:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003370 <Double_Roll_Pitch_PID_Calculation+0x264>
 800319c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a4:	d502      	bpl.n	80031ac <Double_Roll_Pitch_PID_Calculation+0xa0>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a72      	ldr	r2, [pc, #456]	; (8003374 <Double_Roll_Pitch_PID_Calculation+0x268>)
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80031b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 80031c2:	edd7 7a00 	vldr	s15, [r7]
 80031c6:	eef1 7a67 	vneg.f32	s15, s15
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80031d6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003378 <Double_Roll_Pitch_PID_Calculation+0x26c>
 80031da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80031e4:	eddf 6a65 	vldr	s13, [pc, #404]	; 800337c <Double_Roll_Pitch_PID_Calculation+0x270>
 80031e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	edd3 7a04 	vldr	s15, [r3, #16]
 8003246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	ed93 7a06 	vldr	s14, [r3, #24]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	ed93 7a07 	vldr	s14, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003272:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003364 <Double_Roll_Pitch_PID_Calculation+0x258>
 8003276:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800327a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800328a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003368 <Double_Roll_Pitch_PID_Calculation+0x25c>
 800328e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	dd03      	ble.n	80032a0 <Double_Roll_Pitch_PID_Calculation+0x194>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <Double_Roll_Pitch_PID_Calculation+0x260>)
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
 800329e:	e00c      	b.n	80032ba <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032a6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003370 <Double_Roll_Pitch_PID_Calculation+0x264>
 80032aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b2:	d502      	bpl.n	80032ba <Double_Roll_Pitch_PID_Calculation+0x1ae>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <Double_Roll_Pitch_PID_Calculation+0x268>)
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80032dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e0:	eeb1 7a67 	vneg.f32	s14, s15
 80032e4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003364 <Double_Roll_Pitch_PID_Calculation+0x258>
 80032e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003300:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003304:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	edd3 7a08 	vldr	s15, [r3, #32]
 800330e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003312:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	edd3 7a02 	vldr	s15, [r3, #8]
 800332c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800334c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/****************************************************************************************/
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	3a83126f 	.word	0x3a83126f
 8003368:	43fa0000 	.word	0x43fa0000
 800336c:	43fa0000 	.word	0x43fa0000
 8003370:	c3fa0000 	.word	0xc3fa0000
 8003374:	c3fa0000 	.word	0xc3fa0000
 8003378:	3ecccccd 	.word	0x3ecccccd
 800337c:	3f19999a 	.word	0x3f19999a

08003380 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	ed87 0a02 	vstr	s0, [r7, #8]
 800338c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003390:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80033ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80033bc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80034a4 <Single_Yaw_Heading_PID_Calculation+0x124>
 80033c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c8:	dd0a      	ble.n	80033e0 <Single_Yaw_Heading_PID_Calculation+0x60>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80033d0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80034a8 <Single_Yaw_Heading_PID_Calculation+0x128>
 80033d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	edc3 7a06 	vstr	s15, [r3, #24]
 80033de:	e013      	b.n	8003408 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80033e6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80034ac <Single_Yaw_Heading_PID_Calculation+0x12c>
 80033ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	d509      	bpl.n	8003408 <Single_Yaw_Heading_PID_Calculation+0x88>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80033fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80034a8 <Single_Yaw_Heading_PID_Calculation+0x128>
 80033fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	ed93 7a06 	vldr	s14, [r3, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	ed93 7a07 	vldr	s14, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	edd3 7a06 	vldr	s15, [r3, #24]
 800342a:	eddf 6a21 	vldr	s13, [pc, #132]	; 80034b0 <Single_Yaw_Heading_PID_Calculation+0x130>
 800342e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	edd3 7a01 	vldr	s15, [r3, #4]
 8003448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 8003452:	edd7 7a00 	vldr	s15, [r7]
 8003456:	eef1 7a67 	vneg.f32	s15, s15
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	ed93 7a08 	vldr	s14, [r3, #32]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	edd3 7a02 	vldr	s15, [r3, #8]
 800346c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800348c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/***************************************************************/
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	43340000 	.word	0x43340000
 80034a8:	43b40000 	.word	0x43b40000
 80034ac:	c3340000 	.word	0xc3340000
 80034b0:	3a83126f 	.word	0x3a83126f

080034b4 <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80034c0:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80034dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	edd3 7a06 	vldr	s15, [r3, #24]
 8003508:	eddf 6a24 	vldr	s13, [pc, #144]	; 800359c <Single_Yaw_Rate_PID_Calculation+0xe8>
 800350c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	edd3 7a01 	vldr	s15, [r3, #4]
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	ed93 7a04 	vldr	s14, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	edd3 7a05 	vldr	s15, [r3, #20]
 800353c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003540:	eeb1 7a67 	vneg.f32	s14, s15
 8003544:	eddf 6a15 	vldr	s13, [pc, #84]	; 800359c <Single_Yaw_Rate_PID_Calculation+0xe8>
 8003548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	edd3 7a02 	vldr	s15, [r3, #8]
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800357c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/*******************************************************************/
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	3a83126f 	.word	0x3a83126f

080035a0 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	61da      	str	r2, [r3, #28]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <Reset_All_PID_Integrator+0x2c>)
 80035c2:	f7ff ffed 	bl	80035a0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 80035c6:	4809      	ldr	r0, [pc, #36]	; (80035ec <Reset_All_PID_Integrator+0x30>)
 80035c8:	f7ff ffea 	bl	80035a0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 80035cc:	4808      	ldr	r0, [pc, #32]	; (80035f0 <Reset_All_PID_Integrator+0x34>)
 80035ce:	f7ff ffe7 	bl	80035a0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <Reset_All_PID_Integrator+0x38>)
 80035d4:	f7ff ffe4 	bl	80035a0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 80035d8:	4807      	ldr	r0, [pc, #28]	; (80035f8 <Reset_All_PID_Integrator+0x3c>)
 80035da:	f7ff ffe1 	bl	80035a0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 80035de:	4807      	ldr	r0, [pc, #28]	; (80035fc <Reset_All_PID_Integrator+0x40>)
 80035e0:	f7ff ffde 	bl	80035a0 <Reset_PID_Integrator>
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000348 	.word	0x20000348
 80035ec:	20000380 	.word	0x20000380
 80035f0:	200003b8 	.word	0x200003b8
 80035f4:	200003f0 	.word	0x200003f0
 80035f8:	20000428 	.word	0x20000428
 80035fc:	20000460 	.word	0x20000460

08003600 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	ed93 7a00 	vldr	s14, [r3]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	edd3 6a00 	vldr	s13, [r3]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800362c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3308      	adds	r3, #8
 8003634:	edd3 6a00 	vldr	s13, [r3]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3308      	adds	r3, #8
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	330c      	adds	r3, #12
 800364c:	edd3 6a00 	vldr	s13, [r3]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	330c      	adds	r3, #12
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003660:	eeb0 0a67 	vmov.f32	s0, s15
 8003664:	f000 f90e 	bl	8003884 <invSqrt>
 8003668:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	ed97 7a07 	vldr	s14, [r7, #28]
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ed97 7a07 	vldr	s14, [r7, #28]
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3308      	adds	r3, #8
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	ed97 7a07 	vldr	s14, [r7, #28]
 800369e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a2:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	330c      	adds	r3, #12
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 80036ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80036be:	edd7 7a04 	vldr	s15, [r7, #16]
 80036c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80036ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80036da:	edd7 7a06 	vldr	s15, [r7, #24]
 80036de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80036e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80036f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80036fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003706:	eef0 0a67 	vmov.f32	s1, s15
 800370a:	eeb0 0a66 	vmov.f32	s0, s13
 800370e:	f00b fe29 	bl	800f364 <atan2f>
 8003712:	eef0 7a40 	vmov.f32	s15, s0
 8003716:	4b55      	ldr	r3, [pc, #340]	; (800386c <Quaternion_Update+0x26c>)
 8003718:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 800371c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003720:	edd7 7a03 	vldr	s15, [r7, #12]
 8003724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003728:	edd7 6a06 	vldr	s13, [r7, #24]
 800372c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003738:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800373c:	eeb0 0a67 	vmov.f32	s0, s15
 8003740:	f00b fde4 	bl	800f30c <asinf>
 8003744:	eef0 7a40 	vmov.f32	s15, s0
 8003748:	eef1 7a67 	vneg.f32	s15, s15
 800374c:	4b48      	ldr	r3, [pc, #288]	; (8003870 <Quaternion_Update+0x270>)
 800374e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8003752:	ed97 7a06 	vldr	s14, [r7, #24]
 8003756:	edd7 7a05 	vldr	s15, [r7, #20]
 800375a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003762:	edd7 7a03 	vldr	s15, [r7, #12]
 8003766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003772:	edd7 7a06 	vldr	s15, [r7, #24]
 8003776:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800377a:	edd7 7a05 	vldr	s15, [r7, #20]
 800377e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003782:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003786:	edd7 7a04 	vldr	s15, [r7, #16]
 800378a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800378e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003792:	edd7 7a03 	vldr	s15, [r7, #12]
 8003796:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800379a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379e:	eef0 0a67 	vmov.f32	s1, s15
 80037a2:	eeb0 0a66 	vmov.f32	s0, s13
 80037a6:	f00b fddd 	bl	800f364 <atan2f>
 80037aa:	eef0 7a40 	vmov.f32	s15, s0
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <Quaternion_Update+0x274>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <Quaternion_Update+0x26c>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003878 <Quaternion_Update+0x278>
 80037be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <Quaternion_Update+0x26c>)
 80037c4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <Quaternion_Update+0x270>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003878 <Quaternion_Update+0x278>
 80037d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <Quaternion_Update+0x270>)
 80037d8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <Quaternion_Update+0x274>)
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003878 <Quaternion_Update+0x278>
 80037e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <Quaternion_Update+0x274>)
 80037ec:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <Quaternion_Update+0x274>)
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fe:	db0a      	blt.n	8003816 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <Quaternion_Update+0x274>)
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800387c <Quaternion_Update+0x27c>
 800380a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <Quaternion_Update+0x274>)
 8003810:	edc3 7a00 	vstr	s15, [r3]
 8003814:	e007      	b.n	8003826 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <Quaternion_Update+0x274>)
 8003818:	edd3 7a00 	vldr	s15, [r3]
 800381c:	eef1 7a67 	vneg.f32	s15, s15
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <Quaternion_Update+0x274>)
 8003822:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <Quaternion_Update+0x26c>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003834:	db0a      	blt.n	800384c <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <Quaternion_Update+0x26c>)
 8003838:	edd3 7a00 	vldr	s15, [r3]
 800383c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003880 <Quaternion_Update+0x280>
 8003840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <Quaternion_Update+0x26c>)
 8003846:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 800384a:	e00b      	b.n	8003864 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <Quaternion_Update+0x26c>)
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003880 <Quaternion_Update+0x280>
 8003856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800385a:	eef1 7a67 	vneg.f32	s15, s15
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <Quaternion_Update+0x26c>)
 8003860:	edc3 7a00 	vstr	s15, [r3]
}
 8003864:	bf00      	nop
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	2000049c 	.word	0x2000049c
 8003870:	20000498 	.word	0x20000498
 8003874:	200004a0 	.word	0x200004a0
 8003878:	42652ee1 	.word	0x42652ee1
 800387c:	43b40000 	.word	0x43b40000
 8003880:	43340000 	.word	0x43340000

08003884 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800388e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003892:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800389a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80038a2:	f107 0310 	add.w	r3, r7, #16
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	105a      	asrs	r2, r3, #1
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <invSqrt+0x74>)
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80038bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80038c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80038cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80038d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80038dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	ee07 3a90 	vmov	s15, r3
}
 80038ea:	eeb0 0a67 	vmov.f32	s0, s15
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	5f3759df 	.word	0x5f3759df

080038fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003902:	463b      	mov	r3, r7
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <MX_ADC1_Init+0x98>)
 8003910:	4a21      	ldr	r2, [pc, #132]	; (8003998 <MX_ADC1_Init+0x9c>)
 8003912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <MX_ADC1_Init+0x98>)
 8003916:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800391a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <MX_ADC1_Init+0x98>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <MX_ADC1_Init+0x98>)
 8003924:	2200      	movs	r2, #0
 8003926:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <MX_ADC1_Init+0x98>)
 800392a:	2201      	movs	r2, #1
 800392c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <MX_ADC1_Init+0x98>)
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <MX_ADC1_Init+0x98>)
 8003938:	2200      	movs	r2, #0
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800393c:	4b15      	ldr	r3, [pc, #84]	; (8003994 <MX_ADC1_Init+0x98>)
 800393e:	4a17      	ldr	r2, [pc, #92]	; (800399c <MX_ADC1_Init+0xa0>)
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <MX_ADC1_Init+0x98>)
 8003944:	2200      	movs	r2, #0
 8003946:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <MX_ADC1_Init+0x98>)
 800394a:	2201      	movs	r2, #1
 800394c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <MX_ADC1_Init+0x98>)
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003956:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <MX_ADC1_Init+0x98>)
 8003958:	2201      	movs	r2, #1
 800395a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800395c:	480d      	ldr	r0, [pc, #52]	; (8003994 <MX_ADC1_Init+0x98>)
 800395e:	f003 fe2b 	bl	80075b8 <HAL_ADC_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003968:	f002 fbad 	bl	80060c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800396c:	2308      	movs	r3, #8
 800396e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003970:	2301      	movs	r3, #1
 8003972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003974:	2307      	movs	r3, #7
 8003976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003978:	463b      	mov	r3, r7
 800397a:	4619      	mov	r1, r3
 800397c:	4805      	ldr	r0, [pc, #20]	; (8003994 <MX_ADC1_Init+0x98>)
 800397e:	f003 ff8d 	bl	800789c <HAL_ADC_ConfigChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003988:	f002 fb9d 	bl	80060c6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200004a4 	.word	0x200004a4
 8003998:	40012000 	.word	0x40012000
 800399c:	0f000001 	.word	0x0f000001

080039a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <HAL_ADC_MspInit+0xd8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d156      	bne.n	8003a70 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_ADC_MspInit+0xdc>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <HAL_ADC_MspInit+0xdc>)
 80039cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d0:	6453      	str	r3, [r2, #68]	; 0x44
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_ADC_MspInit+0xdc>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <HAL_ADC_MspInit+0xdc>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <HAL_ADC_MspInit+0xdc>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <HAL_ADC_MspInit+0xdc>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039fa:	2301      	movs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fe:	2303      	movs	r3, #3
 8003a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	481c      	ldr	r0, [pc, #112]	; (8003a80 <HAL_ADC_MspInit+0xe0>)
 8003a0e:	f004 fef9 	bl	8008804 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003a12:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_ADC_MspInit+0xe8>)
 8003a16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a24:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a46:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a54:	480b      	ldr	r0, [pc, #44]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a56:	f004 fad3 	bl	8008000 <HAL_DMA_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003a60:	f002 fb31 	bl	80060c6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
 8003a6a:	4a06      	ldr	r2, [pc, #24]	; (8003a84 <HAL_ADC_MspInit+0xe4>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003a70:	bf00      	nop
 8003a72:	3728      	adds	r7, #40	; 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40012000 	.word	0x40012000
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020400 	.word	0x40020400
 8003a84:	200004ec 	.word	0x200004ec
 8003a88:	40026410 	.word	0x40026410

08003a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <MX_DMA_Init+0x3c>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <MX_DMA_Init+0x3c>)
 8003a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <MX_DMA_Init+0x3c>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	2038      	movs	r0, #56	; 0x38
 8003ab4:	f004 fa6d 	bl	8007f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003ab8:	2038      	movs	r0, #56	; 0x38
 8003aba:	f004 fa86 	bl	8007fca <HAL_NVIC_EnableIRQ>

}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <LL_GPIO_SetOutputPin>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	619a      	str	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_GPIO_ResetOutputPin>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	041a      	lsls	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	619a      	str	r2, [r3, #24]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <LL_AHB1_GRP1_EnableClock>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003b10:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b14:	4907      	ldr	r1, [pc, #28]	; (8003b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4013      	ands	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b26:	68fb      	ldr	r3, [r7, #12]
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40023800 	.word	0x40023800

08003b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3e:	463b      	mov	r3, r7
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
 8003b4c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003b4e:	2004      	movs	r0, #4
 8003b50:	f7ff ffda 	bl	8003b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8003b54:	2080      	movs	r0, #128	; 0x80
 8003b56:	f7ff ffd7 	bl	8003b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	f7ff ffd4 	bl	8003b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003b60:	2002      	movs	r0, #2
 8003b62:	f7ff ffd1 	bl	8003b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003b66:	2008      	movs	r0, #8
 8003b68:	f7ff ffce 	bl	8003b08 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b70:	482e      	ldr	r0, [pc, #184]	; (8003c2c <MX_GPIO_Init+0xf4>)
 8003b72:	f7ff ffab 	bl	8003acc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8003b76:	f240 2117 	movw	r1, #535	; 0x217
 8003b7a:	482c      	ldr	r0, [pc, #176]	; (8003c2c <MX_GPIO_Init+0xf4>)
 8003b7c:	f7ff ffb4 	bl	8003ae8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8003b80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003b84:	482a      	ldr	r0, [pc, #168]	; (8003c30 <MX_GPIO_Init+0xf8>)
 8003b86:	f7ff ffaf 	bl	8003ae8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8003b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b8e:	4829      	ldr	r0, [pc, #164]	; (8003c34 <MX_GPIO_Init+0xfc>)
 8003b90:	f7ff ffaa 	bl	8003ae8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8003b94:	f242 2317 	movw	r3, #8727	; 0x2217
 8003b98:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003baa:	463b      	mov	r3, r7
 8003bac:	4619      	mov	r1, r3
 8003bae:	481f      	ldr	r0, [pc, #124]	; (8003c2c <MX_GPIO_Init+0xf4>)
 8003bb0:	f007 fddd 	bl	800b76e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8003bb4:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003bb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4819      	ldr	r0, [pc, #100]	; (8003c2c <MX_GPIO_Init+0xf4>)
 8003bc8:	f007 fdd1 	bl	800b76e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8003bcc:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003bd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be2:	463b      	mov	r3, r7
 8003be4:	4619      	mov	r1, r3
 8003be6:	4812      	ldr	r0, [pc, #72]	; (8003c30 <MX_GPIO_Init+0xf8>)
 8003be8:	f007 fdc1 	bl	800b76e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c02:	463b      	mov	r3, r7
 8003c04:	4619      	mov	r1, r3
 8003c06:	480b      	ldr	r0, [pc, #44]	; (8003c34 <MX_GPIO_Init+0xfc>)
 8003c08:	f007 fdb1 	bl	800b76e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003c10:	2300      	movs	r3, #0
 8003c12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	463b      	mov	r3, r7
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4804      	ldr	r0, [pc, #16]	; (8003c30 <MX_GPIO_Init+0xf8>)
 8003c1e:	f007 fda6 	bl	800b76e <LL_GPIO_Init>

}
 8003c22:	bf00      	nop
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40020800 	.word	0x40020800
 8003c30:	40020400 	.word	0x40020400
 8003c34:	40020000 	.word	0x40020000

08003c38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c3e:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <MX_I2C1_Init+0x54>)
 8003c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c44:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <MX_I2C1_Init+0x58>)
 8003c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c74:	4804      	ldr	r0, [pc, #16]	; (8003c88 <MX_I2C1_Init+0x50>)
 8003c76:	f004 ff61 	bl	8008b3c <HAL_I2C_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c80:	f002 fa21 	bl	80060c6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	2000054c 	.word	0x2000054c
 8003c8c:	40005400 	.word	0x40005400
 8003c90:	00061a80 	.word	0x00061a80

08003c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_I2C_MspInit+0x84>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d12c      	bne.n	8003d10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <HAL_I2C_MspInit+0x88>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <HAL_I2C_MspInit+0x88>)
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_I2C_MspInit+0x88>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd8:	2312      	movs	r3, #18
 8003cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	4619      	mov	r1, r3
 8003cee:	480c      	ldr	r0, [pc, #48]	; (8003d20 <HAL_I2C_MspInit+0x8c>)
 8003cf0:	f004 fd88 	bl	8008804 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_I2C_MspInit+0x88>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <HAL_I2C_MspInit+0x88>)
 8003cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_I2C_MspInit+0x88>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003d10:	bf00      	nop
 8003d12:	3728      	adds	r7, #40	; 0x28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40005400 	.word	0x40005400
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40020400 	.word	0x40020400

08003d24 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f043 0201 	orr.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_USART_IsActiveFlag_TXE>:
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_USART_EnableIT_RXNE>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f043 0320 	orr.w	r3, r3, #32
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	330c      	adds	r3, #12
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	61ba      	str	r2, [r7, #24]
 8003df6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6979      	ldr	r1, [r7, #20]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	613b      	str	r3, [r7, #16]
   return(result);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e7      	bne.n	8003dd8 <LL_USART_EnableIT_RXNE+0x8>
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3724      	adds	r7, #36	; 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_USART_TransmitData8>:
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	605a      	str	r2, [r3, #4]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_GPIO_SetOutputPin>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	619a      	str	r2, [r3, #24]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_GPIO_ResetOutputPin>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	619a      	str	r2, [r3, #24]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4013      	ands	r3, r2
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	43d9      	mvns	r1, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	400b      	ands	r3, r1
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	619a      	str	r2, [r3, #24]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_write>:
#include "PID control.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e011      	b.n	8003ed6 <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8003eb2:	bf00      	nop
 8003eb4:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <_write+0x48>)
 8003eb6:	f7ff ff78 	bl	8003daa <LL_USART_IsActiveFlag_TXE>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f9      	beq.n	8003eb4 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p + i));
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <_write+0x48>)
 8003ecc:	f7ff ffa3 	bl	8003e16 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++){
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dbe9      	blt.n	8003eb2 <_write+0x12>
	}
	return len;
 8003ede:	687b      	ldr	r3, [r7, #4]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40011400 	.word	0x40011400

08003eec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b090      	sub	sp, #64	; 0x40
 8003ef0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	float Q[4];
	float quatRadianAccuracy;

	unsigned short adcVal;
	short gyro_x_offset =12, gyro_y_offset = 16, gyro_z_offset = 9;
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	843b      	strh	r3, [r7, #32]
 8003efa:	2309      	movs	r3, #9
 8003efc:	83fb      	strh	r3, [r7, #30]
	unsigned char motor_arming_flag = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	unsigned short iBus_SwA_Prev = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	87bb      	strh	r3, [r7, #60]	; 0x3c
	unsigned char iBus_rx_cnt = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003f0e:	f003 fabd 	bl	800748c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003f12:	f001 fb8d 	bl	8005630 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003f16:	f7ff fe0f 	bl	8003b38 <MX_GPIO_Init>
	MX_DMA_Init();
 8003f1a:	f7ff fdb7 	bl	8003a8c <MX_DMA_Init>
	MX_TIM3_Init();
 8003f1e:	f002 fe91 	bl	8006c44 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8003f22:	f003 f9d9 	bl	80072d8 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 8003f26:	f002 f981 	bl	800622c <MX_SPI2_Init>
	MX_SPI1_Init();
 8003f2a:	f002 f92d 	bl	8006188 <MX_SPI1_Init>
	MX_SPI3_Init();
 8003f2e:	f002 f9d1 	bl	80062d4 <MX_SPI3_Init>
	MX_UART4_Init();
 8003f32:	f003 f8cd 	bl	80070d0 <MX_UART4_Init>
	MX_UART5_Init();
 8003f36:	f003 f92d 	bl	8007194 <MX_UART5_Init>
	MX_TIM5_Init();
 8003f3a:	f002 fef5 	bl	8006d28 <MX_TIM5_Init>
	MX_I2C1_Init();
 8003f3e:	f7ff fe7b 	bl	8003c38 <MX_I2C1_Init>
	MX_ADC1_Init();
 8003f42:	f7ff fcdb 	bl	80038fc <MX_ADC1_Init>
	MX_TIM7_Init();
 8003f46:	f002 ff91 	bl	8006e6c <MX_TIM7_Init>
	MX_USART1_UART_Init();
 8003f4a:	f003 f99b 	bl	8007284 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	LL_TIM_EnableCounter(TIM3);//Buzzer
 8003f4e:	488c      	ldr	r0, [pc, #560]	; (8004180 <main+0x294>)
 8003f50:	f7ff fee8 	bl	8003d24 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(TIM7);
 8003f54:	488b      	ldr	r0, [pc, #556]	; (8004184 <main+0x298>)
 8003f56:	f7ff fee5 	bl	8003d24 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM7);
 8003f5a:	488a      	ldr	r0, [pc, #552]	; (8004184 <main+0x298>)
 8003f5c:	f7ff ff15 	bl	8003d8a <LL_TIM_EnableIT_UPDATE>

	LL_USART_EnableIT_RXNE(USART6);//Debug UART
 8003f60:	4889      	ldr	r0, [pc, #548]	; (8004188 <main+0x29c>)
 8003f62:	f7ff ff35 	bl	8003dd0 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART4);//GPS
 8003f66:	4889      	ldr	r0, [pc, #548]	; (800418c <main+0x2a0>)
 8003f68:	f7ff ff32 	bl	8003dd0 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART5);//FS-iA6B
 8003f6c:	4888      	ldr	r0, [pc, #544]	; (8004190 <main+0x2a4>)
 8003f6e:	f7ff ff2f 	bl	8003dd0 <LL_USART_EnableIT_RXNE>

	LL_TIM_EnableCounter(TIM5);//Motor ADC
 8003f72:	4888      	ldr	r0, [pc, #544]	; (8004194 <main+0x2a8>)
 8003f74:	f7ff fed6 	bl	8003d24 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4886      	ldr	r0, [pc, #536]	; (8004194 <main+0x2a8>)
 8003f7c:	f7ff fee2 	bl	8003d44 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003f80:	2110      	movs	r1, #16
 8003f82:	4884      	ldr	r0, [pc, #528]	; (8004194 <main+0x2a8>)
 8003f84:	f7ff fede 	bl	8003d44 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f8c:	4881      	ldr	r0, [pc, #516]	; (8004194 <main+0x2a8>)
 8003f8e:	f7ff fed9 	bl	8003d44 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f96:	487f      	ldr	r0, [pc, #508]	; (8004194 <main+0x2a8>)
 8003f98:	f7ff fed4 	bl	8003d44 <LL_TIM_CC_EnableChannel>

	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);//Battery ADC
 8003f9c:	1dbb      	adds	r3, r7, #6
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	487d      	ldr	r0, [pc, #500]	; (8004198 <main+0x2ac>)
 8003fa4:	f003 fb4c 	bl	8007640 <HAL_ADC_Start_DMA>

	TIM3->PSC = 1000;
 8003fa8:	4b75      	ldr	r3, [pc, #468]	; (8004180 <main+0x294>)
 8003faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fb4:	4872      	ldr	r0, [pc, #456]	; (8004180 <main+0x294>)
 8003fb6:	f7ff fec5 	bl	8003d44 <LL_TIM_CC_EnableChannel>
	HAL_Delay(60);
 8003fba:	203c      	movs	r0, #60	; 0x3c
 8003fbc:	f003 fad8 	bl	8007570 <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fc4:	486e      	ldr	r0, [pc, #440]	; (8004180 <main+0x294>)
 8003fc6:	f7ff fece 	bl	8003d66 <LL_TIM_CC_DisableChannel>
	HAL_Delay(60);
 8003fca:	203c      	movs	r0, #60	; 0x3c
 8003fcc:	f003 fad0 	bl	8007570 <HAL_Delay>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fd4:	486a      	ldr	r0, [pc, #424]	; (8004180 <main+0x294>)
 8003fd6:	f7ff feb5 	bl	8003d44 <LL_TIM_CC_EnableChannel>
	HAL_Delay(60);
 8003fda:	203c      	movs	r0, #60	; 0x3c
 8003fdc:	f003 fac8 	bl	8007570 <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe4:	4866      	ldr	r0, [pc, #408]	; (8004180 <main+0x294>)
 8003fe6:	f7ff febe 	bl	8003d66 <LL_TIM_CC_DisableChannel>
	HAL_Delay(60);
 8003fea:	203c      	movs	r0, #60	; 0x3c
 8003fec:	f003 fac0 	bl	8007570 <HAL_Delay>
	printf("Checking Sensor connection.\n");
 8003ff0:	486a      	ldr	r0, [pc, #424]	; (800419c <main+0x2b0>)
 8003ff2:	f009 f8d9 	bl	800d1a8 <puts>

	if(BNO080_Initialization() != 0)
 8003ff6:	f7fd fa8f 	bl	8001518 <BNO080_Initialization>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d03a      	beq.n	8004076 <main+0x18a>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004004:	485e      	ldr	r0, [pc, #376]	; (8004180 <main+0x294>)
 8004006:	f7ff fe9d 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <main+0x294>)
 800400c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004010:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8004012:	2064      	movs	r0, #100	; 0x64
 8004014:	f003 faac 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 1500;
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <main+0x294>)
 800401a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8004020:	2064      	movs	r0, #100	; 0x64
 8004022:	f003 faa5 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 8004026:	4b56      	ldr	r3, [pc, #344]	; (8004180 <main+0x294>)
 8004028:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800402c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 800402e:	2064      	movs	r0, #100	; 0x64
 8004030:	f003 fa9e 	bl	8007570 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004038:	4851      	ldr	r0, [pc, #324]	; (8004180 <main+0x294>)
 800403a:	f7ff fe94 	bl	8003d66 <LL_TIM_CC_DisableChannel>

		printf("\nBNO080 failed. Program shutting down...");
 800403e:	4858      	ldr	r0, [pc, #352]	; (80041a0 <main+0x2b4>)
 8004040:	f009 f82c 	bl	800d09c <iprintf>

		while(1)
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004048:	484d      	ldr	r0, [pc, #308]	; (8004180 <main+0x294>)
 800404a:	f7ff fe8c 	bl	8003d66 <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 800404e:	2101      	movs	r1, #1
 8004050:	4854      	ldr	r0, [pc, #336]	; (80041a4 <main+0x2b8>)
 8004052:	f7ff ff0c 	bl	8003e6e <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8004056:	20c8      	movs	r0, #200	; 0xc8
 8004058:	f003 fa8a 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800405c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004060:	4847      	ldr	r0, [pc, #284]	; (8004180 <main+0x294>)
 8004062:	f7ff fe6f 	bl	8003d44 <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004066:	2101      	movs	r1, #1
 8004068:	484e      	ldr	r0, [pc, #312]	; (80041a4 <main+0x2b8>)
 800406a:	f7ff ff00 	bl	8003e6e <LL_GPIO_TogglePin>
			HAL_Delay(200);
 800406e:	20c8      	movs	r0, #200	; 0xc8
 8004070:	f003 fa7e 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004074:	e7e6      	b.n	8004044 <main+0x158>
		}
	}
	//BNO080_enableRotationVector(2500);
	BNO080_enableGameRotationVector(2500);
 8004076:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800407a:	f7fd fd8c 	bl	8001b96 <BNO080_enableGameRotationVector>

	if(ICM20602_Initialization() != 0)
 800407e:	f7fe fa2b 	bl	80024d8 <ICM20602_Initialization>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03a      	beq.n	80040fe <main+0x212>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800408c:	483c      	ldr	r0, [pc, #240]	; (8004180 <main+0x294>)
 800408e:	f7ff fe59 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <main+0x294>)
 8004094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 800409a:	2064      	movs	r0, #100	; 0x64
 800409c:	f003 fa68 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 1500;
 80040a0:	4b37      	ldr	r3, [pc, #220]	; (8004180 <main+0x294>)
 80040a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 80040a8:	2064      	movs	r0, #100	; 0x64
 80040aa:	f003 fa61 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 80040ae:	4b34      	ldr	r3, [pc, #208]	; (8004180 <main+0x294>)
 80040b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 80040b6:	2064      	movs	r0, #100	; 0x64
 80040b8:	f003 fa5a 	bl	8007570 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040c0:	482f      	ldr	r0, [pc, #188]	; (8004180 <main+0x294>)
 80040c2:	f7ff fe50 	bl	8003d66 <LL_TIM_CC_DisableChannel>

		printf("\nICM-20602 failed. Program shutting down...");
 80040c6:	4838      	ldr	r0, [pc, #224]	; (80041a8 <main+0x2bc>)
 80040c8:	f008 ffe8 	bl	800d09c <iprintf>

		while(1)
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040d0:	482b      	ldr	r0, [pc, #172]	; (8004180 <main+0x294>)
 80040d2:	f7ff fe48 	bl	8003d66 <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80040d6:	2102      	movs	r1, #2
 80040d8:	4832      	ldr	r0, [pc, #200]	; (80041a4 <main+0x2b8>)
 80040da:	f7ff fec8 	bl	8003e6e <LL_GPIO_TogglePin>
			HAL_Delay(200);
 80040de:	20c8      	movs	r0, #200	; 0xc8
 80040e0:	f003 fa46 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e8:	4825      	ldr	r0, [pc, #148]	; (8004180 <main+0x294>)
 80040ea:	f7ff fe2b 	bl	8003d44 <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80040ee:	2102      	movs	r1, #2
 80040f0:	482c      	ldr	r0, [pc, #176]	; (80041a4 <main+0x2b8>)
 80040f2:	f7ff febc 	bl	8003e6e <LL_GPIO_TogglePin>
			HAL_Delay(200);
 80040f6:	20c8      	movs	r0, #200	; 0xc8
 80040f8:	f003 fa3a 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040fc:	e7e6      	b.n	80040cc <main+0x1e0>
		}
	}

	if(LPS22HH_Initialization() != 0)
 80040fe:	f7fe fc77 	bl	80029f0 <LPS22HH_Initialization>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d053      	beq.n	80041b0 <main+0x2c4>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800410c:	481c      	ldr	r0, [pc, #112]	; (8004180 <main+0x294>)
 800410e:	f7ff fe19 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <main+0x294>)
 8004114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 800411a:	2064      	movs	r0, #100	; 0x64
 800411c:	f003 fa28 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 1500;
 8004120:	4b17      	ldr	r3, [pc, #92]	; (8004180 <main+0x294>)
 8004122:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8004128:	2064      	movs	r0, #100	; 0x64
 800412a:	f003 fa21 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <main+0x294>)
 8004130:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004134:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8004136:	2064      	movs	r0, #100	; 0x64
 8004138:	f003 fa1a 	bl	8007570 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800413c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004140:	480f      	ldr	r0, [pc, #60]	; (8004180 <main+0x294>)
 8004142:	f7ff fe10 	bl	8003d66 <LL_TIM_CC_DisableChannel>

		printf("\nLPS22HH failed. Program shutting down...");
 8004146:	4819      	ldr	r0, [pc, #100]	; (80041ac <main+0x2c0>)
 8004148:	f008 ffa8 	bl	800d09c <iprintf>

		while(1)
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800414c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004150:	480b      	ldr	r0, [pc, #44]	; (8004180 <main+0x294>)
 8004152:	f7ff fe08 	bl	8003d66 <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004156:	2104      	movs	r1, #4
 8004158:	4812      	ldr	r0, [pc, #72]	; (80041a4 <main+0x2b8>)
 800415a:	f7ff fe88 	bl	8003e6e <LL_GPIO_TogglePin>
			HAL_Delay(200);
 800415e:	20c8      	movs	r0, #200	; 0xc8
 8004160:	f003 fa06 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004168:	4805      	ldr	r0, [pc, #20]	; (8004180 <main+0x294>)
 800416a:	f7ff fdeb 	bl	8003d44 <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800416e:	2104      	movs	r1, #4
 8004170:	480c      	ldr	r0, [pc, #48]	; (80041a4 <main+0x2b8>)
 8004172:	f7ff fe7c 	bl	8003e6e <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8004176:	20c8      	movs	r0, #200	; 0xc8
 8004178:	f003 f9fa 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800417c:	e7e6      	b.n	800414c <main+0x260>
 800417e:	bf00      	nop
 8004180:	40000400 	.word	0x40000400
 8004184:	40001400 	.word	0x40001400
 8004188:	40011400 	.word	0x40011400
 800418c:	40004c00 	.word	0x40004c00
 8004190:	40005000 	.word	0x40005000
 8004194:	40000c00 	.word	0x40000c00
 8004198:	200004a4 	.word	0x200004a4
 800419c:	08010160 	.word	0x08010160
 80041a0:	0801017c 	.word	0x0801017c
 80041a4:	40020800 	.word	0x40020800
 80041a8:	080101a8 	.word	0x080101a8
 80041ac:	080101d4 	.word	0x080101d4
		}
	}
	printf("All Sensor OK!\n");
 80041b0:	48c0      	ldr	r0, [pc, #768]	; (80044b4 <main+0x5c8>)
 80041b2:	f008 fff9 	bl	800d1a8 <puts>
	M8N_Initialzation();
 80041b6:	f7fe fe8f 	bl	8002ed8 <M8N_Initialzation>

	ICM20602_Writebyte(0x13, (gyro_x_offset * -2)>>8);
 80041ba:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80041be:	4613      	mov	r3, r2
 80041c0:	07db      	lsls	r3, r3, #31
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	121b      	asrs	r3, r3, #8
 80041c8:	4619      	mov	r1, r3
 80041ca:	2013      	movs	r0, #19
 80041cc:	f7fe f962 	bl	8002494 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 80041d0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80041d4:	4613      	mov	r3, r2
 80041d6:	07db      	lsls	r3, r3, #31
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4619      	mov	r1, r3
 80041de:	2014      	movs	r0, #20
 80041e0:	f7fe f958 	bl	8002494 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset * -2)>>8);
 80041e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80041e8:	4613      	mov	r3, r2
 80041ea:	07db      	lsls	r3, r3, #31
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	121b      	asrs	r3, r3, #8
 80041f2:	4619      	mov	r1, r3
 80041f4:	2015      	movs	r0, #21
 80041f6:	f7fe f94d 	bl	8002494 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 80041fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80041fe:	4613      	mov	r3, r2
 8004200:	07db      	lsls	r3, r3, #31
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4619      	mov	r1, r3
 8004208:	2016      	movs	r0, #22
 800420a:	f7fe f943 	bl	8002494 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_z_offset * -2)>>8);
 800420e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004212:	4613      	mov	r3, r2
 8004214:	07db      	lsls	r3, r3, #31
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	121b      	asrs	r3, r3, #8
 800421c:	4619      	mov	r1, r3
 800421e:	2017      	movs	r0, #23
 8004220:	f7fe f938 	bl	8002494 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_z_offset * -2));
 8004224:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004228:	4613      	mov	r3, r2
 800422a:	07db      	lsls	r3, r3, #31
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4619      	mov	r1, r3
 8004232:	2018      	movs	r0, #24
 8004234:	f7fe f92e 	bl	8002494 <ICM20602_Writebyte>

	printf("Loading PID Gain...\n");
 8004238:	489f      	ldr	r0, [pc, #636]	; (80044b8 <main+0x5cc>)
 800423a:	f008 ffb5 	bl	800d1a8 <puts>


	if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 800423e:	4b9f      	ldr	r3, [pc, #636]	; (80044bc <main+0x5d0>)
 8004240:	4a9f      	ldr	r2, [pc, #636]	; (80044c0 <main+0x5d4>)
 8004242:	49a0      	ldr	r1, [pc, #640]	; (80044c4 <main+0x5d8>)
 8004244:	2000      	movs	r0, #0
 8004246:	f7fc ff45 	bl	80010d4 <EP_PIDGain_Read>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d12c      	bne.n	80042aa <main+0x3be>
			EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8004250:	4b9d      	ldr	r3, [pc, #628]	; (80044c8 <main+0x5dc>)
 8004252:	4a9e      	ldr	r2, [pc, #632]	; (80044cc <main+0x5e0>)
 8004254:	499e      	ldr	r1, [pc, #632]	; (80044d0 <main+0x5e4>)
 8004256:	2001      	movs	r0, #1
 8004258:	f7fc ff3c 	bl	80010d4 <EP_PIDGain_Read>
 800425c:	4603      	mov	r3, r0
	if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 800425e:	2b00      	cmp	r3, #0
 8004260:	d123      	bne.n	80042aa <main+0x3be>
			EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 8004262:	4b9c      	ldr	r3, [pc, #624]	; (80044d4 <main+0x5e8>)
 8004264:	4a9c      	ldr	r2, [pc, #624]	; (80044d8 <main+0x5ec>)
 8004266:	499d      	ldr	r1, [pc, #628]	; (80044dc <main+0x5f0>)
 8004268:	2002      	movs	r0, #2
 800426a:	f7fc ff33 	bl	80010d4 <EP_PIDGain_Read>
 800426e:	4603      	mov	r3, r0
			EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11a      	bne.n	80042aa <main+0x3be>
			EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 8004274:	4b9a      	ldr	r3, [pc, #616]	; (80044e0 <main+0x5f4>)
 8004276:	4a9b      	ldr	r2, [pc, #620]	; (80044e4 <main+0x5f8>)
 8004278:	499b      	ldr	r1, [pc, #620]	; (80044e8 <main+0x5fc>)
 800427a:	2003      	movs	r0, #3
 800427c:	f7fc ff2a 	bl	80010d4 <EP_PIDGain_Read>
 8004280:	4603      	mov	r3, r0
			EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 8004282:	2b00      	cmp	r3, #0
 8004284:	d111      	bne.n	80042aa <main+0x3be>
			EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 8004286:	4b99      	ldr	r3, [pc, #612]	; (80044ec <main+0x600>)
 8004288:	4a99      	ldr	r2, [pc, #612]	; (80044f0 <main+0x604>)
 800428a:	499a      	ldr	r1, [pc, #616]	; (80044f4 <main+0x608>)
 800428c:	2004      	movs	r0, #4
 800428e:	f7fc ff21 	bl	80010d4 <EP_PIDGain_Read>
 8004292:	4603      	mov	r3, r0
			EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 8004294:	2b00      	cmp	r3, #0
 8004296:	d108      	bne.n	80042aa <main+0x3be>
			EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd) != 0)
 8004298:	4b97      	ldr	r3, [pc, #604]	; (80044f8 <main+0x60c>)
 800429a:	4a98      	ldr	r2, [pc, #608]	; (80044fc <main+0x610>)
 800429c:	4998      	ldr	r1, [pc, #608]	; (8004500 <main+0x614>)
 800429e:	2005      	movs	r0, #5
 80042a0:	f7fc ff18 	bl	80010d4 <EP_PIDGain_Read>
 80042a4:	4603      	mov	r3, r0
			EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d026      	beq.n	80042f8 <main+0x40c>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80042aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042ae:	4895      	ldr	r0, [pc, #596]	; (8004504 <main+0x618>)
 80042b0:	f7ff fd48 	bl	8003d44 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 80042b4:	4b93      	ldr	r3, [pc, #588]	; (8004504 <main+0x618>)
 80042b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 80042bc:	2064      	movs	r0, #100	; 0x64
 80042be:	f003 f957 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 1500;
 80042c2:	4b90      	ldr	r3, [pc, #576]	; (8004504 <main+0x618>)
 80042c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 80042ca:	2064      	movs	r0, #100	; 0x64
 80042cc:	f003 f950 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 80042d0:	4b8c      	ldr	r3, [pc, #560]	; (8004504 <main+0x618>)
 80042d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 80042d8:	2064      	movs	r0, #100	; 0x64
 80042da:	f003 f949 	bl	8007570 <HAL_Delay>

		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80042de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042e2:	4888      	ldr	r0, [pc, #544]	; (8004504 <main+0x618>)
 80042e4:	f7ff fd3f 	bl	8003d66 <LL_TIM_CC_DisableChannel>

		HAL_Delay(500);
 80042e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042ec:	f003 f940 	bl	8007570 <HAL_Delay>
		printf("\nCouldn't load PID gain.\n");
 80042f0:	4885      	ldr	r0, [pc, #532]	; (8004508 <main+0x61c>)
 80042f2:	f008 ff59 	bl	800d1a8 <puts>
 80042f6:	e098      	b.n	800442a <main+0x53e>
	}
	else
	{
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 80042f8:	4b72      	ldr	r3, [pc, #456]	; (80044c4 <main+0x5d8>)
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	4b71      	ldr	r3, [pc, #452]	; (80044c4 <main+0x5d8>)
 8004300:	ed93 7a01 	vldr	s14, [r3, #4]
 8004304:	4b6f      	ldr	r3, [pc, #444]	; (80044c4 <main+0x5d8>)
 8004306:	edd3 6a02 	vldr	s13, [r3, #8]
 800430a:	eeb0 1a66 	vmov.f32	s2, s13
 800430e:	eef0 0a47 	vmov.f32	s1, s14
 8004312:	eeb0 0a67 	vmov.f32	s0, s15
 8004316:	2100      	movs	r1, #0
 8004318:	487c      	ldr	r0, [pc, #496]	; (800450c <main+0x620>)
 800431a:	f001 fe81 	bl	8006020 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800431e:	230a      	movs	r3, #10
 8004320:	2214      	movs	r2, #20
 8004322:	497a      	ldr	r1, [pc, #488]	; (800450c <main+0x620>)
 8004324:	487a      	ldr	r0, [pc, #488]	; (8004510 <main+0x624>)
 8004326:	f006 f8ae 	bl	800a486 <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 800432a:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <main+0x5d8>)
 800432c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004330:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <main+0x5d8>)
 8004332:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8004336:	4b63      	ldr	r3, [pc, #396]	; (80044c4 <main+0x5d8>)
 8004338:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800433c:	eeb0 1a66 	vmov.f32	s2, s13
 8004340:	eef0 0a47 	vmov.f32	s1, s14
 8004344:	eeb0 0a67 	vmov.f32	s0, s15
 8004348:	2101      	movs	r1, #1
 800434a:	4870      	ldr	r0, [pc, #448]	; (800450c <main+0x620>)
 800434c:	f001 fe68 	bl	8006020 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004350:	230a      	movs	r3, #10
 8004352:	2214      	movs	r2, #20
 8004354:	496d      	ldr	r1, [pc, #436]	; (800450c <main+0x620>)
 8004356:	486e      	ldr	r0, [pc, #440]	; (8004510 <main+0x624>)
 8004358:	f006 f895 	bl	800a486 <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800435c:	4b5f      	ldr	r3, [pc, #380]	; (80044dc <main+0x5f0>)
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	4b5e      	ldr	r3, [pc, #376]	; (80044dc <main+0x5f0>)
 8004364:	ed93 7a01 	vldr	s14, [r3, #4]
 8004368:	4b5c      	ldr	r3, [pc, #368]	; (80044dc <main+0x5f0>)
 800436a:	edd3 6a02 	vldr	s13, [r3, #8]
 800436e:	eeb0 1a66 	vmov.f32	s2, s13
 8004372:	eef0 0a47 	vmov.f32	s1, s14
 8004376:	eeb0 0a67 	vmov.f32	s0, s15
 800437a:	2102      	movs	r1, #2
 800437c:	4863      	ldr	r0, [pc, #396]	; (800450c <main+0x620>)
 800437e:	f001 fe4f 	bl	8006020 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004382:	230a      	movs	r3, #10
 8004384:	2214      	movs	r2, #20
 8004386:	4961      	ldr	r1, [pc, #388]	; (800450c <main+0x620>)
 8004388:	4861      	ldr	r0, [pc, #388]	; (8004510 <main+0x624>)
 800438a:	f006 f87c 	bl	800a486 <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800438e:	4b53      	ldr	r3, [pc, #332]	; (80044dc <main+0x5f0>)
 8004390:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004394:	4b51      	ldr	r3, [pc, #324]	; (80044dc <main+0x5f0>)
 8004396:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800439a:	4b50      	ldr	r3, [pc, #320]	; (80044dc <main+0x5f0>)
 800439c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80043a0:	eeb0 1a66 	vmov.f32	s2, s13
 80043a4:	eef0 0a47 	vmov.f32	s1, s14
 80043a8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ac:	2103      	movs	r1, #3
 80043ae:	4857      	ldr	r0, [pc, #348]	; (800450c <main+0x620>)
 80043b0:	f001 fe36 	bl	8006020 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80043b4:	230a      	movs	r3, #10
 80043b6:	2214      	movs	r2, #20
 80043b8:	4954      	ldr	r1, [pc, #336]	; (800450c <main+0x620>)
 80043ba:	4855      	ldr	r0, [pc, #340]	; (8004510 <main+0x624>)
 80043bc:	f006 f863 	bl	800a486 <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80043c0:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <main+0x608>)
 80043c2:	edd3 7a00 	vldr	s15, [r3]
 80043c6:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <main+0x608>)
 80043c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80043cc:	4b49      	ldr	r3, [pc, #292]	; (80044f4 <main+0x608>)
 80043ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80043d2:	eeb0 1a66 	vmov.f32	s2, s13
 80043d6:	eef0 0a47 	vmov.f32	s1, s14
 80043da:	eeb0 0a67 	vmov.f32	s0, s15
 80043de:	2104      	movs	r1, #4
 80043e0:	484a      	ldr	r0, [pc, #296]	; (800450c <main+0x620>)
 80043e2:	f001 fe1d 	bl	8006020 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80043e6:	230a      	movs	r3, #10
 80043e8:	2214      	movs	r2, #20
 80043ea:	4948      	ldr	r1, [pc, #288]	; (800450c <main+0x620>)
 80043ec:	4848      	ldr	r0, [pc, #288]	; (8004510 <main+0x624>)
 80043ee:	f006 f84a 	bl	800a486 <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80043f2:	4b43      	ldr	r3, [pc, #268]	; (8004500 <main+0x614>)
 80043f4:	edd3 7a00 	vldr	s15, [r3]
 80043f8:	4b41      	ldr	r3, [pc, #260]	; (8004500 <main+0x614>)
 80043fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80043fe:	4b40      	ldr	r3, [pc, #256]	; (8004500 <main+0x614>)
 8004400:	edd3 6a02 	vldr	s13, [r3, #8]
 8004404:	eeb0 1a66 	vmov.f32	s2, s13
 8004408:	eef0 0a47 	vmov.f32	s1, s14
 800440c:	eeb0 0a67 	vmov.f32	s0, s15
 8004410:	2105      	movs	r1, #5
 8004412:	483e      	ldr	r0, [pc, #248]	; (800450c <main+0x620>)
 8004414:	f001 fe04 	bl	8006020 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004418:	230a      	movs	r3, #10
 800441a:	2214      	movs	r2, #20
 800441c:	493b      	ldr	r1, [pc, #236]	; (800450c <main+0x620>)
 800441e:	483c      	ldr	r0, [pc, #240]	; (8004510 <main+0x624>)
 8004420:	f006 f831 	bl	800a486 <HAL_UART_Transmit>
		printf("\nAll gains OK!\n\n");
 8004424:	483b      	ldr	r0, [pc, #236]	; (8004514 <main+0x628>)
 8004426:	f008 febf 	bl	800d1a8 <puts>
	}

	while(Is_iBus_Received() == 0){
 800442a:	e013      	b.n	8004454 <main+0x568>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800442c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004430:	4834      	ldr	r0, [pc, #208]	; (8004504 <main+0x618>)
 8004432:	f7ff fc87 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 3000;
 8004436:	4b33      	ldr	r3, [pc, #204]	; (8004504 <main+0x618>)
 8004438:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800443c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 800443e:	20c8      	movs	r0, #200	; 0xc8
 8004440:	f003 f896 	bl	8007570 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004448:	482e      	ldr	r0, [pc, #184]	; (8004504 <main+0x618>)
 800444a:	f7ff fc8c 	bl	8003d66 <LL_TIM_CC_DisableChannel>
		HAL_Delay(200);
 800444e:	20c8      	movs	r0, #200	; 0xc8
 8004450:	f003 f88e 	bl	8007570 <HAL_Delay>
	while(Is_iBus_Received() == 0){
 8004454:	f001 f9aa 	bl	80057ac <Is_iBus_Received>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0e6      	beq.n	800442c <main+0x540>
	}
	if(iBus.SwC == 2000)
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <main+0x62c>)
 8004460:	899b      	ldrh	r3, [r3, #12]
 8004462:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004466:	d179      	bne.n	800455c <main+0x670>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800446c:	4825      	ldr	r0, [pc, #148]	; (8004504 <main+0x618>)
 800446e:	f7ff fc69 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <main+0x618>)
 8004474:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 800447a:	20c8      	movs	r0, #200	; 0xc8
 800447c:	f003 f878 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 8004480:	4b20      	ldr	r3, [pc, #128]	; (8004504 <main+0x618>)
 8004482:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8004488:	20c8      	movs	r0, #200	; 0xc8
 800448a:	f003 f871 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 1500;
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <main+0x618>)
 8004490:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004494:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8004496:	20c8      	movs	r0, #200	; 0xc8
 8004498:	f003 f86a 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <main+0x618>)
 800449e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044a8:	4816      	ldr	r0, [pc, #88]	; (8004504 <main+0x618>)
 80044aa:	f7ff fc5c 	bl	8003d66 <LL_TIM_CC_DisableChannel>

		ESC_Calibration();
 80044ae:	f001 f94f 	bl	8005750 <ESC_Calibration>
		while(iBus.SwC != 1000) {
 80044b2:	e04d      	b.n	8004550 <main+0x664>
 80044b4:	08010200 	.word	0x08010200
 80044b8:	08010210 	.word	0x08010210
 80044bc:	20000350 	.word	0x20000350
 80044c0:	2000034c 	.word	0x2000034c
 80044c4:	20000348 	.word	0x20000348
 80044c8:	20000388 	.word	0x20000388
 80044cc:	20000384 	.word	0x20000384
 80044d0:	20000380 	.word	0x20000380
 80044d4:	200003c0 	.word	0x200003c0
 80044d8:	200003bc 	.word	0x200003bc
 80044dc:	200003b8 	.word	0x200003b8
 80044e0:	200003f8 	.word	0x200003f8
 80044e4:	200003f4 	.word	0x200003f4
 80044e8:	200003f0 	.word	0x200003f0
 80044ec:	20000430 	.word	0x20000430
 80044f0:	2000042c 	.word	0x2000042c
 80044f4:	20000428 	.word	0x20000428
 80044f8:	20000468 	.word	0x20000468
 80044fc:	20000464 	.word	0x20000464
 8004500:	20000460 	.word	0x20000460
 8004504:	40000400 	.word	0x40000400
 8004508:	08010224 	.word	0x08010224
 800450c:	200005a0 	.word	0x200005a0
 8004510:	20000648 	.word	0x20000648
 8004514:	08010240 	.word	0x08010240
 8004518:	200002c8 	.word	0x200002c8
			Is_iBus_Received();
 800451c:	f001 f946 	bl	80057ac <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004524:	4833      	ldr	r0, [pc, #204]	; (80045f4 <main+0x708>)
 8004526:	f7ff fc0d 	bl	8003d44 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 800452a:	4b32      	ldr	r3, [pc, #200]	; (80045f4 <main+0x708>)
 800452c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8004532:	20c8      	movs	r0, #200	; 0xc8
 8004534:	f003 f81c 	bl	8007570 <HAL_Delay>
			TIM3->PSC = 2000;
 8004538:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <main+0x708>)
 800453a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8004540:	20c8      	movs	r0, #200	; 0xc8
 8004542:	f003 f815 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800454a:	482a      	ldr	r0, [pc, #168]	; (80045f4 <main+0x708>)
 800454c:	f7ff fc0b 	bl	8003d66 <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000) {
 8004550:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <main+0x70c>)
 8004552:	899b      	ldrh	r3, [r3, #12]
 8004554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004558:	d1e0      	bne.n	800451c <main+0x630>
 800455a:	e063      	b.n	8004624 <main+0x738>
		}
	}
	else if(iBus.SwC == 1500)
 800455c:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <main+0x70c>)
 800455e:	899b      	ldrh	r3, [r3, #12]
 8004560:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004564:	4293      	cmp	r3, r2
 8004566:	d15d      	bne.n	8004624 <main+0x738>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800456c:	4821      	ldr	r0, [pc, #132]	; (80045f4 <main+0x708>)
 800456e:	f7ff fbe9 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <main+0x708>)
 8004574:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 800457a:	20c8      	movs	r0, #200	; 0xc8
 800457c:	f002 fff8 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <main+0x708>)
 8004582:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8004588:	20c8      	movs	r0, #200	; 0xc8
 800458a:	f002 fff1 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 1500;
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <main+0x708>)
 8004590:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8004596:	20c8      	movs	r0, #200	; 0xc8
 8004598:	f002 ffea 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 800459c:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <main+0x708>)
 800459e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a8:	4812      	ldr	r0, [pc, #72]	; (80045f4 <main+0x708>)
 80045aa:	f7ff fbdc 	bl	8003d66 <LL_TIM_CC_DisableChannel>

		BNO080_Calibration();
 80045ae:	f001 f91d 	bl	80057ec <BNO080_Calibration>
		while(iBus.SwC != 1000) {
 80045b2:	e019      	b.n	80045e8 <main+0x6fc>
			Is_iBus_Received();
 80045b4:	f001 f8fa 	bl	80057ac <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045bc:	480d      	ldr	r0, [pc, #52]	; (80045f4 <main+0x708>)
 80045be:	f7ff fbc1 	bl	8003d44 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <main+0x708>)
 80045c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 80045ca:	20c8      	movs	r0, #200	; 0xc8
 80045cc:	f002 ffd0 	bl	8007570 <HAL_Delay>
			TIM3->PSC = 2000;
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <main+0x708>)
 80045d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 80045d8:	20c8      	movs	r0, #200	; 0xc8
 80045da:	f002 ffc9 	bl	8007570 <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045e2:	4804      	ldr	r0, [pc, #16]	; (80045f4 <main+0x708>)
 80045e4:	f7ff fbbf 	bl	8003d66 <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000) {
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <main+0x70c>)
 80045ea:	899b      	ldrh	r3, [r3, #12]
 80045ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045f0:	d1e0      	bne.n	80045b4 <main+0x6c8>
		}
	}

	while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 80045f2:	e017      	b.n	8004624 <main+0x738>
 80045f4:	40000400 	.word	0x40000400
 80045f8:	200002c8 	.word	0x200002c8
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004600:	48c4      	ldr	r0, [pc, #784]	; (8004914 <main+0xa28>)
 8004602:	f7ff fb9f 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8004606:	4bc3      	ldr	r3, [pc, #780]	; (8004914 <main+0xa28>)
 8004608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(70);
 800460e:	2046      	movs	r0, #70	; 0x46
 8004610:	f002 ffae 	bl	8007570 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004618:	48be      	ldr	r0, [pc, #760]	; (8004914 <main+0xa28>)
 800461a:	f7ff fba4 	bl	8003d66 <LL_TIM_CC_DisableChannel>
		HAL_Delay(70);
 800461e:	2046      	movs	r0, #70	; 0x46
 8004620:	f002 ffa6 	bl	8007570 <HAL_Delay>
	while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8004624:	f001 f86e 	bl	8005704 <Is_iBus_Throttle_Min>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0e6      	beq.n	80045fc <main+0x710>
 800462e:	4bba      	ldr	r3, [pc, #744]	; (8004918 <main+0xa2c>)
 8004630:	891b      	ldrh	r3, [r3, #8]
 8004632:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004636:	d0e1      	beq.n	80045fc <main+0x710>
	}

	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800463c:	48b5      	ldr	r0, [pc, #724]	; (8004914 <main+0xa28>)
 800463e:	f7ff fb81 	bl	8003d44 <LL_TIM_CC_EnableChannel>
	TIM3->PSC = 2000;
 8004642:	4bb4      	ldr	r3, [pc, #720]	; (8004914 <main+0xa28>)
 8004644:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800464a:	2064      	movs	r0, #100	; 0x64
 800464c:	f002 ff90 	bl	8007570 <HAL_Delay>
	TIM3->PSC = 1500;
 8004650:	4bb0      	ldr	r3, [pc, #704]	; (8004914 <main+0xa28>)
 8004652:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8004658:	2064      	movs	r0, #100	; 0x64
 800465a:	f002 ff89 	bl	8007570 <HAL_Delay>
	TIM3->PSC = 1000;
 800465e:	4bad      	ldr	r3, [pc, #692]	; (8004914 <main+0xa28>)
 8004660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8004666:	2064      	movs	r0, #100	; 0x64
 8004668:	f002 ff82 	bl	8007570 <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800466c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004670:	48a8      	ldr	r0, [pc, #672]	; (8004914 <main+0xa28>)
 8004672:	f7ff fb78 	bl	8003d66 <LL_TIM_CC_DisableChannel>

	printf("Start\n");
 8004676:	48a9      	ldr	r0, [pc, #676]	; (800491c <main+0xa30>)
 8004678:	f008 fd96 	bl	800d1a8 <puts>
	/* USER CODE BEGIN WHILE */
	while (1)
	{


		if(BNO080_dataAvailable() == 1){
 800467c:	f7fc ffe2 	bl	8001644 <BNO080_dataAvailable>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d134      	bne.n	80046f0 <main+0x804>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004686:	2101      	movs	r1, #1
 8004688:	48a5      	ldr	r0, [pc, #660]	; (8004920 <main+0xa34>)
 800468a:	f7ff fbf0 	bl	8003e6e <LL_GPIO_TogglePin>
			Q[0] = BNO080_getQuatI();
 800468e:	f7fd f993 	bl	80019b8 <BNO080_getQuatI>
 8004692:	eef0 7a40 	vmov.f32	s15, s0
 8004696:	edc7 7a02 	vstr	s15, [r7, #8]
			Q[1] = BNO080_getQuatJ();
 800469a:	f7fd f9a3 	bl	80019e4 <BNO080_getQuatJ>
 800469e:	eef0 7a40 	vmov.f32	s15, s0
 80046a2:	edc7 7a03 	vstr	s15, [r7, #12]
			Q[2] = BNO080_getQuatK();
 80046a6:	f7fd f9b3 	bl	8001a10 <BNO080_getQuatK>
 80046aa:	eef0 7a40 	vmov.f32	s15, s0
 80046ae:	edc7 7a04 	vstr	s15, [r7, #16]
			Q[3] = BNO080_getQuatReal();
 80046b2:	f7fd f9c3 	bl	8001a3c <BNO080_getQuatReal>
 80046b6:	eef0 7a40 	vmov.f32	s15, s0
 80046ba:	edc7 7a05 	vstr	s15, [r7, #20]
			quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 80046be:	f7fd f9d3 	bl	8001a68 <BNO080_getQuatRadianAccuracy>
 80046c2:	ed87 0a06 	vstr	s0, [r7, #24]

			Quaternion_Update(&Q[0]);
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe ff98 	bl	8003600 <Quaternion_Update>

			BNO080_Roll = -BNO080_Roll;
 80046d0:	4b94      	ldr	r3, [pc, #592]	; (8004924 <main+0xa38>)
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	eef1 7a67 	vneg.f32	s15, s15
 80046da:	4b92      	ldr	r3, [pc, #584]	; (8004924 <main+0xa38>)
 80046dc:	edc3 7a00 	vstr	s15, [r3]
			BNO080_Pitch = -BNO080_Pitch;
 80046e0:	4b91      	ldr	r3, [pc, #580]	; (8004928 <main+0xa3c>)
 80046e2:	edd3 7a00 	vldr	s15, [r3]
 80046e6:	eef1 7a67 	vneg.f32	s15, s15
 80046ea:	4b8f      	ldr	r3, [pc, #572]	; (8004928 <main+0xa3c>)
 80046ec:	edc3 7a00 	vstr	s15, [r3]
			//printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
			//printf("%.2f\n", BNO080_Yaw);
		}


		if(ICM20602_DataReady() == 1){
 80046f0:	f7fd ff9c 	bl	800262c <ICM20602_DataReady>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d14c      	bne.n	8004794 <main+0x8a8>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80046fa:	2102      	movs	r1, #2
 80046fc:	4888      	ldr	r0, [pc, #544]	; (8004920 <main+0xa34>)
 80046fe:	f7ff fbb6 	bl	8003e6e <LL_GPIO_TogglePin>
			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8004702:	488a      	ldr	r0, [pc, #552]	; (800492c <main+0xa40>)
 8004704:	f7fd ff66 	bl	80025d4 <ICM20602_Get3AxisGyroRawData>
			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8004708:	4b89      	ldr	r3, [pc, #548]	; (8004930 <main+0xa44>)
 800470a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004716:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8004934 <main+0xa48>
 800471a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800471e:	eddf 6a86 	vldr	s13, [pc, #536]	; 8004938 <main+0xa4c>
 8004722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <main+0xa44>)
 8004728:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 800472c:	4b80      	ldr	r3, [pc, #512]	; (8004930 <main+0xa44>)
 800472e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800473a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004934 <main+0xa48>
 800473e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004742:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8004938 <main+0xa4c>
 8004746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800474a:	4b79      	ldr	r3, [pc, #484]	; (8004930 <main+0xa44>)
 800474c:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8004750:	4b77      	ldr	r3, [pc, #476]	; (8004930 <main+0xa44>)
 8004752:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800475e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004934 <main+0xa48>
 8004762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004766:	eddf 6a74 	vldr	s13, [pc, #464]	; 8004938 <main+0xa4c>
 800476a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <main+0xa44>)
 8004770:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			ICM20602.gyro_x = -ICM20602.gyro_x;
 8004774:	4b6e      	ldr	r3, [pc, #440]	; (8004930 <main+0xa44>)
 8004776:	edd3 7a07 	vldr	s15, [r3, #28]
 800477a:	eef1 7a67 	vneg.f32	s15, s15
 800477e:	4b6c      	ldr	r3, [pc, #432]	; (8004930 <main+0xa44>)
 8004780:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_z = -ICM20602.gyro_z;
 8004784:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <main+0xa44>)
 8004786:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800478a:	eef1 7a67 	vneg.f32	s15, s15
 800478e:	4b68      	ldr	r3, [pc, #416]	; (8004930 <main+0xa44>)
 8004790:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			//printf("%d, %d, %d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
		}


		if(LPS22HH_DataReady() == 1) {
 8004794:	f7fe f9bc 	bl	8002b10 <LPS22HH_DataReady>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d138      	bne.n	8004810 <main+0x924>
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800479e:	4867      	ldr	r0, [pc, #412]	; (800493c <main+0xa50>)
 80047a0:	f7fe f9c2 	bl	8002b28 <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80047a4:	4866      	ldr	r0, [pc, #408]	; (8004940 <main+0xa54>)
 80047a6:	f7fe f9cc 	bl	8002b42 <LPS22HH_GetTemperature>
			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 80047aa:	4b64      	ldr	r3, [pc, #400]	; (800493c <main+0xa50>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b6:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004944 <main+0xa58>
 80047ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047be:	4b5f      	ldr	r3, [pc, #380]	; (800493c <main+0xa50>)
 80047c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047cc:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8004948 <main+0xa5c>
 80047d0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80047d4:	eef0 0a66 	vmov.f32	s1, s13
 80047d8:	eeb0 0a47 	vmov.f32	s0, s14
 80047dc:	f7fe f9be 	bl	8002b5c <getAltitude2>
 80047e0:	eef0 7a40 	vmov.f32	s15, s0
 80047e4:	4b55      	ldr	r3, [pc, #340]	; (800493c <main+0xa50>)
 80047e6:	edc3 7a02 	vstr	s15, [r3, #8]
#define X 0.90f
			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f -X);
 80047ea:	4b54      	ldr	r3, [pc, #336]	; (800493c <main+0xa50>)
 80047ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80047f0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800494c <main+0xa60>
 80047f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047f8:	4b50      	ldr	r3, [pc, #320]	; (800493c <main+0xa50>)
 80047fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80047fe:	eddf 6a54 	vldr	s13, [pc, #336]	; 8004950 <main+0xa64>
 8004802:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480a:	4b4c      	ldr	r3, [pc, #304]	; (800493c <main+0xa50>)
 800480c:	edc3 7a03 	vstr	s15, [r3, #12]

			//printf("%d, %d\n", (int)(LPS22HH.baroAlt * 100), (int)(LPS22HH.baroAltFilt * 100));
		}


		if(m8n_rx_cplt_flag == 1) {
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <main+0xa68>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d111      	bne.n	800483c <main+0x950>
			m8n_rx_cplt_flag = 0;
 8004818:	4b4e      	ldr	r3, [pc, #312]	; (8004954 <main+0xa68>)
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
			if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1){
 800481e:	2124      	movs	r1, #36	; 0x24
 8004820:	484d      	ldr	r0, [pc, #308]	; (8004958 <main+0xa6c>)
 8004822:	f7fe fb81 	bl	8002f28 <M8N_UBX_CHKSUM_Check>
 8004826:	4603      	mov	r3, r0
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <main+0x950>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800482c:	2104      	movs	r1, #4
 800482e:	483c      	ldr	r0, [pc, #240]	; (8004920 <main+0xa34>)
 8004830:	f7ff fb1d 	bl	8003e6e <LL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Pasing(&m8n_rx_buf[0], &posllh);
 8004834:	4949      	ldr	r1, [pc, #292]	; (800495c <main+0xa70>)
 8004836:	4848      	ldr	r0, [pc, #288]	; (8004958 <main+0xa6c>)
 8004838:	f7fe fbb0 	bl	8002f9c <M8N_UBX_NAV_POSLLH_Pasing>

				//printf("LAT: %d\tLOT: %d\tLength: %d\t\n", posllh.lon, posllh.lat, posllh.length);
			}
		}

		if(ibus_rx_cplt_flag == 1){
 800483c:	4b48      	ldr	r3, [pc, #288]	; (8004960 <main+0xa74>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d123      	bne.n	800488c <main+0x9a0>
			ibus_rx_cplt_flag = 0;
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <main+0xa74>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 800484a:	2120      	movs	r1, #32
 800484c:	4845      	ldr	r0, [pc, #276]	; (8004964 <main+0xa78>)
 800484e:	f7fd fbab 	bl	8001fa8 <iBus_Check_CHKSUM>
 8004852:	4603      	mov	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d119      	bne.n	800488c <main+0x9a0>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004858:	2104      	movs	r1, #4
 800485a:	4831      	ldr	r0, [pc, #196]	; (8004920 <main+0xa34>)
 800485c:	f7ff fb07 	bl	8003e6e <LL_GPIO_TogglePin>

				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004860:	492d      	ldr	r1, [pc, #180]	; (8004918 <main+0xa2c>)
 8004862:	4840      	ldr	r0, [pc, #256]	; (8004964 <main+0xa78>)
 8004864:	f7fd fbd6 	bl	8002014 <iBus_Parsing>
				iBus_rx_cnt++;
 8004868:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800486c:	3301      	adds	r3, #1
 800486e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

				if(iBus_isActive_Failsafe(&iBus) == 1)
 8004872:	4829      	ldr	r0, [pc, #164]	; (8004918 <main+0xa2c>)
 8004874:	f7fd fc46 	bl	8002104 <iBus_isActive_Failsafe>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d103      	bne.n	8004886 <main+0x99a>
				{
					failsafe_flag = 1;
 800487e:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <main+0xa7c>)
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e002      	b.n	800488c <main+0x9a0>
				}
				else
				{
					failsafe_flag = 0;
 8004886:	4b38      	ldr	r3, [pc, #224]	; (8004968 <main+0xa7c>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
				//printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC, iBus.FailSafe);
				//HAL_Delay(50);
			}
		}

		if(tim7_1000ms_flag == 1)
 800488c:	4b37      	ldr	r3, [pc, #220]	; (800496c <main+0xa80>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d109      	bne.n	80048a8 <main+0x9bc>
		{
			tim7_1000ms_flag = 0;
 8004894:	4b35      	ldr	r3, [pc, #212]	; (800496c <main+0xa80>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
			if(iBus_rx_cnt == 0)
 800489a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <main+0x9bc>
			{
				failsafe_flag = 2;
 80048a2:	4b31      	ldr	r3, [pc, #196]	; (8004968 <main+0xa7c>)
 80048a4:	2202      	movs	r2, #2
 80048a6:	701a      	strb	r2, [r3, #0]
			}
		}

		if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 80048a8:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <main+0xa7c>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d00c      	beq.n	80048ca <main+0x9de>
 80048b0:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <main+0xa7c>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d008      	beq.n	80048ca <main+0x9de>
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <main+0xa84>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d004      	beq.n	80048ca <main+0x9de>
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <main+0xa2c>)
 80048c2:	899b      	ldrh	r3, [r3, #12]
 80048c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048c8:	d105      	bne.n	80048d6 <main+0x9ea>
		{
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80048ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ce:	4811      	ldr	r0, [pc, #68]	; (8004914 <main+0xa28>)
 80048d0:	f7ff fa38 	bl	8003d44 <LL_TIM_CC_EnableChannel>
 80048d4:	e004      	b.n	80048e0 <main+0x9f4>
		}
		else
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80048d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048da:	480e      	ldr	r0, [pc, #56]	; (8004914 <main+0xa28>)
 80048dc:	f7ff fa43 	bl	8003d66 <LL_TIM_CC_DisableChannel>
		}

		batVolt = adcVal * 0.003619f;
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ea:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004974 <main+0xa88>
 80048ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <main+0xa8c>)
 80048f4:	edc3 7a00 	vstr	s15, [r3]
		//printf("%d\t %f\n", adcVal, batvol);
		if(batVolt < 10.0f)
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <main+0xa8c>)
 80048fa:	edd3 7a00 	vldr	s15, [r3]
 80048fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	d537      	bpl.n	800497c <main+0xa90>
		{
			low_bat_flag = 1;
 800490c:	4b18      	ldr	r3, [pc, #96]	; (8004970 <main+0xa84>)
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e036      	b.n	8004982 <main+0xa96>
 8004914:	40000400 	.word	0x40000400
 8004918:	200002c8 	.word	0x200002c8
 800491c:	08010250 	.word	0x08010250
 8004920:	40020800 	.word	0x40020800
 8004924:	20000498 	.word	0x20000498
 8004928:	2000049c 	.word	0x2000049c
 800492c:	200002e8 	.word	0x200002e8
 8004930:	200002e0 	.word	0x200002e0
 8004934:	44fa0000 	.word	0x44fa0000
 8004938:	47000000 	.word	0x47000000
 800493c:	20000308 	.word	0x20000308
 8004940:	2000030c 	.word	0x2000030c
 8004944:	45800000 	.word	0x45800000
 8004948:	42c80000 	.word	0x42c80000
 800494c:	3f666666 	.word	0x3f666666
 8004950:	3dccccd0 	.word	0x3dccccd0
 8004954:	20000610 	.word	0x20000610
 8004958:	200005ec 	.word	0x200005ec
 800495c:	20000318 	.word	0x20000318
 8004960:	20000634 	.word	0x20000634
 8004964:	20000614 	.word	0x20000614
 8004968:	200005e4 	.word	0x200005e4
 800496c:	20000638 	.word	0x20000638
 8004970:	200005e5 	.word	0x200005e5
 8004974:	3b6d2cbf 	.word	0x3b6d2cbf
 8004978:	200005e0 	.word	0x200005e0
		}
		else
			low_bat_flag = 0;
 800497c:	4b5b      	ldr	r3, [pc, #364]	; (8004aec <main+0xc00>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]

		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8004982:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <main+0xc04>)
 8004984:	891b      	ldrh	r3, [r3, #8]
 8004986:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800498a:	d12e      	bne.n	80049ea <main+0xafe>
 800498c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800498e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004992:	d02a      	beq.n	80049ea <main+0xafe>
		{
			if(iBus.LV < 1010)
 8004994:	4b56      	ldr	r3, [pc, #344]	; (8004af0 <main+0xc04>)
 8004996:	889b      	ldrh	r3, [r3, #4]
 8004998:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800499c:	4293      	cmp	r3, r2
 800499e:	d81a      	bhi.n	80049d6 <main+0xaea>
			{
				motor_arming_flag = 1;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				yaw_heading_reference = BNO080_Yaw;
 80049a6:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <main+0xc08>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ac:	e01d      	b.n	80049ea <main+0xafe>
			}
			else
			{
				while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
				{
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80049ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049b2:	4851      	ldr	r0, [pc, #324]	; (8004af8 <main+0xc0c>)
 80049b4:	f7ff f9c6 	bl	8003d44 <LL_TIM_CC_EnableChannel>
					TIM3->PSC = 1000;
 80049b8:	4b4f      	ldr	r3, [pc, #316]	; (8004af8 <main+0xc0c>)
 80049ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
					HAL_Delay(70);
 80049c0:	2046      	movs	r0, #70	; 0x46
 80049c2:	f002 fdd5 	bl	8007570 <HAL_Delay>
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80049c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049ca:	484b      	ldr	r0, [pc, #300]	; (8004af8 <main+0xc0c>)
 80049cc:	f7ff f9cb 	bl	8003d66 <LL_TIM_CC_DisableChannel>
					HAL_Delay(70);
 80049d0:	2046      	movs	r0, #70	; 0x46
 80049d2:	f002 fdcd 	bl	8007570 <HAL_Delay>
				while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80049d6:	f000 fe95 	bl	8005704 <Is_iBus_Throttle_Min>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0e6      	beq.n	80049ae <main+0xac2>
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <main+0xc04>)
 80049e2:	891b      	ldrh	r3, [r3, #8]
 80049e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049e8:	d0e1      	beq.n	80049ae <main+0xac2>
				}
			}
		}
		iBus_SwA_Prev = iBus.SwA;
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <main+0xc04>)
 80049ec:	891b      	ldrh	r3, [r3, #8]
 80049ee:	87bb      	strh	r3, [r7, #60]	; 0x3c

		if(iBus.SwA != 2000)
 80049f0:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <main+0xc04>)
 80049f2:	891b      	ldrh	r3, [r3, #8]
 80049f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049f8:	d002      	beq.n	8004a00 <main+0xb14>
		{
			motor_arming_flag = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		if(motor_arming_flag == 1)
 8004a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d17d      	bne.n	8004b04 <main+0xc18>
		{
			if(failsafe_flag == 0)
 8004a08:	4b3c      	ldr	r3, [pc, #240]	; (8004afc <main+0xc10>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d15b      	bne.n	8004ac8 <main+0xbdc>
			{
				if(iBus.LV > 1030)
 8004a10:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <main+0xc04>)
 8004a12:	889b      	ldrh	r3, [r3, #4]
 8004a14:	f240 4206 	movw	r2, #1030	; 0x406
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d944      	bls.n	8004aa6 <main+0xbba>
				{
					TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 8004a1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a1e:	f245 2208 	movw	r2, #21000	; 0x5208
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d807      	bhi.n	8004a36 <main+0xb4a>
 8004a26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a28:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	bf38      	it	cc
 8004a30:	4613      	movcc	r3, r2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	e001      	b.n	8004a3a <main+0xb4e>
 8004a36:	f245 2308 	movw	r3, #21000	; 0x5208
 8004a3a:	4a31      	ldr	r2, [pc, #196]	; (8004b00 <main+0xc14>)
 8004a3c:	6353      	str	r3, [r2, #52]	; 0x34
					TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 8004a3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a40:	f245 2208 	movw	r2, #21000	; 0x5208
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d807      	bhi.n	8004a58 <main+0xb6c>
 8004a48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a4a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	bf38      	it	cc
 8004a52:	4613      	movcc	r3, r2
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	e001      	b.n	8004a5c <main+0xb70>
 8004a58:	f245 2308 	movw	r3, #21000	; 0x5208
 8004a5c:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <main+0xc14>)
 8004a5e:	6393      	str	r3, [r2, #56]	; 0x38
					TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 8004a60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a62:	f245 2208 	movw	r2, #21000	; 0x5208
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d807      	bhi.n	8004a7a <main+0xb8e>
 8004a6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a6c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bf38      	it	cc
 8004a74:	4613      	movcc	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	e001      	b.n	8004a7e <main+0xb92>
 8004a7a:	f245 2308 	movw	r3, #21000	; 0x5208
 8004a7e:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <main+0xc14>)
 8004a80:	63d3      	str	r3, [r2, #60]	; 0x3c
					TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 8004a82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a84:	f245 2208 	movw	r2, #21000	; 0x5208
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d807      	bhi.n	8004a9c <main+0xbb0>
 8004a8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a8e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004a92:	4293      	cmp	r3, r2
 8004a94:	bf38      	it	cc
 8004a96:	4613      	movcc	r3, r2
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	e001      	b.n	8004aa0 <main+0xbb4>
 8004a9c:	f245 2308 	movw	r3, #21000	; 0x5208
 8004aa0:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <main+0xc14>)
 8004aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa4:	e03e      	b.n	8004b24 <main+0xc38>
				}
				else
				{
					TIM5->CCR1 = 11000;
 8004aa6:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <main+0xc14>)
 8004aa8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34
					TIM5->CCR2 = 11000;
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <main+0xc14>)
 8004ab0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
					TIM5->CCR3 = 11000;
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <main+0xc14>)
 8004ab8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004abc:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM5->CCR4 = 11000;
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <main+0xc14>)
 8004ac0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ac6:	e02d      	b.n	8004b24 <main+0xc38>
				}
			}
			else
			{
				TIM5->CCR1 = 10500;
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <main+0xc14>)
 8004aca:	f642 1204 	movw	r2, #10500	; 0x2904
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34
				TIM5->CCR2 = 10500;
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <main+0xc14>)
 8004ad2:	f642 1204 	movw	r2, #10500	; 0x2904
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
				TIM5->CCR3 = 10500;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <main+0xc14>)
 8004ada:	f642 1204 	movw	r2, #10500	; 0x2904
 8004ade:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM5->CCR4 = 10500;
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <main+0xc14>)
 8004ae2:	f642 1204 	movw	r2, #10500	; 0x2904
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ae8:	e01c      	b.n	8004b24 <main+0xc38>
 8004aea:	bf00      	nop
 8004aec:	200005e5 	.word	0x200005e5
 8004af0:	200002c8 	.word	0x200002c8
 8004af4:	200004a0 	.word	0x200004a0
 8004af8:	40000400 	.word	0x40000400
 8004afc:	200005e4 	.word	0x200005e4
 8004b00:	40000c00 	.word	0x40000c00
			}
		}
		else
		{
			TIM5->CCR1 = 10500;
 8004b04:	4b84      	ldr	r3, [pc, #528]	; (8004d18 <main+0xe2c>)
 8004b06:	f642 1204 	movw	r2, #10500	; 0x2904
 8004b0a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM5->CCR2 = 10500;
 8004b0c:	4b82      	ldr	r3, [pc, #520]	; (8004d18 <main+0xe2c>)
 8004b0e:	f642 1204 	movw	r2, #10500	; 0x2904
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
			TIM5->CCR3 = 10500;
 8004b14:	4b80      	ldr	r3, [pc, #512]	; (8004d18 <main+0xe2c>)
 8004b16:	f642 1204 	movw	r2, #10500	; 0x2904
 8004b1a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM5->CCR4 = 10500;
 8004b1c:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <main+0xe2c>)
 8004b1e:	f642 1204 	movw	r2, #10500	; 0x2904
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(tim7_1ms_flag == 1)
 8004b24:	4b7d      	ldr	r3, [pc, #500]	; (8004d1c <main+0xe30>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f040 81a6 	bne.w	8004e7a <main+0xf8e>
		{
			tim7_1ms_flag = 0;
 8004b2e:	4b7b      	ldr	r3, [pc, #492]	; (8004d1c <main+0xe30>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]

			Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV - 1500) * 0.1f, BNO080_Pitch, ICM20602.gyro_x);
 8004b34:	4b7a      	ldr	r3, [pc, #488]	; (8004d20 <main+0xe34>)
 8004b36:	885b      	ldrh	r3, [r3, #2]
 8004b38:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b44:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004d24 <main+0xe38>
 8004b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b4c:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <main+0xe3c>)
 8004b4e:	ed93 7a00 	vldr	s14, [r3]
 8004b52:	4b76      	ldr	r3, [pc, #472]	; (8004d2c <main+0xe40>)
 8004b54:	edd3 6a07 	vldr	s13, [r3, #28]
 8004b58:	eeb0 1a66 	vmov.f32	s2, s13
 8004b5c:	eef0 0a47 	vmov.f32	s1, s14
 8004b60:	eeb0 0a67 	vmov.f32	s0, s15
 8004b64:	4872      	ldr	r0, [pc, #456]	; (8004d30 <main+0xe44>)
 8004b66:	f7fe fad1 	bl	800310c <Double_Roll_Pitch_PID_Calculation>
			Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH - 1500) * 0.1f, BNO080_Roll, ICM20602.gyro_y);
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <main+0xe34>)
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b7a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8004d24 <main+0xe38>
 8004b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b82:	4b6c      	ldr	r3, [pc, #432]	; (8004d34 <main+0xe48>)
 8004b84:	ed93 7a00 	vldr	s14, [r3]
 8004b88:	4b68      	ldr	r3, [pc, #416]	; (8004d2c <main+0xe40>)
 8004b8a:	edd3 6a08 	vldr	s13, [r3, #32]
 8004b8e:	eeb0 1a66 	vmov.f32	s2, s13
 8004b92:	eef0 0a47 	vmov.f32	s1, s14
 8004b96:	eeb0 0a67 	vmov.f32	s0, s15
 8004b9a:	4867      	ldr	r0, [pc, #412]	; (8004d38 <main+0xe4c>)
 8004b9c:	f7fe fab6 	bl	800310c <Double_Roll_Pitch_PID_Calculation>

			if(iBus.LV < 1030 || motor_arming_flag == 0)
 8004ba0:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <main+0xe34>)
 8004ba2:	889b      	ldrh	r3, [r3, #4]
 8004ba4:	f240 4205 	movw	r2, #1029	; 0x405
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d903      	bls.n	8004bb4 <main+0xcc8>
 8004bac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <main+0xccc>
			{
				Reset_All_PID_Integrator();
 8004bb4:	f7fe fd02 	bl	80035bc <Reset_All_PID_Integrator>
			}
			if(iBus.LH < 1485 || iBus.LH > 1515)
 8004bb8:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <main+0xe34>)
 8004bba:	88db      	ldrh	r3, [r3, #6]
 8004bbc:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d906      	bls.n	8004bd2 <main+0xce6>
 8004bc4:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <main+0xe34>)
 8004bc6:	88db      	ldrh	r3, [r3, #6]
 8004bc8:	f240 52eb 	movw	r2, #1515	; 0x5eb
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	f240 80b9 	bls.w	8004d44 <main+0xe58>
			{
				yaw_heading_reference = BNO080_Yaw;
 8004bd2:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <main+0xe50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
				Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH - 1500), ICM20602.gyro_z);
 8004bd8:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <main+0xe34>)
 8004bda:	88db      	ldrh	r3, [r3, #6]
 8004bdc:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be8:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <main+0xe40>)
 8004bea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004bee:	eef0 0a47 	vmov.f32	s1, s14
 8004bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf6:	4852      	ldr	r0, [pc, #328]	; (8004d40 <main+0xe54>)
 8004bf8:	f7fe fc5c 	bl	80034b4 <Single_Yaw_Rate_PID_Calculation>

				ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_rate.pid_result;
 8004bfc:	4b48      	ldr	r3, [pc, #288]	; (8004d20 <main+0xe34>)
 8004bfe:	889b      	ldrh	r3, [r3, #4]
 8004c00:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004c10:	3338      	adds	r3, #56	; 0x38
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c1a:	4b45      	ldr	r3, [pc, #276]	; (8004d30 <main+0xe44>)
 8004c1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c24:	4b44      	ldr	r3, [pc, #272]	; (8004d38 <main+0xe4c>)
 8004c26:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c2e:	4b44      	ldr	r3, [pc, #272]	; (8004d40 <main+0xe54>)
 8004c30:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3c:	ee17 3a90 	vmov	r3, s15
 8004c40:	873b      	strh	r3, [r7, #56]	; 0x38
				ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_rate.pid_result;
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <main+0xe34>)
 8004c44:	889b      	ldrh	r3, [r3, #4]
 8004c46:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004c56:	3338      	adds	r3, #56	; 0x38
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c60:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <main+0xe44>)
 8004c62:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c6a:	4b33      	ldr	r3, [pc, #204]	; (8004d38 <main+0xe4c>)
 8004c6c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c74:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <main+0xe54>)
 8004c76:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c82:	ee17 3a90 	vmov	r3, s15
 8004c86:	86fb      	strh	r3, [r7, #54]	; 0x36
				ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_rate.pid_result;
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <main+0xe34>)
 8004c8a:	889b      	ldrh	r3, [r3, #4]
 8004c8c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004c9c:	3338      	adds	r3, #56	; 0x38
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ca6:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <main+0xe44>)
 8004ca8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <main+0xe4c>)
 8004cb2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004cb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cba:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <main+0xe54>)
 8004cbc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc8:	ee17 3a90 	vmov	r3, s15
 8004ccc:	86bb      	strh	r3, [r7, #52]	; 0x34
				ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_rate.pid_result;
 8004cce:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <main+0xe34>)
 8004cd0:	889b      	ldrh	r3, [r3, #4]
 8004cd2:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004ce2:	3338      	adds	r3, #56	; 0x38
 8004ce4:	ee07 3a90 	vmov	s15, r3
 8004ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <main+0xe44>)
 8004cee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <main+0xe4c>)
 8004cf8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <main+0xe54>)
 8004d02:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0e:	ee17 3a90 	vmov	r3, s15
 8004d12:	867b      	strh	r3, [r7, #50]	; 0x32
 8004d14:	e0b1      	b.n	8004e7a <main+0xf8e>
 8004d16:	bf00      	nop
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	20000639 	.word	0x20000639
 8004d20:	200002c8 	.word	0x200002c8
 8004d24:	3dcccccd 	.word	0x3dcccccd
 8004d28:	2000049c 	.word	0x2000049c
 8004d2c:	200002e0 	.word	0x200002e0
 8004d30:	200003b8 	.word	0x200003b8
 8004d34:	20000498 	.word	0x20000498
 8004d38:	20000348 	.word	0x20000348
 8004d3c:	200004a0 	.word	0x200004a0
 8004d40:	20000460 	.word	0x20000460
			}
			else
			{
				Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 8004d44:	4bc1      	ldr	r3, [pc, #772]	; (800504c <main+0x1160>)
 8004d46:	edd3 7a00 	vldr	s15, [r3]
 8004d4a:	4bc1      	ldr	r3, [pc, #772]	; (8005050 <main+0x1164>)
 8004d4c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004d50:	eeb0 1a47 	vmov.f32	s2, s14
 8004d54:	eef0 0a67 	vmov.f32	s1, s15
 8004d58:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8004d5c:	48bd      	ldr	r0, [pc, #756]	; (8005054 <main+0x1168>)
 8004d5e:	f7fe fb0f 	bl	8003380 <Single_Yaw_Heading_PID_Calculation>

				ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result;
 8004d62:	4bbd      	ldr	r3, [pc, #756]	; (8005058 <main+0x116c>)
 8004d64:	889b      	ldrh	r3, [r3, #4]
 8004d66:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004d76:	3338      	adds	r3, #56	; 0x38
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d80:	4bb6      	ldr	r3, [pc, #728]	; (800505c <main+0x1170>)
 8004d82:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d8a:	4bb5      	ldr	r3, [pc, #724]	; (8005060 <main+0x1174>)
 8004d8c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d94:	4baf      	ldr	r3, [pc, #700]	; (8005054 <main+0x1168>)
 8004d96:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da2:	ee17 3a90 	vmov	r3, s15
 8004da6:	873b      	strh	r3, [r7, #56]	; 0x38
				ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result;
 8004da8:	4bab      	ldr	r3, [pc, #684]	; (8005058 <main+0x116c>)
 8004daa:	889b      	ldrh	r3, [r3, #4]
 8004dac:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004dbc:	3338      	adds	r3, #56	; 0x38
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc6:	4ba5      	ldr	r3, [pc, #660]	; (800505c <main+0x1170>)
 8004dc8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dd0:	4ba3      	ldr	r3, [pc, #652]	; (8005060 <main+0x1174>)
 8004dd2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dda:	4b9e      	ldr	r3, [pc, #632]	; (8005054 <main+0x1168>)
 8004ddc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de8:	ee17 3a90 	vmov	r3, s15
 8004dec:	86fb      	strh	r3, [r7, #54]	; 0x36
				ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result;
 8004dee:	4b9a      	ldr	r3, [pc, #616]	; (8005058 <main+0x116c>)
 8004df0:	889b      	ldrh	r3, [r3, #4]
 8004df2:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004e02:	3338      	adds	r3, #56	; 0x38
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e0c:	4b93      	ldr	r3, [pc, #588]	; (800505c <main+0x1170>)
 8004e0e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e16:	4b92      	ldr	r3, [pc, #584]	; (8005060 <main+0x1174>)
 8004e18:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e20:	4b8c      	ldr	r3, [pc, #560]	; (8005054 <main+0x1168>)
 8004e22:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2e:	ee17 3a90 	vmov	r3, s15
 8004e32:	86bb      	strh	r3, [r7, #52]	; 0x34
				ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result;
 8004e34:	4b88      	ldr	r3, [pc, #544]	; (8005058 <main+0x116c>)
 8004e36:	889b      	ldrh	r3, [r3, #4]
 8004e38:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004e48:	3338      	adds	r3, #56	; 0x38
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e52:	4b82      	ldr	r3, [pc, #520]	; (800505c <main+0x1170>)
 8004e54:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e5c:	4b80      	ldr	r3, [pc, #512]	; (8005060 <main+0x1174>)
 8004e5e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e66:	4b7b      	ldr	r3, [pc, #492]	; (8005054 <main+0x1168>)
 8004e68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e74:	ee17 3a90 	vmov	r3, s15
 8004e78:	867b      	strh	r3, [r7, #50]	; 0x32
			}
			//printf("%f\t%f\n", BNO080_Pitch, ICM20602.gyro_x);
			//printf("%f\t%f\n", BNO080_Roll, ICM20602.gyro_y);
			//printf("%f\t%f\n", BNO080_Yaw, ICM20602.gyro_z);
		}
		if(telemetry_rx_cplt_flag == 1)
 8004e7a:	4b7a      	ldr	r3, [pc, #488]	; (8005064 <main+0x1178>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	f040 838e 	bne.w	80055a0 <main+0x16b4>
		{
			telemetry_rx_cplt_flag = 0;
 8004e84:	4b77      	ldr	r3, [pc, #476]	; (8005064 <main+0x1178>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]

			if(iBus.SwA == 1000)
 8004e8a:	4b73      	ldr	r3, [pc, #460]	; (8005058 <main+0x116c>)
 8004e8c:	891b      	ldrh	r3, [r3, #8]
 8004e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e92:	f040 8385 	bne.w	80055a0 <main+0x16b4>
			{
				unsigned char chksum = 0xff;
 8004e96:	23ff      	movs	r3, #255	; 0xff
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e00b      	b.n	8004eba <main+0xfce>
 8004ea2:	4a71      	ldr	r2, [pc, #452]	; (8005068 <main+0x117c>)
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	4413      	add	r3, r2
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2b12      	cmp	r3, #18
 8004ebe:	ddf0      	ble.n	8004ea2 <main+0xfb6>

				if(chksum == telemetry_rx_buf[19])
 8004ec0:	4b69      	ldr	r3, [pc, #420]	; (8005068 <main+0x117c>)
 8004ec2:	7cdb      	ldrb	r3, [r3, #19]
 8004ec4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	f040 8369 	bne.w	80055a0 <main+0x16b4>
				{
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ed2:	4866      	ldr	r0, [pc, #408]	; (800506c <main+0x1180>)
 8004ed4:	f7fe ff36 	bl	8003d44 <LL_TIM_CC_EnableChannel>

					TIM3->PSC = 1000;
 8004ed8:	4b64      	ldr	r3, [pc, #400]	; (800506c <main+0x1180>)
 8004eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
					HAL_Delay(10);
 8004ee0:	200a      	movs	r0, #10
 8004ee2:	f002 fb45 	bl	8007570 <HAL_Delay>

					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004eea:	4860      	ldr	r0, [pc, #384]	; (800506c <main+0x1180>)
 8004eec:	f7fe ff3b 	bl	8003d66 <LL_TIM_CC_DisableChannel>

					switch(telemetry_rx_buf[2])
 8004ef0:	4b5d      	ldr	r3, [pc, #372]	; (8005068 <main+0x117c>)
 8004ef2:	789b      	ldrb	r3, [r3, #2]
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	f200 8356 	bhi.w	80055a6 <main+0x16ba>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <main+0x1014>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f45 	.word	0x08004f45
 8004f04:	08004fc9 	.word	0x08004fc9
 8004f08:	08005099 	.word	0x08005099
 8004f0c:	0800511d 	.word	0x0800511d
 8004f10:	080051a1 	.word	0x080051a1
 8004f14:	08005225 	.word	0x08005225
 8004f18:	080055a7 	.word	0x080055a7
 8004f1c:	080055a7 	.word	0x080055a7
 8004f20:	080055a7 	.word	0x080055a7
 8004f24:	080055a7 	.word	0x080055a7
 8004f28:	080055a7 	.word	0x080055a7
 8004f2c:	080055a7 	.word	0x080055a7
 8004f30:	080055a7 	.word	0x080055a7
 8004f34:	080055a7 	.word	0x080055a7
 8004f38:	080055a7 	.word	0x080055a7
 8004f3c:	080055a7 	.word	0x080055a7
 8004f40:	080052a9 	.word	0x080052a9
					{
					case 0:
						roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8004f44:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <main+0x1184>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a45      	ldr	r2, [pc, #276]	; (8005060 <main+0x1174>)
 8004f4a:	6013      	str	r3, [r2, #0]
						roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8004f4c:	4b49      	ldr	r3, [pc, #292]	; (8005074 <main+0x1188>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a43      	ldr	r2, [pc, #268]	; (8005060 <main+0x1174>)
 8004f52:	6053      	str	r3, [r2, #4]
						roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8004f54:	4b48      	ldr	r3, [pc, #288]	; (8005078 <main+0x118c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a41      	ldr	r2, [pc, #260]	; (8005060 <main+0x1174>)
 8004f5a:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004f5c:	4b42      	ldr	r3, [pc, #264]	; (8005068 <main+0x117c>)
 8004f5e:	789b      	ldrb	r3, [r3, #2]
 8004f60:	4a3f      	ldr	r2, [pc, #252]	; (8005060 <main+0x1174>)
 8004f62:	edd2 7a00 	vldr	s15, [r2]
 8004f66:	4a3e      	ldr	r2, [pc, #248]	; (8005060 <main+0x1174>)
 8004f68:	ed92 7a01 	vldr	s14, [r2, #4]
 8004f6c:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <main+0x1174>)
 8004f6e:	edd2 6a02 	vldr	s13, [r2, #8]
 8004f72:	eeb0 1a66 	vmov.f32	s2, s13
 8004f76:	eef0 0a47 	vmov.f32	s1, s14
 8004f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc f812 	bl	8000fa8 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8004f84:	4b38      	ldr	r3, [pc, #224]	; (8005068 <main+0x117c>)
 8004f86:	7898      	ldrb	r0, [r3, #2]
 8004f88:	4b3c      	ldr	r3, [pc, #240]	; (800507c <main+0x1190>)
 8004f8a:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <main+0x1194>)
 8004f8c:	4934      	ldr	r1, [pc, #208]	; (8005060 <main+0x1174>)
 8004f8e:	f7fc f8a1 	bl	80010d4 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004f92:	4b35      	ldr	r3, [pc, #212]	; (8005068 <main+0x117c>)
 8004f94:	789b      	ldrb	r3, [r3, #2]
 8004f96:	4a32      	ldr	r2, [pc, #200]	; (8005060 <main+0x1174>)
 8004f98:	edd2 7a00 	vldr	s15, [r2]
 8004f9c:	4a30      	ldr	r2, [pc, #192]	; (8005060 <main+0x1174>)
 8004f9e:	ed92 7a01 	vldr	s14, [r2, #4]
 8004fa2:	4a2f      	ldr	r2, [pc, #188]	; (8005060 <main+0x1174>)
 8004fa4:	edd2 6a02 	vldr	s13, [r2, #8]
 8004fa8:	eeb0 1a66 	vmov.f32	s2, s13
 8004fac:	eef0 0a47 	vmov.f32	s1, s14
 8004fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4833      	ldr	r0, [pc, #204]	; (8005084 <main+0x1198>)
 8004fb8:	f001 f832 	bl	8006020 <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004fbc:	2214      	movs	r2, #20
 8004fbe:	4931      	ldr	r1, [pc, #196]	; (8005084 <main+0x1198>)
 8004fc0:	4831      	ldr	r0, [pc, #196]	; (8005088 <main+0x119c>)
 8004fc2:	f005 faf2 	bl	800a5aa <HAL_UART_Transmit_IT>
						break;
 8004fc6:	e2ee      	b.n	80055a6 <main+0x16ba>
					case 1:
						roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8004fc8:	4b29      	ldr	r3, [pc, #164]	; (8005070 <main+0x1184>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a24      	ldr	r2, [pc, #144]	; (8005060 <main+0x1174>)
 8004fce:	6393      	str	r3, [r2, #56]	; 0x38
						roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <main+0x1188>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	; (8005060 <main+0x1174>)
 8004fd6:	63d3      	str	r3, [r2, #60]	; 0x3c
						roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8004fd8:	4b27      	ldr	r3, [pc, #156]	; (8005078 <main+0x118c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a20      	ldr	r2, [pc, #128]	; (8005060 <main+0x1174>)
 8004fde:	6413      	str	r3, [r2, #64]	; 0x40
						EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8004fe0:	4b21      	ldr	r3, [pc, #132]	; (8005068 <main+0x117c>)
 8004fe2:	789b      	ldrb	r3, [r3, #2]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <main+0x1174>)
 8004fe6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004fea:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <main+0x1174>)
 8004fec:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <main+0x1174>)
 8004ff2:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8004ff6:	eeb0 1a66 	vmov.f32	s2, s13
 8004ffa:	eef0 0a47 	vmov.f32	s1, s14
 8004ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb ffd0 	bl	8000fa8 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 8005008:	4b17      	ldr	r3, [pc, #92]	; (8005068 <main+0x117c>)
 800500a:	7898      	ldrb	r0, [r3, #2]
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <main+0x11a0>)
 800500e:	4a20      	ldr	r2, [pc, #128]	; (8005090 <main+0x11a4>)
 8005010:	4920      	ldr	r1, [pc, #128]	; (8005094 <main+0x11a8>)
 8005012:	f7fc f85f 	bl	80010d4 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <main+0x117c>)
 8005018:	789b      	ldrb	r3, [r3, #2]
 800501a:	4a11      	ldr	r2, [pc, #68]	; (8005060 <main+0x1174>)
 800501c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <main+0x1174>)
 8005022:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <main+0x1174>)
 8005028:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800502c:	eeb0 1a66 	vmov.f32	s2, s13
 8005030:	eef0 0a47 	vmov.f32	s1, s14
 8005034:	eeb0 0a67 	vmov.f32	s0, s15
 8005038:	4619      	mov	r1, r3
 800503a:	4812      	ldr	r0, [pc, #72]	; (8005084 <main+0x1198>)
 800503c:	f000 fff0 	bl	8006020 <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8005040:	2214      	movs	r2, #20
 8005042:	4910      	ldr	r1, [pc, #64]	; (8005084 <main+0x1198>)
 8005044:	4810      	ldr	r0, [pc, #64]	; (8005088 <main+0x119c>)
 8005046:	f005 fab0 	bl	800a5aa <HAL_UART_Transmit_IT>
						break;
 800504a:	e2ac      	b.n	80055a6 <main+0x16ba>
 800504c:	200004a0 	.word	0x200004a0
 8005050:	200002e0 	.word	0x200002e0
 8005054:	20000428 	.word	0x20000428
 8005058:	200002c8 	.word	0x200002c8
 800505c:	200003b8 	.word	0x200003b8
 8005060:	20000348 	.word	0x20000348
 8005064:	200005dc 	.word	0x200005dc
 8005068:	200005c8 	.word	0x200005c8
 800506c:	40000400 	.word	0x40000400
 8005070:	200005cb 	.word	0x200005cb
 8005074:	200005cf 	.word	0x200005cf
 8005078:	200005d3 	.word	0x200005d3
 800507c:	20000350 	.word	0x20000350
 8005080:	2000034c 	.word	0x2000034c
 8005084:	200005a0 	.word	0x200005a0
 8005088:	20000648 	.word	0x20000648
 800508c:	20000388 	.word	0x20000388
 8005090:	20000384 	.word	0x20000384
 8005094:	20000380 	.word	0x20000380
					case 2:
						pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8005098:	4baa      	ldr	r3, [pc, #680]	; (8005344 <main+0x1458>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4aaa      	ldr	r2, [pc, #680]	; (8005348 <main+0x145c>)
 800509e:	6013      	str	r3, [r2, #0]
						pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 80050a0:	4baa      	ldr	r3, [pc, #680]	; (800534c <main+0x1460>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4aa8      	ldr	r2, [pc, #672]	; (8005348 <main+0x145c>)
 80050a6:	6053      	str	r3, [r2, #4]
						pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 80050a8:	4ba9      	ldr	r3, [pc, #676]	; (8005350 <main+0x1464>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4aa6      	ldr	r2, [pc, #664]	; (8005348 <main+0x145c>)
 80050ae:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 80050b0:	4ba8      	ldr	r3, [pc, #672]	; (8005354 <main+0x1468>)
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	4aa4      	ldr	r2, [pc, #656]	; (8005348 <main+0x145c>)
 80050b6:	edd2 7a00 	vldr	s15, [r2]
 80050ba:	4aa3      	ldr	r2, [pc, #652]	; (8005348 <main+0x145c>)
 80050bc:	ed92 7a01 	vldr	s14, [r2, #4]
 80050c0:	4aa1      	ldr	r2, [pc, #644]	; (8005348 <main+0x145c>)
 80050c2:	edd2 6a02 	vldr	s13, [r2, #8]
 80050c6:	eeb0 1a66 	vmov.f32	s2, s13
 80050ca:	eef0 0a47 	vmov.f32	s1, s14
 80050ce:	eeb0 0a67 	vmov.f32	s0, s15
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fb ff68 	bl	8000fa8 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 80050d8:	4b9e      	ldr	r3, [pc, #632]	; (8005354 <main+0x1468>)
 80050da:	7898      	ldrb	r0, [r3, #2]
 80050dc:	4b9e      	ldr	r3, [pc, #632]	; (8005358 <main+0x146c>)
 80050de:	4a9f      	ldr	r2, [pc, #636]	; (800535c <main+0x1470>)
 80050e0:	4999      	ldr	r1, [pc, #612]	; (8005348 <main+0x145c>)
 80050e2:	f7fb fff7 	bl	80010d4 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 80050e6:	4b9b      	ldr	r3, [pc, #620]	; (8005354 <main+0x1468>)
 80050e8:	789b      	ldrb	r3, [r3, #2]
 80050ea:	4a97      	ldr	r2, [pc, #604]	; (8005348 <main+0x145c>)
 80050ec:	edd2 7a00 	vldr	s15, [r2]
 80050f0:	4a95      	ldr	r2, [pc, #596]	; (8005348 <main+0x145c>)
 80050f2:	ed92 7a01 	vldr	s14, [r2, #4]
 80050f6:	4a94      	ldr	r2, [pc, #592]	; (8005348 <main+0x145c>)
 80050f8:	edd2 6a02 	vldr	s13, [r2, #8]
 80050fc:	eeb0 1a66 	vmov.f32	s2, s13
 8005100:	eef0 0a47 	vmov.f32	s1, s14
 8005104:	eeb0 0a67 	vmov.f32	s0, s15
 8005108:	4619      	mov	r1, r3
 800510a:	4895      	ldr	r0, [pc, #596]	; (8005360 <main+0x1474>)
 800510c:	f000 ff88 	bl	8006020 <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8005110:	2214      	movs	r2, #20
 8005112:	4993      	ldr	r1, [pc, #588]	; (8005360 <main+0x1474>)
 8005114:	4893      	ldr	r0, [pc, #588]	; (8005364 <main+0x1478>)
 8005116:	f005 fa48 	bl	800a5aa <HAL_UART_Transmit_IT>
						break;
 800511a:	e244      	b.n	80055a6 <main+0x16ba>
					case 3:
						pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 800511c:	4b89      	ldr	r3, [pc, #548]	; (8005344 <main+0x1458>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a89      	ldr	r2, [pc, #548]	; (8005348 <main+0x145c>)
 8005122:	6393      	str	r3, [r2, #56]	; 0x38
						pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 8005124:	4b89      	ldr	r3, [pc, #548]	; (800534c <main+0x1460>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a87      	ldr	r2, [pc, #540]	; (8005348 <main+0x145c>)
 800512a:	63d3      	str	r3, [r2, #60]	; 0x3c
						pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 800512c:	4b88      	ldr	r3, [pc, #544]	; (8005350 <main+0x1464>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a85      	ldr	r2, [pc, #532]	; (8005348 <main+0x145c>)
 8005132:	6413      	str	r3, [r2, #64]	; 0x40
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8005134:	4b87      	ldr	r3, [pc, #540]	; (8005354 <main+0x1468>)
 8005136:	789b      	ldrb	r3, [r3, #2]
 8005138:	4a83      	ldr	r2, [pc, #524]	; (8005348 <main+0x145c>)
 800513a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800513e:	4a82      	ldr	r2, [pc, #520]	; (8005348 <main+0x145c>)
 8005140:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8005144:	4a80      	ldr	r2, [pc, #512]	; (8005348 <main+0x145c>)
 8005146:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 800514a:	eeb0 1a66 	vmov.f32	s2, s13
 800514e:	eef0 0a47 	vmov.f32	s1, s14
 8005152:	eeb0 0a67 	vmov.f32	s0, s15
 8005156:	4618      	mov	r0, r3
 8005158:	f7fb ff26 	bl	8000fa8 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 800515c:	4b7d      	ldr	r3, [pc, #500]	; (8005354 <main+0x1468>)
 800515e:	7898      	ldrb	r0, [r3, #2]
 8005160:	4b81      	ldr	r3, [pc, #516]	; (8005368 <main+0x147c>)
 8005162:	4a82      	ldr	r2, [pc, #520]	; (800536c <main+0x1480>)
 8005164:	4982      	ldr	r1, [pc, #520]	; (8005370 <main+0x1484>)
 8005166:	f7fb ffb5 	bl	80010d4 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800516a:	4b7a      	ldr	r3, [pc, #488]	; (8005354 <main+0x1468>)
 800516c:	789b      	ldrb	r3, [r3, #2]
 800516e:	4a76      	ldr	r2, [pc, #472]	; (8005348 <main+0x145c>)
 8005170:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005174:	4a74      	ldr	r2, [pc, #464]	; (8005348 <main+0x145c>)
 8005176:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800517a:	4a73      	ldr	r2, [pc, #460]	; (8005348 <main+0x145c>)
 800517c:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8005180:	eeb0 1a66 	vmov.f32	s2, s13
 8005184:	eef0 0a47 	vmov.f32	s1, s14
 8005188:	eeb0 0a67 	vmov.f32	s0, s15
 800518c:	4619      	mov	r1, r3
 800518e:	4874      	ldr	r0, [pc, #464]	; (8005360 <main+0x1474>)
 8005190:	f000 ff46 	bl	8006020 <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8005194:	2214      	movs	r2, #20
 8005196:	4972      	ldr	r1, [pc, #456]	; (8005360 <main+0x1474>)
 8005198:	4872      	ldr	r0, [pc, #456]	; (8005364 <main+0x1478>)
 800519a:	f005 fa06 	bl	800a5aa <HAL_UART_Transmit_IT>
						break;
 800519e:	e202      	b.n	80055a6 <main+0x16ba>
					case 4:
						yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 80051a0:	4b68      	ldr	r3, [pc, #416]	; (8005344 <main+0x1458>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a73      	ldr	r2, [pc, #460]	; (8005374 <main+0x1488>)
 80051a6:	6013      	str	r3, [r2, #0]
						yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 80051a8:	4b68      	ldr	r3, [pc, #416]	; (800534c <main+0x1460>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a71      	ldr	r2, [pc, #452]	; (8005374 <main+0x1488>)
 80051ae:	6053      	str	r3, [r2, #4]
						yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 80051b0:	4b67      	ldr	r3, [pc, #412]	; (8005350 <main+0x1464>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a6f      	ldr	r2, [pc, #444]	; (8005374 <main+0x1488>)
 80051b6:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80051b8:	4b66      	ldr	r3, [pc, #408]	; (8005354 <main+0x1468>)
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	4a6d      	ldr	r2, [pc, #436]	; (8005374 <main+0x1488>)
 80051be:	edd2 7a00 	vldr	s15, [r2]
 80051c2:	4a6c      	ldr	r2, [pc, #432]	; (8005374 <main+0x1488>)
 80051c4:	ed92 7a01 	vldr	s14, [r2, #4]
 80051c8:	4a6a      	ldr	r2, [pc, #424]	; (8005374 <main+0x1488>)
 80051ca:	edd2 6a02 	vldr	s13, [r2, #8]
 80051ce:	eeb0 1a66 	vmov.f32	s2, s13
 80051d2:	eef0 0a47 	vmov.f32	s1, s14
 80051d6:	eeb0 0a67 	vmov.f32	s0, s15
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb fee4 	bl	8000fa8 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 80051e0:	4b5c      	ldr	r3, [pc, #368]	; (8005354 <main+0x1468>)
 80051e2:	7898      	ldrb	r0, [r3, #2]
 80051e4:	4b64      	ldr	r3, [pc, #400]	; (8005378 <main+0x148c>)
 80051e6:	4a65      	ldr	r2, [pc, #404]	; (800537c <main+0x1490>)
 80051e8:	4962      	ldr	r1, [pc, #392]	; (8005374 <main+0x1488>)
 80051ea:	f7fb ff73 	bl	80010d4 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80051ee:	4b59      	ldr	r3, [pc, #356]	; (8005354 <main+0x1468>)
 80051f0:	789b      	ldrb	r3, [r3, #2]
 80051f2:	4a60      	ldr	r2, [pc, #384]	; (8005374 <main+0x1488>)
 80051f4:	edd2 7a00 	vldr	s15, [r2]
 80051f8:	4a5e      	ldr	r2, [pc, #376]	; (8005374 <main+0x1488>)
 80051fa:	ed92 7a01 	vldr	s14, [r2, #4]
 80051fe:	4a5d      	ldr	r2, [pc, #372]	; (8005374 <main+0x1488>)
 8005200:	edd2 6a02 	vldr	s13, [r2, #8]
 8005204:	eeb0 1a66 	vmov.f32	s2, s13
 8005208:	eef0 0a47 	vmov.f32	s1, s14
 800520c:	eeb0 0a67 	vmov.f32	s0, s15
 8005210:	4619      	mov	r1, r3
 8005212:	4853      	ldr	r0, [pc, #332]	; (8005360 <main+0x1474>)
 8005214:	f000 ff04 	bl	8006020 <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8005218:	2214      	movs	r2, #20
 800521a:	4951      	ldr	r1, [pc, #324]	; (8005360 <main+0x1474>)
 800521c:	4851      	ldr	r0, [pc, #324]	; (8005364 <main+0x1478>)
 800521e:	f005 f9c4 	bl	800a5aa <HAL_UART_Transmit_IT>
						break;
 8005222:	e1c0      	b.n	80055a6 <main+0x16ba>
					case 5:
						yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 8005224:	4b47      	ldr	r3, [pc, #284]	; (8005344 <main+0x1458>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a55      	ldr	r2, [pc, #340]	; (8005380 <main+0x1494>)
 800522a:	6013      	str	r3, [r2, #0]
						yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 800522c:	4b47      	ldr	r3, [pc, #284]	; (800534c <main+0x1460>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a53      	ldr	r2, [pc, #332]	; (8005380 <main+0x1494>)
 8005232:	6053      	str	r3, [r2, #4]
						yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 8005234:	4b46      	ldr	r3, [pc, #280]	; (8005350 <main+0x1464>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a51      	ldr	r2, [pc, #324]	; (8005380 <main+0x1494>)
 800523a:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800523c:	4b45      	ldr	r3, [pc, #276]	; (8005354 <main+0x1468>)
 800523e:	789b      	ldrb	r3, [r3, #2]
 8005240:	4a4f      	ldr	r2, [pc, #316]	; (8005380 <main+0x1494>)
 8005242:	edd2 7a00 	vldr	s15, [r2]
 8005246:	4a4e      	ldr	r2, [pc, #312]	; (8005380 <main+0x1494>)
 8005248:	ed92 7a01 	vldr	s14, [r2, #4]
 800524c:	4a4c      	ldr	r2, [pc, #304]	; (8005380 <main+0x1494>)
 800524e:	edd2 6a02 	vldr	s13, [r2, #8]
 8005252:	eeb0 1a66 	vmov.f32	s2, s13
 8005256:	eef0 0a47 	vmov.f32	s1, s14
 800525a:	eeb0 0a67 	vmov.f32	s0, s15
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb fea2 	bl	8000fa8 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 8005264:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <main+0x1468>)
 8005266:	7898      	ldrb	r0, [r3, #2]
 8005268:	4b46      	ldr	r3, [pc, #280]	; (8005384 <main+0x1498>)
 800526a:	4a47      	ldr	r2, [pc, #284]	; (8005388 <main+0x149c>)
 800526c:	4944      	ldr	r1, [pc, #272]	; (8005380 <main+0x1494>)
 800526e:	f7fb ff31 	bl	80010d4 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8005272:	4b38      	ldr	r3, [pc, #224]	; (8005354 <main+0x1468>)
 8005274:	789b      	ldrb	r3, [r3, #2]
 8005276:	4a42      	ldr	r2, [pc, #264]	; (8005380 <main+0x1494>)
 8005278:	edd2 7a00 	vldr	s15, [r2]
 800527c:	4a40      	ldr	r2, [pc, #256]	; (8005380 <main+0x1494>)
 800527e:	ed92 7a01 	vldr	s14, [r2, #4]
 8005282:	4a3f      	ldr	r2, [pc, #252]	; (8005380 <main+0x1494>)
 8005284:	edd2 6a02 	vldr	s13, [r2, #8]
 8005288:	eeb0 1a66 	vmov.f32	s2, s13
 800528c:	eef0 0a47 	vmov.f32	s1, s14
 8005290:	eeb0 0a67 	vmov.f32	s0, s15
 8005294:	4619      	mov	r1, r3
 8005296:	4832      	ldr	r0, [pc, #200]	; (8005360 <main+0x1474>)
 8005298:	f000 fec2 	bl	8006020 <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800529c:	2214      	movs	r2, #20
 800529e:	4930      	ldr	r1, [pc, #192]	; (8005360 <main+0x1474>)
 80052a0:	4830      	ldr	r0, [pc, #192]	; (8005364 <main+0x1478>)
 80052a2:	f005 f982 	bl	800a5aa <HAL_UART_Transmit_IT>
						break;
 80052a6:	e17e      	b.n	80055a6 <main+0x16ba>
					case 0x10:
						switch(telemetry_rx_buf[3])
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <main+0x1468>)
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	f200 8179 	bhi.w	80055a4 <main+0x16b8>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <main+0x13cc>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052d5 	.word	0x080052d5
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	08005391 	.word	0x08005391
 80052c4:	080053c9 	.word	0x080053c9
 80052c8:	08005401 	.word	0x08005401
 80052cc:	08005439 	.word	0x08005439
 80052d0:	08005471 	.word	0x08005471
						{
						case 0:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 80052d4:	4b1f      	ldr	r3, [pc, #124]	; (8005354 <main+0x1468>)
 80052d6:	78db      	ldrb	r3, [r3, #3]
 80052d8:	4a2c      	ldr	r2, [pc, #176]	; (800538c <main+0x14a0>)
 80052da:	edd2 7a00 	vldr	s15, [r2]
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <main+0x14a0>)
 80052e0:	ed92 7a01 	vldr	s14, [r2, #4]
 80052e4:	4a29      	ldr	r2, [pc, #164]	; (800538c <main+0x14a0>)
 80052e6:	edd2 6a02 	vldr	s13, [r2, #8]
 80052ea:	eeb0 1a66 	vmov.f32	s2, s13
 80052ee:	eef0 0a47 	vmov.f32	s1, s14
 80052f2:	eeb0 0a67 	vmov.f32	s0, s15
 80052f6:	4619      	mov	r1, r3
 80052f8:	4819      	ldr	r0, [pc, #100]	; (8005360 <main+0x1474>)
 80052fa:	f000 fe91 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80052fe:	230a      	movs	r3, #10
 8005300:	2214      	movs	r2, #20
 8005302:	4917      	ldr	r1, [pc, #92]	; (8005360 <main+0x1474>)
 8005304:	4817      	ldr	r0, [pc, #92]	; (8005364 <main+0x1478>)
 8005306:	f005 f8be 	bl	800a486 <HAL_UART_Transmit>
							break;
 800530a:	e148      	b.n	800559e <main+0x16b2>
						case 1:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <main+0x1468>)
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	4a1e      	ldr	r2, [pc, #120]	; (800538c <main+0x14a0>)
 8005312:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005316:	4a1d      	ldr	r2, [pc, #116]	; (800538c <main+0x14a0>)
 8005318:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 800531c:	4a1b      	ldr	r2, [pc, #108]	; (800538c <main+0x14a0>)
 800531e:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 8005322:	eeb0 1a66 	vmov.f32	s2, s13
 8005326:	eef0 0a47 	vmov.f32	s1, s14
 800532a:	eeb0 0a67 	vmov.f32	s0, s15
 800532e:	4619      	mov	r1, r3
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <main+0x1474>)
 8005332:	f000 fe75 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005336:	230a      	movs	r3, #10
 8005338:	2214      	movs	r2, #20
 800533a:	4909      	ldr	r1, [pc, #36]	; (8005360 <main+0x1474>)
 800533c:	4809      	ldr	r0, [pc, #36]	; (8005364 <main+0x1478>)
 800533e:	f005 f8a2 	bl	800a486 <HAL_UART_Transmit>
							break;
 8005342:	e12c      	b.n	800559e <main+0x16b2>
 8005344:	200005cb 	.word	0x200005cb
 8005348:	200003b8 	.word	0x200003b8
 800534c:	200005cf 	.word	0x200005cf
 8005350:	200005d3 	.word	0x200005d3
 8005354:	200005c8 	.word	0x200005c8
 8005358:	200003c0 	.word	0x200003c0
 800535c:	200003bc 	.word	0x200003bc
 8005360:	200005a0 	.word	0x200005a0
 8005364:	20000648 	.word	0x20000648
 8005368:	200003f8 	.word	0x200003f8
 800536c:	200003f4 	.word	0x200003f4
 8005370:	200003f0 	.word	0x200003f0
 8005374:	20000428 	.word	0x20000428
 8005378:	20000430 	.word	0x20000430
 800537c:	2000042c 	.word	0x2000042c
 8005380:	20000460 	.word	0x20000460
 8005384:	20000468 	.word	0x20000468
 8005388:	20000464 	.word	0x20000464
 800538c:	20000348 	.word	0x20000348
						case 2:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8005390:	4b9d      	ldr	r3, [pc, #628]	; (8005608 <main+0x171c>)
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	4a9d      	ldr	r2, [pc, #628]	; (800560c <main+0x1720>)
 8005396:	edd2 7a00 	vldr	s15, [r2]
 800539a:	4a9c      	ldr	r2, [pc, #624]	; (800560c <main+0x1720>)
 800539c:	ed92 7a01 	vldr	s14, [r2, #4]
 80053a0:	4a9a      	ldr	r2, [pc, #616]	; (800560c <main+0x1720>)
 80053a2:	edd2 6a02 	vldr	s13, [r2, #8]
 80053a6:	eeb0 1a66 	vmov.f32	s2, s13
 80053aa:	eef0 0a47 	vmov.f32	s1, s14
 80053ae:	eeb0 0a67 	vmov.f32	s0, s15
 80053b2:	4619      	mov	r1, r3
 80053b4:	4896      	ldr	r0, [pc, #600]	; (8005610 <main+0x1724>)
 80053b6:	f000 fe33 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80053ba:	230a      	movs	r3, #10
 80053bc:	2214      	movs	r2, #20
 80053be:	4994      	ldr	r1, [pc, #592]	; (8005610 <main+0x1724>)
 80053c0:	4894      	ldr	r0, [pc, #592]	; (8005614 <main+0x1728>)
 80053c2:	f005 f860 	bl	800a486 <HAL_UART_Transmit>
							break;
 80053c6:	e0ea      	b.n	800559e <main+0x16b2>
						case 3:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80053c8:	4b8f      	ldr	r3, [pc, #572]	; (8005608 <main+0x171c>)
 80053ca:	78db      	ldrb	r3, [r3, #3]
 80053cc:	4a8f      	ldr	r2, [pc, #572]	; (800560c <main+0x1720>)
 80053ce:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80053d2:	4a8e      	ldr	r2, [pc, #568]	; (800560c <main+0x1720>)
 80053d4:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 80053d8:	4a8c      	ldr	r2, [pc, #560]	; (800560c <main+0x1720>)
 80053da:	edd2 6a10 	vldr	s13, [r2, #64]	; 0x40
 80053de:	eeb0 1a66 	vmov.f32	s2, s13
 80053e2:	eef0 0a47 	vmov.f32	s1, s14
 80053e6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ea:	4619      	mov	r1, r3
 80053ec:	4888      	ldr	r0, [pc, #544]	; (8005610 <main+0x1724>)
 80053ee:	f000 fe17 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80053f2:	230a      	movs	r3, #10
 80053f4:	2214      	movs	r2, #20
 80053f6:	4986      	ldr	r1, [pc, #536]	; (8005610 <main+0x1724>)
 80053f8:	4886      	ldr	r0, [pc, #536]	; (8005614 <main+0x1728>)
 80053fa:	f005 f844 	bl	800a486 <HAL_UART_Transmit>
							break;
 80053fe:	e0ce      	b.n	800559e <main+0x16b2>
						case 4:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005400:	4b81      	ldr	r3, [pc, #516]	; (8005608 <main+0x171c>)
 8005402:	78db      	ldrb	r3, [r3, #3]
 8005404:	4a84      	ldr	r2, [pc, #528]	; (8005618 <main+0x172c>)
 8005406:	edd2 7a00 	vldr	s15, [r2]
 800540a:	4a83      	ldr	r2, [pc, #524]	; (8005618 <main+0x172c>)
 800540c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005410:	4a81      	ldr	r2, [pc, #516]	; (8005618 <main+0x172c>)
 8005412:	edd2 6a02 	vldr	s13, [r2, #8]
 8005416:	eeb0 1a66 	vmov.f32	s2, s13
 800541a:	eef0 0a47 	vmov.f32	s1, s14
 800541e:	eeb0 0a67 	vmov.f32	s0, s15
 8005422:	4619      	mov	r1, r3
 8005424:	487a      	ldr	r0, [pc, #488]	; (8005610 <main+0x1724>)
 8005426:	f000 fdfb 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800542a:	230a      	movs	r3, #10
 800542c:	2214      	movs	r2, #20
 800542e:	4978      	ldr	r1, [pc, #480]	; (8005610 <main+0x1724>)
 8005430:	4878      	ldr	r0, [pc, #480]	; (8005614 <main+0x1728>)
 8005432:	f005 f828 	bl	800a486 <HAL_UART_Transmit>
							break;
 8005436:	e0b2      	b.n	800559e <main+0x16b2>
						case 5:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8005438:	4b73      	ldr	r3, [pc, #460]	; (8005608 <main+0x171c>)
 800543a:	78db      	ldrb	r3, [r3, #3]
 800543c:	4a77      	ldr	r2, [pc, #476]	; (800561c <main+0x1730>)
 800543e:	edd2 7a00 	vldr	s15, [r2]
 8005442:	4a76      	ldr	r2, [pc, #472]	; (800561c <main+0x1730>)
 8005444:	ed92 7a01 	vldr	s14, [r2, #4]
 8005448:	4a74      	ldr	r2, [pc, #464]	; (800561c <main+0x1730>)
 800544a:	edd2 6a02 	vldr	s13, [r2, #8]
 800544e:	eeb0 1a66 	vmov.f32	s2, s13
 8005452:	eef0 0a47 	vmov.f32	s1, s14
 8005456:	eeb0 0a67 	vmov.f32	s0, s15
 800545a:	4619      	mov	r1, r3
 800545c:	486c      	ldr	r0, [pc, #432]	; (8005610 <main+0x1724>)
 800545e:	f000 fddf 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005462:	230a      	movs	r3, #10
 8005464:	2214      	movs	r2, #20
 8005466:	496a      	ldr	r1, [pc, #424]	; (8005610 <main+0x1724>)
 8005468:	486a      	ldr	r0, [pc, #424]	; (8005614 <main+0x1728>)
 800546a:	f005 f80c 	bl	800a486 <HAL_UART_Transmit>
							break;
 800546e:	e096      	b.n	800559e <main+0x16b2>
						case 6:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 8005470:	4b6b      	ldr	r3, [pc, #428]	; (8005620 <main+0x1734>)
 8005472:	edd3 7a00 	vldr	s15, [r3]
 8005476:	4b6a      	ldr	r3, [pc, #424]	; (8005620 <main+0x1734>)
 8005478:	ed93 7a01 	vldr	s14, [r3, #4]
 800547c:	4b68      	ldr	r3, [pc, #416]	; (8005620 <main+0x1734>)
 800547e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005482:	eeb0 1a66 	vmov.f32	s2, s13
 8005486:	eef0 0a47 	vmov.f32	s1, s14
 800548a:	eeb0 0a67 	vmov.f32	s0, s15
 800548e:	2100      	movs	r1, #0
 8005490:	485f      	ldr	r0, [pc, #380]	; (8005610 <main+0x1724>)
 8005492:	f000 fdc5 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005496:	230a      	movs	r3, #10
 8005498:	2214      	movs	r2, #20
 800549a:	495d      	ldr	r1, [pc, #372]	; (8005610 <main+0x1724>)
 800549c:	485d      	ldr	r0, [pc, #372]	; (8005614 <main+0x1728>)
 800549e:	f004 fff2 	bl	800a486 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 80054a2:	4b5f      	ldr	r3, [pc, #380]	; (8005620 <main+0x1734>)
 80054a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80054a8:	4b5d      	ldr	r3, [pc, #372]	; (8005620 <main+0x1734>)
 80054aa:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80054ae:	4b5c      	ldr	r3, [pc, #368]	; (8005620 <main+0x1734>)
 80054b0:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80054b4:	eeb0 1a66 	vmov.f32	s2, s13
 80054b8:	eef0 0a47 	vmov.f32	s1, s14
 80054bc:	eeb0 0a67 	vmov.f32	s0, s15
 80054c0:	2101      	movs	r1, #1
 80054c2:	4853      	ldr	r0, [pc, #332]	; (8005610 <main+0x1724>)
 80054c4:	f000 fdac 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80054c8:	230a      	movs	r3, #10
 80054ca:	2214      	movs	r2, #20
 80054cc:	4950      	ldr	r1, [pc, #320]	; (8005610 <main+0x1724>)
 80054ce:	4851      	ldr	r0, [pc, #324]	; (8005614 <main+0x1728>)
 80054d0:	f004 ffd9 	bl	800a486 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 80054d4:	4b4d      	ldr	r3, [pc, #308]	; (800560c <main+0x1720>)
 80054d6:	edd3 7a00 	vldr	s15, [r3]
 80054da:	4b4c      	ldr	r3, [pc, #304]	; (800560c <main+0x1720>)
 80054dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80054e0:	4b4a      	ldr	r3, [pc, #296]	; (800560c <main+0x1720>)
 80054e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80054e6:	eeb0 1a66 	vmov.f32	s2, s13
 80054ea:	eef0 0a47 	vmov.f32	s1, s14
 80054ee:	eeb0 0a67 	vmov.f32	s0, s15
 80054f2:	2102      	movs	r1, #2
 80054f4:	4846      	ldr	r0, [pc, #280]	; (8005610 <main+0x1724>)
 80054f6:	f000 fd93 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80054fa:	230a      	movs	r3, #10
 80054fc:	2214      	movs	r2, #20
 80054fe:	4944      	ldr	r1, [pc, #272]	; (8005610 <main+0x1724>)
 8005500:	4844      	ldr	r0, [pc, #272]	; (8005614 <main+0x1728>)
 8005502:	f004 ffc0 	bl	800a486 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8005506:	4b41      	ldr	r3, [pc, #260]	; (800560c <main+0x1720>)
 8005508:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800550c:	4b3f      	ldr	r3, [pc, #252]	; (800560c <main+0x1720>)
 800550e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005512:	4b3e      	ldr	r3, [pc, #248]	; (800560c <main+0x1720>)
 8005514:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8005518:	eeb0 1a66 	vmov.f32	s2, s13
 800551c:	eef0 0a47 	vmov.f32	s1, s14
 8005520:	eeb0 0a67 	vmov.f32	s0, s15
 8005524:	2103      	movs	r1, #3
 8005526:	483a      	ldr	r0, [pc, #232]	; (8005610 <main+0x1724>)
 8005528:	f000 fd7a 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800552c:	230a      	movs	r3, #10
 800552e:	2214      	movs	r2, #20
 8005530:	4937      	ldr	r1, [pc, #220]	; (8005610 <main+0x1724>)
 8005532:	4838      	ldr	r0, [pc, #224]	; (8005614 <main+0x1728>)
 8005534:	f004 ffa7 	bl	800a486 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005538:	4b37      	ldr	r3, [pc, #220]	; (8005618 <main+0x172c>)
 800553a:	edd3 7a00 	vldr	s15, [r3]
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <main+0x172c>)
 8005540:	ed93 7a01 	vldr	s14, [r3, #4]
 8005544:	4b34      	ldr	r3, [pc, #208]	; (8005618 <main+0x172c>)
 8005546:	edd3 6a02 	vldr	s13, [r3, #8]
 800554a:	eeb0 1a66 	vmov.f32	s2, s13
 800554e:	eef0 0a47 	vmov.f32	s1, s14
 8005552:	eeb0 0a67 	vmov.f32	s0, s15
 8005556:	2104      	movs	r1, #4
 8005558:	482d      	ldr	r0, [pc, #180]	; (8005610 <main+0x1724>)
 800555a:	f000 fd61 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800555e:	230a      	movs	r3, #10
 8005560:	2214      	movs	r2, #20
 8005562:	492b      	ldr	r1, [pc, #172]	; (8005610 <main+0x1724>)
 8005564:	482b      	ldr	r0, [pc, #172]	; (8005614 <main+0x1728>)
 8005566:	f004 ff8e 	bl	800a486 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <main+0x1730>)
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	4b2a      	ldr	r3, [pc, #168]	; (800561c <main+0x1730>)
 8005572:	ed93 7a01 	vldr	s14, [r3, #4]
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <main+0x1730>)
 8005578:	edd3 6a02 	vldr	s13, [r3, #8]
 800557c:	eeb0 1a66 	vmov.f32	s2, s13
 8005580:	eef0 0a47 	vmov.f32	s1, s14
 8005584:	eeb0 0a67 	vmov.f32	s0, s15
 8005588:	2105      	movs	r1, #5
 800558a:	4821      	ldr	r0, [pc, #132]	; (8005610 <main+0x1724>)
 800558c:	f000 fd48 	bl	8006020 <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005590:	230a      	movs	r3, #10
 8005592:	2214      	movs	r2, #20
 8005594:	491e      	ldr	r1, [pc, #120]	; (8005610 <main+0x1724>)
 8005596:	481f      	ldr	r0, [pc, #124]	; (8005614 <main+0x1728>)
 8005598:	f004 ff75 	bl	800a486 <HAL_UART_Transmit>
							break;
 800559c:	bf00      	nop
						}
						break;
 800559e:	e001      	b.n	80055a4 <main+0x16b8>

					}
				}
 80055a0:	bf00      	nop
 80055a2:	e000      	b.n	80055a6 <main+0x16ba>
						break;
 80055a4:	bf00      	nop
			}
		}
		if(tim7_20ms_flag == 1 && tim7_100ms_flag != 1)
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <main+0x1738>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d10f      	bne.n	80055ce <main+0x16e2>
 80055ae:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <main+0x173c>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d00b      	beq.n	80055ce <main+0x16e2>
		{
			tim7_20ms_flag = 0;
 80055b6:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <main+0x1738>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]

			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80055bc:	4814      	ldr	r0, [pc, #80]	; (8005610 <main+0x1724>)
 80055be:	f000 faf3 	bl	8005ba8 <Encode_Msg_AHRS>

			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80055c2:	2214      	movs	r2, #20
 80055c4:	4912      	ldr	r1, [pc, #72]	; (8005610 <main+0x1724>)
 80055c6:	4813      	ldr	r0, [pc, #76]	; (8005614 <main+0x1728>)
 80055c8:	f004 ffef 	bl	800a5aa <HAL_UART_Transmit_IT>
 80055cc:	e01a      	b.n	8005604 <main+0x1718>
		}

		else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <main+0x1738>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	f47f a852 	bne.w	800467c <main+0x790>
 80055d8:	4b13      	ldr	r3, [pc, #76]	; (8005628 <main+0x173c>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f47f a84d 	bne.w	800467c <main+0x790>
		{
			tim7_20ms_flag = 0;
 80055e2:	4b10      	ldr	r3, [pc, #64]	; (8005624 <main+0x1738>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 0;
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <main+0x173c>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]

			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80055ee:	4808      	ldr	r0, [pc, #32]	; (8005610 <main+0x1724>)
 80055f0:	f000 fada 	bl	8005ba8 <Encode_Msg_AHRS>
			Encode_Msg_GPS(&telemetry_tx_buf[20]);
 80055f4:	480d      	ldr	r0, [pc, #52]	; (800562c <main+0x1740>)
 80055f6:	f000 fc53 	bl	8005ea0 <Encode_Msg_GPS>

			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 80055fa:	2228      	movs	r2, #40	; 0x28
 80055fc:	4904      	ldr	r1, [pc, #16]	; (8005610 <main+0x1724>)
 80055fe:	4805      	ldr	r0, [pc, #20]	; (8005614 <main+0x1728>)
 8005600:	f004 ffd3 	bl	800a5aa <HAL_UART_Transmit_IT>
		if(BNO080_dataAvailable() == 1){
 8005604:	f7ff b83a 	b.w	800467c <main+0x790>
 8005608:	200005c8 	.word	0x200005c8
 800560c:	200003b8 	.word	0x200003b8
 8005610:	200005a0 	.word	0x200005a0
 8005614:	20000648 	.word	0x20000648
 8005618:	20000428 	.word	0x20000428
 800561c:	20000460 	.word	0x20000460
 8005620:	20000348 	.word	0x20000348
 8005624:	20000636 	.word	0x20000636
 8005628:	20000637 	.word	0x20000637
 800562c:	200005b4 	.word	0x200005b4

08005630 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b094      	sub	sp, #80	; 0x50
 8005634:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005636:	f107 0320 	add.w	r3, r7, #32
 800563a:	2230      	movs	r2, #48	; 0x30
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f007 f8ba 	bl	800c7b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005644:	f107 030c 	add.w	r3, r7, #12
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	609a      	str	r2, [r3, #8]
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	4b28      	ldr	r3, [pc, #160]	; (80056fc <SystemClock_Config+0xcc>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	4a27      	ldr	r2, [pc, #156]	; (80056fc <SystemClock_Config+0xcc>)
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005662:	6413      	str	r3, [r2, #64]	; 0x40
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <SystemClock_Config+0xcc>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005670:	2300      	movs	r3, #0
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	4b22      	ldr	r3, [pc, #136]	; (8005700 <SystemClock_Config+0xd0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <SystemClock_Config+0xd0>)
 800567a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	4b1f      	ldr	r3, [pc, #124]	; (8005700 <SystemClock_Config+0xd0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005688:	607b      	str	r3, [r7, #4]
 800568a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800568c:	2301      	movs	r3, #1
 800568e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005696:	2302      	movs	r3, #2
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800569a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80056a0:	2304      	movs	r3, #4
 80056a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80056a4:	23a8      	movs	r3, #168	; 0xa8
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80056a8:	2302      	movs	r3, #2
 80056aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80056ac:	2304      	movs	r3, #4
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056b0:	f107 0320 	add.w	r3, r7, #32
 80056b4:	4618      	mov	r0, r3
 80056b6:	f004 fa01 	bl	8009abc <HAL_RCC_OscConfig>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80056c0:	f000 fd01 	bl	80060c6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056c4:	230f      	movs	r3, #15
 80056c6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056c8:	2302      	movs	r3, #2
 80056ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80056dc:	f107 030c 	add.w	r3, r7, #12
 80056e0:	2105      	movs	r1, #5
 80056e2:	4618      	mov	r0, r3
 80056e4:	f004 fc62 	bl	8009fac <HAL_RCC_ClockConfig>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80056ee:	f000 fcea 	bl	80060c6 <Error_Handler>
	}
}
 80056f2:	bf00      	nop
 80056f4:	3750      	adds	r7, #80	; 0x50
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800
 8005700:	40007000 	.word	0x40007000

08005704 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <Is_iBus_Throttle_Min+0x40>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d115      	bne.n	800573c <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <Is_iBus_Throttle_Min+0x40>)
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8005716:	2120      	movs	r1, #32
 8005718:	480b      	ldr	r0, [pc, #44]	; (8005748 <Is_iBus_Throttle_Min+0x44>)
 800571a:	f7fc fc45 	bl	8001fa8 <iBus_Check_CHKSUM>
 800571e:	4603      	mov	r3, r0
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10b      	bne.n	800573c <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8005724:	4909      	ldr	r1, [pc, #36]	; (800574c <Is_iBus_Throttle_Min+0x48>)
 8005726:	4808      	ldr	r0, [pc, #32]	; (8005748 <Is_iBus_Throttle_Min+0x44>)
 8005728:	f7fc fc74 	bl	8002014 <iBus_Parsing>
			if(iBus.LV < 1010)
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <Is_iBus_Throttle_Min+0x48>)
 800572e:	889b      	ldrh	r3, [r3, #4]
 8005730:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005734:	4293      	cmp	r3, r2
 8005736:	d801      	bhi.n	800573c <Is_iBus_Throttle_Min+0x38>
				return 1;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000634 	.word	0x20000634
 8005748:	20000614 	.word	0x20000614
 800574c:	200002c8 	.word	0x200002c8

08005750 <ESC_Calibration>:

void ESC_Calibration(void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 21000;
 8005754:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <ESC_Calibration+0x58>)
 8005756:	f245 2208 	movw	r2, #21000	; 0x5208
 800575a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5->CCR2 = 21000;
 800575c:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <ESC_Calibration+0x58>)
 800575e:	f245 2208 	movw	r2, #21000	; 0x5208
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR3 = 21000;
 8005764:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <ESC_Calibration+0x58>)
 8005766:	f245 2208 	movw	r2, #21000	; 0x5208
 800576a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5->CCR4 = 21000;
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <ESC_Calibration+0x58>)
 800576e:	f245 2208 	movw	r2, #21000	; 0x5208
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8005774:	f641 3058 	movw	r0, #7000	; 0x1b58
 8005778:	f001 fefa 	bl	8007570 <HAL_Delay>

	TIM5->CCR1 = 10500;
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <ESC_Calibration+0x58>)
 800577e:	f642 1204 	movw	r2, #10500	; 0x2904
 8005782:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5->CCR2 = 10500;
 8005784:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <ESC_Calibration+0x58>)
 8005786:	f642 1204 	movw	r2, #10500	; 0x2904
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR3 = 10500;
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <ESC_Calibration+0x58>)
 800578e:	f642 1204 	movw	r2, #10500	; 0x2904
 8005792:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5->CCR4 = 10500;
 8005794:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <ESC_Calibration+0x58>)
 8005796:	f642 1204 	movw	r2, #10500	; 0x2904
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 800579c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80057a0:	f001 fee6 	bl	8007570 <HAL_Delay>
}
 80057a4:	bf00      	nop
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40000c00 	.word	0x40000c00

080057ac <Is_iBus_Received>:
int Is_iBus_Received(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <Is_iBus_Received+0x34>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d10f      	bne.n	80057d8 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <Is_iBus_Received+0x34>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 80057be:	2120      	movs	r1, #32
 80057c0:	4808      	ldr	r0, [pc, #32]	; (80057e4 <Is_iBus_Received+0x38>)
 80057c2:	f7fc fbf1 	bl	8001fa8 <iBus_Check_CHKSUM>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d105      	bne.n	80057d8 <Is_iBus_Received+0x2c>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80057cc:	4906      	ldr	r1, [pc, #24]	; (80057e8 <Is_iBus_Received+0x3c>)
 80057ce:	4805      	ldr	r0, [pc, #20]	; (80057e4 <Is_iBus_Received+0x38>)
 80057d0:	f7fc fc20 	bl	8002014 <iBus_Parsing>
			return 1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000634 	.word	0x20000634
 80057e4:	20000614 	.word	0x20000614
 80057e8:	200002c8 	.word	0x200002c8

080057ec <BNO080_Calibration>:
void BNO080_Calibration(void)
{
 80057ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f0:	b090      	sub	sp, #64	; 0x40
 80057f2:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 80057f4:	f7fb fe90 	bl	8001518 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 80057f8:	f7fc f9eb 	bl	8001bd2 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 80057fc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005800:	f7fc f9c9 	bl	8001b96 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8005804:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005808:	f7fc f9d4 	bl	8001bb4 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 800580c:	489d      	ldr	r0, [pc, #628]	; (8005a84 <BNO080_Calibration+0x298>)
 800580e:	f007 fccb 	bl	800d1a8 <puts>
	printf("Output in form x, y, z, in uTesla\n\n");
 8005812:	489d      	ldr	r0, [pc, #628]	; (8005a88 <BNO080_Calibration+0x29c>)
 8005814:	f007 fcc8 	bl	800d1a8 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8005818:	e0b8      	b.n	800598c <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 800581a:	f7fb ff13 	bl	8001644 <BNO080_dataAvailable>
 800581e:	4603      	mov	r3, r0
 8005820:	2b01      	cmp	r3, #1
 8005822:	f040 80ae 	bne.w	8005982 <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8005826:	f7fc f941 	bl	8001aac <BNO080_getMagX>
 800582a:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800582e:	f7fc f953 	bl	8001ad8 <BNO080_getMagY>
 8005832:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8005836:	f7fc f965 	bl	8001b04 <BNO080_getMagZ>
 800583a:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800583e:	f7fc f977 	bl	8001b30 <BNO080_getMagAccuracy>
 8005842:	4603      	mov	r3, r0
 8005844:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8005846:	f7fc f8b7 	bl	80019b8 <BNO080_getQuatI>
 800584a:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800584e:	f7fc f8c9 	bl	80019e4 <BNO080_getQuatJ>
 8005852:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8005856:	f7fc f8db 	bl	8001a10 <BNO080_getQuatK>
 800585a:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 800585e:	f7fc f8ed 	bl	8001a3c <BNO080_getQuatReal>
 8005862:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 8005866:	f7fc f915 	bl	8001a94 <BNO080_getQuatAccuracy>
 800586a:	4603      	mov	r3, r0
 800586c:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 800586e:	6a38      	ldr	r0, [r7, #32]
 8005870:	f7fa fe6a 	bl	8000548 <__aeabi_f2d>
 8005874:	4680      	mov	r8, r0
 8005876:	4689      	mov	r9, r1
 8005878:	69f8      	ldr	r0, [r7, #28]
 800587a:	f7fa fe65 	bl	8000548 <__aeabi_f2d>
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
 8005882:	69b8      	ldr	r0, [r7, #24]
 8005884:	f7fa fe60 	bl	8000548 <__aeabi_f2d>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005890:	e9cd 4500 	strd	r4, r5, [sp]
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	487c      	ldr	r0, [pc, #496]	; (8005a8c <BNO080_Calibration+0x2a0>)
 800589a:	f007 fbff 	bl	800d09c <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <BNO080_Calibration+0xc0>
 80058a4:	487a      	ldr	r0, [pc, #488]	; (8005a90 <BNO080_Calibration+0x2a4>)
 80058a6:	f007 fbf9 	bl	800d09c <iprintf>
 80058aa:	e013      	b.n	80058d4 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d103      	bne.n	80058ba <BNO080_Calibration+0xce>
 80058b2:	4878      	ldr	r0, [pc, #480]	; (8005a94 <BNO080_Calibration+0x2a8>)
 80058b4:	f007 fbf2 	bl	800d09c <iprintf>
 80058b8:	e00c      	b.n	80058d4 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d103      	bne.n	80058c8 <BNO080_Calibration+0xdc>
 80058c0:	4875      	ldr	r0, [pc, #468]	; (8005a98 <BNO080_Calibration+0x2ac>)
 80058c2:	f007 fbeb 	bl	800d09c <iprintf>
 80058c6:	e005      	b.n	80058d4 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d102      	bne.n	80058d4 <BNO080_Calibration+0xe8>
 80058ce:	4873      	ldr	r0, [pc, #460]	; (8005a9c <BNO080_Calibration+0x2b0>)
 80058d0:	f007 fbe4 	bl	800d09c <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 80058d4:	6938      	ldr	r0, [r7, #16]
 80058d6:	f7fa fe37 	bl	8000548 <__aeabi_f2d>
 80058da:	4682      	mov	sl, r0
 80058dc:	468b      	mov	fp, r1
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f7fa fe32 	bl	8000548 <__aeabi_f2d>
 80058e4:	4604      	mov	r4, r0
 80058e6:	460d      	mov	r5, r1
 80058e8:	6938      	ldr	r0, [r7, #16]
 80058ea:	f7fa fe2d 	bl	8000548 <__aeabi_f2d>
 80058ee:	4680      	mov	r8, r0
 80058f0:	4689      	mov	r9, r1
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fa fe28 	bl	8000548 <__aeabi_f2d>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005900:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005904:	e9cd 4500 	strd	r4, r5, [sp]
 8005908:	4652      	mov	r2, sl
 800590a:	465b      	mov	r3, fp
 800590c:	4864      	ldr	r0, [pc, #400]	; (8005aa0 <BNO080_Calibration+0x2b4>)
 800590e:	f007 fbc5 	bl	800d09c <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <BNO080_Calibration+0x134>
 8005918:	4862      	ldr	r0, [pc, #392]	; (8005aa4 <BNO080_Calibration+0x2b8>)
 800591a:	f007 fc45 	bl	800d1a8 <puts>
 800591e:	e013      	b.n	8005948 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d103      	bne.n	800592e <BNO080_Calibration+0x142>
 8005926:	4860      	ldr	r0, [pc, #384]	; (8005aa8 <BNO080_Calibration+0x2bc>)
 8005928:	f007 fc3e 	bl	800d1a8 <puts>
 800592c:	e00c      	b.n	8005948 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d103      	bne.n	800593c <BNO080_Calibration+0x150>
 8005934:	485d      	ldr	r0, [pc, #372]	; (8005aac <BNO080_Calibration+0x2c0>)
 8005936:	f007 fc37 	bl	800d1a8 <puts>
 800593a:	e005      	b.n	8005948 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d102      	bne.n	8005948 <BNO080_Calibration+0x15c>
 8005942:	485b      	ldr	r0, [pc, #364]	; (8005ab0 <BNO080_Calibration+0x2c4>)
 8005944:	f007 fc30 	bl	800d1a8 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d110      	bne.n	8005970 <BNO080_Calibration+0x184>
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d10d      	bne.n	8005970 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005954:	2107      	movs	r1, #7
 8005956:	4857      	ldr	r0, [pc, #348]	; (8005ab4 <BNO080_Calibration+0x2c8>)
 8005958:	f7fe fa6c 	bl	8003e34 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 800595c:	4b56      	ldr	r3, [pc, #344]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 800595e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005962:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005968:	4853      	ldr	r0, [pc, #332]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 800596a:	f7fe f9eb 	bl	8003d44 <LL_TIM_CC_EnableChannel>
 800596e:	e008      	b.n	8005982 <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005970:	2107      	movs	r1, #7
 8005972:	4850      	ldr	r0, [pc, #320]	; (8005ab4 <BNO080_Calibration+0x2c8>)
 8005974:	f7fe fa6c 	bl	8003e50 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800597c:	484e      	ldr	r0, [pc, #312]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 800597e:	f7fe f9f2 	bl	8003d66 <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8005982:	f7ff ff13 	bl	80057ac <Is_iBus_Received>
		HAL_Delay(100);
 8005986:	2064      	movs	r0, #100	; 0x64
 8005988:	f001 fdf2 	bl	8007570 <HAL_Delay>
	while(iBus.SwC == 1500)
 800598c:	4b4b      	ldr	r3, [pc, #300]	; (8005abc <BNO080_Calibration+0x2d0>)
 800598e:	899b      	ldrh	r3, [r3, #12]
 8005990:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005994:	4293      	cmp	r3, r2
 8005996:	f43f af40 	beq.w	800581a <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800599a:	2107      	movs	r1, #7
 800599c:	4845      	ldr	r0, [pc, #276]	; (8005ab4 <BNO080_Calibration+0x2c8>)
 800599e:	f7fe fa57 	bl	8003e50 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80059a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059a6:	4844      	ldr	r0, [pc, #272]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 80059a8:	f7fe f9dd 	bl	8003d66 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 80059ac:	f7fc f9fe 	bl	8001dac <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 80059b0:	f7fc f9e0 	bl	8001d74 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 80059b4:	2364      	movs	r3, #100	; 0x64
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	3b01      	subs	r3, #1
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02f      	beq.n	8005a24 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 80059c4:	f7fb fe3e 	bl	8001644 <BNO080_dataAvailable>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d026      	beq.n	8005a1c <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 80059ce:	f7fc f907 	bl	8001be0 <BNO080_calibrationComplete>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d121      	bne.n	8005a1c <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 80059d8:	4839      	ldr	r0, [pc, #228]	; (8005ac0 <BNO080_Calibration+0x2d4>)
 80059da:	f007 fbe5 	bl	800d1a8 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80059de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059e2:	4835      	ldr	r0, [pc, #212]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 80059e4:	f7fe f9ae 	bl	8003d44 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 80059e8:	4b33      	ldr	r3, [pc, #204]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 80059ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 80059f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80059f4:	f001 fdbc 	bl	8007570 <HAL_Delay>
				TIM3->PSC = 1500;
 80059f8:	4b2f      	ldr	r3, [pc, #188]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 80059fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8005a00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a04:	f001 fdb4 	bl	8007570 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a0c:	482a      	ldr	r0, [pc, #168]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 8005a0e:	f7fe f9aa 	bl	8003d66 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 8005a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a16:	f001 fdab 	bl	8007570 <HAL_Delay>
				break;
 8005a1a:	e004      	b.n	8005a26 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 8005a1c:	200a      	movs	r0, #10
 8005a1e:	f001 fda7 	bl	8007570 <HAL_Delay>
		if(--counter == 0) break;
 8005a22:	e7c9      	b.n	80059b8 <BNO080_Calibration+0x1cc>
 8005a24:	bf00      	nop
	}
	if(counter == 0)
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d120      	bne.n	8005a6e <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 8005a2c:	4825      	ldr	r0, [pc, #148]	; (8005ac4 <BNO080_Calibration+0x2d8>)
 8005a2e:	f007 fbbb 	bl	800d1a8 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a36:	4820      	ldr	r0, [pc, #128]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 8005a38:	f7fe f984 	bl	8003d44 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 8005a3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a42:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8005a44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a48:	f001 fd92 	bl	8007570 <HAL_Delay>
		TIM3->PSC = 2000;
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 8005a4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a52:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8005a54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a58:	f001 fd8a 	bl	8007570 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a60:	4815      	ldr	r0, [pc, #84]	; (8005ab8 <BNO080_Calibration+0x2cc>)
 8005a62:	f7fe f980 	bl	8003d66 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 8005a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a6a:	f001 fd81 	bl	8007570 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8005a6e:	f7fb fd53 	bl	8001518 <BNO080_Initialization>
	//BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
	BNO080_enableGameRotationVector(2500);
 8005a72:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005a76:	f7fc f88e 	bl	8001b96 <BNO080_enableGameRotationVector>
}
 8005a7a:	bf00      	nop
 8005a7c:	3728      	adds	r7, #40	; 0x28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a84:	08010258 	.word	0x08010258
 8005a88:	080102a4 	.word	0x080102a4
 8005a8c:	080102c8 	.word	0x080102c8
 8005a90:	080102d4 	.word	0x080102d4
 8005a94:	080102e0 	.word	0x080102e0
 8005a98:	080102e8 	.word	0x080102e8
 8005a9c:	080102f0 	.word	0x080102f0
 8005aa0:	080102f8 	.word	0x080102f8
 8005aa4:	08010308 	.word	0x08010308
 8005aa8:	08010314 	.word	0x08010314
 8005aac:	08010318 	.word	0x08010318
 8005ab0:	08010320 	.word	0x08010320
 8005ab4:	40020800 	.word	0x40020800
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	200002c8 	.word	0x200002c8
 8005ac0:	08010328 	.word	0x08010328
 8005ac4:	08010350 	.word	0x08010350

08005ac8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2e      	ldr	r2, [pc, #184]	; (8005b90 <HAL_UART_RxCpltCallback+0xc8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d153      	bne.n	8005b82 <HAL_UART_RxCpltCallback+0xba>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8005ada:	2201      	movs	r2, #1
 8005adc:	492d      	ldr	r1, [pc, #180]	; (8005b94 <HAL_UART_RxCpltCallback+0xcc>)
 8005ade:	482e      	ldr	r0, [pc, #184]	; (8005b98 <HAL_UART_RxCpltCallback+0xd0>)
 8005ae0:	f004 fda8 	bl	800a634 <HAL_UART_Receive_IT>

		switch(cnt)
 8005ae4:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b13      	cmp	r3, #19
 8005aea:	d02e      	beq.n	8005b4a <HAL_UART_RxCpltCallback+0x82>
 8005aec:	2b13      	cmp	r3, #19
 8005aee:	dc3a      	bgt.n	8005b66 <HAL_UART_RxCpltCallback+0x9e>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_UART_RxCpltCallback+0x32>
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d012      	beq.n	8005b1e <HAL_UART_RxCpltCallback+0x56>
 8005af8:	e035      	b.n	8005b66 <HAL_UART_RxCpltCallback+0x9e>
		{
		case 0:
			if(uart1_rx_data == 0x47)
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <HAL_UART_RxCpltCallback+0xcc>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b47      	cmp	r3, #71	; 0x47
 8005b00:	d141      	bne.n	8005b86 <HAL_UART_RxCpltCallback+0xbe>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <HAL_UART_RxCpltCallback+0xcc>)
 8005b0a:	7819      	ldrb	r1, [r3, #0]
 8005b0c:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <HAL_UART_RxCpltCallback+0xd8>)
 8005b0e:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005b10:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b1a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005b1c:	e033      	b.n	8005b86 <HAL_UART_RxCpltCallback+0xbe>
		case 1:
			if(uart1_rx_data == 0x53)
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <HAL_UART_RxCpltCallback+0xcc>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b53      	cmp	r3, #83	; 0x53
 8005b24:	d10d      	bne.n	8005b42 <HAL_UART_RxCpltCallback+0x7a>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 8005b26:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <HAL_UART_RxCpltCallback+0xcc>)
 8005b2e:	7819      	ldrb	r1, [r3, #0]
 8005b30:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <HAL_UART_RxCpltCallback+0xd8>)
 8005b32:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b3e:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8005b40:	e022      	b.n	8005b88 <HAL_UART_RxCpltCallback+0xc0>
				cnt = 0;
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
			break;
 8005b48:	e01e      	b.n	8005b88 <HAL_UART_RxCpltCallback+0xc0>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8005b4a:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <HAL_UART_RxCpltCallback+0xcc>)
 8005b52:	7819      	ldrb	r1, [r3, #0]
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <HAL_UART_RxCpltCallback+0xd8>)
 8005b56:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 8005b5e:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <HAL_UART_RxCpltCallback+0xdc>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
			break;
 8005b64:	e010      	b.n	8005b88 <HAL_UART_RxCpltCallback+0xc0>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8005b66:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <HAL_UART_RxCpltCallback+0xcc>)
 8005b6e:	7819      	ldrb	r1, [r3, #0]
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_UART_RxCpltCallback+0xd8>)
 8005b72:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <HAL_UART_RxCpltCallback+0xd4>)
 8005b7e:	701a      	strb	r2, [r3, #0]
			break;
 8005b80:	e002      	b.n	8005b88 <HAL_UART_RxCpltCallback+0xc0>
		}
	}
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <HAL_UART_RxCpltCallback+0xc0>
			break;
 8005b86:	bf00      	nop
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40011000 	.word	0x40011000
 8005b94:	20000635 	.word	0x20000635
 8005b98:	20000648 	.word	0x20000648
 8005b9c:	200005e6 	.word	0x200005e6
 8005ba0:	200005c8 	.word	0x200005c8
 8005ba4:	200005dc 	.word	0x200005dc

08005ba8 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x46;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2246      	movs	r2, #70	; 0x46
 8005bb4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	2243      	movs	r2, #67	; 0x43
 8005bbc:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x10;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 8005bc6:	4bae      	ldr	r3, [pc, #696]	; (8005e80 <Encode_Msg_AHRS+0x2d8>)
 8005bc8:	edd3 7a00 	vldr	s15, [r3]
 8005bcc:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bd8:	ee17 3a90 	vmov	r3, s15
 8005bdc:	b21a      	sxth	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3303      	adds	r3, #3
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 8005be6:	4ba6      	ldr	r3, [pc, #664]	; (8005e80 <Encode_Msg_AHRS+0x2d8>)
 8005be8:	edd3 7a00 	vldr	s15, [r3]
 8005bec:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bf8:	ee17 3a90 	vmov	r3, s15
 8005bfc:	b21b      	sxth	r3, r3
 8005bfe:	121b      	asrs	r3, r3, #8
 8005c00:	b21a      	sxth	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 8005c0a:	4b9f      	ldr	r3, [pc, #636]	; (8005e88 <Encode_Msg_AHRS+0x2e0>)
 8005c0c:	edd3 7a00 	vldr	s15, [r3]
 8005c10:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c1c:	ee17 3a90 	vmov	r3, s15
 8005c20:	b21a      	sxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3305      	adds	r3, #5
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 8005c2a:	4b97      	ldr	r3, [pc, #604]	; (8005e88 <Encode_Msg_AHRS+0x2e0>)
 8005c2c:	edd3 7a00 	vldr	s15, [r3]
 8005c30:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c3c:	ee17 3a90 	vmov	r3, s15
 8005c40:	b21b      	sxth	r3, r3
 8005c42:	121b      	asrs	r3, r3, #8
 8005c44:	b21a      	sxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3306      	adds	r3, #6
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

	//	  telemetry_tx_buf[5] = (short)(ICM20602.gyro_x*100);
	//	  telemetry_tx_buf[6] = ((short)(ICM20602.gyro_x*100))>>8;

	telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 8005c4e:	4b8f      	ldr	r3, [pc, #572]	; (8005e8c <Encode_Msg_AHRS+0x2e4>)
 8005c50:	edd3 7a00 	vldr	s15, [r3]
 8005c54:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c60:	ee17 3a90 	vmov	r3, s15
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 8005c6e:	4b87      	ldr	r3, [pc, #540]	; (8005e8c <Encode_Msg_AHRS+0x2e4>)
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c80:	ee17 3a90 	vmov	r3, s15
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	0a1b      	lsrs	r3, r3, #8
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 8005c92:	4b7f      	ldr	r3, [pc, #508]	; (8005e90 <Encode_Msg_AHRS+0x2e8>)
 8005c94:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ca4:	ee17 3a90 	vmov	r3, s15
 8005ca8:	b21a      	sxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3309      	adds	r3, #9
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 8005cb2:	4b77      	ldr	r3, [pc, #476]	; (8005e90 <Encode_Msg_AHRS+0x2e8>)
 8005cb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc4:	ee17 3a90 	vmov	r3, s15
 8005cc8:	b21b      	sxth	r3, r3
 8005cca:	121b      	asrs	r3, r3, #8
 8005ccc:	b21a      	sxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	330a      	adds	r3, #10
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 8005cd6:	4b6f      	ldr	r3, [pc, #444]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005e98 <Encode_Msg_AHRS+0x2f0>
 8005cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cee:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cfa:	ee17 3a90 	vmov	r3, s15
 8005cfe:	b21a      	sxth	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	330b      	adds	r3, #11
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 8005d08:	4b62      	ldr	r3, [pc, #392]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d18:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005e98 <Encode_Msg_AHRS+0x2f0>
 8005d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d20:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d2c:	ee17 3a90 	vmov	r3, s15
 8005d30:	b21b      	sxth	r3, r3
 8005d32:	121b      	asrs	r3, r3, #8
 8005d34:	b21a      	sxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 8005d3e:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005d40:	885b      	ldrh	r3, [r3, #2]
 8005d42:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005e98 <Encode_Msg_AHRS+0x2f0>
 8005d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d56:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d62:	ee17 3a90 	vmov	r3, s15
 8005d66:	b21a      	sxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	330d      	adds	r3, #13
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005d72:	885b      	ldrh	r3, [r3, #2]
 8005d74:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d80:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8005e98 <Encode_Msg_AHRS+0x2f0>
 8005d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d88:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d94:	ee17 3a90 	vmov	r3, s15
 8005d98:	b21b      	sxth	r3, r3
 8005d9a:	121b      	asrs	r3, r3, #8
 8005d9c:	b21a      	sxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	330e      	adds	r3, #14
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 8005da6:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005da8:	88db      	ldrh	r3, [r3, #6]
 8005daa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005db6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005e9c <Encode_Msg_AHRS+0x2f4>
 8005dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dbe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dca:	ee17 3a90 	vmov	r3, s15
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	330f      	adds	r3, #15
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 8005dd8:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005dda:	88db      	ldrh	r3, [r3, #6]
 8005ddc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005e9c <Encode_Msg_AHRS+0x2f4>
 8005dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005df0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005e84 <Encode_Msg_AHRS+0x2dc>
 8005df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfc:	ee17 3a90 	vmov	r3, s15
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3310      	adds	r3, #16
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[17] = (short)(iBus.LV*10);
 8005e0e:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005e10:	889b      	ldrh	r3, [r3, #4]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3311      	adds	r3, #17
 8005e18:	4611      	mov	r1, r2
 8005e1a:	0089      	lsls	r1, r1, #2
 8005e1c:	440a      	add	r2, r1
 8005e1e:	0052      	lsls	r2, r2, #1
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = ((short)(iBus.LV*10))>>8;
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <Encode_Msg_AHRS+0x2ec>)
 8005e26:	889b      	ldrh	r3, [r3, #4]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	0092      	lsls	r2, r2, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b21b      	sxth	r3, r3
 8005e34:	121b      	asrs	r3, r3, #8
 8005e36:	b21a      	sxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3312      	adds	r3, #18
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3313      	adds	r3, #19
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	701a      	strb	r2, [r3, #0]

	for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e00e      	b.n	8005e6c <Encode_Msg_AHRS+0x2c4>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3313      	adds	r3, #19
 8005e52:	7819      	ldrb	r1, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	781a      	ldrb	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3313      	adds	r3, #19
 8005e60:	1a8a      	subs	r2, r1, r2
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b12      	cmp	r3, #18
 8005e70:	dded      	ble.n	8005e4e <Encode_Msg_AHRS+0x2a6>
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20000498 	.word	0x20000498
 8005e84:	42c80000 	.word	0x42c80000
 8005e88:	2000049c 	.word	0x2000049c
 8005e8c:	200004a0 	.word	0x200004a0
 8005e90:	20000308 	.word	0x20000308
 8005e94:	200002c8 	.word	0x200002c8
 8005e98:	3dcccccd 	.word	0x3dcccccd
 8005e9c:	3eb851ec 	.word	0x3eb851ec

08005ea0 <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char* telemetry_tx_buf)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x46;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2246      	movs	r2, #70	; 0x46
 8005eac:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	2243      	movs	r2, #67	; 0x43
 8005eb4:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x11;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3302      	adds	r3, #2
 8005eba:	2211      	movs	r2, #17
 8005ebc:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = posllh.lat;
 8005ebe:	4b53      	ldr	r3, [pc, #332]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3303      	adds	r3, #3
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = posllh.lat>>8;
 8005eca:	4b50      	ldr	r3, [pc, #320]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	121a      	asrs	r2, r3, #8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = posllh.lat>>16;
 8005ed8:	4b4c      	ldr	r3, [pc, #304]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	141a      	asrs	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3305      	adds	r3, #5
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = posllh.lat>>24;
 8005ee6:	4b49      	ldr	r3, [pc, #292]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	161a      	asrs	r2, r3, #24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3306      	adds	r3, #6
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[7] = posllh.lon;
 8005ef4:	4b45      	ldr	r3, [pc, #276]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3307      	adds	r3, #7
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = posllh.lon>>8;
 8005f00:	4b42      	ldr	r3, [pc, #264]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	121a      	asrs	r2, r3, #8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = posllh.lon>>16;
 8005f0e:	4b3f      	ldr	r3, [pc, #252]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	141a      	asrs	r2, r3, #16
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3309      	adds	r3, #9
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = posllh.lon>>24;
 8005f1c:	4b3b      	ldr	r3, [pc, #236]	; (800600c <Encode_Msg_GPS+0x16c>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	161a      	asrs	r2, r3, #24
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	330a      	adds	r3, #10
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (unsigned short)(batVolt*100);
 8005f2a:	4b39      	ldr	r3, [pc, #228]	; (8006010 <Encode_Msg_GPS+0x170>)
 8005f2c:	edd3 7a00 	vldr	s15, [r3]
 8005f30:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006014 <Encode_Msg_GPS+0x174>
 8005f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3c:	ee17 3a90 	vmov	r3, s15
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	330b      	adds	r3, #11
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short)(batVolt*100))>>8;
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <Encode_Msg_GPS+0x170>)
 8005f4c:	edd3 7a00 	vldr	s15, [r3]
 8005f50:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006014 <Encode_Msg_GPS+0x174>
 8005f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5c:	ee17 3a90 	vmov	r3, s15
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 8005f6e:	4b2a      	ldr	r3, [pc, #168]	; (8006018 <Encode_Msg_GPS+0x178>)
 8005f70:	891b      	ldrh	r3, [r3, #8]
 8005f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	330d      	adds	r3, #13
 8005f82:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 8005f84:	4b24      	ldr	r3, [pc, #144]	; (8006018 <Encode_Msg_GPS+0x178>)
 8005f86:	899b      	ldrh	r3, [r3, #12]
 8005f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8c:	d009      	beq.n	8005fa2 <Encode_Msg_GPS+0x102>
 8005f8e:	4b22      	ldr	r3, [pc, #136]	; (8006018 <Encode_Msg_GPS+0x178>)
 8005f90:	899b      	ldrh	r3, [r3, #12]
 8005f92:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <Encode_Msg_GPS+0xfe>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e002      	b.n	8005fa4 <Encode_Msg_GPS+0x104>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e000      	b.n	8005fa4 <Encode_Msg_GPS+0x104>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	320e      	adds	r2, #14
 8005fa8:	7013      	strb	r3, [r2, #0]

	telemetry_tx_buf[15] = failsafe_flag;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	330f      	adds	r3, #15
 8005fae:	4a1b      	ldr	r2, [pc, #108]	; (800601c <Encode_Msg_GPS+0x17c>)
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[16] = 0x00;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3310      	adds	r3, #16
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3311      	adds	r3, #17
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3312      	adds	r3, #18
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3313      	adds	r3, #19
 8005fd0:	22ff      	movs	r2, #255	; 0xff
 8005fd2:	701a      	strb	r2, [r3, #0]

	for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e00e      	b.n	8005ff8 <Encode_Msg_GPS+0x158>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3313      	adds	r3, #19
 8005fde:	7819      	ldrb	r1, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3313      	adds	r3, #19
 8005fec:	1a8a      	subs	r2, r1, r2
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b12      	cmp	r3, #18
 8005ffc:	dded      	ble.n	8005fda <Encode_Msg_GPS+0x13a>
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000318 	.word	0x20000318
 8006010:	200005e0 	.word	0x200005e0
 8006014:	42c80000 	.word	0x42c80000
 8006018:	200002c8 	.word	0x200002c8
 800601c:	200005e4 	.word	0x200005e4

08006020 <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6178      	str	r0, [r7, #20]
 8006028:	460b      	mov	r3, r1
 800602a:	ed87 0a03 	vstr	s0, [r7, #12]
 800602e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006032:	ed87 1a01 	vstr	s2, [r7, #4]
 8006036:	74fb      	strb	r3, [r7, #19]
	telemetry_tx_buf[0] = 0x46;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2246      	movs	r2, #70	; 0x46
 800603c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	3301      	adds	r3, #1
 8006042:	2243      	movs	r2, #67	; 0x43
 8006044:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = id;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	3302      	adds	r3, #2
 800604a:	7cfa      	ldrb	r2, [r7, #19]
 800604c:	701a      	strb	r2, [r3, #0]

	//	  memcpy(&telemetry_tx_buf[3], &p, 4);
	//	  memcpy(&telemetry_tx_buf[7], &i, 4);
	//	  memcpy(&telemetry_tx_buf[11], &d, 4);

	*(float*)&telemetry_tx_buf[3] = p;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	3303      	adds	r3, #3
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]
	*(float*)&telemetry_tx_buf[7] = i;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	3307      	adds	r3, #7
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	601a      	str	r2, [r3, #0]
	*(float*)&telemetry_tx_buf[11] = d;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	330b      	adds	r3, #11
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]

	telemetry_tx_buf[15] = 0x00;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	330f      	adds	r3, #15
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	3310      	adds	r3, #16
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3311      	adds	r3, #17
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	3312      	adds	r3, #18
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	3313      	adds	r3, #19
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	701a      	strb	r2, [r3, #0]

	for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	e00e      	b.n	80060b2 <Encode_Msg_PID_Gain+0x92>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3313      	adds	r3, #19
 8006098:	7819      	ldrb	r1, [r3, #0]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	3313      	adds	r3, #19
 80060a6:	1a8a      	subs	r2, r1, r2
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	3301      	adds	r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	2b12      	cmp	r3, #18
 80060b6:	dded      	ble.n	8006094 <Encode_Msg_PID_Gain+0x74>
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80060c6:	b480      	push	{r7}
 80060c8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80060ca:	b672      	cpsid	i
}
 80060cc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80060ce:	e7fe      	b.n	80060ce <Error_Handler+0x8>

080060d0 <LL_SPI_SetStandard>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f023 0210 	bic.w	r2, r3, #16
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	605a      	str	r2, [r3, #4]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <LL_AHB1_GRP1_EnableClock>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006100:	4b08      	ldr	r3, [pc, #32]	; (8006124 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006104:	4907      	ldr	r1, [pc, #28]	; (8006124 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4313      	orrs	r3, r2
 800610a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800610e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4013      	ands	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006116:	68fb      	ldr	r3, [r7, #12]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	40023800 	.word	0x40023800

08006128 <LL_APB1_GRP1_EnableClock>:
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006134:	4907      	ldr	r1, [pc, #28]	; (8006154 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4313      	orrs	r3, r2
 800613a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <LL_APB1_GRP1_EnableClock+0x2c>)
 800613e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4013      	ands	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	40023800 	.word	0x40023800

08006158 <LL_APB2_GRP1_EnableClock>:
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006164:	4907      	ldr	r1, [pc, #28]	; (8006184 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4313      	orrs	r3, r2
 800616a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <LL_APB2_GRP1_EnableClock+0x2c>)
 800616e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4013      	ands	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006176:	68fb      	ldr	r3, [r7, #12]
}
 8006178:	bf00      	nop
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40023800 	.word	0x40023800

08006188 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b090      	sub	sp, #64	; 0x40
 800618c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800618e:	f107 0318 	add.w	r3, r7, #24
 8006192:	2228      	movs	r2, #40	; 0x28
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f006 fb0e 	bl	800c7b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800619c:	463b      	mov	r3, r7
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	605a      	str	r2, [r3, #4]
 80061a4:	609a      	str	r2, [r3, #8]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	611a      	str	r2, [r3, #16]
 80061aa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80061ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80061b0:	f7ff ffd2 	bl	8006158 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80061b4:	2001      	movs	r0, #1
 80061b6:	f7ff ff9f 	bl	80060f8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80061ba:	23e0      	movs	r3, #224	; 0xe0
 80061bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80061be:	2302      	movs	r3, #2
 80061c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80061c2:	2303      	movs	r3, #3
 80061c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80061ce:	2305      	movs	r3, #5
 80061d0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d2:	463b      	mov	r3, r7
 80061d4:	4619      	mov	r1, r3
 80061d6:	4813      	ldr	r0, [pc, #76]	; (8006224 <MX_SPI1_Init+0x9c>)
 80061d8:	f005 fac9 	bl	800b76e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80061e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061e4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80061e6:	2300      	movs	r3, #0
 80061e8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80061ea:	2302      	movs	r3, #2
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80061ee:	2301      	movs	r3, #1
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80061f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80061f8:	2310      	movs	r3, #16
 80061fa:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80061fc:	2300      	movs	r3, #0
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006200:	2300      	movs	r3, #0
 8006202:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8006204:	230a      	movs	r3, #10
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8006208:	f107 0318 	add.w	r3, r7, #24
 800620c:	4619      	mov	r1, r3
 800620e:	4806      	ldr	r0, [pc, #24]	; (8006228 <MX_SPI1_Init+0xa0>)
 8006210:	f005 fc7d 	bl	800bb0e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8006214:	2100      	movs	r1, #0
 8006216:	4804      	ldr	r0, [pc, #16]	; (8006228 <MX_SPI1_Init+0xa0>)
 8006218:	f7ff ff5a 	bl	80060d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800621c:	bf00      	nop
 800621e:	3740      	adds	r7, #64	; 0x40
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40020000 	.word	0x40020000
 8006228:	40013000 	.word	0x40013000

0800622c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b090      	sub	sp, #64	; 0x40
 8006230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8006232:	f107 0318 	add.w	r3, r7, #24
 8006236:	2228      	movs	r2, #40	; 0x28
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f006 fabc 	bl	800c7b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006240:	463b      	mov	r3, r7
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	605a      	str	r2, [r3, #4]
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	611a      	str	r2, [r3, #16]
 800624e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8006250:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006254:	f7ff ff68 	bl	8006128 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006258:	2002      	movs	r0, #2
 800625a:	f7ff ff4d 	bl	80060f8 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800625e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006262:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006264:	2302      	movs	r3, #2
 8006266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006268:	2303      	movs	r3, #3
 800626a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006270:	2300      	movs	r3, #0
 8006272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8006274:	2305      	movs	r3, #5
 8006276:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006278:	463b      	mov	r3, r7
 800627a:	4619      	mov	r1, r3
 800627c:	4813      	ldr	r0, [pc, #76]	; (80062cc <MX_SPI2_Init+0xa0>)
 800627e:	f005 fa76 	bl	800b76e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8006286:	f44f 7382 	mov.w	r3, #260	; 0x104
 800628a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800628c:	2300      	movs	r3, #0
 800628e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8006290:	2302      	movs	r3, #2
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8006294:	2301      	movs	r3, #1
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800629e:	2318      	movs	r3, #24
 80062a0:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80062a2:	2300      	movs	r3, #0
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80062aa:	230a      	movs	r3, #10
 80062ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80062ae:	f107 0318 	add.w	r3, r7, #24
 80062b2:	4619      	mov	r1, r3
 80062b4:	4806      	ldr	r0, [pc, #24]	; (80062d0 <MX_SPI2_Init+0xa4>)
 80062b6:	f005 fc2a 	bl	800bb0e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80062ba:	2100      	movs	r1, #0
 80062bc:	4804      	ldr	r0, [pc, #16]	; (80062d0 <MX_SPI2_Init+0xa4>)
 80062be:	f7ff ff07 	bl	80060d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062c2:	bf00      	nop
 80062c4:	3740      	adds	r7, #64	; 0x40
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40020400 	.word	0x40020400
 80062d0:	40003800 	.word	0x40003800

080062d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b090      	sub	sp, #64	; 0x40
 80062d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80062da:	f107 0318 	add.w	r3, r7, #24
 80062de:	2228      	movs	r2, #40	; 0x28
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f006 fa68 	bl	800c7b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e8:	463b      	mov	r3, r7
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	605a      	str	r2, [r3, #4]
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	611a      	str	r2, [r3, #16]
 80062f6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80062f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80062fc:	f7ff ff14 	bl	8006128 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006300:	2002      	movs	r0, #2
 8006302:	f7ff fef9 	bl	80060f8 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8006306:	2338      	movs	r3, #56	; 0x38
 8006308:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800630a:	2302      	movs	r3, #2
 800630c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800630e:	2303      	movs	r3, #3
 8006310:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800631a:	2306      	movs	r3, #6
 800631c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800631e:	463b      	mov	r3, r7
 8006320:	4619      	mov	r1, r3
 8006322:	4813      	ldr	r0, [pc, #76]	; (8006370 <MX_SPI3_Init+0x9c>)
 8006324:	f005 fa23 	bl	800b76e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8006328:	2300      	movs	r3, #0
 800632a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800632c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006330:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8006332:	2300      	movs	r3, #0
 8006334:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8006336:	2302      	movs	r3, #2
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800633a:	2301      	movs	r3, #1
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800633e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8006344:	2308      	movs	r3, #8
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8006348:	2300      	movs	r3, #0
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800634c:	2300      	movs	r3, #0
 800634e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8006350:	230a      	movs	r3, #10
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8006354:	f107 0318 	add.w	r3, r7, #24
 8006358:	4619      	mov	r1, r3
 800635a:	4806      	ldr	r0, [pc, #24]	; (8006374 <MX_SPI3_Init+0xa0>)
 800635c:	f005 fbd7 	bl	800bb0e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8006360:	2100      	movs	r1, #0
 8006362:	4804      	ldr	r0, [pc, #16]	; (8006374 <MX_SPI3_Init+0xa0>)
 8006364:	f7ff feb4 	bl	80060d0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006368:	bf00      	nop
 800636a:	3740      	adds	r7, #64	; 0x40
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40020400 	.word	0x40020400
 8006374:	40003c00 	.word	0x40003c00

08006378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <HAL_MspInit+0x4c>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	4a0f      	ldr	r2, [pc, #60]	; (80063c4 <HAL_MspInit+0x4c>)
 8006388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800638c:	6453      	str	r3, [r2, #68]	; 0x44
 800638e:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <HAL_MspInit+0x4c>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <HAL_MspInit+0x4c>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <HAL_MspInit+0x4c>)
 80063a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a8:	6413      	str	r3, [r2, #64]	; 0x40
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_MspInit+0x4c>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800

080063c8 <LL_TIM_ClearFlag_UPDATE>:
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f06f 0201 	mvn.w	r2, #1
 80063d6:	611a      	str	r2, [r3, #16]
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <LL_USART_IsActiveFlag_RXNE>:
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b20      	cmp	r3, #32
 800641c:	bf0c      	ite	eq
 800641e:	2301      	moveq	r3, #1
 8006420:	2300      	movne	r3, #0
 8006422:	b2db      	uxtb	r3, r3
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_USART_ClearFlag_RXNE>:
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f06f 0220 	mvn.w	r2, #32
 800643e:	601a      	str	r2, [r3, #0]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <LL_USART_ReceiveData8>:
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	b2db      	uxtb	r3, r3
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006466:	b480      	push	{r7}
 8006468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800646a:	e7fe      	b.n	800646a <NMI_Handler+0x4>

0800646c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006470:	e7fe      	b.n	8006470 <HardFault_Handler+0x4>

08006472 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006472:	b480      	push	{r7}
 8006474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006476:	e7fe      	b.n	8006476 <MemManage_Handler+0x4>

08006478 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800647c:	e7fe      	b.n	800647c <BusFault_Handler+0x4>

0800647e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800647e:	b480      	push	{r7}
 8006480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006482:	e7fe      	b.n	8006482 <UsageFault_Handler+0x4>

08006484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006492:	b480      	push	{r7}
 8006494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006496:	bf00      	nop
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064b2:	f001 f83d 	bl	8007530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064b6:	bf00      	nop
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80064c0:	4802      	ldr	r0, [pc, #8]	; (80064cc <USART1_IRQHandler+0x10>)
 80064c2:	f004 f8e7 	bl	800a694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80064c6:	bf00      	nop
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000648 	.word	0x20000648

080064d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4)){
 80064d4:	4833      	ldr	r0, [pc, #204]	; (80065a4 <UART4_IRQHandler+0xd4>)
 80064d6:	f7ff ff98 	bl	800640a <LL_USART_IsActiveFlag_RXNE>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d05b      	beq.n	8006598 <UART4_IRQHandler+0xc8>
			LL_USART_ClearFlag_RXNE(UART4);
 80064e0:	4830      	ldr	r0, [pc, #192]	; (80065a4 <UART4_IRQHandler+0xd4>)
 80064e2:	f7ff ffa5 	bl	8006430 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 80064e6:	482f      	ldr	r0, [pc, #188]	; (80065a4 <UART4_IRQHandler+0xd4>)
 80064e8:	f7ff ffb0 	bl	800644c <LL_USART_ReceiveData8>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <UART4_IRQHandler+0xd8>)
 80064f2:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 80064f4:	4b2d      	ldr	r3, [pc, #180]	; (80065ac <UART4_IRQHandler+0xdc>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]

//			LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt){
 80064fa:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <UART4_IRQHandler+0xe0>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b23      	cmp	r3, #35	; 0x23
 8006500:	d02e      	beq.n	8006560 <UART4_IRQHandler+0x90>
 8006502:	2b23      	cmp	r3, #35	; 0x23
 8006504:	dc3a      	bgt.n	800657c <UART4_IRQHandler+0xac>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <UART4_IRQHandler+0x40>
 800650a:	2b01      	cmp	r3, #1
 800650c:	d012      	beq.n	8006534 <UART4_IRQHandler+0x64>
 800650e:	e035      	b.n	800657c <UART4_IRQHandler+0xac>
			case 0:
				if(uart4_rx_data == 0xb5){
 8006510:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <UART4_IRQHandler+0xd8>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2bb5      	cmp	r3, #181	; 0xb5
 8006516:	d141      	bne.n	800659c <UART4_IRQHandler+0xcc>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <UART4_IRQHandler+0xe0>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	4b22      	ldr	r3, [pc, #136]	; (80065a8 <UART4_IRQHandler+0xd8>)
 8006520:	7819      	ldrb	r1, [r3, #0]
 8006522:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <UART4_IRQHandler+0xe4>)
 8006524:	5499      	strb	r1, [r3, r2]
					cnt++;
 8006526:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <UART4_IRQHandler+0xe0>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	b2da      	uxtb	r2, r3
 800652e:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <UART4_IRQHandler+0xe0>)
 8006530:	701a      	strb	r2, [r3, #0]
				}
				break;
 8006532:	e033      	b.n	800659c <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62) {
 8006534:	4b1c      	ldr	r3, [pc, #112]	; (80065a8 <UART4_IRQHandler+0xd8>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b62      	cmp	r3, #98	; 0x62
 800653a:	d10d      	bne.n	8006558 <UART4_IRQHandler+0x88>
					m8n_rx_buf[cnt] = uart4_rx_data;
 800653c:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <UART4_IRQHandler+0xe0>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <UART4_IRQHandler+0xd8>)
 8006544:	7819      	ldrb	r1, [r3, #0]
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <UART4_IRQHandler+0xe4>)
 8006548:	5499      	strb	r1, [r3, r2]
					cnt++;
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <UART4_IRQHandler+0xe0>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	3301      	adds	r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <UART4_IRQHandler+0xe0>)
 8006554:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8006556:	e022      	b.n	800659e <UART4_IRQHandler+0xce>
					cnt = 0;
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <UART4_IRQHandler+0xe0>)
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
				break;
 800655e:	e01e      	b.n	800659e <UART4_IRQHandler+0xce>
			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8006560:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <UART4_IRQHandler+0xe0>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <UART4_IRQHandler+0xd8>)
 8006568:	7819      	ldrb	r1, [r3, #0]
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <UART4_IRQHandler+0xe4>)
 800656c:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 800656e:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <UART4_IRQHandler+0xe0>)
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <UART4_IRQHandler+0xe8>)
 8006576:	2201      	movs	r2, #1
 8006578:	701a      	strb	r2, [r3, #0]
				break;
 800657a:	e010      	b.n	800659e <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 800657c:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <UART4_IRQHandler+0xe0>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <UART4_IRQHandler+0xd8>)
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <UART4_IRQHandler+0xe4>)
 8006588:	5499      	strb	r1, [r3, r2]
				cnt++;
 800658a:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <UART4_IRQHandler+0xe0>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	3301      	adds	r3, #1
 8006590:	b2da      	uxtb	r2, r3
 8006592:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <UART4_IRQHandler+0xe0>)
 8006594:	701a      	strb	r2, [r3, #0]
				break;
 8006596:	e002      	b.n	800659e <UART4_IRQHandler+0xce>
			}
	}
 8006598:	bf00      	nop
 800659a:	e000      	b.n	800659e <UART4_IRQHandler+0xce>
				break;
 800659c:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800659e:	bf00      	nop
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40004c00 	.word	0x40004c00
 80065a8:	200005ea 	.word	0x200005ea
 80065ac:	200005e9 	.word	0x200005e9
 80065b0:	2000063a 	.word	0x2000063a
 80065b4:	200005ec 	.word	0x200005ec
 80065b8:	20000610 	.word	0x20000610

080065bc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5)){
 80065c0:	4833      	ldr	r0, [pc, #204]	; (8006690 <UART5_IRQHandler+0xd4>)
 80065c2:	f7ff ff22 	bl	800640a <LL_USART_IsActiveFlag_RXNE>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d05b      	beq.n	8006684 <UART5_IRQHandler+0xc8>
		LL_USART_ClearFlag_RXNE(UART5);
 80065cc:	4830      	ldr	r0, [pc, #192]	; (8006690 <UART5_IRQHandler+0xd4>)
 80065ce:	f7ff ff2f 	bl	8006430 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 80065d2:	482f      	ldr	r0, [pc, #188]	; (8006690 <UART5_IRQHandler+0xd4>)
 80065d4:	f7ff ff3a 	bl	800644c <LL_USART_ReceiveData8>
 80065d8:	4603      	mov	r3, r0
 80065da:	461a      	mov	r2, r3
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <UART5_IRQHandler+0xd8>)
 80065de:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 80065e0:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <UART5_IRQHandler+0xdc>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
		/*while(!LL_USART_IsActiveFlag_TXE(USART6));
		LL_USART_TransmitData8(USART6, uart5_rx_data);*/

		switch(cnt){
 80065e6:	4b2d      	ldr	r3, [pc, #180]	; (800669c <UART5_IRQHandler+0xe0>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b1f      	cmp	r3, #31
 80065ec:	d02e      	beq.n	800664c <UART5_IRQHandler+0x90>
 80065ee:	2b1f      	cmp	r3, #31
 80065f0:	dc3a      	bgt.n	8006668 <UART5_IRQHandler+0xac>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <UART5_IRQHandler+0x40>
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d012      	beq.n	8006620 <UART5_IRQHandler+0x64>
 80065fa:	e035      	b.n	8006668 <UART5_IRQHandler+0xac>
		case 0:
			if(uart5_rx_data == 0x20){
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <UART5_IRQHandler+0xd8>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b20      	cmp	r3, #32
 8006602:	d141      	bne.n	8006688 <UART5_IRQHandler+0xcc>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <UART5_IRQHandler+0xe0>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	4b22      	ldr	r3, [pc, #136]	; (8006694 <UART5_IRQHandler+0xd8>)
 800660c:	7819      	ldrb	r1, [r3, #0]
 800660e:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <UART5_IRQHandler+0xe4>)
 8006610:	5499      	strb	r1, [r3, r2]
				cnt++;
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <UART5_IRQHandler+0xe0>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <UART5_IRQHandler+0xe0>)
 800661c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800661e:	e033      	b.n	8006688 <UART5_IRQHandler+0xcc>

		case 1:
			if(uart5_rx_data == 0x40) {
 8006620:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <UART5_IRQHandler+0xd8>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b40      	cmp	r3, #64	; 0x40
 8006626:	d10d      	bne.n	8006644 <UART5_IRQHandler+0x88>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8006628:	4b1c      	ldr	r3, [pc, #112]	; (800669c <UART5_IRQHandler+0xe0>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	4b19      	ldr	r3, [pc, #100]	; (8006694 <UART5_IRQHandler+0xd8>)
 8006630:	7819      	ldrb	r1, [r3, #0]
 8006632:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <UART5_IRQHandler+0xe4>)
 8006634:	5499      	strb	r1, [r3, r2]
				cnt++;
 8006636:	4b19      	ldr	r3, [pc, #100]	; (800669c <UART5_IRQHandler+0xe0>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	b2da      	uxtb	r2, r3
 800663e:	4b17      	ldr	r3, [pc, #92]	; (800669c <UART5_IRQHandler+0xe0>)
 8006640:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8006642:	e022      	b.n	800668a <UART5_IRQHandler+0xce>
				cnt = 0;
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <UART5_IRQHandler+0xe0>)
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
			break;
 800664a:	e01e      	b.n	800668a <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800664c:	4b13      	ldr	r3, [pc, #76]	; (800669c <UART5_IRQHandler+0xe0>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <UART5_IRQHandler+0xd8>)
 8006654:	7819      	ldrb	r1, [r3, #0]
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <UART5_IRQHandler+0xe4>)
 8006658:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800665a:	4b10      	ldr	r3, [pc, #64]	; (800669c <UART5_IRQHandler+0xe0>)
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <UART5_IRQHandler+0xe8>)
 8006662:	2201      	movs	r2, #1
 8006664:	701a      	strb	r2, [r3, #0]
			break;
 8006666:	e010      	b.n	800668a <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <UART5_IRQHandler+0xe0>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <UART5_IRQHandler+0xd8>)
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <UART5_IRQHandler+0xe4>)
 8006674:	5499      	strb	r1, [r3, r2]
			cnt++;
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <UART5_IRQHandler+0xe0>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	b2da      	uxtb	r2, r3
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <UART5_IRQHandler+0xe0>)
 8006680:	701a      	strb	r2, [r3, #0]
			break;
 8006682:	e002      	b.n	800668a <UART5_IRQHandler+0xce>
		}
	}
 8006684:	bf00      	nop
 8006686:	e000      	b.n	800668a <UART5_IRQHandler+0xce>
			break;
 8006688:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800668a:	bf00      	nop
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40005000 	.word	0x40005000
 8006694:	20000612 	.word	0x20000612
 8006698:	20000611 	.word	0x20000611
 800669c:	2000063b 	.word	0x2000063b
 80066a0:	20000614 	.word	0x20000614
 80066a4:	20000634 	.word	0x20000634

080066a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 80066ac:	4825      	ldr	r0, [pc, #148]	; (8006744 <TIM7_IRQHandler+0x9c>)
 80066ae:	f7ff fe99 	bl	80063e4 <LL_TIM_IsActiveFlag_UPDATE>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d043      	beq.n	8006740 <TIM7_IRQHandler+0x98>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 80066b8:	4822      	ldr	r0, [pc, #136]	; (8006744 <TIM7_IRQHandler+0x9c>)
 80066ba:	f7ff fe85 	bl	80063c8 <LL_TIM_ClearFlag_UPDATE>
		tim7_1ms_count++;
 80066be:	4b22      	ldr	r3, [pc, #136]	; (8006748 <TIM7_IRQHandler+0xa0>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b20      	ldr	r3, [pc, #128]	; (8006748 <TIM7_IRQHandler+0xa0>)
 80066c8:	701a      	strb	r2, [r3, #0]

		if(tim7_1ms_count == 1)
 80066ca:	4b1f      	ldr	r3, [pc, #124]	; (8006748 <TIM7_IRQHandler+0xa0>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d105      	bne.n	80066de <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count = 0;
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <TIM7_IRQHandler+0xa0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 80066d8:	4b1c      	ldr	r3, [pc, #112]	; (800674c <TIM7_IRQHandler+0xa4>)
 80066da:	2201      	movs	r2, #1
 80066dc:	701a      	strb	r2, [r3, #0]
		}
		tim7_20ms_count++;
 80066de:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <TIM7_IRQHandler+0xa8>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <TIM7_IRQHandler+0xa8>)
 80066e8:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20)
 80066ea:	4b19      	ldr	r3, [pc, #100]	; (8006750 <TIM7_IRQHandler+0xa8>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b14      	cmp	r3, #20
 80066f0:	d105      	bne.n	80066fe <TIM7_IRQHandler+0x56>
		{
			tim7_20ms_count = 0;
 80066f2:	4b17      	ldr	r3, [pc, #92]	; (8006750 <TIM7_IRQHandler+0xa8>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 80066f8:	4b16      	ldr	r3, [pc, #88]	; (8006754 <TIM7_IRQHandler+0xac>)
 80066fa:	2201      	movs	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 80066fe:	4b16      	ldr	r3, [pc, #88]	; (8006758 <TIM7_IRQHandler+0xb0>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	b2da      	uxtb	r2, r3
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <TIM7_IRQHandler+0xb0>)
 8006708:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100)
 800670a:	4b13      	ldr	r3, [pc, #76]	; (8006758 <TIM7_IRQHandler+0xb0>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b64      	cmp	r3, #100	; 0x64
 8006710:	d105      	bne.n	800671e <TIM7_IRQHandler+0x76>
		{
			tim7_100ms_count = 0;
 8006712:	4b11      	ldr	r3, [pc, #68]	; (8006758 <TIM7_IRQHandler+0xb0>)
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 8006718:	4b10      	ldr	r3, [pc, #64]	; (800675c <TIM7_IRQHandler+0xb4>)
 800671a:	2201      	movs	r2, #1
 800671c:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 800671e:	4b10      	ldr	r3, [pc, #64]	; (8006760 <TIM7_IRQHandler+0xb8>)
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <TIM7_IRQHandler+0xb8>)
 8006728:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000)
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <TIM7_IRQHandler+0xb8>)
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006732:	d105      	bne.n	8006740 <TIM7_IRQHandler+0x98>
		{
			tim7_1000ms_count = 0;
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <TIM7_IRQHandler+0xb8>)
 8006736:	2200      	movs	r2, #0
 8006738:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800673a:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <TIM7_IRQHandler+0xbc>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006740:	bf00      	nop
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40001400 	.word	0x40001400
 8006748:	2000063c 	.word	0x2000063c
 800674c:	20000639 	.word	0x20000639
 8006750:	2000063d 	.word	0x2000063d
 8006754:	20000636 	.word	0x20000636
 8006758:	2000063e 	.word	0x2000063e
 800675c:	20000637 	.word	0x20000637
 8006760:	20000640 	.word	0x20000640
 8006764:	20000638 	.word	0x20000638

08006768 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800676c:	4802      	ldr	r0, [pc, #8]	; (8006778 <DMA2_Stream0_IRQHandler+0x10>)
 800676e:	f001 fddf 	bl	8008330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006772:	bf00      	nop
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200004ec 	.word	0x200004ec

0800677c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)){
 8006780:	480a      	ldr	r0, [pc, #40]	; (80067ac <USART6_IRQHandler+0x30>)
 8006782:	f7ff fe42 	bl	800640a <LL_USART_IsActiveFlag_RXNE>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00c      	beq.n	80067a6 <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 800678c:	4807      	ldr	r0, [pc, #28]	; (80067ac <USART6_IRQHandler+0x30>)
 800678e:	f7ff fe4f 	bl	8006430 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8006792:	4806      	ldr	r0, [pc, #24]	; (80067ac <USART6_IRQHandler+0x30>)
 8006794:	f7ff fe5a 	bl	800644c <LL_USART_ReceiveData8>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
 800679c:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <USART6_IRQHandler+0x34>)
 800679e:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <USART6_IRQHandler+0x38>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80067a6:	bf00      	nop
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40011400 	.word	0x40011400
 80067b0:	200005e8 	.word	0x200005e8
 80067b4:	200005e7 	.word	0x200005e7

080067b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  return 1;
 80067bc:	2301      	movs	r3, #1
}
 80067be:	4618      	mov	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <_kill>:

int _kill(int pid, int sig)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80067d2:	f005 ffc7 	bl	800c764 <__errno>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2216      	movs	r2, #22
 80067da:	601a      	str	r2, [r3, #0]
  return -1;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <_exit>:

void _exit (int status)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80067f0:	f04f 31ff 	mov.w	r1, #4294967295
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ffe7 	bl	80067c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80067fa:	e7fe      	b.n	80067fa <_exit+0x12>

080067fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e00a      	b.n	8006824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800680e:	f3af 8000 	nop.w
 8006812:	4601      	mov	r1, r0
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	60ba      	str	r2, [r7, #8]
 800681a:	b2ca      	uxtb	r2, r1
 800681c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	3301      	adds	r3, #1
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	dbf0      	blt.n	800680e <_read+0x12>
  }

  return len;
 800682c:	687b      	ldr	r3, [r7, #4]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800685e:	605a      	str	r2, [r3, #4]
  return 0;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <_isatty>:

int _isatty(int file)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006876:	2301      	movs	r3, #1
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068a8:	4a14      	ldr	r2, [pc, #80]	; (80068fc <_sbrk+0x5c>)
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <_sbrk+0x60>)
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <_sbrk+0x64>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d102      	bne.n	80068c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068bc:	4b11      	ldr	r3, [pc, #68]	; (8006904 <_sbrk+0x64>)
 80068be:	4a12      	ldr	r2, [pc, #72]	; (8006908 <_sbrk+0x68>)
 80068c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <_sbrk+0x64>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d207      	bcs.n	80068e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068d0:	f005 ff48 	bl	800c764 <__errno>
 80068d4:	4603      	mov	r3, r0
 80068d6:	220c      	movs	r2, #12
 80068d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295
 80068de:	e009      	b.n	80068f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <_sbrk+0x64>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <_sbrk+0x64>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	4a05      	ldr	r2, [pc, #20]	; (8006904 <_sbrk+0x64>)
 80068f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068f2:	68fb      	ldr	r3, [r7, #12]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20020000 	.word	0x20020000
 8006900:	00000400 	.word	0x00000400
 8006904:	20000644 	.word	0x20000644
 8006908:	200006a0 	.word	0x200006a0

0800690c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <SystemInit+0x20>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006916:	4a05      	ldr	r2, [pc, #20]	; (800692c <SystemInit+0x20>)
 8006918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800691c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <__NVIC_GetPriorityGrouping>:
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <__NVIC_GetPriorityGrouping+0x18>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	0a1b      	lsrs	r3, r3, #8
 800693a:	f003 0307 	and.w	r3, r3, #7
}
 800693e:	4618      	mov	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	e000ed00 	.word	0xe000ed00

0800694c <__NVIC_EnableIRQ>:
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695a:	2b00      	cmp	r3, #0
 800695c:	db0b      	blt.n	8006976 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	f003 021f 	and.w	r2, r3, #31
 8006964:	4907      	ldr	r1, [pc, #28]	; (8006984 <__NVIC_EnableIRQ+0x38>)
 8006966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2001      	movs	r0, #1
 800696e:	fa00 f202 	lsl.w	r2, r0, r2
 8006972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	e000e100 	.word	0xe000e100

08006988 <__NVIC_SetPriority>:
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	6039      	str	r1, [r7, #0]
 8006992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006998:	2b00      	cmp	r3, #0
 800699a:	db0a      	blt.n	80069b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	490c      	ldr	r1, [pc, #48]	; (80069d4 <__NVIC_SetPriority+0x4c>)
 80069a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	440b      	add	r3, r1
 80069ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069b0:	e00a      	b.n	80069c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4908      	ldr	r1, [pc, #32]	; (80069d8 <__NVIC_SetPriority+0x50>)
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	3b04      	subs	r3, #4
 80069c0:	0112      	lsls	r2, r2, #4
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	440b      	add	r3, r1
 80069c6:	761a      	strb	r2, [r3, #24]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	e000e100 	.word	0xe000e100
 80069d8:	e000ed00 	.word	0xe000ed00

080069dc <NVIC_EncodePriority>:
{
 80069dc:	b480      	push	{r7}
 80069de:	b089      	sub	sp, #36	; 0x24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f1c3 0307 	rsb	r3, r3, #7
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	bf28      	it	cs
 80069fa:	2304      	movcs	r3, #4
 80069fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	3304      	adds	r3, #4
 8006a02:	2b06      	cmp	r3, #6
 8006a04:	d902      	bls.n	8006a0c <NVIC_EncodePriority+0x30>
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	3b03      	subs	r3, #3
 8006a0a:	e000      	b.n	8006a0e <NVIC_EncodePriority+0x32>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43da      	mvns	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	401a      	ands	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a24:	f04f 31ff 	mov.w	r1, #4294967295
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2e:	43d9      	mvns	r1, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a34:	4313      	orrs	r3, r2
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3724      	adds	r7, #36	; 0x24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <LL_TIM_EnableARRPreload>:
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <LL_TIM_OC_EnableFast>:
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d01c      	beq.n	8006aae <LL_TIM_OC_EnableFast+0x4a>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d017      	beq.n	8006aaa <LL_TIM_OC_EnableFast+0x46>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d012      	beq.n	8006aa6 <LL_TIM_OC_EnableFast+0x42>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b40      	cmp	r3, #64	; 0x40
 8006a84:	d00d      	beq.n	8006aa2 <LL_TIM_OC_EnableFast+0x3e>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8c:	d007      	beq.n	8006a9e <LL_TIM_OC_EnableFast+0x3a>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a94:	d101      	bne.n	8006a9a <LL_TIM_OC_EnableFast+0x36>
 8006a96:	2305      	movs	r3, #5
 8006a98:	e00a      	b.n	8006ab0 <LL_TIM_OC_EnableFast+0x4c>
 8006a9a:	2306      	movs	r3, #6
 8006a9c:	e008      	b.n	8006ab0 <LL_TIM_OC_EnableFast+0x4c>
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	e006      	b.n	8006ab0 <LL_TIM_OC_EnableFast+0x4c>
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e004      	b.n	8006ab0 <LL_TIM_OC_EnableFast+0x4c>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e002      	b.n	8006ab0 <LL_TIM_OC_EnableFast+0x4c>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <LL_TIM_OC_EnableFast+0x4c>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3318      	adds	r3, #24
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <LL_TIM_OC_EnableFast+0x80>)
 8006abc:	5cd3      	ldrb	r3, [r2, r3]
 8006abe:	440b      	add	r3, r1
 8006ac0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	4907      	ldr	r1, [pc, #28]	; (8006ae8 <LL_TIM_OC_EnableFast+0x84>)
 8006aca:	5ccb      	ldrb	r3, [r1, r3]
 8006acc:	4619      	mov	r1, r3
 8006ace:	2304      	movs	r3, #4
 8006ad0:	408b      	lsls	r3, r1
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	080103f4 	.word	0x080103f4
 8006ae8:	080103fc 	.word	0x080103fc

08006aec <LL_TIM_OC_EnablePreload>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d01c      	beq.n	8006b36 <LL_TIM_OC_EnablePreload+0x4a>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d017      	beq.n	8006b32 <LL_TIM_OC_EnablePreload+0x46>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d012      	beq.n	8006b2e <LL_TIM_OC_EnablePreload+0x42>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	d00d      	beq.n	8006b2a <LL_TIM_OC_EnablePreload+0x3e>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d007      	beq.n	8006b26 <LL_TIM_OC_EnablePreload+0x3a>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1c:	d101      	bne.n	8006b22 <LL_TIM_OC_EnablePreload+0x36>
 8006b1e:	2305      	movs	r3, #5
 8006b20:	e00a      	b.n	8006b38 <LL_TIM_OC_EnablePreload+0x4c>
 8006b22:	2306      	movs	r3, #6
 8006b24:	e008      	b.n	8006b38 <LL_TIM_OC_EnablePreload+0x4c>
 8006b26:	2304      	movs	r3, #4
 8006b28:	e006      	b.n	8006b38 <LL_TIM_OC_EnablePreload+0x4c>
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e004      	b.n	8006b38 <LL_TIM_OC_EnablePreload+0x4c>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e002      	b.n	8006b38 <LL_TIM_OC_EnablePreload+0x4c>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <LL_TIM_OC_EnablePreload+0x4c>
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3318      	adds	r3, #24
 8006b3e:	4619      	mov	r1, r3
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <LL_TIM_OC_EnablePreload+0x80>)
 8006b44:	5cd3      	ldrb	r3, [r2, r3]
 8006b46:	440b      	add	r3, r1
 8006b48:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	4907      	ldr	r1, [pc, #28]	; (8006b70 <LL_TIM_OC_EnablePreload+0x84>)
 8006b52:	5ccb      	ldrb	r3, [r1, r3]
 8006b54:	4619      	mov	r1, r3
 8006b56:	2308      	movs	r3, #8
 8006b58:	408b      	lsls	r3, r1
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	601a      	str	r2, [r3, #0]
}
 8006b60:	bf00      	nop
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	080103f4 	.word	0x080103f4
 8006b70:	080103fc 	.word	0x080103fc

08006b74 <LL_TIM_SetClockSource>:
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	609a      	str	r2, [r3, #8]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <LL_TIM_SetTriggerOutput>:
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	605a      	str	r2, [r3, #4]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <LL_TIM_DisableMasterSlaveMode>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	609a      	str	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_AHB1_GRP1_EnableClock>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006bec:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf0:	4907      	ldr	r1, [pc, #28]	; (8006c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c02:	68fb      	ldr	r3, [r7, #12]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	40023800 	.word	0x40023800

08006c14 <LL_APB1_GRP1_EnableClock>:
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8006c1c:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c20:	4907      	ldr	r1, [pc, #28]	; (8006c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40023800 	.word	0x40023800

08006c44 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b094      	sub	sp, #80	; 0x50
 8006c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006c4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	605a      	str	r2, [r3, #4]
 8006c54:	609a      	str	r2, [r3, #8]
 8006c56:	60da      	str	r2, [r3, #12]
 8006c58:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8006c5a:	f107 031c 	add.w	r3, r7, #28
 8006c5e:	2220      	movs	r2, #32
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f005 fda8 	bl	800c7b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c68:	1d3b      	adds	r3, r7, #4
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
 8006c70:	609a      	str	r2, [r3, #8]
 8006c72:	60da      	str	r2, [r3, #12]
 8006c74:	611a      	str	r2, [r3, #16]
 8006c76:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8006c78:	2002      	movs	r0, #2
 8006c7a:	f7ff ffcb 	bl	8006c14 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8006c7e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006c82:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006c84:	2300      	movs	r3, #0
 8006c86:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8006c88:	2314      	movs	r3, #20
 8006c8a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8006c90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c94:	4619      	mov	r1, r3
 8006c96:	4822      	ldr	r0, [pc, #136]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006c98:	f004 fffe 	bl	800bc98 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8006c9c:	4820      	ldr	r0, [pc, #128]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006c9e:	f7ff fed0 	bl	8006a42 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	481e      	ldr	r0, [pc, #120]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006ca6:	f7ff ff65 	bl	8006b74 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8006caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cae:	481c      	ldr	r0, [pc, #112]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006cb0:	f7ff ff1c 	bl	8006aec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006cb4:	2360      	movs	r3, #96	; 0x60
 8006cb6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8006cc0:	230a      	movs	r3, #10
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8006cc8:	f107 031c 	add.w	r3, r7, #28
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cd2:	4813      	ldr	r0, [pc, #76]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006cd4:	f005 f87a 	bl	800bdcc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8006cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cdc:	4810      	ldr	r0, [pc, #64]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006cde:	f7ff fec1 	bl	8006a64 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	480e      	ldr	r0, [pc, #56]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006ce6:	f7ff ff5a 	bl	8006b9e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8006cea:	480d      	ldr	r0, [pc, #52]	; (8006d20 <MX_TIM3_Init+0xdc>)
 8006cec:	f7ff ff6a 	bl	8006bc4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006cf0:	2002      	movs	r0, #2
 8006cf2:	f7ff ff77 	bl	8006be4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	4619      	mov	r1, r3
 8006d12:	4804      	ldr	r0, [pc, #16]	; (8006d24 <MX_TIM3_Init+0xe0>)
 8006d14:	f004 fd2b 	bl	800b76e <LL_GPIO_Init>

}
 8006d18:	bf00      	nop
 8006d1a:	3750      	adds	r7, #80	; 0x50
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40020400 	.word	0x40020400

08006d28 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b094      	sub	sp, #80	; 0x50
 8006d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	605a      	str	r2, [r3, #4]
 8006d38:	609a      	str	r2, [r3, #8]
 8006d3a:	60da      	str	r2, [r3, #12]
 8006d3c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8006d3e:	f107 031c 	add.w	r3, r7, #28
 8006d42:	2220      	movs	r2, #32
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f005 fd36 	bl	800c7b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d4c:	1d3b      	adds	r3, r7, #4
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	605a      	str	r2, [r3, #4]
 8006d54:	609a      	str	r2, [r3, #8]
 8006d56:	60da      	str	r2, [r3, #12]
 8006d58:	611a      	str	r2, [r3, #16]
 8006d5a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8006d5c:	2008      	movs	r0, #8
 8006d5e:	f7ff ff59 	bl	8006c14 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006d66:	2300      	movs	r3, #0
 8006d68:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 8006d6a:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8006d6e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006d70:	2300      	movs	r3, #0
 8006d72:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8006d74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d78:	4619      	mov	r1, r3
 8006d7a:	483a      	ldr	r0, [pc, #232]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006d7c:	f004 ff8c 	bl	800bc98 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8006d80:	4838      	ldr	r0, [pc, #224]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006d82:	f7ff fe5e 	bl	8006a42 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006d86:	2100      	movs	r1, #0
 8006d88:	4836      	ldr	r0, [pc, #216]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006d8a:	f7ff fef3 	bl	8006b74 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8006d8e:	2101      	movs	r1, #1
 8006d90:	4834      	ldr	r0, [pc, #208]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006d92:	f7ff feab 	bl	8006aec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006d96:	2360      	movs	r3, #96	; 0x60
 8006d98:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8006daa:	f107 031c 	add.w	r3, r7, #28
 8006dae:	461a      	mov	r2, r3
 8006db0:	2101      	movs	r1, #1
 8006db2:	482c      	ldr	r0, [pc, #176]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006db4:	f005 f80a 	bl	800bdcc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8006db8:	2101      	movs	r1, #1
 8006dba:	482a      	ldr	r0, [pc, #168]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006dbc:	f7ff fe52 	bl	8006a64 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8006dc0:	2110      	movs	r1, #16
 8006dc2:	4828      	ldr	r0, [pc, #160]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006dc4:	f7ff fe92 	bl	8006aec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8006dc8:	f107 031c 	add.w	r3, r7, #28
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2110      	movs	r1, #16
 8006dd0:	4824      	ldr	r0, [pc, #144]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006dd2:	f004 fffb 	bl	800bdcc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8006dd6:	2110      	movs	r1, #16
 8006dd8:	4822      	ldr	r0, [pc, #136]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006dda:	f7ff fe43 	bl	8006a64 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8006dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006de2:	4820      	ldr	r0, [pc, #128]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006de4:	f7ff fe82 	bl	8006aec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8006de8:	f107 031c 	add.w	r3, r7, #28
 8006dec:	461a      	mov	r2, r3
 8006dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006df2:	481c      	ldr	r0, [pc, #112]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006df4:	f004 ffea 	bl	800bdcc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8006df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dfc:	4819      	ldr	r0, [pc, #100]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006dfe:	f7ff fe31 	bl	8006a64 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8006e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e06:	4817      	ldr	r0, [pc, #92]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006e08:	f7ff fe70 	bl	8006aec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8006e0c:	f107 031c 	add.w	r3, r7, #28
 8006e10:	461a      	mov	r2, r3
 8006e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e16:	4813      	ldr	r0, [pc, #76]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006e18:	f004 ffd8 	bl	800bdcc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8006e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e20:	4810      	ldr	r0, [pc, #64]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006e22:	f7ff fe1f 	bl	8006a64 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8006e26:	2100      	movs	r1, #0
 8006e28:	480e      	ldr	r0, [pc, #56]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006e2a:	f7ff feb8 	bl	8006b9e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8006e2e:	480d      	ldr	r0, [pc, #52]	; (8006e64 <MX_TIM5_Init+0x13c>)
 8006e30:	f7ff fec8 	bl	8006bc4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006e34:	2001      	movs	r0, #1
 8006e36:	f7ff fed5 	bl	8006be4 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8006e3a:	230f      	movs	r3, #15
 8006e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e52:	1d3b      	adds	r3, r7, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4804      	ldr	r0, [pc, #16]	; (8006e68 <MX_TIM5_Init+0x140>)
 8006e58:	f004 fc89 	bl	800b76e <LL_GPIO_Init>

}
 8006e5c:	bf00      	nop
 8006e5e:	3750      	adds	r7, #80	; 0x50
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40000c00 	.word	0x40000c00
 8006e68:	40020000 	.word	0x40020000

08006e6c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006e72:	1d3b      	adds	r3, r7, #4
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8006e80:	2020      	movs	r0, #32
 8006e82:	f7ff fec7 	bl	8006c14 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006e86:	f7ff fd53 	bl	8006930 <__NVIC_GetPriorityGrouping>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fda3 	bl	80069dc <NVIC_EncodePriority>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2037      	movs	r0, #55	; 0x37
 8006e9c:	f7ff fd74 	bl	8006988 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8006ea0:	2037      	movs	r0, #55	; 0x37
 8006ea2:	f7ff fd53 	bl	800694c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8006ea6:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8006eaa:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8006eb4:	1d3b      	adds	r3, r7, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4808      	ldr	r0, [pc, #32]	; (8006edc <MX_TIM7_Init+0x70>)
 8006eba:	f004 feed 	bl	800bc98 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8006ebe:	4807      	ldr	r0, [pc, #28]	; (8006edc <MX_TIM7_Init+0x70>)
 8006ec0:	f7ff fdbf 	bl	8006a42 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4805      	ldr	r0, [pc, #20]	; (8006edc <MX_TIM7_Init+0x70>)
 8006ec8:	f7ff fe69 	bl	8006b9e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8006ecc:	4803      	ldr	r0, [pc, #12]	; (8006edc <MX_TIM7_Init+0x70>)
 8006ece:	f7ff fe79 	bl	8006bc4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40001400 	.word	0x40001400

08006ee0 <__NVIC_GetPriorityGrouping>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ee4:	4b04      	ldr	r3, [pc, #16]	; (8006ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	f003 0307 	and.w	r3, r3, #7
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	e000ed00 	.word	0xe000ed00

08006efc <__NVIC_EnableIRQ>:
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	db0b      	blt.n	8006f26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	f003 021f 	and.w	r2, r3, #31
 8006f14:	4907      	ldr	r1, [pc, #28]	; (8006f34 <__NVIC_EnableIRQ+0x38>)
 8006f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	e000e100 	.word	0xe000e100

08006f38 <__NVIC_SetPriority>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	6039      	str	r1, [r7, #0]
 8006f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	db0a      	blt.n	8006f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	490c      	ldr	r1, [pc, #48]	; (8006f84 <__NVIC_SetPriority+0x4c>)
 8006f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f56:	0112      	lsls	r2, r2, #4
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f60:	e00a      	b.n	8006f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	4908      	ldr	r1, [pc, #32]	; (8006f88 <__NVIC_SetPriority+0x50>)
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	3b04      	subs	r3, #4
 8006f70:	0112      	lsls	r2, r2, #4
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	440b      	add	r3, r1
 8006f76:	761a      	strb	r2, [r3, #24]
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	e000e100 	.word	0xe000e100
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <NVIC_EncodePriority>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b089      	sub	sp, #36	; 0x24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	f1c3 0307 	rsb	r3, r3, #7
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	bf28      	it	cs
 8006faa:	2304      	movcs	r3, #4
 8006fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	2b06      	cmp	r3, #6
 8006fb4:	d902      	bls.n	8006fbc <NVIC_EncodePriority+0x30>
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	3b03      	subs	r3, #3
 8006fba:	e000      	b.n	8006fbe <NVIC_EncodePriority+0x32>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	43da      	mvns	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	401a      	ands	r2, r3
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	fa01 f303 	lsl.w	r3, r1, r3
 8006fde:	43d9      	mvns	r1, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fe4:	4313      	orrs	r3, r2
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3724      	adds	r7, #36	; 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <LL_USART_Enable>:
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60da      	str	r2, [r3, #12]
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <LL_USART_ConfigAsyncMode>:
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	615a      	str	r2, [r3, #20]
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <LL_AHB1_GRP1_EnableClock>:
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800704a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704c:	4907      	ldr	r1, [pc, #28]	; (800706c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4313      	orrs	r3, r2
 8007052:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4013      	ands	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800705e:	68fb      	ldr	r3, [r7, #12]
}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	40023800 	.word	0x40023800

08007070 <LL_APB1_GRP1_EnableClock>:
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007078:	4b08      	ldr	r3, [pc, #32]	; (800709c <LL_APB1_GRP1_EnableClock+0x2c>)
 800707a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800707c:	4907      	ldr	r1, [pc, #28]	; (800709c <LL_APB1_GRP1_EnableClock+0x2c>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4313      	orrs	r3, r2
 8007082:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4013      	ands	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800708e:	68fb      	ldr	r3, [r7, #12]
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40023800 	.word	0x40023800

080070a0 <LL_APB2_GRP1_EnableClock>:
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80070a8:	4b08      	ldr	r3, [pc, #32]	; (80070cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80070aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ac:	4907      	ldr	r1, [pc, #28]	; (80070cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80070b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4013      	ands	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	40023800 	.word	0x40023800

080070d0 <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08e      	sub	sp, #56	; 0x38
 80070d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80070d6:	f107 031c 	add.w	r3, r7, #28
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	605a      	str	r2, [r3, #4]
 80070e0:	609a      	str	r2, [r3, #8]
 80070e2:	60da      	str	r2, [r3, #12]
 80070e4:	611a      	str	r2, [r3, #16]
 80070e6:	615a      	str	r2, [r3, #20]
 80070e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	605a      	str	r2, [r3, #4]
 80070f2:	609a      	str	r2, [r3, #8]
 80070f4:	60da      	str	r2, [r3, #12]
 80070f6:	611a      	str	r2, [r3, #16]
 80070f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80070fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80070fe:	f7ff ffb7 	bl	8007070 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007102:	2004      	movs	r0, #4
 8007104:	f7ff ff9c 	bl	8007040 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8007108:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800710c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800710e:	2302      	movs	r3, #2
 8007110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007112:	2303      	movs	r3, #3
 8007114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007116:	2300      	movs	r3, #0
 8007118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800711e:	2308      	movs	r3, #8
 8007120:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007122:	1d3b      	adds	r3, r7, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4819      	ldr	r0, [pc, #100]	; (800718c <MX_UART4_Init+0xbc>)
 8007128:	f004 fb21 	bl	800b76e <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800712c:	f7ff fed8 	bl	8006ee0 <__NVIC_GetPriorityGrouping>
 8007130:	4603      	mov	r3, r0
 8007132:	2200      	movs	r2, #0
 8007134:	2100      	movs	r1, #0
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff ff28 	bl	8006f8c <NVIC_EncodePriority>
 800713c:	4603      	mov	r3, r0
 800713e:	4619      	mov	r1, r3
 8007140:	2034      	movs	r0, #52	; 0x34
 8007142:	f7ff fef9 	bl	8006f38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8007146:	2034      	movs	r0, #52	; 0x34
 8007148:	f7ff fed8 	bl	8006efc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800714c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007150:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007152:	2300      	movs	r3, #0
 8007154:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007156:	2300      	movs	r3, #0
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800715a:	2300      	movs	r3, #0
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800715e:	230c      	movs	r3, #12
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007162:	2300      	movs	r3, #0
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007166:	2300      	movs	r3, #0
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800716a:	f107 031c 	add.w	r3, r7, #28
 800716e:	4619      	mov	r1, r3
 8007170:	4807      	ldr	r0, [pc, #28]	; (8007190 <MX_UART4_Init+0xc0>)
 8007172:	f005 fa77 	bl	800c664 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8007176:	4806      	ldr	r0, [pc, #24]	; (8007190 <MX_UART4_Init+0xc0>)
 8007178:	f7ff ff4b 	bl	8007012 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800717c:	4804      	ldr	r0, [pc, #16]	; (8007190 <MX_UART4_Init+0xc0>)
 800717e:	f7ff ff38 	bl	8006ff2 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007182:	bf00      	nop
 8007184:	3738      	adds	r7, #56	; 0x38
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40020800 	.word	0x40020800
 8007190:	40004c00 	.word	0x40004c00

08007194 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08e      	sub	sp, #56	; 0x38
 8007198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800719a:	f107 031c 	add.w	r3, r7, #28
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	605a      	str	r2, [r3, #4]
 80071a4:	609a      	str	r2, [r3, #8]
 80071a6:	60da      	str	r2, [r3, #12]
 80071a8:	611a      	str	r2, [r3, #16]
 80071aa:	615a      	str	r2, [r3, #20]
 80071ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ae:	1d3b      	adds	r3, r7, #4
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	611a      	str	r2, [r3, #16]
 80071bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80071be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80071c2:	f7ff ff55 	bl	8007070 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80071c6:	2004      	movs	r0, #4
 80071c8:	f7ff ff3a 	bl	8007040 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80071cc:	2008      	movs	r0, #8
 80071ce:	f7ff ff37 	bl	8007040 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80071d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80071d8:	2302      	movs	r3, #2
 80071da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80071dc:	2303      	movs	r3, #3
 80071de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80071e8:	2308      	movs	r3, #8
 80071ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071ec:	1d3b      	adds	r3, r7, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4821      	ldr	r0, [pc, #132]	; (8007278 <MX_UART5_Init+0xe4>)
 80071f2:	f004 fabc 	bl	800b76e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80071f6:	2304      	movs	r3, #4
 80071f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80071fa:	2302      	movs	r3, #2
 80071fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80071fe:	2303      	movs	r3, #3
 8007200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007202:	2300      	movs	r3, #0
 8007204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800720a:	2308      	movs	r3, #8
 800720c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800720e:	1d3b      	adds	r3, r7, #4
 8007210:	4619      	mov	r1, r3
 8007212:	481a      	ldr	r0, [pc, #104]	; (800727c <MX_UART5_Init+0xe8>)
 8007214:	f004 faab 	bl	800b76e <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007218:	f7ff fe62 	bl	8006ee0 <__NVIC_GetPriorityGrouping>
 800721c:	4603      	mov	r3, r0
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff feb2 	bl	8006f8c <NVIC_EncodePriority>
 8007228:	4603      	mov	r3, r0
 800722a:	4619      	mov	r1, r3
 800722c:	2035      	movs	r0, #53	; 0x35
 800722e:	f7ff fe83 	bl	8006f38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8007232:	2035      	movs	r0, #53	; 0x35
 8007234:	f7ff fe62 	bl	8006efc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8007238:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800723c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800723e:	2300      	movs	r3, #0
 8007240:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007242:	2300      	movs	r3, #0
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007246:	2300      	movs	r3, #0
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800724a:	2304      	movs	r3, #4
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800724e:	2300      	movs	r3, #0
 8007250:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007252:	2300      	movs	r3, #0
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8007256:	f107 031c 	add.w	r3, r7, #28
 800725a:	4619      	mov	r1, r3
 800725c:	4808      	ldr	r0, [pc, #32]	; (8007280 <MX_UART5_Init+0xec>)
 800725e:	f005 fa01 	bl	800c664 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8007262:	4807      	ldr	r0, [pc, #28]	; (8007280 <MX_UART5_Init+0xec>)
 8007264:	f7ff fed5 	bl	8007012 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8007268:	4805      	ldr	r0, [pc, #20]	; (8007280 <MX_UART5_Init+0xec>)
 800726a:	f7ff fec2 	bl	8006ff2 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800726e:	bf00      	nop
 8007270:	3738      	adds	r7, #56	; 0x38
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40020800 	.word	0x40020800
 800727c:	40020c00 	.word	0x40020c00
 8007280:	40005000 	.word	0x40005000

08007284 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007288:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 800728a:	4a12      	ldr	r2, [pc, #72]	; (80072d4 <MX_USART1_UART_Init+0x50>)
 800728c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800728e:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 8007290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007296:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 8007298:	2200      	movs	r2, #0
 800729a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800729c:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 800729e:	2200      	movs	r2, #0
 80072a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80072a2:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 80072aa:	220c      	movs	r2, #12
 80072ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072ae:	4b08      	ldr	r3, [pc, #32]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80072ba:	4805      	ldr	r0, [pc, #20]	; (80072d0 <MX_USART1_UART_Init+0x4c>)
 80072bc:	f003 f896 	bl	800a3ec <HAL_UART_Init>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80072c6:	f7fe fefe 	bl	80060c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80072ca:	bf00      	nop
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000648 	.word	0x20000648
 80072d4:	40011000 	.word	0x40011000

080072d8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80072de:	f107 031c 	add.w	r3, r7, #28
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	605a      	str	r2, [r3, #4]
 80072e8:	609a      	str	r2, [r3, #8]
 80072ea:	60da      	str	r2, [r3, #12]
 80072ec:	611a      	str	r2, [r3, #16]
 80072ee:	615a      	str	r2, [r3, #20]
 80072f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072f2:	1d3b      	adds	r3, r7, #4
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	609a      	str	r2, [r3, #8]
 80072fc:	60da      	str	r2, [r3, #12]
 80072fe:	611a      	str	r2, [r3, #16]
 8007300:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8007302:	2020      	movs	r0, #32
 8007304:	f7ff fecc 	bl	80070a0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007308:	2004      	movs	r0, #4
 800730a:	f7ff fe99 	bl	8007040 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800730e:	23c0      	movs	r3, #192	; 0xc0
 8007310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007312:	2302      	movs	r3, #2
 8007314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007316:	2303      	movs	r3, #3
 8007318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8007322:	2308      	movs	r3, #8
 8007324:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007326:	1d3b      	adds	r3, r7, #4
 8007328:	4619      	mov	r1, r3
 800732a:	4819      	ldr	r0, [pc, #100]	; (8007390 <MX_USART6_UART_Init+0xb8>)
 800732c:	f004 fa1f 	bl	800b76e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007330:	f7ff fdd6 	bl	8006ee0 <__NVIC_GetPriorityGrouping>
 8007334:	4603      	mov	r3, r0
 8007336:	2200      	movs	r2, #0
 8007338:	2100      	movs	r1, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fe26 	bl	8006f8c <NVIC_EncodePriority>
 8007340:	4603      	mov	r3, r0
 8007342:	4619      	mov	r1, r3
 8007344:	2047      	movs	r0, #71	; 0x47
 8007346:	f7ff fdf7 	bl	8006f38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800734a:	2047      	movs	r0, #71	; 0x47
 800734c:	f7ff fdd6 	bl	8006efc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8007350:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007354:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007356:	2300      	movs	r3, #0
 8007358:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800735a:	2300      	movs	r3, #0
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800735e:	2300      	movs	r3, #0
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007362:	230c      	movs	r3, #12
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007366:	2300      	movs	r3, #0
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800736a:	2300      	movs	r3, #0
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800736e:	f107 031c 	add.w	r3, r7, #28
 8007372:	4619      	mov	r1, r3
 8007374:	4807      	ldr	r0, [pc, #28]	; (8007394 <MX_USART6_UART_Init+0xbc>)
 8007376:	f005 f975 	bl	800c664 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800737a:	4806      	ldr	r0, [pc, #24]	; (8007394 <MX_USART6_UART_Init+0xbc>)
 800737c:	f7ff fe49 	bl	8007012 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8007380:	4804      	ldr	r0, [pc, #16]	; (8007394 <MX_USART6_UART_Init+0xbc>)
 8007382:	f7ff fe36 	bl	8006ff2 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8007386:	bf00      	nop
 8007388:	3738      	adds	r7, #56	; 0x38
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40020800 	.word	0x40020800
 8007394:	40011400 	.word	0x40011400

08007398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_UART_MspInit+0x94>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d134      	bne.n	8007424 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <HAL_UART_MspInit+0x98>)
 80073c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <HAL_UART_MspInit+0x98>)
 80073c4:	f043 0310 	orr.w	r3, r3, #16
 80073c8:	6453      	str	r3, [r2, #68]	; 0x44
 80073ca:	4b19      	ldr	r3, [pc, #100]	; (8007430 <HAL_UART_MspInit+0x98>)
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	4b15      	ldr	r3, [pc, #84]	; (8007430 <HAL_UART_MspInit+0x98>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	4a14      	ldr	r2, [pc, #80]	; (8007430 <HAL_UART_MspInit+0x98>)
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	6313      	str	r3, [r2, #48]	; 0x30
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <HAL_UART_MspInit+0x98>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80073f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80073f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f8:	2302      	movs	r3, #2
 80073fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007400:	2303      	movs	r3, #3
 8007402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007404:	2307      	movs	r3, #7
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	4619      	mov	r1, r3
 800740e:	4809      	ldr	r0, [pc, #36]	; (8007434 <HAL_UART_MspInit+0x9c>)
 8007410:	f001 f9f8 	bl	8008804 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007414:	2200      	movs	r2, #0
 8007416:	2100      	movs	r1, #0
 8007418:	2025      	movs	r0, #37	; 0x25
 800741a:	f000 fdba 	bl	8007f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800741e:	2025      	movs	r0, #37	; 0x25
 8007420:	f000 fdd3 	bl	8007fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007424:	bf00      	nop
 8007426:	3728      	adds	r7, #40	; 0x28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40011000 	.word	0x40011000
 8007430:	40023800 	.word	0x40023800
 8007434:	40020000 	.word	0x40020000

08007438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800743c:	480d      	ldr	r0, [pc, #52]	; (8007474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800743e:	490e      	ldr	r1, [pc, #56]	; (8007478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007440:	4a0e      	ldr	r2, [pc, #56]	; (800747c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007444:	e002      	b.n	800744c <LoopCopyDataInit>

08007446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800744a:	3304      	adds	r3, #4

0800744c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800744c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800744e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007450:	d3f9      	bcc.n	8007446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007452:	4a0b      	ldr	r2, [pc, #44]	; (8007480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007454:	4c0b      	ldr	r4, [pc, #44]	; (8007484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007458:	e001      	b.n	800745e <LoopFillZerobss>

0800745a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800745a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800745c:	3204      	adds	r2, #4

0800745e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800745e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007460:	d3fb      	bcc.n	800745a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007462:	f7ff fa53 	bl	800690c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007466:	f005 f983 	bl	800c770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800746a:	f7fc fd3f 	bl	8003eec <main>
  bx  lr    
 800746e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007478:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800747c:	08010844 	.word	0x08010844
  ldr r2, =_sbss
 8007480:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8007484:	200006a0 	.word	0x200006a0

08007488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007488:	e7fe      	b.n	8007488 <ADC_IRQHandler>
	...

0800748c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007490:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <HAL_Init+0x40>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <HAL_Init+0x40>)
 8007496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800749a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800749c:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <HAL_Init+0x40>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <HAL_Init+0x40>)
 80074a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074a8:	4b08      	ldr	r3, [pc, #32]	; (80074cc <HAL_Init+0x40>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a07      	ldr	r2, [pc, #28]	; (80074cc <HAL_Init+0x40>)
 80074ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074b4:	2003      	movs	r0, #3
 80074b6:	f000 fd61 	bl	8007f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074ba:	200f      	movs	r0, #15
 80074bc:	f000 f808 	bl	80074d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074c0:	f7fe ff5a 	bl	8006378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40023c00 	.word	0x40023c00

080074d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <HAL_InitTick+0x54>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4b12      	ldr	r3, [pc, #72]	; (8007528 <HAL_InitTick+0x58>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	4619      	mov	r1, r3
 80074e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80074ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fd79 	bl	8007fe6 <HAL_SYSTICK_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e00e      	b.n	800751c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b0f      	cmp	r3, #15
 8007502:	d80a      	bhi.n	800751a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007504:	2200      	movs	r2, #0
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	f000 fd41 	bl	8007f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007510:	4a06      	ldr	r2, [pc, #24]	; (800752c <HAL_InitTick+0x5c>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	e000      	b.n	800751c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000004 	.word	0x20000004
 8007528:	2000000c 	.word	0x2000000c
 800752c:	20000008 	.word	0x20000008

08007530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_IncTick+0x20>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <HAL_IncTick+0x24>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4413      	add	r3, r2
 8007540:	4a04      	ldr	r2, [pc, #16]	; (8007554 <HAL_IncTick+0x24>)
 8007542:	6013      	str	r3, [r2, #0]
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	2000000c 	.word	0x2000000c
 8007554:	2000068c 	.word	0x2000068c

08007558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  return uwTick;
 800755c:	4b03      	ldr	r3, [pc, #12]	; (800756c <HAL_GetTick+0x14>)
 800755e:	681b      	ldr	r3, [r3, #0]
}
 8007560:	4618      	mov	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	2000068c 	.word	0x2000068c

08007570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007578:	f7ff ffee 	bl	8007558 <HAL_GetTick>
 800757c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d005      	beq.n	8007596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <HAL_Delay+0x44>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007596:	bf00      	nop
 8007598:	f7ff ffde 	bl	8007558 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d8f7      	bhi.n	8007598 <HAL_Delay+0x28>
  {
  }
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	2000000c 	.word	0x2000000c

080075b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e033      	b.n	8007636 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d109      	bne.n	80075ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fc f9e2 	bl	80039a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d118      	bne.n	8007628 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80075fe:	f023 0302 	bic.w	r3, r3, #2
 8007602:	f043 0202 	orr.w	r2, r3, #2
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fa68 	bl	8007ae0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	f043 0201 	orr.w	r2, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
 8007626:	e001      	b.n	800762c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_ADC_Start_DMA+0x1e>
 800765a:	2302      	movs	r3, #2
 800765c:	e0e9      	b.n	8007832 <HAL_ADC_Start_DMA+0x1f2>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b01      	cmp	r3, #1
 8007672:	d018      	beq.n	80076a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007684:	4b6d      	ldr	r3, [pc, #436]	; (800783c <HAL_ADC_Start_DMA+0x1fc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a6d      	ldr	r2, [pc, #436]	; (8007840 <HAL_ADC_Start_DMA+0x200>)
 800768a:	fba2 2303 	umull	r2, r3, r2, r3
 800768e:	0c9a      	lsrs	r2, r3, #18
 8007690:	4613      	mov	r3, r2
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	4413      	add	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007698:	e002      	b.n	80076a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	3b01      	subs	r3, #1
 800769e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f9      	bne.n	800769a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b4:	d107      	bne.n	80076c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	f040 80a1 	bne.w	8007818 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d007      	beq.n	8007708 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007700:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007714:	d106      	bne.n	8007724 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	f023 0206 	bic.w	r2, r3, #6
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	645a      	str	r2, [r3, #68]	; 0x44
 8007722:	e002      	b.n	800772a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007732:	4b44      	ldr	r3, [pc, #272]	; (8007844 <HAL_ADC_Start_DMA+0x204>)
 8007734:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	4a43      	ldr	r2, [pc, #268]	; (8007848 <HAL_ADC_Start_DMA+0x208>)
 800773c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	4a42      	ldr	r2, [pc, #264]	; (800784c <HAL_ADC_Start_DMA+0x20c>)
 8007744:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774a:	4a41      	ldr	r2, [pc, #260]	; (8007850 <HAL_ADC_Start_DMA+0x210>)
 800774c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007756:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007766:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007776:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	334c      	adds	r3, #76	; 0x4c
 8007782:	4619      	mov	r1, r3
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f000 fce8 	bl	800815c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f003 031f 	and.w	r3, r3, #31
 8007794:	2b00      	cmp	r3, #0
 8007796:	d12a      	bne.n	80077ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a2d      	ldr	r2, [pc, #180]	; (8007854 <HAL_ADC_Start_DMA+0x214>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d015      	beq.n	80077ce <HAL_ADC_Start_DMA+0x18e>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a2c      	ldr	r2, [pc, #176]	; (8007858 <HAL_ADC_Start_DMA+0x218>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d105      	bne.n	80077b8 <HAL_ADC_Start_DMA+0x178>
 80077ac:	4b25      	ldr	r3, [pc, #148]	; (8007844 <HAL_ADC_Start_DMA+0x204>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a27      	ldr	r2, [pc, #156]	; (800785c <HAL_ADC_Start_DMA+0x21c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d136      	bne.n	8007830 <HAL_ADC_Start_DMA+0x1f0>
 80077c2:	4b20      	ldr	r3, [pc, #128]	; (8007844 <HAL_ADC_Start_DMA+0x204>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f003 0310 	and.w	r3, r3, #16
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d130      	bne.n	8007830 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d129      	bne.n	8007830 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077ea:	609a      	str	r2, [r3, #8]
 80077ec:	e020      	b.n	8007830 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <HAL_ADC_Start_DMA+0x214>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d11b      	bne.n	8007830 <HAL_ADC_Start_DMA+0x1f0>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d114      	bne.n	8007830 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007814:	609a      	str	r2, [r3, #8]
 8007816:	e00b      	b.n	8007830 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	f043 0210 	orr.w	r2, r3, #16
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007828:	f043 0201 	orr.w	r2, r3, #1
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000004 	.word	0x20000004
 8007840:	431bde83 	.word	0x431bde83
 8007844:	40012300 	.word	0x40012300
 8007848:	08007cd9 	.word	0x08007cd9
 800784c:	08007d93 	.word	0x08007d93
 8007850:	08007daf 	.word	0x08007daf
 8007854:	40012000 	.word	0x40012000
 8007858:	40012100 	.word	0x40012100
 800785c:	40012200 	.word	0x40012200

08007860 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_ADC_ConfigChannel+0x1c>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e105      	b.n	8007ac4 <HAL_ADC_ConfigChannel+0x228>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d925      	bls.n	8007914 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68d9      	ldr	r1, [r3, #12]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	4613      	mov	r3, r2
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	4413      	add	r3, r2
 80078dc:	3b1e      	subs	r3, #30
 80078de:	2207      	movs	r2, #7
 80078e0:	fa02 f303 	lsl.w	r3, r2, r3
 80078e4:	43da      	mvns	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	400a      	ands	r2, r1
 80078ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68d9      	ldr	r1, [r3, #12]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	4618      	mov	r0, r3
 8007900:	4603      	mov	r3, r0
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	4403      	add	r3, r0
 8007906:	3b1e      	subs	r3, #30
 8007908:	409a      	lsls	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	e022      	b.n	800795a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6919      	ldr	r1, [r3, #16]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	4613      	mov	r3, r2
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	4413      	add	r3, r2
 8007928:	2207      	movs	r2, #7
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43da      	mvns	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	400a      	ands	r2, r1
 8007936:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6919      	ldr	r1, [r3, #16]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	4618      	mov	r0, r3
 800794a:	4603      	mov	r3, r0
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4403      	add	r3, r0
 8007950:	409a      	lsls	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d824      	bhi.n	80079ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	3b05      	subs	r3, #5
 8007974:	221f      	movs	r2, #31
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43da      	mvns	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	400a      	ands	r2, r1
 8007982:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	4618      	mov	r0, r3
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	3b05      	subs	r3, #5
 800799e:	fa00 f203 	lsl.w	r2, r0, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	635a      	str	r2, [r3, #52]	; 0x34
 80079aa:	e04c      	b.n	8007a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b0c      	cmp	r3, #12
 80079b2:	d824      	bhi.n	80079fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	3b23      	subs	r3, #35	; 0x23
 80079c6:	221f      	movs	r2, #31
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	43da      	mvns	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	400a      	ands	r2, r1
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4618      	mov	r0, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	3b23      	subs	r3, #35	; 0x23
 80079f0:	fa00 f203 	lsl.w	r2, r0, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30
 80079fc:	e023      	b.n	8007a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3b41      	subs	r3, #65	; 0x41
 8007a10:	221f      	movs	r2, #31
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43da      	mvns	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	400a      	ands	r2, r1
 8007a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	3b41      	subs	r3, #65	; 0x41
 8007a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a46:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <HAL_ADC_ConfigChannel+0x234>)
 8007a48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a21      	ldr	r2, [pc, #132]	; (8007ad4 <HAL_ADC_ConfigChannel+0x238>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d109      	bne.n	8007a68 <HAL_ADC_ConfigChannel+0x1cc>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b12      	cmp	r3, #18
 8007a5a:	d105      	bne.n	8007a68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a19      	ldr	r2, [pc, #100]	; (8007ad4 <HAL_ADC_ConfigChannel+0x238>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d123      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x21e>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b10      	cmp	r3, #16
 8007a78:	d003      	beq.n	8007a82 <HAL_ADC_ConfigChannel+0x1e6>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b11      	cmp	r3, #17
 8007a80:	d11b      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d111      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007a96:	4b10      	ldr	r3, [pc, #64]	; (8007ad8 <HAL_ADC_ConfigChannel+0x23c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a10      	ldr	r2, [pc, #64]	; (8007adc <HAL_ADC_ConfigChannel+0x240>)
 8007a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa0:	0c9a      	lsrs	r2, r3, #18
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007aac:	e002      	b.n	8007ab4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f9      	bne.n	8007aae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	40012300 	.word	0x40012300
 8007ad4:	40012000 	.word	0x40012000
 8007ad8:	20000004 	.word	0x20000004
 8007adc:	431bde83 	.word	0x431bde83

08007ae0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ae8:	4b79      	ldr	r3, [pc, #484]	; (8007cd0 <ADC_Init+0x1f0>)
 8007aea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	431a      	orrs	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6859      	ldr	r1, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	021a      	lsls	r2, r3, #8
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6859      	ldr	r1, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6899      	ldr	r1, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b72:	4a58      	ldr	r2, [pc, #352]	; (8007cd4 <ADC_Init+0x1f4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d022      	beq.n	8007bbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6899      	ldr	r1, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6899      	ldr	r1, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	e00f      	b.n	8007bde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0202 	bic.w	r2, r2, #2
 8007bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6899      	ldr	r1, [r3, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7e1b      	ldrb	r3, [r3, #24]
 8007bf8:	005a      	lsls	r2, r3, #1
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01b      	beq.n	8007c44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6859      	ldr	r1, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	3b01      	subs	r3, #1
 8007c38:	035a      	lsls	r2, r3, #13
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	e007      	b.n	8007c54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	051a      	lsls	r2, r3, #20
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6899      	ldr	r1, [r3, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c96:	025a      	lsls	r2, r3, #9
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6899      	ldr	r1, [r3, #8]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	029a      	lsls	r2, r3, #10
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	40012300 	.word	0x40012300
 8007cd4:	0f000001 	.word	0x0f000001

08007cd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d13c      	bne.n	8007d6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d12b      	bne.n	8007d64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d127      	bne.n	8007d64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d006      	beq.n	8007d30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d119      	bne.n	8007d64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0220 	bic.w	r2, r2, #32
 8007d3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d105      	bne.n	8007d64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	f043 0201 	orr.w	r2, r3, #1
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fd7b 	bl	8007860 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d6a:	e00e      	b.n	8007d8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fd85 	bl	8007888 <HAL_ADC_ErrorCallback>
}
 8007d7e:	e004      	b.n	8007d8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff fd67 	bl	8007874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2240      	movs	r2, #64	; 0x40
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc6:	f043 0204 	orr.w	r2, r3, #4
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7ff fd5a 	bl	8007888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007dd4:	bf00      	nop
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <__NVIC_SetPriorityGrouping>:
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dec:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <__NVIC_SetPriorityGrouping+0x44>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007df8:	4013      	ands	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e0e:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <__NVIC_SetPriorityGrouping+0x44>)
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	60d3      	str	r3, [r2, #12]
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	e000ed00 	.word	0xe000ed00

08007e24 <__NVIC_GetPriorityGrouping>:
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e28:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <__NVIC_GetPriorityGrouping+0x18>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	f003 0307 	and.w	r3, r3, #7
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	e000ed00 	.word	0xe000ed00

08007e40 <__NVIC_EnableIRQ>:
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	db0b      	blt.n	8007e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	f003 021f 	and.w	r2, r3, #31
 8007e58:	4907      	ldr	r1, [pc, #28]	; (8007e78 <__NVIC_EnableIRQ+0x38>)
 8007e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	2001      	movs	r0, #1
 8007e62:	fa00 f202 	lsl.w	r2, r0, r2
 8007e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	e000e100 	.word	0xe000e100

08007e7c <__NVIC_SetPriority>:
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	db0a      	blt.n	8007ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	490c      	ldr	r1, [pc, #48]	; (8007ec8 <__NVIC_SetPriority+0x4c>)
 8007e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9a:	0112      	lsls	r2, r2, #4
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ea4:	e00a      	b.n	8007ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	4908      	ldr	r1, [pc, #32]	; (8007ecc <__NVIC_SetPriority+0x50>)
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	0112      	lsls	r2, r2, #4
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	440b      	add	r3, r1
 8007eba:	761a      	strb	r2, [r3, #24]
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	e000e100 	.word	0xe000e100
 8007ecc:	e000ed00 	.word	0xe000ed00

08007ed0 <NVIC_EncodePriority>:
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b089      	sub	sp, #36	; 0x24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f1c3 0307 	rsb	r3, r3, #7
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	bf28      	it	cs
 8007eee:	2304      	movcs	r3, #4
 8007ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	2b06      	cmp	r3, #6
 8007ef8:	d902      	bls.n	8007f00 <NVIC_EncodePriority+0x30>
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	3b03      	subs	r3, #3
 8007efe:	e000      	b.n	8007f02 <NVIC_EncodePriority+0x32>
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f04:	f04f 32ff 	mov.w	r2, #4294967295
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43da      	mvns	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	401a      	ands	r2, r3
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f18:	f04f 31ff 	mov.w	r1, #4294967295
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f22:	43d9      	mvns	r1, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f28:	4313      	orrs	r3, r2
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3724      	adds	r7, #36	; 0x24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
	...

08007f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f48:	d301      	bcc.n	8007f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e00f      	b.n	8007f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <SysTick_Config+0x40>)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f56:	210f      	movs	r1, #15
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	f7ff ff8e 	bl	8007e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <SysTick_Config+0x40>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <SysTick_Config+0x40>)
 8007f68:	2207      	movs	r2, #7
 8007f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	e000e010 	.word	0xe000e010

08007f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff29 	bl	8007ddc <__NVIC_SetPriorityGrouping>
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b086      	sub	sp, #24
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	4603      	mov	r3, r0
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fa4:	f7ff ff3e 	bl	8007e24 <__NVIC_GetPriorityGrouping>
 8007fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	6978      	ldr	r0, [r7, #20]
 8007fb0:	f7ff ff8e 	bl	8007ed0 <NVIC_EncodePriority>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff ff5d 	bl	8007e7c <__NVIC_SetPriority>
}
 8007fc2:	bf00      	nop
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff ff31 	bl	8007e40 <__NVIC_EnableIRQ>
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff ffa2 	bl	8007f38 <SysTick_Config>
 8007ff4:	4603      	mov	r3, r0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800800c:	f7ff faa4 	bl	8007558 <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e099      	b.n	8008150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0201 	bic.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800803c:	e00f      	b.n	800805e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800803e:	f7ff fa8b 	bl	8007558 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b05      	cmp	r3, #5
 800804a:	d908      	bls.n	800805e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2203      	movs	r2, #3
 8008056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e078      	b.n	8008150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e8      	bne.n	800803e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4b38      	ldr	r3, [pc, #224]	; (8008158 <HAL_DMA_Init+0x158>)
 8008078:	4013      	ands	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800808a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d107      	bne.n	80080c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c0:	4313      	orrs	r3, r2
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0307 	bic.w	r3, r3, #7
 80080de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d117      	bne.n	8008122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00e      	beq.n	8008122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fb01 	bl	800870c <DMA_CheckFifoParam>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d008      	beq.n	8008122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2240      	movs	r2, #64	; 0x40
 8008114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800811e:	2301      	movs	r3, #1
 8008120:	e016      	b.n	8008150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fab8 	bl	80086a0 <DMA_CalcBaseAndBitshift>
 8008130:	4603      	mov	r3, r0
 8008132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008138:	223f      	movs	r2, #63	; 0x3f
 800813a:	409a      	lsls	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	f010803f 	.word	0xf010803f

0800815c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008172:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <HAL_DMA_Start_IT+0x26>
 800817e:	2302      	movs	r3, #2
 8008180:	e040      	b.n	8008204 <HAL_DMA_Start_IT+0xa8>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b01      	cmp	r3, #1
 8008194:	d12f      	bne.n	80081f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 fa4a 	bl	8008644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b4:	223f      	movs	r2, #63	; 0x3f
 80081b6:	409a      	lsls	r2, r3
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0216 	orr.w	r2, r2, #22
 80081ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d007      	beq.n	80081e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0208 	orr.w	r2, r2, #8
 80081e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e005      	b.n	8008202 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80081fe:	2302      	movs	r3, #2
 8008200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800821a:	f7ff f99d 	bl	8007558 <HAL_GetTick>
 800821e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d008      	beq.n	800823e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2280      	movs	r2, #128	; 0x80
 8008230:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e052      	b.n	80082e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0216 	bic.w	r2, r2, #22
 800824c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695a      	ldr	r2, [r3, #20]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800825c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <HAL_DMA_Abort+0x62>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0208 	bic.w	r2, r2, #8
 800827c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0201 	bic.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800828e:	e013      	b.n	80082b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008290:	f7ff f962 	bl	8007558 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b05      	cmp	r3, #5
 800829c:	d90c      	bls.n	80082b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2203      	movs	r2, #3
 80082a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e015      	b.n	80082e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e4      	bne.n	8008290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ca:	223f      	movs	r2, #63	; 0x3f
 80082cc:	409a      	lsls	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d004      	beq.n	800830a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2280      	movs	r2, #128	; 0x80
 8008304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e00c      	b.n	8008324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2205      	movs	r2, #5
 800830e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0201 	bic.w	r2, r2, #1
 8008320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800833c:	4b8e      	ldr	r3, [pc, #568]	; (8008578 <HAL_DMA_IRQHandler+0x248>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a8e      	ldr	r2, [pc, #568]	; (800857c <HAL_DMA_IRQHandler+0x24c>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	0a9b      	lsrs	r3, r3, #10
 8008348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835a:	2208      	movs	r2, #8
 800835c:	409a      	lsls	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4013      	ands	r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01a      	beq.n	800839c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	d013      	beq.n	800839c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 0204 	bic.w	r2, r2, #4
 8008382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008388:	2208      	movs	r2, #8
 800838a:	409a      	lsls	r2, r3
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008394:	f043 0201 	orr.w	r2, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a0:	2201      	movs	r2, #1
 80083a2:	409a      	lsls	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4013      	ands	r3, r2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d012      	beq.n	80083d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083be:	2201      	movs	r2, #1
 80083c0:	409a      	lsls	r2, r3
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ca:	f043 0202 	orr.w	r2, r3, #2
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d6:	2204      	movs	r2, #4
 80083d8:	409a      	lsls	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4013      	ands	r3, r2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d012      	beq.n	8008408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f4:	2204      	movs	r2, #4
 80083f6:	409a      	lsls	r2, r3
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008400:	f043 0204 	orr.w	r2, r3, #4
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840c:	2210      	movs	r2, #16
 800840e:	409a      	lsls	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d043      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0308 	and.w	r3, r3, #8
 8008422:	2b00      	cmp	r3, #0
 8008424:	d03c      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842a:	2210      	movs	r2, #16
 800842c:	409a      	lsls	r2, r3
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d018      	beq.n	8008472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d108      	bne.n	8008460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d024      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
 800845e:	e01f      	b.n	80084a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4798      	blx	r3
 8008470:	e016      	b.n	80084a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847c:	2b00      	cmp	r3, #0
 800847e:	d107      	bne.n	8008490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0208 	bic.w	r2, r2, #8
 800848e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	2220      	movs	r2, #32
 80084a6:	409a      	lsls	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 808f 	beq.w	80085d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 8087 	beq.w	80085d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	2220      	movs	r2, #32
 80084c8:	409a      	lsls	r2, r3
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	d136      	bne.n	8008548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0216 	bic.w	r2, r2, #22
 80084e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695a      	ldr	r2, [r3, #20]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d103      	bne.n	800850a <HAL_DMA_IRQHandler+0x1da>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0208 	bic.w	r2, r2, #8
 8008518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851e:	223f      	movs	r2, #63	; 0x3f
 8008520:	409a      	lsls	r2, r3
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	2b00      	cmp	r3, #0
 800853c:	d07e      	beq.n	800863c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
        }
        return;
 8008546:	e079      	b.n	800863c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d01d      	beq.n	8008592 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10d      	bne.n	8008580 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008568:	2b00      	cmp	r3, #0
 800856a:	d031      	beq.n	80085d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
 8008574:	e02c      	b.n	80085d0 <HAL_DMA_IRQHandler+0x2a0>
 8008576:	bf00      	nop
 8008578:	20000004 	.word	0x20000004
 800857c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d023      	beq.n	80085d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
 8008590:	e01e      	b.n	80085d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10f      	bne.n	80085c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0210 	bic.w	r2, r2, #16
 80085ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d032      	beq.n	800863e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d022      	beq.n	800862a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2205      	movs	r2, #5
 80085e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	3301      	adds	r3, #1
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	429a      	cmp	r2, r3
 8008606:	d307      	bcc.n	8008618 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f2      	bne.n	80085fc <HAL_DMA_IRQHandler+0x2cc>
 8008616:	e000      	b.n	800861a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008618:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
 800863a:	e000      	b.n	800863e <HAL_DMA_IRQHandler+0x30e>
        return;
 800863c:	bf00      	nop
    }
  }
}
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d108      	bne.n	8008684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008682:	e007      	b.n	8008694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	60da      	str	r2, [r3, #12]
}
 8008694:	bf00      	nop
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	3b10      	subs	r3, #16
 80086b0:	4a14      	ldr	r2, [pc, #80]	; (8008704 <DMA_CalcBaseAndBitshift+0x64>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	091b      	lsrs	r3, r3, #4
 80086b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086ba:	4a13      	ldr	r2, [pc, #76]	; (8008708 <DMA_CalcBaseAndBitshift+0x68>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d909      	bls.n	80086e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086d6:	f023 0303 	bic.w	r3, r3, #3
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	659a      	str	r2, [r3, #88]	; 0x58
 80086e0:	e007      	b.n	80086f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	aaaaaaab 	.word	0xaaaaaaab
 8008708:	08010404 	.word	0x08010404

0800870c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d11f      	bne.n	8008766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d856      	bhi.n	80087da <DMA_CheckFifoParam+0xce>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <DMA_CheckFifoParam+0x28>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008745 	.word	0x08008745
 8008738:	08008757 	.word	0x08008757
 800873c:	08008745 	.word	0x08008745
 8008740:	080087db 	.word	0x080087db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d046      	beq.n	80087de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008754:	e043      	b.n	80087de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800875e:	d140      	bne.n	80087e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008764:	e03d      	b.n	80087e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	d121      	bne.n	80087b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b03      	cmp	r3, #3
 8008774:	d837      	bhi.n	80087e6 <DMA_CheckFifoParam+0xda>
 8008776:	a201      	add	r2, pc, #4	; (adr r2, 800877c <DMA_CheckFifoParam+0x70>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	0800878d 	.word	0x0800878d
 8008780:	08008793 	.word	0x08008793
 8008784:	0800878d 	.word	0x0800878d
 8008788:	080087a5 	.word	0x080087a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
      break;
 8008790:	e030      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d025      	beq.n	80087ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087a2:	e022      	b.n	80087ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087ac:	d11f      	bne.n	80087ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087b2:	e01c      	b.n	80087ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d903      	bls.n	80087c2 <DMA_CheckFifoParam+0xb6>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d003      	beq.n	80087c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087c0:	e018      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
      break;
 80087c6:	e015      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00e      	beq.n	80087f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
      break;
 80087d8:	e00b      	b.n	80087f2 <DMA_CheckFifoParam+0xe6>
      break;
 80087da:	bf00      	nop
 80087dc:	e00a      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      break;
 80087de:	bf00      	nop
 80087e0:	e008      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      break;
 80087e2:	bf00      	nop
 80087e4:	e006      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      break;
 80087e6:	bf00      	nop
 80087e8:	e004      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <DMA_CheckFifoParam+0xe8>
      break;
 80087f2:	bf00      	nop
    }
  } 
  
  return status; 
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop

08008804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008804:	b480      	push	{r7}
 8008806:	b089      	sub	sp, #36	; 0x24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008816:	2300      	movs	r3, #0
 8008818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
 800881e:	e16b      	b.n	8008af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008820:	2201      	movs	r2, #1
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	fa02 f303 	lsl.w	r3, r2, r3
 8008828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4013      	ands	r3, r2
 8008832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	429a      	cmp	r2, r3
 800883a:	f040 815a 	bne.w	8008af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	2b01      	cmp	r3, #1
 8008848:	d005      	beq.n	8008856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008852:	2b02      	cmp	r3, #2
 8008854:	d130      	bne.n	80088b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	2203      	movs	r2, #3
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	43db      	mvns	r3, r3
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	4013      	ands	r3, r2
 800886c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	4313      	orrs	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800888c:	2201      	movs	r2, #1
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	43db      	mvns	r3, r3
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	4013      	ands	r3, r2
 800889a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	091b      	lsrs	r3, r3, #4
 80088a2:	f003 0201 	and.w	r2, r3, #1
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d017      	beq.n	80088f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	2203      	movs	r2, #3
 80088d0:	fa02 f303 	lsl.w	r3, r2, r3
 80088d4:	43db      	mvns	r3, r3
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	4013      	ands	r3, r2
 80088da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	fa02 f303 	lsl.w	r3, r2, r3
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d123      	bne.n	8008948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	08da      	lsrs	r2, r3, #3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3208      	adds	r2, #8
 8008908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	220f      	movs	r2, #15
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	43db      	mvns	r3, r3
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	4013      	ands	r3, r2
 8008922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	691a      	ldr	r2, [r3, #16]
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	fa02 f303 	lsl.w	r3, r2, r3
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	4313      	orrs	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	08da      	lsrs	r2, r3, #3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3208      	adds	r2, #8
 8008942:	69b9      	ldr	r1, [r7, #24]
 8008944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	2203      	movs	r2, #3
 8008954:	fa02 f303 	lsl.w	r3, r2, r3
 8008958:	43db      	mvns	r3, r3
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	4013      	ands	r3, r2
 800895e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f003 0203 	and.w	r2, r3, #3
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	4313      	orrs	r3, r2
 8008974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 80b4 	beq.w	8008af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	4b60      	ldr	r3, [pc, #384]	; (8008b10 <HAL_GPIO_Init+0x30c>)
 8008990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008992:	4a5f      	ldr	r2, [pc, #380]	; (8008b10 <HAL_GPIO_Init+0x30c>)
 8008994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008998:	6453      	str	r3, [r2, #68]	; 0x44
 800899a:	4b5d      	ldr	r3, [pc, #372]	; (8008b10 <HAL_GPIO_Init+0x30c>)
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089a6:	4a5b      	ldr	r2, [pc, #364]	; (8008b14 <HAL_GPIO_Init+0x310>)
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	089b      	lsrs	r3, r3, #2
 80089ac:	3302      	adds	r3, #2
 80089ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	220f      	movs	r2, #15
 80089be:	fa02 f303 	lsl.w	r3, r2, r3
 80089c2:	43db      	mvns	r3, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	4013      	ands	r3, r2
 80089c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a52      	ldr	r2, [pc, #328]	; (8008b18 <HAL_GPIO_Init+0x314>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d02b      	beq.n	8008a2a <HAL_GPIO_Init+0x226>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a51      	ldr	r2, [pc, #324]	; (8008b1c <HAL_GPIO_Init+0x318>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d025      	beq.n	8008a26 <HAL_GPIO_Init+0x222>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a50      	ldr	r2, [pc, #320]	; (8008b20 <HAL_GPIO_Init+0x31c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d01f      	beq.n	8008a22 <HAL_GPIO_Init+0x21e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a4f      	ldr	r2, [pc, #316]	; (8008b24 <HAL_GPIO_Init+0x320>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d019      	beq.n	8008a1e <HAL_GPIO_Init+0x21a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a4e      	ldr	r2, [pc, #312]	; (8008b28 <HAL_GPIO_Init+0x324>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <HAL_GPIO_Init+0x216>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a4d      	ldr	r2, [pc, #308]	; (8008b2c <HAL_GPIO_Init+0x328>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00d      	beq.n	8008a16 <HAL_GPIO_Init+0x212>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a4c      	ldr	r2, [pc, #304]	; (8008b30 <HAL_GPIO_Init+0x32c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d007      	beq.n	8008a12 <HAL_GPIO_Init+0x20e>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a4b      	ldr	r2, [pc, #300]	; (8008b34 <HAL_GPIO_Init+0x330>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d101      	bne.n	8008a0e <HAL_GPIO_Init+0x20a>
 8008a0a:	2307      	movs	r3, #7
 8008a0c:	e00e      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a0e:	2308      	movs	r3, #8
 8008a10:	e00c      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a12:	2306      	movs	r3, #6
 8008a14:	e00a      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a16:	2305      	movs	r3, #5
 8008a18:	e008      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a1a:	2304      	movs	r3, #4
 8008a1c:	e006      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e004      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a22:	2302      	movs	r3, #2
 8008a24:	e002      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <HAL_GPIO_Init+0x228>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	f002 0203 	and.w	r2, r2, #3
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	4093      	lsls	r3, r2
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a3c:	4935      	ldr	r1, [pc, #212]	; (8008b14 <HAL_GPIO_Init+0x310>)
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	089b      	lsrs	r3, r3, #2
 8008a42:	3302      	adds	r3, #2
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a4a:	4b3b      	ldr	r3, [pc, #236]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	43db      	mvns	r3, r3
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	4013      	ands	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a6e:	4a32      	ldr	r2, [pc, #200]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a74:	4b30      	ldr	r3, [pc, #192]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	4013      	ands	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008a98:	4a27      	ldr	r2, [pc, #156]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008a9e:	4b26      	ldr	r3, [pc, #152]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	43db      	mvns	r3, r3
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ac2:	4a1d      	ldr	r2, [pc, #116]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008aec:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <HAL_GPIO_Init+0x334>)
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	3301      	adds	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b0f      	cmp	r3, #15
 8008afc:	f67f ae90 	bls.w	8008820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	3724      	adds	r7, #36	; 0x24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	40023800 	.word	0x40023800
 8008b14:	40013800 	.word	0x40013800
 8008b18:	40020000 	.word	0x40020000
 8008b1c:	40020400 	.word	0x40020400
 8008b20:	40020800 	.word	0x40020800
 8008b24:	40020c00 	.word	0x40020c00
 8008b28:	40021000 	.word	0x40021000
 8008b2c:	40021400 	.word	0x40021400
 8008b30:	40021800 	.word	0x40021800
 8008b34:	40021c00 	.word	0x40021c00
 8008b38:	40013c00 	.word	0x40013c00

08008b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e12b      	b.n	8008da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fb f896 	bl	8003c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2224      	movs	r2, #36	; 0x24
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0201 	bic.w	r2, r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ba0:	f001 fbfc 	bl	800a39c <HAL_RCC_GetPCLK1Freq>
 8008ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	4a81      	ldr	r2, [pc, #516]	; (8008db0 <HAL_I2C_Init+0x274>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d807      	bhi.n	8008bc0 <HAL_I2C_Init+0x84>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a80      	ldr	r2, [pc, #512]	; (8008db4 <HAL_I2C_Init+0x278>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	bf94      	ite	ls
 8008bb8:	2301      	movls	r3, #1
 8008bba:	2300      	movhi	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	e006      	b.n	8008bce <HAL_I2C_Init+0x92>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a7d      	ldr	r2, [pc, #500]	; (8008db8 <HAL_I2C_Init+0x27c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	bf94      	ite	ls
 8008bc8:	2301      	movls	r3, #1
 8008bca:	2300      	movhi	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e0e7      	b.n	8008da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4a78      	ldr	r2, [pc, #480]	; (8008dbc <HAL_I2C_Init+0x280>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	0c9b      	lsrs	r3, r3, #18
 8008be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	4a6a      	ldr	r2, [pc, #424]	; (8008db0 <HAL_I2C_Init+0x274>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d802      	bhi.n	8008c10 <HAL_I2C_Init+0xd4>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	e009      	b.n	8008c24 <HAL_I2C_Init+0xe8>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	4a69      	ldr	r2, [pc, #420]	; (8008dc0 <HAL_I2C_Init+0x284>)
 8008c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c20:	099b      	lsrs	r3, r3, #6
 8008c22:	3301      	adds	r3, #1
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	495c      	ldr	r1, [pc, #368]	; (8008db0 <HAL_I2C_Init+0x274>)
 8008c40:	428b      	cmp	r3, r1
 8008c42:	d819      	bhi.n	8008c78 <HAL_I2C_Init+0x13c>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	1e59      	subs	r1, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c52:	1c59      	adds	r1, r3, #1
 8008c54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c58:	400b      	ands	r3, r1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <HAL_I2C_Init+0x138>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	1e59      	subs	r1, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c72:	e051      	b.n	8008d18 <HAL_I2C_Init+0x1dc>
 8008c74:	2304      	movs	r3, #4
 8008c76:	e04f      	b.n	8008d18 <HAL_I2C_Init+0x1dc>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d111      	bne.n	8008ca4 <HAL_I2C_Init+0x168>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1e58      	subs	r0, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	440b      	add	r3, r1
 8008c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c92:	3301      	adds	r3, #1
 8008c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bf0c      	ite	eq
 8008c9c:	2301      	moveq	r3, #1
 8008c9e:	2300      	movne	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	e012      	b.n	8008cca <HAL_I2C_Init+0x18e>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	1e58      	subs	r0, r3, #1
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6859      	ldr	r1, [r3, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	440b      	add	r3, r1
 8008cb2:	0099      	lsls	r1, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cba:	3301      	adds	r3, #1
 8008cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	bf0c      	ite	eq
 8008cc4:	2301      	moveq	r3, #1
 8008cc6:	2300      	movne	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <HAL_I2C_Init+0x196>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e022      	b.n	8008d18 <HAL_I2C_Init+0x1dc>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10e      	bne.n	8008cf8 <HAL_I2C_Init+0x1bc>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1e58      	subs	r0, r3, #1
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6859      	ldr	r1, [r3, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	440b      	add	r3, r1
 8008ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cec:	3301      	adds	r3, #1
 8008cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf6:	e00f      	b.n	8008d18 <HAL_I2C_Init+0x1dc>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	1e58      	subs	r0, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6859      	ldr	r1, [r3, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	0099      	lsls	r1, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	6809      	ldr	r1, [r1, #0]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69da      	ldr	r2, [r3, #28]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6911      	ldr	r1, [r2, #16]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	68d2      	ldr	r2, [r2, #12]
 8008d52:	4311      	orrs	r1, r2
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	695a      	ldr	r2, [r3, #20]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	000186a0 	.word	0x000186a0
 8008db4:	001e847f 	.word	0x001e847f
 8008db8:	003d08ff 	.word	0x003d08ff
 8008dbc:	431bde83 	.word	0x431bde83
 8008dc0:	10624dd3 	.word	0x10624dd3

08008dc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	4608      	mov	r0, r1
 8008dce:	4611      	mov	r1, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	817b      	strh	r3, [r7, #10]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	813b      	strh	r3, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008dde:	f7fe fbbb 	bl	8007558 <HAL_GetTick>
 8008de2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	f040 80d9 	bne.w	8008fa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	2319      	movs	r3, #25
 8008df8:	2201      	movs	r2, #1
 8008dfa:	496d      	ldr	r1, [pc, #436]	; (8008fb0 <HAL_I2C_Mem_Write+0x1ec>)
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fc7f 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e0cc      	b.n	8008fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_I2C_Mem_Write+0x56>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e0c5      	b.n	8008fa6 <HAL_I2C_Mem_Write+0x1e2>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d007      	beq.n	8008e40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0201 	orr.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2221      	movs	r2, #33	; 0x21
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2240      	movs	r2, #64	; 0x40
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a3a      	ldr	r2, [r7, #32]
 8008e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4a4d      	ldr	r2, [pc, #308]	; (8008fb4 <HAL_I2C_Mem_Write+0x1f0>)
 8008e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e82:	88f8      	ldrh	r0, [r7, #6]
 8008e84:	893a      	ldrh	r2, [r7, #8]
 8008e86:	8979      	ldrh	r1, [r7, #10]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	4603      	mov	r3, r0
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 fab6 	bl	8009404 <I2C_RequestMemoryWrite>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d052      	beq.n	8008f44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e081      	b.n	8008fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 fd00 	bl	80098ac <I2C_WaitOnTXEFlagUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00d      	beq.n	8008ece <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d107      	bne.n	8008eca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e06b      	b.n	8008fa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	781a      	ldrb	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d11b      	bne.n	8008f44 <HAL_I2C_Mem_Write+0x180>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d017      	beq.n	8008f44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1aa      	bne.n	8008ea2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 fcec 	bl	800992e <I2C_WaitOnBTFFlagUntilTimeout>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00d      	beq.n	8008f78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d107      	bne.n	8008f74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e016      	b.n	8008fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e000      	b.n	8008fa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008fa4:	2302      	movs	r3, #2
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	00100002 	.word	0x00100002
 8008fb4:	ffff0000 	.word	0xffff0000

08008fb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08c      	sub	sp, #48	; 0x30
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	817b      	strh	r3, [r7, #10]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	813b      	strh	r3, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fd2:	f7fe fac1 	bl	8007558 <HAL_GetTick>
 8008fd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	f040 8208 	bne.w	80093f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	2319      	movs	r3, #25
 8008fec:	2201      	movs	r2, #1
 8008fee:	497b      	ldr	r1, [pc, #492]	; (80091dc <HAL_I2C_Mem_Read+0x224>)
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb85 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e1fb      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <HAL_I2C_Mem_Read+0x56>
 800900a:	2302      	movs	r3, #2
 800900c:	e1f4      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b01      	cmp	r3, #1
 8009022:	d007      	beq.n	8009034 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0201 	orr.w	r2, r2, #1
 8009032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2222      	movs	r2, #34	; 0x22
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2240      	movs	r2, #64	; 0x40
 8009050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800905e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4a5b      	ldr	r2, [pc, #364]	; (80091e0 <HAL_I2C_Mem_Read+0x228>)
 8009074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009076:	88f8      	ldrh	r0, [r7, #6]
 8009078:	893a      	ldrh	r2, [r7, #8]
 800907a:	8979      	ldrh	r1, [r7, #10]
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	4603      	mov	r3, r0
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fa52 	bl	8009530 <I2C_RequestMemoryRead>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e1b0      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d113      	bne.n	80090c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800909e:	2300      	movs	r3, #0
 80090a0:	623b      	str	r3, [r7, #32]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	623b      	str	r3, [r7, #32]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	623b      	str	r3, [r7, #32]
 80090b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e184      	b.n	80093d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d11b      	bne.n	8009106 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090de:	2300      	movs	r3, #0
 80090e0:	61fb      	str	r3, [r7, #28]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	61fb      	str	r3, [r7, #28]
 80090f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e164      	b.n	80093d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910a:	2b02      	cmp	r3, #2
 800910c:	d11b      	bne.n	8009146 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800911c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800912c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800912e:	2300      	movs	r3, #0
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	e144      	b.n	80093d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800915c:	e138      	b.n	80093d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009162:	2b03      	cmp	r3, #3
 8009164:	f200 80f1 	bhi.w	800934a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916c:	2b01      	cmp	r3, #1
 800916e:	d123      	bne.n	80091b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fc1b 	bl	80099b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e139      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691a      	ldr	r2, [r3, #16]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091b6:	e10b      	b.n	80093d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d14e      	bne.n	800925e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	2200      	movs	r2, #0
 80091c8:	4906      	ldr	r1, [pc, #24]	; (80091e4 <HAL_I2C_Mem_Read+0x22c>)
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fa98 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d008      	beq.n	80091e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e10e      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
 80091da:	bf00      	nop
 80091dc:	00100002 	.word	0x00100002
 80091e0:	ffff0000 	.word	0xffff0000
 80091e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009246:	3b01      	subs	r3, #1
 8009248:	b29a      	uxth	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	3b01      	subs	r3, #1
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800925c:	e0b8      	b.n	80093d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	2200      	movs	r2, #0
 8009266:	4966      	ldr	r1, [pc, #408]	; (8009400 <HAL_I2C_Mem_Read+0x448>)
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 fa49 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e0bf      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a4:	3b01      	subs	r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	2200      	movs	r2, #0
 80092c2:	494f      	ldr	r1, [pc, #316]	; (8009400 <HAL_I2C_Mem_Read+0x448>)
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fa1b 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e091      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	b2d2      	uxtb	r2, r2
 80092f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009300:	3b01      	subs	r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	b2d2      	uxtb	r2, r2
 8009322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009332:	3b01      	subs	r3, #1
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933e:	b29b      	uxth	r3, r3
 8009340:	3b01      	subs	r3, #1
 8009342:	b29a      	uxth	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009348:	e042      	b.n	80093d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800934a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 fb2e 	bl	80099b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e04c      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937a:	3b01      	subs	r3, #1
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009386:	b29b      	uxth	r3, r3
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	f003 0304 	and.w	r3, r3, #4
 800939a:	2b04      	cmp	r3, #4
 800939c:	d118      	bne.n	80093d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691a      	ldr	r2, [r3, #16]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	b2d2      	uxtb	r2, r2
 80093aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f47f aec2 	bne.w	800915e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2220      	movs	r2, #32
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	e000      	b.n	80093f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80093f6:	2302      	movs	r3, #2
  }
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3728      	adds	r7, #40	; 0x28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	00010004 	.word	0x00010004

08009404 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	4608      	mov	r0, r1
 800940e:	4611      	mov	r1, r2
 8009410:	461a      	mov	r2, r3
 8009412:	4603      	mov	r3, r0
 8009414:	817b      	strh	r3, [r7, #10]
 8009416:	460b      	mov	r3, r1
 8009418:	813b      	strh	r3, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800942c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	2200      	movs	r2, #0
 8009436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f960 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00d      	beq.n	8009462 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009454:	d103      	bne.n	800945e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800945c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e05f      	b.n	8009522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009462:	897b      	ldrh	r3, [r7, #10]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	461a      	mov	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	6a3a      	ldr	r2, [r7, #32]
 8009476:	492d      	ldr	r1, [pc, #180]	; (800952c <I2C_RequestMemoryWrite+0x128>)
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 f998 	bl	80097ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e04c      	b.n	8009522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009488:	2300      	movs	r3, #0
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	617b      	str	r3, [r7, #20]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800949e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a0:	6a39      	ldr	r1, [r7, #32]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fa02 	bl	80098ac <I2C_WaitOnTXEFlagUntilTimeout>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00d      	beq.n	80094ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d107      	bne.n	80094c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e02b      	b.n	8009522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d105      	bne.n	80094dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094d0:	893b      	ldrh	r3, [r7, #8]
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	611a      	str	r2, [r3, #16]
 80094da:	e021      	b.n	8009520 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80094dc:	893b      	ldrh	r3, [r7, #8]
 80094de:	0a1b      	lsrs	r3, r3, #8
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ec:	6a39      	ldr	r1, [r7, #32]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 f9dc 	bl	80098ac <I2C_WaitOnTXEFlagUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00d      	beq.n	8009516 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d107      	bne.n	8009512 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e005      	b.n	8009522 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009516:	893b      	ldrh	r3, [r7, #8]
 8009518:	b2da      	uxtb	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	00010002 	.word	0x00010002

08009530 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af02      	add	r7, sp, #8
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	4608      	mov	r0, r1
 800953a:	4611      	mov	r1, r2
 800953c:	461a      	mov	r2, r3
 800953e:	4603      	mov	r3, r0
 8009540:	817b      	strh	r3, [r7, #10]
 8009542:	460b      	mov	r3, r1
 8009544:	813b      	strh	r3, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009558:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	2200      	movs	r2, #0
 8009572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 f8c2 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00d      	beq.n	800959e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009590:	d103      	bne.n	800959a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009598:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e0aa      	b.n	80096f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800959e:	897b      	ldrh	r3, [r7, #10]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	461a      	mov	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	6a3a      	ldr	r2, [r7, #32]
 80095b2:	4952      	ldr	r1, [pc, #328]	; (80096fc <I2C_RequestMemoryRead+0x1cc>)
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f8fa 	bl	80097ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e097      	b.n	80096f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095dc:	6a39      	ldr	r1, [r7, #32]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f964 	bl	80098ac <I2C_WaitOnTXEFlagUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00d      	beq.n	8009606 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d107      	bne.n	8009602 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009600:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e076      	b.n	80096f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d105      	bne.n	8009618 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800960c:	893b      	ldrh	r3, [r7, #8]
 800960e:	b2da      	uxtb	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	611a      	str	r2, [r3, #16]
 8009616:	e021      	b.n	800965c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009618:	893b      	ldrh	r3, [r7, #8]
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	b29b      	uxth	r3, r3
 800961e:	b2da      	uxtb	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009628:	6a39      	ldr	r1, [r7, #32]
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 f93e 	bl	80098ac <I2C_WaitOnTXEFlagUntilTimeout>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00d      	beq.n	8009652 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	2b04      	cmp	r3, #4
 800963c:	d107      	bne.n	800964e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800964c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e050      	b.n	80096f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009652:	893b      	ldrh	r3, [r7, #8]
 8009654:	b2da      	uxtb	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800965c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965e:	6a39      	ldr	r1, [r7, #32]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f923 	bl	80098ac <I2C_WaitOnTXEFlagUntilTimeout>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00d      	beq.n	8009688 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009670:	2b04      	cmp	r3, #4
 8009672:	d107      	bne.n	8009684 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009682:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e035      	b.n	80096f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009696:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	2200      	movs	r2, #0
 80096a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 f82b 	bl	8009700 <I2C_WaitOnFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00d      	beq.n	80096cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096be:	d103      	bne.n	80096c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e013      	b.n	80096f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80096cc:	897b      	ldrh	r3, [r7, #10]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f043 0301 	orr.w	r3, r3, #1
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	6a3a      	ldr	r2, [r7, #32]
 80096e0:	4906      	ldr	r1, [pc, #24]	; (80096fc <I2C_RequestMemoryRead+0x1cc>)
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 f863 	bl	80097ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e000      	b.n	80096f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	00010002 	.word	0x00010002

08009700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	4613      	mov	r3, r2
 800970e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009710:	e025      	b.n	800975e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d021      	beq.n	800975e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7fd ff1d 	bl	8007558 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d116      	bne.n	800975e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2220      	movs	r2, #32
 800973a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974a:	f043 0220 	orr.w	r2, r3, #32
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e023      	b.n	80097a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	0c1b      	lsrs	r3, r3, #16
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b01      	cmp	r3, #1
 8009766:	d10d      	bne.n	8009784 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	43da      	mvns	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4013      	ands	r3, r2
 8009774:	b29b      	uxth	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	bf0c      	ite	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	2300      	movne	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	461a      	mov	r2, r3
 8009782:	e00c      	b.n	800979e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	43da      	mvns	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4013      	ands	r3, r2
 8009790:	b29b      	uxth	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	bf0c      	ite	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	2300      	movne	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	461a      	mov	r2, r3
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d0b6      	beq.n	8009712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	607a      	str	r2, [r7, #4]
 80097ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097bc:	e051      	b.n	8009862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097cc:	d123      	bne.n	8009816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80097e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009802:	f043 0204 	orr.w	r2, r3, #4
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e046      	b.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d021      	beq.n	8009862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981e:	f7fd fe9b 	bl	8007558 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d302      	bcc.n	8009834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d116      	bne.n	8009862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	f043 0220 	orr.w	r2, r3, #32
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e020      	b.n	80098a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	0c1b      	lsrs	r3, r3, #16
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b01      	cmp	r3, #1
 800986a:	d10c      	bne.n	8009886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	43da      	mvns	r2, r3
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4013      	ands	r3, r2
 8009878:	b29b      	uxth	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	bf14      	ite	ne
 800987e:	2301      	movne	r3, #1
 8009880:	2300      	moveq	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	e00b      	b.n	800989e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	43da      	mvns	r2, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	4013      	ands	r3, r2
 8009892:	b29b      	uxth	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	bf14      	ite	ne
 8009898:	2301      	movne	r3, #1
 800989a:	2300      	moveq	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d18d      	bne.n	80097be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098b8:	e02d      	b.n	8009916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f8ce 	bl	8009a5c <I2C_IsAcknowledgeFailed>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e02d      	b.n	8009926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d021      	beq.n	8009916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d2:	f7fd fe41 	bl	8007558 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d116      	bne.n	8009916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	f043 0220 	orr.w	r2, r3, #32
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e007      	b.n	8009926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009920:	2b80      	cmp	r3, #128	; 0x80
 8009922:	d1ca      	bne.n	80098ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800993a:	e02d      	b.n	8009998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 f88d 	bl	8009a5c <I2C_IsAcknowledgeFailed>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e02d      	b.n	80099a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009952:	d021      	beq.n	8009998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009954:	f7fd fe00 	bl	8007558 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	d302      	bcc.n	800996a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d116      	bne.n	8009998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2220      	movs	r2, #32
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009984:	f043 0220 	orr.w	r2, r3, #32
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e007      	b.n	80099a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	f003 0304 	and.w	r3, r3, #4
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d1ca      	bne.n	800993c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099bc:	e042      	b.n	8009a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	f003 0310 	and.w	r3, r3, #16
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d119      	bne.n	8009a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f06f 0210 	mvn.w	r2, #16
 80099d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e029      	b.n	8009a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a00:	f7fd fdaa 	bl	8007558 <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d302      	bcc.n	8009a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d116      	bne.n	8009a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	f043 0220 	orr.w	r2, r3, #32
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e007      	b.n	8009a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d1b5      	bne.n	80099be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a72:	d11b      	bne.n	8009aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	f043 0204 	orr.w	r2, r3, #4
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e000      	b.n	8009aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
	...

08009abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e267      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d075      	beq.n	8009bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ada:	4b88      	ldr	r3, [pc, #544]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f003 030c 	and.w	r3, r3, #12
 8009ae2:	2b04      	cmp	r3, #4
 8009ae4:	d00c      	beq.n	8009b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ae6:	4b85      	ldr	r3, [pc, #532]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	d112      	bne.n	8009b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009af2:	4b82      	ldr	r3, [pc, #520]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009afe:	d10b      	bne.n	8009b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b00:	4b7e      	ldr	r3, [pc, #504]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d05b      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x108>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d157      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e242      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b20:	d106      	bne.n	8009b30 <HAL_RCC_OscConfig+0x74>
 8009b22:	4b76      	ldr	r3, [pc, #472]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a75      	ldr	r2, [pc, #468]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	e01d      	b.n	8009b6c <HAL_RCC_OscConfig+0xb0>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b38:	d10c      	bne.n	8009b54 <HAL_RCC_OscConfig+0x98>
 8009b3a:	4b70      	ldr	r3, [pc, #448]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a6f      	ldr	r2, [pc, #444]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	4b6d      	ldr	r3, [pc, #436]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a6c      	ldr	r2, [pc, #432]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e00b      	b.n	8009b6c <HAL_RCC_OscConfig+0xb0>
 8009b54:	4b69      	ldr	r3, [pc, #420]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a68      	ldr	r2, [pc, #416]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	4b66      	ldr	r3, [pc, #408]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a65      	ldr	r2, [pc, #404]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d013      	beq.n	8009b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b74:	f7fd fcf0 	bl	8007558 <HAL_GetTick>
 8009b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b7c:	f7fd fcec 	bl	8007558 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b64      	cmp	r3, #100	; 0x64
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e207      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b8e:	4b5b      	ldr	r3, [pc, #364]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0f0      	beq.n	8009b7c <HAL_RCC_OscConfig+0xc0>
 8009b9a:	e014      	b.n	8009bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b9c:	f7fd fcdc 	bl	8007558 <HAL_GetTick>
 8009ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ba2:	e008      	b.n	8009bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ba4:	f7fd fcd8 	bl	8007558 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	2b64      	cmp	r3, #100	; 0x64
 8009bb0:	d901      	bls.n	8009bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e1f3      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bb6:	4b51      	ldr	r3, [pc, #324]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1f0      	bne.n	8009ba4 <HAL_RCC_OscConfig+0xe8>
 8009bc2:	e000      	b.n	8009bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d063      	beq.n	8009c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bd2:	4b4a      	ldr	r3, [pc, #296]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f003 030c 	and.w	r3, r3, #12
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bde:	4b47      	ldr	r3, [pc, #284]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009be6:	2b08      	cmp	r3, #8
 8009be8:	d11c      	bne.n	8009c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bea:	4b44      	ldr	r3, [pc, #272]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d116      	bne.n	8009c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bf6:	4b41      	ldr	r3, [pc, #260]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d005      	beq.n	8009c0e <HAL_RCC_OscConfig+0x152>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d001      	beq.n	8009c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e1c7      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c0e:	4b3b      	ldr	r3, [pc, #236]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	4937      	ldr	r1, [pc, #220]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c22:	e03a      	b.n	8009c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d020      	beq.n	8009c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c2c:	4b34      	ldr	r3, [pc, #208]	; (8009d00 <HAL_RCC_OscConfig+0x244>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c32:	f7fd fc91 	bl	8007558 <HAL_GetTick>
 8009c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c38:	e008      	b.n	8009c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c3a:	f7fd fc8d 	bl	8007558 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d901      	bls.n	8009c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e1a8      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c4c:	4b2b      	ldr	r3, [pc, #172]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0f0      	beq.n	8009c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c58:	4b28      	ldr	r3, [pc, #160]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	4925      	ldr	r1, [pc, #148]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	600b      	str	r3, [r1, #0]
 8009c6c:	e015      	b.n	8009c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c6e:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <HAL_RCC_OscConfig+0x244>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c74:	f7fd fc70 	bl	8007558 <HAL_GetTick>
 8009c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c7a:	e008      	b.n	8009c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c7c:	f7fd fc6c 	bl	8007558 <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d901      	bls.n	8009c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e187      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c8e:	4b1b      	ldr	r3, [pc, #108]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f0      	bne.n	8009c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0308 	and.w	r3, r3, #8
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d036      	beq.n	8009d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d016      	beq.n	8009cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cae:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <HAL_RCC_OscConfig+0x248>)
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb4:	f7fd fc50 	bl	8007558 <HAL_GetTick>
 8009cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cbc:	f7fd fc4c 	bl	8007558 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e167      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cce:	4b0b      	ldr	r3, [pc, #44]	; (8009cfc <HAL_RCC_OscConfig+0x240>)
 8009cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f0      	beq.n	8009cbc <HAL_RCC_OscConfig+0x200>
 8009cda:	e01b      	b.n	8009d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cdc:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <HAL_RCC_OscConfig+0x248>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ce2:	f7fd fc39 	bl	8007558 <HAL_GetTick>
 8009ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ce8:	e00e      	b.n	8009d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cea:	f7fd fc35 	bl	8007558 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d907      	bls.n	8009d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e150      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
 8009cfc:	40023800 	.word	0x40023800
 8009d00:	42470000 	.word	0x42470000
 8009d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d08:	4b88      	ldr	r3, [pc, #544]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1ea      	bne.n	8009cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0304 	and.w	r3, r3, #4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 8097 	beq.w	8009e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d26:	4b81      	ldr	r3, [pc, #516]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10f      	bne.n	8009d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d32:	2300      	movs	r3, #0
 8009d34:	60bb      	str	r3, [r7, #8]
 8009d36:	4b7d      	ldr	r3, [pc, #500]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	4a7c      	ldr	r2, [pc, #496]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d40:	6413      	str	r3, [r2, #64]	; 0x40
 8009d42:	4b7a      	ldr	r3, [pc, #488]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d4a:	60bb      	str	r3, [r7, #8]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d52:	4b77      	ldr	r3, [pc, #476]	; (8009f30 <HAL_RCC_OscConfig+0x474>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d118      	bne.n	8009d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d5e:	4b74      	ldr	r3, [pc, #464]	; (8009f30 <HAL_RCC_OscConfig+0x474>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a73      	ldr	r2, [pc, #460]	; (8009f30 <HAL_RCC_OscConfig+0x474>)
 8009d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d6a:	f7fd fbf5 	bl	8007558 <HAL_GetTick>
 8009d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d70:	e008      	b.n	8009d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d72:	f7fd fbf1 	bl	8007558 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d901      	bls.n	8009d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e10c      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d84:	4b6a      	ldr	r3, [pc, #424]	; (8009f30 <HAL_RCC_OscConfig+0x474>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0f0      	beq.n	8009d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d106      	bne.n	8009da6 <HAL_RCC_OscConfig+0x2ea>
 8009d98:	4b64      	ldr	r3, [pc, #400]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9c:	4a63      	ldr	r2, [pc, #396]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009d9e:	f043 0301 	orr.w	r3, r3, #1
 8009da2:	6713      	str	r3, [r2, #112]	; 0x70
 8009da4:	e01c      	b.n	8009de0 <HAL_RCC_OscConfig+0x324>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2b05      	cmp	r3, #5
 8009dac:	d10c      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x30c>
 8009dae:	4b5f      	ldr	r3, [pc, #380]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db2:	4a5e      	ldr	r2, [pc, #376]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009db4:	f043 0304 	orr.w	r3, r3, #4
 8009db8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dba:	4b5c      	ldr	r3, [pc, #368]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dbe:	4a5b      	ldr	r2, [pc, #364]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009dc0:	f043 0301 	orr.w	r3, r3, #1
 8009dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8009dc6:	e00b      	b.n	8009de0 <HAL_RCC_OscConfig+0x324>
 8009dc8:	4b58      	ldr	r3, [pc, #352]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	4a57      	ldr	r2, [pc, #348]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009dce:	f023 0301 	bic.w	r3, r3, #1
 8009dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8009dd4:	4b55      	ldr	r3, [pc, #340]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd8:	4a54      	ldr	r2, [pc, #336]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009dda:	f023 0304 	bic.w	r3, r3, #4
 8009dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d015      	beq.n	8009e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de8:	f7fd fbb6 	bl	8007558 <HAL_GetTick>
 8009dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dee:	e00a      	b.n	8009e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009df0:	f7fd fbb2 	bl	8007558 <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d901      	bls.n	8009e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e0cb      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e06:	4b49      	ldr	r3, [pc, #292]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0ee      	beq.n	8009df0 <HAL_RCC_OscConfig+0x334>
 8009e12:	e014      	b.n	8009e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e14:	f7fd fba0 	bl	8007558 <HAL_GetTick>
 8009e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e1a:	e00a      	b.n	8009e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e1c:	f7fd fb9c 	bl	8007558 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d901      	bls.n	8009e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e0b5      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e32:	4b3e      	ldr	r3, [pc, #248]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1ee      	bne.n	8009e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d105      	bne.n	8009e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e44:	4b39      	ldr	r3, [pc, #228]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	4a38      	ldr	r2, [pc, #224]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 80a1 	beq.w	8009f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e5a:	4b34      	ldr	r3, [pc, #208]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f003 030c 	and.w	r3, r3, #12
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	d05c      	beq.n	8009f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d141      	bne.n	8009ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e6e:	4b31      	ldr	r3, [pc, #196]	; (8009f34 <HAL_RCC_OscConfig+0x478>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e74:	f7fd fb70 	bl	8007558 <HAL_GetTick>
 8009e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e7a:	e008      	b.n	8009e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e7c:	f7fd fb6c 	bl	8007558 <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d901      	bls.n	8009e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e087      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e8e:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1f0      	bne.n	8009e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	69da      	ldr	r2, [r3, #28]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	019b      	lsls	r3, r3, #6
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb0:	085b      	lsrs	r3, r3, #1
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	041b      	lsls	r3, r3, #16
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	061b      	lsls	r3, r3, #24
 8009ebe:	491b      	ldr	r1, [pc, #108]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ec4:	4b1b      	ldr	r3, [pc, #108]	; (8009f34 <HAL_RCC_OscConfig+0x478>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eca:	f7fd fb45 	bl	8007558 <HAL_GetTick>
 8009ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ed0:	e008      	b.n	8009ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed2:	f7fd fb41 	bl	8007558 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e05c      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ee4:	4b11      	ldr	r3, [pc, #68]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0f0      	beq.n	8009ed2 <HAL_RCC_OscConfig+0x416>
 8009ef0:	e054      	b.n	8009f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef2:	4b10      	ldr	r3, [pc, #64]	; (8009f34 <HAL_RCC_OscConfig+0x478>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ef8:	f7fd fb2e 	bl	8007558 <HAL_GetTick>
 8009efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009efe:	e008      	b.n	8009f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f00:	f7fd fb2a 	bl	8007558 <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e045      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f12:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <HAL_RCC_OscConfig+0x470>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f0      	bne.n	8009f00 <HAL_RCC_OscConfig+0x444>
 8009f1e:	e03d      	b.n	8009f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d107      	bne.n	8009f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e038      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
 8009f2c:	40023800 	.word	0x40023800
 8009f30:	40007000 	.word	0x40007000
 8009f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f38:	4b1b      	ldr	r3, [pc, #108]	; (8009fa8 <HAL_RCC_OscConfig+0x4ec>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d028      	beq.n	8009f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d121      	bne.n	8009f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d11a      	bne.n	8009f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f68:	4013      	ands	r3, r2
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d111      	bne.n	8009f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	3b01      	subs	r3, #1
 8009f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d107      	bne.n	8009f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d001      	beq.n	8009f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e000      	b.n	8009f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	40023800 	.word	0x40023800

08009fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0cc      	b.n	800a15a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fc0:	4b68      	ldr	r3, [pc, #416]	; (800a164 <HAL_RCC_ClockConfig+0x1b8>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0307 	and.w	r3, r3, #7
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d90c      	bls.n	8009fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fce:	4b65      	ldr	r3, [pc, #404]	; (800a164 <HAL_RCC_ClockConfig+0x1b8>)
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	b2d2      	uxtb	r2, r2
 8009fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fd6:	4b63      	ldr	r3, [pc, #396]	; (800a164 <HAL_RCC_ClockConfig+0x1b8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0307 	and.w	r3, r3, #7
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d001      	beq.n	8009fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e0b8      	b.n	800a15a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0302 	and.w	r3, r3, #2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d020      	beq.n	800a036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0304 	and.w	r3, r3, #4
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a000:	4b59      	ldr	r3, [pc, #356]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	4a58      	ldr	r2, [pc, #352]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a00a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a018:	4b53      	ldr	r3, [pc, #332]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	4a52      	ldr	r2, [pc, #328]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a01e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a024:	4b50      	ldr	r3, [pc, #320]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	494d      	ldr	r1, [pc, #308]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a032:	4313      	orrs	r3, r2
 800a034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d044      	beq.n	800a0cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d107      	bne.n	800a05a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a04a:	4b47      	ldr	r3, [pc, #284]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d119      	bne.n	800a08a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e07f      	b.n	800a15a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d003      	beq.n	800a06a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a066:	2b03      	cmp	r3, #3
 800a068:	d107      	bne.n	800a07a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a06a:	4b3f      	ldr	r3, [pc, #252]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d109      	bne.n	800a08a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e06f      	b.n	800a15a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a07a:	4b3b      	ldr	r3, [pc, #236]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e067      	b.n	800a15a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a08a:	4b37      	ldr	r3, [pc, #220]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f023 0203 	bic.w	r2, r3, #3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	4934      	ldr	r1, [pc, #208]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a09c:	f7fd fa5c 	bl	8007558 <HAL_GetTick>
 800a0a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0a2:	e00a      	b.n	800a0ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0a4:	f7fd fa58 	bl	8007558 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d901      	bls.n	800a0ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e04f      	b.n	800a15a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0ba:	4b2b      	ldr	r3, [pc, #172]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 020c 	and.w	r2, r3, #12
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d1eb      	bne.n	800a0a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0cc:	4b25      	ldr	r3, [pc, #148]	; (800a164 <HAL_RCC_ClockConfig+0x1b8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0307 	and.w	r3, r3, #7
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d20c      	bcs.n	800a0f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0da:	4b22      	ldr	r3, [pc, #136]	; (800a164 <HAL_RCC_ClockConfig+0x1b8>)
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0e2:	4b20      	ldr	r3, [pc, #128]	; (800a164 <HAL_RCC_ClockConfig+0x1b8>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d001      	beq.n	800a0f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e032      	b.n	800a15a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d008      	beq.n	800a112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a100:	4b19      	ldr	r3, [pc, #100]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	4916      	ldr	r1, [pc, #88]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0308 	and.w	r3, r3, #8
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d009      	beq.n	800a132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a11e:	4b12      	ldr	r3, [pc, #72]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	490e      	ldr	r1, [pc, #56]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a132:	f000 f821 	bl	800a178 <HAL_RCC_GetSysClockFreq>
 800a136:	4602      	mov	r2, r0
 800a138:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <HAL_RCC_ClockConfig+0x1bc>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	091b      	lsrs	r3, r3, #4
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	490a      	ldr	r1, [pc, #40]	; (800a16c <HAL_RCC_ClockConfig+0x1c0>)
 800a144:	5ccb      	ldrb	r3, [r1, r3]
 800a146:	fa22 f303 	lsr.w	r3, r2, r3
 800a14a:	4a09      	ldr	r2, [pc, #36]	; (800a170 <HAL_RCC_ClockConfig+0x1c4>)
 800a14c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a14e:	4b09      	ldr	r3, [pc, #36]	; (800a174 <HAL_RCC_ClockConfig+0x1c8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4618      	mov	r0, r3
 800a154:	f7fd f9bc 	bl	80074d0 <HAL_InitTick>

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	40023c00 	.word	0x40023c00
 800a168:	40023800 	.word	0x40023800
 800a16c:	080103dc 	.word	0x080103dc
 800a170:	20000004 	.word	0x20000004
 800a174:	20000008 	.word	0x20000008

0800a178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a17c:	b094      	sub	sp, #80	; 0x50
 800a17e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a180:	2300      	movs	r3, #0
 800a182:	647b      	str	r3, [r7, #68]	; 0x44
 800a184:	2300      	movs	r3, #0
 800a186:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a188:	2300      	movs	r3, #0
 800a18a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a190:	4b79      	ldr	r3, [pc, #484]	; (800a378 <HAL_RCC_GetSysClockFreq+0x200>)
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f003 030c 	and.w	r3, r3, #12
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d00d      	beq.n	800a1b8 <HAL_RCC_GetSysClockFreq+0x40>
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	f200 80e1 	bhi.w	800a364 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <HAL_RCC_GetSysClockFreq+0x34>
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d003      	beq.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a1aa:	e0db      	b.n	800a364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1ac:	4b73      	ldr	r3, [pc, #460]	; (800a37c <HAL_RCC_GetSysClockFreq+0x204>)
 800a1ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a1b0:	e0db      	b.n	800a36a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1b2:	4b73      	ldr	r3, [pc, #460]	; (800a380 <HAL_RCC_GetSysClockFreq+0x208>)
 800a1b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1b6:	e0d8      	b.n	800a36a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1b8:	4b6f      	ldr	r3, [pc, #444]	; (800a378 <HAL_RCC_GetSysClockFreq+0x200>)
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1c2:	4b6d      	ldr	r3, [pc, #436]	; (800a378 <HAL_RCC_GetSysClockFreq+0x200>)
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d063      	beq.n	800a296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1ce:	4b6a      	ldr	r3, [pc, #424]	; (800a378 <HAL_RCC_GetSysClockFreq+0x200>)
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	099b      	lsrs	r3, r3, #6
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e0:	633b      	str	r3, [r7, #48]	; 0x30
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a1e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	f04f 0000 	mov.w	r0, #0
 800a1f2:	f04f 0100 	mov.w	r1, #0
 800a1f6:	0159      	lsls	r1, r3, #5
 800a1f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a1fc:	0150      	lsls	r0, r2, #5
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4621      	mov	r1, r4
 800a204:	1a51      	subs	r1, r2, r1
 800a206:	6139      	str	r1, [r7, #16]
 800a208:	4629      	mov	r1, r5
 800a20a:	eb63 0301 	sbc.w	r3, r3, r1
 800a20e:	617b      	str	r3, [r7, #20]
 800a210:	f04f 0200 	mov.w	r2, #0
 800a214:	f04f 0300 	mov.w	r3, #0
 800a218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a21c:	4659      	mov	r1, fp
 800a21e:	018b      	lsls	r3, r1, #6
 800a220:	4651      	mov	r1, sl
 800a222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a226:	4651      	mov	r1, sl
 800a228:	018a      	lsls	r2, r1, #6
 800a22a:	4651      	mov	r1, sl
 800a22c:	ebb2 0801 	subs.w	r8, r2, r1
 800a230:	4659      	mov	r1, fp
 800a232:	eb63 0901 	sbc.w	r9, r3, r1
 800a236:	f04f 0200 	mov.w	r2, #0
 800a23a:	f04f 0300 	mov.w	r3, #0
 800a23e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a24a:	4690      	mov	r8, r2
 800a24c:	4699      	mov	r9, r3
 800a24e:	4623      	mov	r3, r4
 800a250:	eb18 0303 	adds.w	r3, r8, r3
 800a254:	60bb      	str	r3, [r7, #8]
 800a256:	462b      	mov	r3, r5
 800a258:	eb49 0303 	adc.w	r3, r9, r3
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a26a:	4629      	mov	r1, r5
 800a26c:	024b      	lsls	r3, r1, #9
 800a26e:	4621      	mov	r1, r4
 800a270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a274:	4621      	mov	r1, r4
 800a276:	024a      	lsls	r2, r1, #9
 800a278:	4610      	mov	r0, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a27e:	2200      	movs	r2, #0
 800a280:	62bb      	str	r3, [r7, #40]	; 0x28
 800a282:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a288:	f7f6 fc8e 	bl	8000ba8 <__aeabi_uldivmod>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4613      	mov	r3, r2
 800a292:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a294:	e058      	b.n	800a348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a296:	4b38      	ldr	r3, [pc, #224]	; (800a378 <HAL_RCC_GetSysClockFreq+0x200>)
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	099b      	lsrs	r3, r3, #6
 800a29c:	2200      	movs	r2, #0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a2a6:	623b      	str	r3, [r7, #32]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a2b0:	4642      	mov	r2, r8
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	f04f 0000 	mov.w	r0, #0
 800a2b8:	f04f 0100 	mov.w	r1, #0
 800a2bc:	0159      	lsls	r1, r3, #5
 800a2be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a2c2:	0150      	lsls	r0, r2, #5
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	ebb2 0a01 	subs.w	sl, r2, r1
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	eb63 0b01 	sbc.w	fp, r3, r1
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a2e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a2e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a2e8:	ebb2 040a 	subs.w	r4, r2, sl
 800a2ec:	eb63 050b 	sbc.w	r5, r3, fp
 800a2f0:	f04f 0200 	mov.w	r2, #0
 800a2f4:	f04f 0300 	mov.w	r3, #0
 800a2f8:	00eb      	lsls	r3, r5, #3
 800a2fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2fe:	00e2      	lsls	r2, r4, #3
 800a300:	4614      	mov	r4, r2
 800a302:	461d      	mov	r5, r3
 800a304:	4643      	mov	r3, r8
 800a306:	18e3      	adds	r3, r4, r3
 800a308:	603b      	str	r3, [r7, #0]
 800a30a:	464b      	mov	r3, r9
 800a30c:	eb45 0303 	adc.w	r3, r5, r3
 800a310:	607b      	str	r3, [r7, #4]
 800a312:	f04f 0200 	mov.w	r2, #0
 800a316:	f04f 0300 	mov.w	r3, #0
 800a31a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a31e:	4629      	mov	r1, r5
 800a320:	028b      	lsls	r3, r1, #10
 800a322:	4621      	mov	r1, r4
 800a324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a328:	4621      	mov	r1, r4
 800a32a:	028a      	lsls	r2, r1, #10
 800a32c:	4610      	mov	r0, r2
 800a32e:	4619      	mov	r1, r3
 800a330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a332:	2200      	movs	r2, #0
 800a334:	61bb      	str	r3, [r7, #24]
 800a336:	61fa      	str	r2, [r7, #28]
 800a338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a33c:	f7f6 fc34 	bl	8000ba8 <__aeabi_uldivmod>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4613      	mov	r3, r2
 800a346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a348:	4b0b      	ldr	r3, [pc, #44]	; (800a378 <HAL_RCC_GetSysClockFreq+0x200>)
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	0c1b      	lsrs	r3, r3, #16
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	3301      	adds	r3, #1
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a362:	e002      	b.n	800a36a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a364:	4b05      	ldr	r3, [pc, #20]	; (800a37c <HAL_RCC_GetSysClockFreq+0x204>)
 800a366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3750      	adds	r7, #80	; 0x50
 800a370:	46bd      	mov	sp, r7
 800a372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a376:	bf00      	nop
 800a378:	40023800 	.word	0x40023800
 800a37c:	00f42400 	.word	0x00f42400
 800a380:	007a1200 	.word	0x007a1200

0800a384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a384:	b480      	push	{r7}
 800a386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a388:	4b03      	ldr	r3, [pc, #12]	; (800a398 <HAL_RCC_GetHCLKFreq+0x14>)
 800a38a:	681b      	ldr	r3, [r3, #0]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	20000004 	.word	0x20000004

0800a39c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a3a0:	f7ff fff0 	bl	800a384 <HAL_RCC_GetHCLKFreq>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	0a9b      	lsrs	r3, r3, #10
 800a3ac:	f003 0307 	and.w	r3, r3, #7
 800a3b0:	4903      	ldr	r1, [pc, #12]	; (800a3c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3b2:	5ccb      	ldrb	r3, [r1, r3]
 800a3b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	080103ec 	.word	0x080103ec

0800a3c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a3c8:	f7ff ffdc 	bl	800a384 <HAL_RCC_GetHCLKFreq>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	0b5b      	lsrs	r3, r3, #13
 800a3d4:	f003 0307 	and.w	r3, r3, #7
 800a3d8:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3da:	5ccb      	ldrb	r3, [r1, r3]
 800a3dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	40023800 	.word	0x40023800
 800a3e8:	080103ec 	.word	0x080103ec

0800a3ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e03f      	b.n	800a47e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7fc ffc0 	bl	8007398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2224      	movs	r2, #36	; 0x24
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a42e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fe23 	bl	800b07c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691a      	ldr	r2, [r3, #16]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	695a      	ldr	r2, [r3, #20]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68da      	ldr	r2, [r3, #12]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2220      	movs	r2, #32
 800a470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b08a      	sub	sp, #40	; 0x28
 800a48a:	af02      	add	r7, sp, #8
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	603b      	str	r3, [r7, #0]
 800a492:	4613      	mov	r3, r2
 800a494:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b20      	cmp	r3, #32
 800a4a4:	d17c      	bne.n	800a5a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <HAL_UART_Transmit+0x2c>
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e075      	b.n	800a5a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_UART_Transmit+0x3e>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e06e      	b.n	800a5a2 <HAL_UART_Transmit+0x11c>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2221      	movs	r2, #33	; 0x21
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4da:	f7fd f83d 	bl	8007558 <HAL_GetTick>
 800a4de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	88fa      	ldrh	r2, [r7, #6]
 800a4e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	88fa      	ldrh	r2, [r7, #6]
 800a4ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f4:	d108      	bne.n	800a508 <HAL_UART_Transmit+0x82>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d104      	bne.n	800a508 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	61bb      	str	r3, [r7, #24]
 800a506:	e003      	b.n	800a510 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a518:	e02a      	b.n	800a570 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2200      	movs	r2, #0
 800a522:	2180      	movs	r1, #128	; 0x80
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 fb63 	bl	800abf0 <UART_WaitOnFlagUntilTimeout>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e036      	b.n	800a5a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10b      	bne.n	800a552 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	881b      	ldrh	r3, [r3, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a548:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	3302      	adds	r3, #2
 800a54e:	61bb      	str	r3, [r7, #24]
 800a550:	e007      	b.n	800a562 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	3301      	adds	r3, #1
 800a560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a566:	b29b      	uxth	r3, r3
 800a568:	3b01      	subs	r3, #1
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1cf      	bne.n	800a51a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2200      	movs	r2, #0
 800a582:	2140      	movs	r1, #64	; 0x40
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fb33 	bl	800abf0 <UART_WaitOnFlagUntilTimeout>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e006      	b.n	800a5a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2220      	movs	r2, #32
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	e000      	b.n	800a5a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a5a0:	2302      	movs	r3, #2
  }
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3720      	adds	r7, #32
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d130      	bne.n	800a626 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <HAL_UART_Transmit_IT+0x26>
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e029      	b.n	800a628 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <HAL_UART_Transmit_IT+0x38>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e022      	b.n	800a628 <HAL_UART_Transmit_IT+0x7e>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	88fa      	ldrh	r2, [r7, #6]
 800a5f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	88fa      	ldrh	r2, [r7, #6]
 800a5fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2221      	movs	r2, #33	; 0x21
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a620:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	e000      	b.n	800a628 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a626:	2302      	movs	r3, #2
  }
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d11d      	bne.n	800a68a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <HAL_UART_Receive_IT+0x26>
 800a654:	88fb      	ldrh	r3, [r7, #6]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e016      	b.n	800a68c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a664:	2b01      	cmp	r3, #1
 800a666:	d101      	bne.n	800a66c <HAL_UART_Receive_IT+0x38>
 800a668:	2302      	movs	r3, #2
 800a66a:	e00f      	b.n	800a68c <HAL_UART_Receive_IT+0x58>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	461a      	mov	r2, r3
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 fb23 	bl	800accc <UART_Start_Receive_IT>
 800a686:	4603      	mov	r3, r0
 800a688:	e000      	b.n	800a68c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a68a:	2302      	movs	r3, #2
  }
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b0ba      	sub	sp, #232	; 0xe8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ca:	f003 030f 	and.w	r3, r3, #15
 800a6ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a6d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10f      	bne.n	800a6fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <HAL_UART_IRQHandler+0x66>
 800a6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ea:	f003 0320 	and.w	r3, r3, #32
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fc07 	bl	800af06 <UART_Receive_IT>
      return;
 800a6f8:	e256      	b.n	800aba8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 80de 	beq.w	800a8c0 <HAL_UART_IRQHandler+0x22c>
 800a704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d106      	bne.n	800a71e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 80d1 	beq.w	800a8c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00b      	beq.n	800a742 <HAL_UART_IRQHandler+0xae>
 800a72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a732:	2b00      	cmp	r3, #0
 800a734:	d005      	beq.n	800a742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	f043 0201 	orr.w	r2, r3, #1
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a746:	f003 0304 	and.w	r3, r3, #4
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <HAL_UART_IRQHandler+0xd2>
 800a74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	d005      	beq.n	800a766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75e:	f043 0202 	orr.w	r2, r3, #2
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <HAL_UART_IRQHandler+0xf6>
 800a772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a782:	f043 0204 	orr.w	r2, r3, #4
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78e:	f003 0308 	and.w	r3, r3, #8
 800a792:	2b00      	cmp	r3, #0
 800a794:	d011      	beq.n	800a7ba <HAL_UART_IRQHandler+0x126>
 800a796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d105      	bne.n	800a7ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d005      	beq.n	800a7ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	f043 0208 	orr.w	r2, r3, #8
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 81ed 	beq.w	800ab9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c8:	f003 0320 	and.w	r3, r3, #32
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d008      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x14e>
 800a7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fb92 	bl	800af06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ec:	2b40      	cmp	r3, #64	; 0x40
 800a7ee:	bf0c      	ite	eq
 800a7f0:	2301      	moveq	r3, #1
 800a7f2:	2300      	movne	r3, #0
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <HAL_UART_IRQHandler+0x17a>
 800a806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d04f      	beq.n	800a8ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fa9a 	bl	800ad48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81e:	2b40      	cmp	r3, #64	; 0x40
 800a820:	d141      	bne.n	800a8a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3314      	adds	r3, #20
 800a828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a830:	e853 3f00 	ldrex	r3, [r3]
 800a834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a83c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3314      	adds	r3, #20
 800a84a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a84e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a85a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1d9      	bne.n	800a822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	2b00      	cmp	r3, #0
 800a874:	d013      	beq.n	800a89e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	4a7d      	ldr	r2, [pc, #500]	; (800aa70 <HAL_UART_IRQHandler+0x3dc>)
 800a87c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	4618      	mov	r0, r3
 800a884:	f7fd fd32 	bl	80082ec <HAL_DMA_Abort_IT>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d016      	beq.n	800a8bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a898:	4610      	mov	r0, r2
 800a89a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a89c:	e00e      	b.n	800a8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f990 	bl	800abc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a4:	e00a      	b.n	800a8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f98c 	bl	800abc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ac:	e006      	b.n	800a8bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f988 	bl	800abc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a8ba:	e170      	b.n	800ab9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8bc:	bf00      	nop
    return;
 800a8be:	e16e      	b.n	800ab9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	f040 814a 	bne.w	800ab5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ce:	f003 0310 	and.w	r3, r3, #16
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 8143 	beq.w	800ab5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8dc:	f003 0310 	and.w	r3, r3, #16
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 813c 	beq.w	800ab5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60bb      	str	r3, [r7, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	60bb      	str	r3, [r7, #8]
 800a8fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a906:	2b40      	cmp	r3, #64	; 0x40
 800a908:	f040 80b4 	bne.w	800aa74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 8140 	beq.w	800aba2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a92a:	429a      	cmp	r2, r3
 800a92c:	f080 8139 	bcs.w	800aba2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a942:	f000 8088 	beq.w	800aa56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	330c      	adds	r3, #12
 800a94c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a95c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	330c      	adds	r3, #12
 800a96e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a97e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a982:	e841 2300 	strex	r3, r2, [r1]
 800a986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a98a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1d9      	bne.n	800a946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3314      	adds	r3, #20
 800a998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a9a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9a4:	f023 0301 	bic.w	r3, r3, #1
 800a9a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3314      	adds	r3, #20
 800a9b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9c2:	e841 2300 	strex	r3, r2, [r1]
 800a9c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1e1      	bne.n	800a992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3314      	adds	r3, #20
 800a9d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3314      	adds	r3, #20
 800a9ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e3      	bne.n	800a9ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	330c      	adds	r3, #12
 800aa1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa26:	f023 0310 	bic.w	r3, r3, #16
 800aa2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	330c      	adds	r3, #12
 800aa34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa38:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e3      	bne.n	800aa14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fd fbdb 	bl	800820c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f8b6 	bl	800abd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa6c:	e099      	b.n	800aba2 <HAL_UART_IRQHandler+0x50e>
 800aa6e:	bf00      	nop
 800aa70:	0800ae0f 	.word	0x0800ae0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 808b 	beq.w	800aba6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8086 	beq.w	800aba6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	330c      	adds	r3, #12
 800aaa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	330c      	adds	r3, #12
 800aaba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aabe:	647a      	str	r2, [r7, #68]	; 0x44
 800aac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e3      	bne.n	800aa9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3314      	adds	r3, #20
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	e853 3f00 	ldrex	r3, [r3]
 800aae0:	623b      	str	r3, [r7, #32]
   return(result);
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	f023 0301 	bic.w	r3, r3, #1
 800aae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3314      	adds	r3, #20
 800aaf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaf6:	633a      	str	r2, [r7, #48]	; 0x30
 800aaf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aafe:	e841 2300 	strex	r3, r2, [r1]
 800ab02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1e3      	bne.n	800aad2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f023 0310 	bic.w	r3, r3, #16
 800ab2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	330c      	adds	r3, #12
 800ab38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ab3c:	61fa      	str	r2, [r7, #28]
 800ab3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab40:	69b9      	ldr	r1, [r7, #24]
 800ab42:	69fa      	ldr	r2, [r7, #28]
 800ab44:	e841 2300 	strex	r3, r2, [r1]
 800ab48:	617b      	str	r3, [r7, #20]
   return(result);
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1e3      	bne.n	800ab18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f83e 	bl	800abd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab5c:	e023      	b.n	800aba6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <HAL_UART_IRQHandler+0x4ea>
 800ab6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f95d 	bl	800ae36 <UART_Transmit_IT>
    return;
 800ab7c:	e014      	b.n	800aba8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00e      	beq.n	800aba8 <HAL_UART_IRQHandler+0x514>
 800ab8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d008      	beq.n	800aba8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f99d 	bl	800aed6 <UART_EndTransmit_IT>
    return;
 800ab9c:	e004      	b.n	800aba8 <HAL_UART_IRQHandler+0x514>
    return;
 800ab9e:	bf00      	nop
 800aba0:	e002      	b.n	800aba8 <HAL_UART_IRQHandler+0x514>
      return;
 800aba2:	bf00      	nop
 800aba4:	e000      	b.n	800aba8 <HAL_UART_IRQHandler+0x514>
      return;
 800aba6:	bf00      	nop
  }
}
 800aba8:	37e8      	adds	r7, #232	; 0xe8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop

0800abb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b090      	sub	sp, #64	; 0x40
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	4613      	mov	r3, r2
 800abfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac00:	e050      	b.n	800aca4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d04c      	beq.n	800aca4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ac0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d007      	beq.n	800ac20 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac10:	f7fc fca2 	bl	8007558 <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d241      	bcs.n	800aca4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	330c      	adds	r3, #12
 800ac26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2a:	e853 3f00 	ldrex	r3, [r3]
 800ac2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	330c      	adds	r3, #12
 800ac3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac40:	637a      	str	r2, [r7, #52]	; 0x34
 800ac42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac48:	e841 2300 	strex	r3, r2, [r1]
 800ac4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e5      	bne.n	800ac20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3314      	adds	r3, #20
 800ac5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	e853 3f00 	ldrex	r3, [r3]
 800ac62:	613b      	str	r3, [r7, #16]
   return(result);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f023 0301 	bic.w	r3, r3, #1
 800ac6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3314      	adds	r3, #20
 800ac72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac74:	623a      	str	r2, [r7, #32]
 800ac76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac78:	69f9      	ldr	r1, [r7, #28]
 800ac7a:	6a3a      	ldr	r2, [r7, #32]
 800ac7c:	e841 2300 	strex	r3, r2, [r1]
 800ac80:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e5      	bne.n	800ac54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e00f      	b.n	800acc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	4013      	ands	r3, r2
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	bf0c      	ite	eq
 800acb4:	2301      	moveq	r3, #1
 800acb6:	2300      	movne	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d09f      	beq.n	800ac02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3740      	adds	r7, #64	; 0x40
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	88fa      	ldrh	r2, [r7, #6]
 800ace4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	88fa      	ldrh	r2, [r7, #6]
 800acea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2222      	movs	r2, #34	; 0x22
 800acf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d007      	beq.n	800ad1a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68da      	ldr	r2, [r3, #12]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	695a      	ldr	r2, [r3, #20]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f042 0201 	orr.w	r2, r2, #1
 800ad28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68da      	ldr	r2, [r3, #12]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f042 0220 	orr.w	r2, r2, #32
 800ad38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b095      	sub	sp, #84	; 0x54
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	330c      	adds	r3, #12
 800ad56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	330c      	adds	r3, #12
 800ad6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad70:	643a      	str	r2, [r7, #64]	; 0x40
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e5      	bne.n	800ad50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3314      	adds	r3, #20
 800ad8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	f023 0301 	bic.w	r3, r3, #1
 800ad9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3314      	adds	r3, #20
 800ada2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ada4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ada6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e5      	bne.n	800ad84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d119      	bne.n	800adf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	60bb      	str	r3, [r7, #8]
   return(result);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f023 0310 	bic.w	r3, r3, #16
 800add6:	647b      	str	r3, [r7, #68]	; 0x44
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	330c      	adds	r3, #12
 800adde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ade0:	61ba      	str	r2, [r7, #24]
 800ade2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6979      	ldr	r1, [r7, #20]
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	613b      	str	r3, [r7, #16]
   return(result);
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e5      	bne.n	800adc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae02:	bf00      	nop
 800ae04:	3754      	adds	r7, #84	; 0x54
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7ff fecb 	bl	800abc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae2e:	bf00      	nop
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b085      	sub	sp, #20
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b21      	cmp	r3, #33	; 0x21
 800ae48:	d13e      	bne.n	800aec8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae52:	d114      	bne.n	800ae7e <UART_Transmit_IT+0x48>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d110      	bne.n	800ae7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	1c9a      	adds	r2, r3, #2
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	621a      	str	r2, [r3, #32]
 800ae7c:	e008      	b.n	800ae90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	1c59      	adds	r1, r3, #1
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	6211      	str	r1, [r2, #32]
 800ae88:	781a      	ldrb	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	3b01      	subs	r3, #1
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10f      	bne.n	800aec4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68da      	ldr	r2, [r3, #12]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aec2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	e000      	b.n	800aeca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aec8:	2302      	movs	r3, #2
  }
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68da      	ldr	r2, [r3, #12]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff fe5a 	bl	800abb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b08c      	sub	sp, #48	; 0x30
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b22      	cmp	r3, #34	; 0x22
 800af18:	f040 80ab 	bne.w	800b072 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af24:	d117      	bne.n	800af56 <UART_Receive_IT+0x50>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d113      	bne.n	800af56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af44:	b29a      	uxth	r2, r3
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4e:	1c9a      	adds	r2, r3, #2
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	629a      	str	r2, [r3, #40]	; 0x28
 800af54:	e026      	b.n	800afa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af68:	d007      	beq.n	800af7a <UART_Receive_IT+0x74>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <UART_Receive_IT+0x82>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	b2da      	uxtb	r2, r3
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	e008      	b.n	800af9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af94:	b2da      	uxtb	r2, r3
 800af96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	3b01      	subs	r3, #1
 800afac:	b29b      	uxth	r3, r3
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	4619      	mov	r1, r3
 800afb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d15a      	bne.n	800b06e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0220 	bic.w	r2, r2, #32
 800afc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695a      	ldr	r2, [r3, #20]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f022 0201 	bic.w	r2, r2, #1
 800afe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d135      	bne.n	800b064 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	330c      	adds	r3, #12
 800b004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	613b      	str	r3, [r7, #16]
   return(result);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f023 0310 	bic.w	r3, r3, #16
 800b014:	627b      	str	r3, [r7, #36]	; 0x24
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	330c      	adds	r3, #12
 800b01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01e:	623a      	str	r2, [r7, #32]
 800b020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	69f9      	ldr	r1, [r7, #28]
 800b024:	6a3a      	ldr	r2, [r7, #32]
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e5      	bne.n	800affe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0310 	and.w	r3, r3, #16
 800b03c:	2b10      	cmp	r3, #16
 800b03e:	d10a      	bne.n	800b056 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b040:	2300      	movs	r3, #0
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	60fb      	str	r3, [r7, #12]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff fdbb 	bl	800abd8 <HAL_UARTEx_RxEventCallback>
 800b062:	e002      	b.n	800b06a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7fa fd2f 	bl	8005ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e002      	b.n	800b074 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	e000      	b.n	800b074 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b072:	2302      	movs	r3, #2
  }
}
 800b074:	4618      	mov	r0, r3
 800b076:	3730      	adds	r7, #48	; 0x30
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b07c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b080:	b0c0      	sub	sp, #256	; 0x100
 800b082:	af00      	add	r7, sp, #0
 800b084:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b098:	68d9      	ldr	r1, [r3, #12]
 800b09a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	ea40 0301 	orr.w	r3, r0, r1
 800b0a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0aa:	689a      	ldr	r2, [r3, #8]
 800b0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b0d4:	f021 010c 	bic.w	r1, r1, #12
 800b0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b0e2:	430b      	orrs	r3, r1
 800b0e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0f6:	6999      	ldr	r1, [r3, #24]
 800b0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	ea40 0301 	orr.w	r3, r0, r1
 800b102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	4b8f      	ldr	r3, [pc, #572]	; (800b348 <UART_SetConfig+0x2cc>)
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d005      	beq.n	800b11c <UART_SetConfig+0xa0>
 800b110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	4b8d      	ldr	r3, [pc, #564]	; (800b34c <UART_SetConfig+0x2d0>)
 800b118:	429a      	cmp	r2, r3
 800b11a:	d104      	bne.n	800b126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b11c:	f7ff f952 	bl	800a3c4 <HAL_RCC_GetPCLK2Freq>
 800b120:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b124:	e003      	b.n	800b12e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b126:	f7ff f939 	bl	800a39c <HAL_RCC_GetPCLK1Freq>
 800b12a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b138:	f040 810c 	bne.w	800b354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b13c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b140:	2200      	movs	r2, #0
 800b142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b146:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b14a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b14e:	4622      	mov	r2, r4
 800b150:	462b      	mov	r3, r5
 800b152:	1891      	adds	r1, r2, r2
 800b154:	65b9      	str	r1, [r7, #88]	; 0x58
 800b156:	415b      	adcs	r3, r3
 800b158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b15a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b15e:	4621      	mov	r1, r4
 800b160:	eb12 0801 	adds.w	r8, r2, r1
 800b164:	4629      	mov	r1, r5
 800b166:	eb43 0901 	adc.w	r9, r3, r1
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	f04f 0300 	mov.w	r3, #0
 800b172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b17a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b17e:	4690      	mov	r8, r2
 800b180:	4699      	mov	r9, r3
 800b182:	4623      	mov	r3, r4
 800b184:	eb18 0303 	adds.w	r3, r8, r3
 800b188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b18c:	462b      	mov	r3, r5
 800b18e:	eb49 0303 	adc.w	r3, r9, r3
 800b192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b1a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	18db      	adds	r3, r3, r3
 800b1ae:	653b      	str	r3, [r7, #80]	; 0x50
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	eb42 0303 	adc.w	r3, r2, r3
 800b1b6:	657b      	str	r3, [r7, #84]	; 0x54
 800b1b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b1bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b1c0:	f7f5 fcf2 	bl	8000ba8 <__aeabi_uldivmod>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4b61      	ldr	r3, [pc, #388]	; (800b350 <UART_SetConfig+0x2d4>)
 800b1ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b1ce:	095b      	lsrs	r3, r3, #5
 800b1d0:	011c      	lsls	r4, r3, #4
 800b1d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b1e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	464b      	mov	r3, r9
 800b1e8:	1891      	adds	r1, r2, r2
 800b1ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800b1ec:	415b      	adcs	r3, r3
 800b1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b1f4:	4641      	mov	r1, r8
 800b1f6:	eb12 0a01 	adds.w	sl, r2, r1
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	eb43 0b01 	adc.w	fp, r3, r1
 800b200:	f04f 0200 	mov.w	r2, #0
 800b204:	f04f 0300 	mov.w	r3, #0
 800b208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b20c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b214:	4692      	mov	sl, r2
 800b216:	469b      	mov	fp, r3
 800b218:	4643      	mov	r3, r8
 800b21a:	eb1a 0303 	adds.w	r3, sl, r3
 800b21e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b222:	464b      	mov	r3, r9
 800b224:	eb4b 0303 	adc.w	r3, fp, r3
 800b228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b238:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b23c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b240:	460b      	mov	r3, r1
 800b242:	18db      	adds	r3, r3, r3
 800b244:	643b      	str	r3, [r7, #64]	; 0x40
 800b246:	4613      	mov	r3, r2
 800b248:	eb42 0303 	adc.w	r3, r2, r3
 800b24c:	647b      	str	r3, [r7, #68]	; 0x44
 800b24e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b256:	f7f5 fca7 	bl	8000ba8 <__aeabi_uldivmod>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	4b3b      	ldr	r3, [pc, #236]	; (800b350 <UART_SetConfig+0x2d4>)
 800b262:	fba3 2301 	umull	r2, r3, r3, r1
 800b266:	095b      	lsrs	r3, r3, #5
 800b268:	2264      	movs	r2, #100	; 0x64
 800b26a:	fb02 f303 	mul.w	r3, r2, r3
 800b26e:	1acb      	subs	r3, r1, r3
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b276:	4b36      	ldr	r3, [pc, #216]	; (800b350 <UART_SetConfig+0x2d4>)
 800b278:	fba3 2302 	umull	r2, r3, r3, r2
 800b27c:	095b      	lsrs	r3, r3, #5
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b284:	441c      	add	r4, r3
 800b286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b290:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b298:	4642      	mov	r2, r8
 800b29a:	464b      	mov	r3, r9
 800b29c:	1891      	adds	r1, r2, r2
 800b29e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b2a0:	415b      	adcs	r3, r3
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	1851      	adds	r1, r2, r1
 800b2ac:	6339      	str	r1, [r7, #48]	; 0x30
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	414b      	adcs	r3, r1
 800b2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2b4:	f04f 0200 	mov.w	r2, #0
 800b2b8:	f04f 0300 	mov.w	r3, #0
 800b2bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b2c0:	4659      	mov	r1, fp
 800b2c2:	00cb      	lsls	r3, r1, #3
 800b2c4:	4651      	mov	r1, sl
 800b2c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ca:	4651      	mov	r1, sl
 800b2cc:	00ca      	lsls	r2, r1, #3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	189b      	adds	r3, r3, r2
 800b2d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2dc:	464b      	mov	r3, r9
 800b2de:	460a      	mov	r2, r1
 800b2e0:	eb42 0303 	adc.w	r3, r2, r3
 800b2e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b2f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	18db      	adds	r3, r3, r3
 800b300:	62bb      	str	r3, [r7, #40]	; 0x28
 800b302:	4613      	mov	r3, r2
 800b304:	eb42 0303 	adc.w	r3, r2, r3
 800b308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b30a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b30e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b312:	f7f5 fc49 	bl	8000ba8 <__aeabi_uldivmod>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <UART_SetConfig+0x2d4>)
 800b31c:	fba3 1302 	umull	r1, r3, r3, r2
 800b320:	095b      	lsrs	r3, r3, #5
 800b322:	2164      	movs	r1, #100	; 0x64
 800b324:	fb01 f303 	mul.w	r3, r1, r3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	00db      	lsls	r3, r3, #3
 800b32c:	3332      	adds	r3, #50	; 0x32
 800b32e:	4a08      	ldr	r2, [pc, #32]	; (800b350 <UART_SetConfig+0x2d4>)
 800b330:	fba2 2303 	umull	r2, r3, r2, r3
 800b334:	095b      	lsrs	r3, r3, #5
 800b336:	f003 0207 	and.w	r2, r3, #7
 800b33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4422      	add	r2, r4
 800b342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b344:	e105      	b.n	800b552 <UART_SetConfig+0x4d6>
 800b346:	bf00      	nop
 800b348:	40011000 	.word	0x40011000
 800b34c:	40011400 	.word	0x40011400
 800b350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b358:	2200      	movs	r2, #0
 800b35a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b35e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b366:	4642      	mov	r2, r8
 800b368:	464b      	mov	r3, r9
 800b36a:	1891      	adds	r1, r2, r2
 800b36c:	6239      	str	r1, [r7, #32]
 800b36e:	415b      	adcs	r3, r3
 800b370:	627b      	str	r3, [r7, #36]	; 0x24
 800b372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b376:	4641      	mov	r1, r8
 800b378:	1854      	adds	r4, r2, r1
 800b37a:	4649      	mov	r1, r9
 800b37c:	eb43 0501 	adc.w	r5, r3, r1
 800b380:	f04f 0200 	mov.w	r2, #0
 800b384:	f04f 0300 	mov.w	r3, #0
 800b388:	00eb      	lsls	r3, r5, #3
 800b38a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b38e:	00e2      	lsls	r2, r4, #3
 800b390:	4614      	mov	r4, r2
 800b392:	461d      	mov	r5, r3
 800b394:	4643      	mov	r3, r8
 800b396:	18e3      	adds	r3, r4, r3
 800b398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b39c:	464b      	mov	r3, r9
 800b39e:	eb45 0303 	adc.w	r3, r5, r3
 800b3a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b3b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	f04f 0300 	mov.w	r3, #0
 800b3be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	008b      	lsls	r3, r1, #2
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	008a      	lsls	r2, r1, #2
 800b3d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b3d4:	f7f5 fbe8 	bl	8000ba8 <__aeabi_uldivmod>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4b60      	ldr	r3, [pc, #384]	; (800b560 <UART_SetConfig+0x4e4>)
 800b3de:	fba3 2302 	umull	r2, r3, r3, r2
 800b3e2:	095b      	lsrs	r3, r3, #5
 800b3e4:	011c      	lsls	r4, r3, #4
 800b3e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	1891      	adds	r1, r2, r2
 800b3fe:	61b9      	str	r1, [r7, #24]
 800b400:	415b      	adcs	r3, r3
 800b402:	61fb      	str	r3, [r7, #28]
 800b404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b408:	4641      	mov	r1, r8
 800b40a:	1851      	adds	r1, r2, r1
 800b40c:	6139      	str	r1, [r7, #16]
 800b40e:	4649      	mov	r1, r9
 800b410:	414b      	adcs	r3, r1
 800b412:	617b      	str	r3, [r7, #20]
 800b414:	f04f 0200 	mov.w	r2, #0
 800b418:	f04f 0300 	mov.w	r3, #0
 800b41c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b420:	4659      	mov	r1, fp
 800b422:	00cb      	lsls	r3, r1, #3
 800b424:	4651      	mov	r1, sl
 800b426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b42a:	4651      	mov	r1, sl
 800b42c:	00ca      	lsls	r2, r1, #3
 800b42e:	4610      	mov	r0, r2
 800b430:	4619      	mov	r1, r3
 800b432:	4603      	mov	r3, r0
 800b434:	4642      	mov	r2, r8
 800b436:	189b      	adds	r3, r3, r2
 800b438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b43c:	464b      	mov	r3, r9
 800b43e:	460a      	mov	r2, r1
 800b440:	eb42 0303 	adc.w	r3, r2, r3
 800b444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	67bb      	str	r3, [r7, #120]	; 0x78
 800b452:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b454:	f04f 0200 	mov.w	r2, #0
 800b458:	f04f 0300 	mov.w	r3, #0
 800b45c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b460:	4649      	mov	r1, r9
 800b462:	008b      	lsls	r3, r1, #2
 800b464:	4641      	mov	r1, r8
 800b466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b46a:	4641      	mov	r1, r8
 800b46c:	008a      	lsls	r2, r1, #2
 800b46e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b472:	f7f5 fb99 	bl	8000ba8 <__aeabi_uldivmod>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4b39      	ldr	r3, [pc, #228]	; (800b560 <UART_SetConfig+0x4e4>)
 800b47c:	fba3 1302 	umull	r1, r3, r3, r2
 800b480:	095b      	lsrs	r3, r3, #5
 800b482:	2164      	movs	r1, #100	; 0x64
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	011b      	lsls	r3, r3, #4
 800b48c:	3332      	adds	r3, #50	; 0x32
 800b48e:	4a34      	ldr	r2, [pc, #208]	; (800b560 <UART_SetConfig+0x4e4>)
 800b490:	fba2 2303 	umull	r2, r3, r2, r3
 800b494:	095b      	lsrs	r3, r3, #5
 800b496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b49a:	441c      	add	r4, r3
 800b49c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	673b      	str	r3, [r7, #112]	; 0x70
 800b4a4:	677a      	str	r2, [r7, #116]	; 0x74
 800b4a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b4aa:	4642      	mov	r2, r8
 800b4ac:	464b      	mov	r3, r9
 800b4ae:	1891      	adds	r1, r2, r2
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	415b      	adcs	r3, r3
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4ba:	4641      	mov	r1, r8
 800b4bc:	1851      	adds	r1, r2, r1
 800b4be:	6039      	str	r1, [r7, #0]
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	414b      	adcs	r3, r1
 800b4c4:	607b      	str	r3, [r7, #4]
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	f04f 0300 	mov.w	r3, #0
 800b4ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4d2:	4659      	mov	r1, fp
 800b4d4:	00cb      	lsls	r3, r1, #3
 800b4d6:	4651      	mov	r1, sl
 800b4d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4dc:	4651      	mov	r1, sl
 800b4de:	00ca      	lsls	r2, r1, #3
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	4642      	mov	r2, r8
 800b4e8:	189b      	adds	r3, r3, r2
 800b4ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4ec:	464b      	mov	r3, r9
 800b4ee:	460a      	mov	r2, r1
 800b4f0:	eb42 0303 	adc.w	r3, r2, r3
 800b4f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b500:	667a      	str	r2, [r7, #100]	; 0x64
 800b502:	f04f 0200 	mov.w	r2, #0
 800b506:	f04f 0300 	mov.w	r3, #0
 800b50a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b50e:	4649      	mov	r1, r9
 800b510:	008b      	lsls	r3, r1, #2
 800b512:	4641      	mov	r1, r8
 800b514:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b518:	4641      	mov	r1, r8
 800b51a:	008a      	lsls	r2, r1, #2
 800b51c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b520:	f7f5 fb42 	bl	8000ba8 <__aeabi_uldivmod>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <UART_SetConfig+0x4e4>)
 800b52a:	fba3 1302 	umull	r1, r3, r3, r2
 800b52e:	095b      	lsrs	r3, r3, #5
 800b530:	2164      	movs	r1, #100	; 0x64
 800b532:	fb01 f303 	mul.w	r3, r1, r3
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	011b      	lsls	r3, r3, #4
 800b53a:	3332      	adds	r3, #50	; 0x32
 800b53c:	4a08      	ldr	r2, [pc, #32]	; (800b560 <UART_SetConfig+0x4e4>)
 800b53e:	fba2 2303 	umull	r2, r3, r2, r3
 800b542:	095b      	lsrs	r3, r3, #5
 800b544:	f003 020f 	and.w	r2, r3, #15
 800b548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4422      	add	r2, r4
 800b550:	609a      	str	r2, [r3, #8]
}
 800b552:	bf00      	nop
 800b554:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b558:	46bd      	mov	sp, r7
 800b55a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b55e:	bf00      	nop
 800b560:	51eb851f 	.word	0x51eb851f

0800b564 <LL_GPIO_SetPinMode>:
{
 800b564:	b480      	push	{r7}
 800b566:	b089      	sub	sp, #36	; 0x24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	fa93 f3a3 	rbit	r3, r3
 800b57e:	613b      	str	r3, [r7, #16]
  return result;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	fab3 f383 	clz	r3, r3
 800b586:	b2db      	uxtb	r3, r3
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	2103      	movs	r1, #3
 800b58c:	fa01 f303 	lsl.w	r3, r1, r3
 800b590:	43db      	mvns	r3, r3
 800b592:	401a      	ands	r2, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	fa93 f3a3 	rbit	r3, r3
 800b59e:	61bb      	str	r3, [r7, #24]
  return result;
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	fab3 f383 	clz	r3, r3
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	601a      	str	r2, [r3, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	3724      	adds	r7, #36	; 0x24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <LL_GPIO_SetPinOutputType>:
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	60b9      	str	r1, [r7, #8]
 800b5cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	43db      	mvns	r3, r3
 800b5d6:	401a      	ands	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	fb01 f303 	mul.w	r3, r1, r3
 800b5e0:	431a      	orrs	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	605a      	str	r2, [r3, #4]
}
 800b5e6:	bf00      	nop
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <LL_GPIO_SetPinSpeed>:
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b089      	sub	sp, #36	; 0x24
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	60f8      	str	r0, [r7, #12]
 800b5fa:	60b9      	str	r1, [r7, #8]
 800b5fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	689a      	ldr	r2, [r3, #8]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	fa93 f3a3 	rbit	r3, r3
 800b60c:	613b      	str	r3, [r7, #16]
  return result;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	fab3 f383 	clz	r3, r3
 800b614:	b2db      	uxtb	r3, r3
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	2103      	movs	r1, #3
 800b61a:	fa01 f303 	lsl.w	r3, r1, r3
 800b61e:	43db      	mvns	r3, r3
 800b620:	401a      	ands	r2, r3
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	fa93 f3a3 	rbit	r3, r3
 800b62c:	61bb      	str	r3, [r7, #24]
  return result;
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	fab3 f383 	clz	r3, r3
 800b634:	b2db      	uxtb	r3, r3
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	6879      	ldr	r1, [r7, #4]
 800b63a:	fa01 f303 	lsl.w	r3, r1, r3
 800b63e:	431a      	orrs	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	609a      	str	r2, [r3, #8]
}
 800b644:	bf00      	nop
 800b646:	3724      	adds	r7, #36	; 0x24
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <LL_GPIO_SetPinPull>:
{
 800b650:	b480      	push	{r7}
 800b652:	b089      	sub	sp, #36	; 0x24
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	fa93 f3a3 	rbit	r3, r3
 800b66a:	613b      	str	r3, [r7, #16]
  return result;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	fab3 f383 	clz	r3, r3
 800b672:	b2db      	uxtb	r3, r3
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	2103      	movs	r1, #3
 800b678:	fa01 f303 	lsl.w	r3, r1, r3
 800b67c:	43db      	mvns	r3, r3
 800b67e:	401a      	ands	r2, r3
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	fa93 f3a3 	rbit	r3, r3
 800b68a:	61bb      	str	r3, [r7, #24]
  return result;
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	fab3 f383 	clz	r3, r3
 800b692:	b2db      	uxtb	r3, r3
 800b694:	005b      	lsls	r3, r3, #1
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	fa01 f303 	lsl.w	r3, r1, r3
 800b69c:	431a      	orrs	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	60da      	str	r2, [r3, #12]
}
 800b6a2:	bf00      	nop
 800b6a4:	3724      	adds	r7, #36	; 0x24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <LL_GPIO_SetAFPin_0_7>:
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b089      	sub	sp, #36	; 0x24
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6a1a      	ldr	r2, [r3, #32]
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	fa93 f3a3 	rbit	r3, r3
 800b6c8:	613b      	str	r3, [r7, #16]
  return result;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	fab3 f383 	clz	r3, r3
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	210f      	movs	r1, #15
 800b6d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6da:	43db      	mvns	r3, r3
 800b6dc:	401a      	ands	r2, r3
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	fa93 f3a3 	rbit	r3, r3
 800b6e8:	61bb      	str	r3, [r7, #24]
  return result;
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	fab3 f383 	clz	r3, r3
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	621a      	str	r2, [r3, #32]
}
 800b700:	bf00      	nop
 800b702:	3724      	adds	r7, #36	; 0x24
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <LL_GPIO_SetAFPin_8_15>:
{
 800b70c:	b480      	push	{r7}
 800b70e:	b089      	sub	sp, #36	; 0x24
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	0a1b      	lsrs	r3, r3, #8
 800b720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	fa93 f3a3 	rbit	r3, r3
 800b728:	613b      	str	r3, [r7, #16]
  return result;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	fab3 f383 	clz	r3, r3
 800b730:	b2db      	uxtb	r3, r3
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	210f      	movs	r1, #15
 800b736:	fa01 f303 	lsl.w	r3, r1, r3
 800b73a:	43db      	mvns	r3, r3
 800b73c:	401a      	ands	r2, r3
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	0a1b      	lsrs	r3, r3, #8
 800b742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	fa93 f3a3 	rbit	r3, r3
 800b74a:	61bb      	str	r3, [r7, #24]
  return result;
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	fab3 f383 	clz	r3, r3
 800b752:	b2db      	uxtb	r3, r3
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	fa01 f303 	lsl.w	r3, r1, r3
 800b75c:	431a      	orrs	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b762:	bf00      	nop
 800b764:	3724      	adds	r7, #36	; 0x24
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b088      	sub	sp, #32
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b778:	2300      	movs	r3, #0
 800b77a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800b77c:	2300      	movs	r3, #0
 800b77e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	fa93 f3a3 	rbit	r3, r3
 800b78c:	613b      	str	r3, [r7, #16]
  return result;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	fab3 f383 	clz	r3, r3
 800b794:	b2db      	uxtb	r3, r3
 800b796:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b798:	e050      	b.n	800b83c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	2101      	movs	r1, #1
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d042      	beq.n	800b836 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d003      	beq.n	800b7c0 <LL_GPIO_Init+0x52>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d10d      	bne.n	800b7dc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	69b9      	ldr	r1, [r7, #24]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7ff ff12 	bl	800b5f2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	69b9      	ldr	r1, [r7, #24]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff fef3 	bl	800b5c2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	69b9      	ldr	r1, [r7, #24]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7ff ff33 	bl	800b650 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d11a      	bne.n	800b828 <LL_GPIO_Init+0xba>
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	fa93 f3a3 	rbit	r3, r3
 800b7fc:	60bb      	str	r3, [r7, #8]
  return result;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b800:	fab3 f383 	clz	r3, r3
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b07      	cmp	r3, #7
 800b808:	d807      	bhi.n	800b81a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	461a      	mov	r2, r3
 800b810:	69b9      	ldr	r1, [r7, #24]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff ff4b 	bl	800b6ae <LL_GPIO_SetAFPin_0_7>
 800b818:	e006      	b.n	800b828 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	461a      	mov	r2, r3
 800b820:	69b9      	ldr	r1, [r7, #24]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ff72 	bl	800b70c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	461a      	mov	r2, r3
 800b82e:	69b9      	ldr	r1, [r7, #24]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff fe97 	bl	800b564 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	3301      	adds	r3, #1
 800b83a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	fa22 f303 	lsr.w	r3, r2, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1a7      	bne.n	800b79a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3720      	adds	r7, #32
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b858:	4b04      	ldr	r3, [pc, #16]	; (800b86c <LL_RCC_GetSysClkSource+0x18>)
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f003 030c 	and.w	r3, r3, #12
}
 800b860:	4618      	mov	r0, r3
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	40023800 	.word	0x40023800

0800b870 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b870:	b480      	push	{r7}
 800b872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b874:	4b04      	ldr	r3, [pc, #16]	; (800b888 <LL_RCC_GetAHBPrescaler+0x18>)
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	40023800 	.word	0x40023800

0800b88c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b890:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <LL_RCC_GetAPB1Prescaler+0x18>)
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800b898:	4618      	mov	r0, r3
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	40023800 	.word	0x40023800

0800b8a8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b8ac:	4b04      	ldr	r3, [pc, #16]	; (800b8c0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	40023800 	.word	0x40023800

0800b8c4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b8c8:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <LL_RCC_PLL_GetMainSource+0x18>)
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	40023800 	.word	0x40023800

0800b8e0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b8e4:	4b04      	ldr	r3, [pc, #16]	; (800b8f8 <LL_RCC_PLL_GetN+0x18>)
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	099b      	lsrs	r3, r3, #6
 800b8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	40023800 	.word	0x40023800

0800b8fc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b900:	4b04      	ldr	r3, [pc, #16]	; (800b914 <LL_RCC_PLL_GetP+0x18>)
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800b908:	4618      	mov	r0, r3
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	40023800 	.word	0x40023800

0800b918 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b918:	b480      	push	{r7}
 800b91a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b91c:	4b04      	ldr	r3, [pc, #16]	; (800b930 <LL_RCC_PLL_GetDivider+0x18>)
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800b924:	4618      	mov	r0, r3
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	40023800 	.word	0x40023800

0800b934 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b93c:	f000 f820 	bl	800b980 <RCC_GetSystemClockFreq>
 800b940:	4602      	mov	r2, r0
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f840 	bl	800b9d0 <RCC_GetHCLKClockFreq>
 800b950:	4602      	mov	r2, r0
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f84e 	bl	800b9fc <RCC_GetPCLK1ClockFreq>
 800b960:	4602      	mov	r2, r0
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 f85a 	bl	800ba24 <RCC_GetPCLK2ClockFreq>
 800b970:	4602      	mov	r2, r0
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	60da      	str	r2, [r3, #12]
}
 800b976:	bf00      	nop
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b98a:	f7ff ff63 	bl	800b854 <LL_RCC_GetSysClkSource>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b08      	cmp	r3, #8
 800b992:	d00c      	beq.n	800b9ae <RCC_GetSystemClockFreq+0x2e>
 800b994:	2b08      	cmp	r3, #8
 800b996:	d80f      	bhi.n	800b9b8 <RCC_GetSystemClockFreq+0x38>
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <RCC_GetSystemClockFreq+0x22>
 800b99c:	2b04      	cmp	r3, #4
 800b99e:	d003      	beq.n	800b9a8 <RCC_GetSystemClockFreq+0x28>
 800b9a0:	e00a      	b.n	800b9b8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b9a2:	4b09      	ldr	r3, [pc, #36]	; (800b9c8 <RCC_GetSystemClockFreq+0x48>)
 800b9a4:	607b      	str	r3, [r7, #4]
      break;
 800b9a6:	e00a      	b.n	800b9be <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b9a8:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <RCC_GetSystemClockFreq+0x4c>)
 800b9aa:	607b      	str	r3, [r7, #4]
      break;
 800b9ac:	e007      	b.n	800b9be <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b9ae:	2008      	movs	r0, #8
 800b9b0:	f000 f84c 	bl	800ba4c <RCC_PLL_GetFreqDomain_SYS>
 800b9b4:	6078      	str	r0, [r7, #4]
      break;
 800b9b6:	e002      	b.n	800b9be <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b9b8:	4b03      	ldr	r3, [pc, #12]	; (800b9c8 <RCC_GetSystemClockFreq+0x48>)
 800b9ba:	607b      	str	r3, [r7, #4]
      break;
 800b9bc:	bf00      	nop
  }

  return frequency;
 800b9be:	687b      	ldr	r3, [r7, #4]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	00f42400 	.word	0x00f42400
 800b9cc:	007a1200 	.word	0x007a1200

0800b9d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b9d8:	f7ff ff4a 	bl	800b870 <LL_RCC_GetAHBPrescaler>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	091b      	lsrs	r3, r3, #4
 800b9e0:	f003 030f 	and.w	r3, r3, #15
 800b9e4:	4a04      	ldr	r2, [pc, #16]	; (800b9f8 <RCC_GetHCLKClockFreq+0x28>)
 800b9e6:	5cd3      	ldrb	r3, [r2, r3]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	40d3      	lsrs	r3, r2
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	080103dc 	.word	0x080103dc

0800b9fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800ba04:	f7ff ff42 	bl	800b88c <LL_RCC_GetAPB1Prescaler>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	0a9b      	lsrs	r3, r3, #10
 800ba0c:	4a04      	ldr	r2, [pc, #16]	; (800ba20 <RCC_GetPCLK1ClockFreq+0x24>)
 800ba0e:	5cd3      	ldrb	r3, [r2, r3]
 800ba10:	461a      	mov	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	40d3      	lsrs	r3, r2
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	080103ec 	.word	0x080103ec

0800ba24 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800ba2c:	f7ff ff3c 	bl	800b8a8 <LL_RCC_GetAPB2Prescaler>
 800ba30:	4603      	mov	r3, r0
 800ba32:	0b5b      	lsrs	r3, r3, #13
 800ba34:	4a04      	ldr	r2, [pc, #16]	; (800ba48 <RCC_GetPCLK2ClockFreq+0x24>)
 800ba36:	5cd3      	ldrb	r3, [r2, r3]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	40d3      	lsrs	r3, r2
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	080103ec 	.word	0x080103ec

0800ba4c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800ba4c:	b590      	push	{r4, r7, lr}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	617b      	str	r3, [r7, #20]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800ba60:	f7ff ff30 	bl	800b8c4 <LL_RCC_PLL_GetMainSource>
 800ba64:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d004      	beq.n	800ba76 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba72:	d003      	beq.n	800ba7c <RCC_PLL_GetFreqDomain_SYS+0x30>
 800ba74:	e005      	b.n	800ba82 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800ba78:	617b      	str	r3, [r7, #20]
      break;
 800ba7a:	e005      	b.n	800ba88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800ba7c:	4b11      	ldr	r3, [pc, #68]	; (800bac4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800ba7e:	617b      	str	r3, [r7, #20]
      break;
 800ba80:	e002      	b.n	800ba88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800ba82:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800ba84:	617b      	str	r3, [r7, #20]
      break;
 800ba86:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b08      	cmp	r3, #8
 800ba8c:	d113      	bne.n	800bab6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ba8e:	f7ff ff43 	bl	800b918 <LL_RCC_PLL_GetDivider>
 800ba92:	4602      	mov	r2, r0
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	fbb3 f4f2 	udiv	r4, r3, r2
 800ba9a:	f7ff ff21 	bl	800b8e0 <LL_RCC_PLL_GetN>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	fb03 f404 	mul.w	r4, r3, r4
 800baa4:	f7ff ff2a 	bl	800b8fc <LL_RCC_PLL_GetP>
 800baa8:	4603      	mov	r3, r0
 800baaa:	0c1b      	lsrs	r3, r3, #16
 800baac:	3301      	adds	r3, #1
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	fbb4 f3f3 	udiv	r3, r4, r3
 800bab4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800bab6:	693b      	ldr	r3, [r7, #16]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	bd90      	pop	{r4, r7, pc}
 800bac0:	00f42400 	.word	0x00f42400
 800bac4:	007a1200 	.word	0x007a1200

0800bac8 <LL_SPI_IsEnabled>:
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad8:	2b40      	cmp	r3, #64	; 0x40
 800bada:	d101      	bne.n	800bae0 <LL_SPI_IsEnabled+0x18>
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <LL_SPI_IsEnabled+0x1a>
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <LL_SPI_SetCRCPolynomial>:
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	461a      	mov	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	611a      	str	r2, [r3, #16]
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ffd3 	bl	800bac8 <LL_SPI_IsEnabled>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d139      	bne.n	800bb9c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb30:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800bb34:	683a      	ldr	r2, [r7, #0]
 800bb36:	6811      	ldr	r1, [r2, #0]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	6852      	ldr	r2, [r2, #4]
 800bb3c:	4311      	orrs	r1, r2
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	6892      	ldr	r2, [r2, #8]
 800bb42:	4311      	orrs	r1, r2
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	68d2      	ldr	r2, [r2, #12]
 800bb48:	4311      	orrs	r1, r2
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	6912      	ldr	r2, [r2, #16]
 800bb4e:	4311      	orrs	r1, r2
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	6952      	ldr	r2, [r2, #20]
 800bb54:	4311      	orrs	r1, r2
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	6992      	ldr	r2, [r2, #24]
 800bb5a:	4311      	orrs	r1, r2
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	69d2      	ldr	r2, [r2, #28]
 800bb60:	4311      	orrs	r1, r2
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	6a12      	ldr	r2, [r2, #32]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f023 0204 	bic.w	r2, r3, #4
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	0c1b      	lsrs	r3, r3, #16
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb8a:	d105      	bne.n	800bb98 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff ffab 	bl	800baee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	69db      	ldr	r3, [r3, #28]
 800bba0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	61da      	str	r2, [r3, #28]
  return status;
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <LL_TIM_SetPrescaler>:
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bbc2:	bf00      	nop
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <LL_TIM_SetAutoReload>:
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <LL_TIM_SetRepetitionCounter>:
{
 800bbea:	b480      	push	{r7}
 800bbec:	b083      	sub	sp, #12
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bbfa:	bf00      	nop
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <LL_TIM_OC_SetCompareCH1>:
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	635a      	str	r2, [r3, #52]	; 0x34
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <LL_TIM_OC_SetCompareCH2>:
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <LL_TIM_OC_SetCompareCH3>:
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <LL_TIM_OC_SetCompareCH4>:
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	641a      	str	r2, [r3, #64]	; 0x40
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	f043 0201 	orr.w	r2, r3, #1
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	615a      	str	r2, [r3, #20]
}
 800bc8a:	bf00      	nop
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
	...

0800bc98 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a3d      	ldr	r2, [pc, #244]	; (800bda0 <LL_TIM_Init+0x108>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d013      	beq.n	800bcd8 <LL_TIM_Init+0x40>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcb6:	d00f      	beq.n	800bcd8 <LL_TIM_Init+0x40>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a3a      	ldr	r2, [pc, #232]	; (800bda4 <LL_TIM_Init+0x10c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00b      	beq.n	800bcd8 <LL_TIM_Init+0x40>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a39      	ldr	r2, [pc, #228]	; (800bda8 <LL_TIM_Init+0x110>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d007      	beq.n	800bcd8 <LL_TIM_Init+0x40>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a38      	ldr	r2, [pc, #224]	; (800bdac <LL_TIM_Init+0x114>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d003      	beq.n	800bcd8 <LL_TIM_Init+0x40>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a37      	ldr	r2, [pc, #220]	; (800bdb0 <LL_TIM_Init+0x118>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d106      	bne.n	800bce6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a2d      	ldr	r2, [pc, #180]	; (800bda0 <LL_TIM_Init+0x108>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d02b      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf4:	d027      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a2a      	ldr	r2, [pc, #168]	; (800bda4 <LL_TIM_Init+0x10c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d023      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a29      	ldr	r2, [pc, #164]	; (800bda8 <LL_TIM_Init+0x110>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d01f      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a28      	ldr	r2, [pc, #160]	; (800bdac <LL_TIM_Init+0x114>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d01b      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a27      	ldr	r2, [pc, #156]	; (800bdb0 <LL_TIM_Init+0x118>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d017      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a26      	ldr	r2, [pc, #152]	; (800bdb4 <LL_TIM_Init+0x11c>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d013      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a25      	ldr	r2, [pc, #148]	; (800bdb8 <LL_TIM_Init+0x120>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d00f      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a24      	ldr	r2, [pc, #144]	; (800bdbc <LL_TIM_Init+0x124>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d00b      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a23      	ldr	r2, [pc, #140]	; (800bdc0 <LL_TIM_Init+0x128>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d007      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a22      	ldr	r2, [pc, #136]	; (800bdc4 <LL_TIM_Init+0x12c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d003      	beq.n	800bd46 <LL_TIM_Init+0xae>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a21      	ldr	r2, [pc, #132]	; (800bdc8 <LL_TIM_Init+0x130>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d106      	bne.n	800bd54 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7ff ff34 	bl	800bbce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff ff20 	bl	800bbb2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a0a      	ldr	r2, [pc, #40]	; (800bda0 <LL_TIM_Init+0x108>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d003      	beq.n	800bd82 <LL_TIM_Init+0xea>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4a0c      	ldr	r2, [pc, #48]	; (800bdb0 <LL_TIM_Init+0x118>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d105      	bne.n	800bd8e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f7ff ff2e 	bl	800bbea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7ff ff71 	bl	800bc76 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	40010000 	.word	0x40010000
 800bda4:	40000400 	.word	0x40000400
 800bda8:	40000800 	.word	0x40000800
 800bdac:	40000c00 	.word	0x40000c00
 800bdb0:	40010400 	.word	0x40010400
 800bdb4:	40014000 	.word	0x40014000
 800bdb8:	40014400 	.word	0x40014400
 800bdbc:	40014800 	.word	0x40014800
 800bdc0:	40001800 	.word	0x40001800
 800bdc4:	40001c00 	.word	0x40001c00
 800bdc8:	40002000 	.word	0x40002000

0800bdcc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bde2:	d027      	beq.n	800be34 <LL_TIM_OC_Init+0x68>
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdea:	d82a      	bhi.n	800be42 <LL_TIM_OC_Init+0x76>
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf2:	d018      	beq.n	800be26 <LL_TIM_OC_Init+0x5a>
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdfa:	d822      	bhi.n	800be42 <LL_TIM_OC_Init+0x76>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d003      	beq.n	800be0a <LL_TIM_OC_Init+0x3e>
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b10      	cmp	r3, #16
 800be06:	d007      	beq.n	800be18 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800be08:	e01b      	b.n	800be42 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 f81f 	bl	800be50 <OC1Config>
 800be12:	4603      	mov	r3, r0
 800be14:	75fb      	strb	r3, [r7, #23]
      break;
 800be16:	e015      	b.n	800be44 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 f884 	bl	800bf28 <OC2Config>
 800be20:	4603      	mov	r3, r0
 800be22:	75fb      	strb	r3, [r7, #23]
      break;
 800be24:	e00e      	b.n	800be44 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f8ed 	bl	800c008 <OC3Config>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]
      break;
 800be32:	e007      	b.n	800be44 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f000 f956 	bl	800c0e8 <OC4Config>
 800be3c:	4603      	mov	r3, r0
 800be3e:	75fb      	strb	r3, [r7, #23]
      break;
 800be40:	e000      	b.n	800be44 <LL_TIM_OC_Init+0x78>
      break;
 800be42:	bf00      	nop
  }

  return result;
 800be44:	7dfb      	ldrb	r3, [r7, #23]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	f023 0201 	bic.w	r2, r3, #1
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f023 0202 	bic.w	r2, r3, #2
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	4313      	orrs	r3, r2
 800be9a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f023 0201 	bic.w	r2, r3, #1
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a1c      	ldr	r2, [pc, #112]	; (800bf20 <OC1Config+0xd0>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d003      	beq.n	800beba <OC1Config+0x6a>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a1b      	ldr	r2, [pc, #108]	; (800bf24 <OC1Config+0xd4>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d11e      	bne.n	800bef8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f023 0208 	bic.w	r2, r3, #8
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4313      	orrs	r3, r2
 800bec8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f023 0204 	bic.w	r2, r3, #4
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4313      	orrs	r3, r2
 800bed8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	4313      	orrs	r3, r2
 800bef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff fe7b 	bl	800bc06 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	40010000 	.word	0x40010000
 800bf24:	40010400 	.word	0x40010400

0800bf28 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	f023 0210 	bic.w	r2, r3, #16
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	4313      	orrs	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f023 0220 	bic.w	r2, r3, #32
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	011b      	lsls	r3, r3, #4
 800bf74:	4313      	orrs	r3, r2
 800bf76:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f023 0210 	bic.w	r2, r3, #16
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	011b      	lsls	r3, r3, #4
 800bf84:	4313      	orrs	r3, r2
 800bf86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a1d      	ldr	r2, [pc, #116]	; (800c000 <OC2Config+0xd8>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d003      	beq.n	800bf98 <OC2Config+0x70>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a1c      	ldr	r2, [pc, #112]	; (800c004 <OC2Config+0xdc>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d11f      	bne.n	800bfd8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	019b      	lsls	r3, r3, #6
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	019b      	lsls	r3, r3, #6
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	69db      	ldr	r3, [r3, #28]
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff fe19 	bl	800bc22 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	697a      	ldr	r2, [r7, #20]
 800bff4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	40010000 	.word	0x40010000
 800c004:	40010400 	.word	0x40010400

0800c008 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f023 0303 	bic.w	r3, r3, #3
 800c036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4313      	orrs	r3, r2
 800c044:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	021b      	lsls	r3, r3, #8
 800c052:	4313      	orrs	r3, r2
 800c054:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	021b      	lsls	r3, r3, #8
 800c062:	4313      	orrs	r3, r2
 800c064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a1d      	ldr	r2, [pc, #116]	; (800c0e0 <OC3Config+0xd8>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d003      	beq.n	800c076 <OC3Config+0x6e>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a1c      	ldr	r2, [pc, #112]	; (800c0e4 <OC3Config+0xdc>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d11f      	bne.n	800c0b6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	695b      	ldr	r3, [r3, #20]
 800c080:	029b      	lsls	r3, r3, #10
 800c082:	4313      	orrs	r3, r2
 800c084:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	029b      	lsls	r3, r3, #10
 800c092:	4313      	orrs	r3, r2
 800c094:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	011b      	lsls	r3, r3, #4
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	015b      	lsls	r3, r3, #5
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	693a      	ldr	r2, [r7, #16]
 800c0ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff fdb8 	bl	800bc3e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	40010000 	.word	0x40010000
 800c0e4:	40010400 	.word	0x40010400

0800c0e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b086      	sub	sp, #24
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	021b      	lsls	r3, r3, #8
 800c124:	4313      	orrs	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	031b      	lsls	r3, r3, #12
 800c134:	4313      	orrs	r3, r2
 800c136:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	031b      	lsls	r3, r3, #12
 800c144:	4313      	orrs	r3, r2
 800c146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a11      	ldr	r2, [pc, #68]	; (800c190 <OC4Config+0xa8>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d003      	beq.n	800c158 <OC4Config+0x70>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a10      	ldr	r2, [pc, #64]	; (800c194 <OC4Config+0xac>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d107      	bne.n	800c168 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	019b      	lsls	r3, r3, #6
 800c164:	4313      	orrs	r3, r2
 800c166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff fd6d 	bl	800bc5a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	40010000 	.word	0x40010000
 800c194:	40010400 	.word	0x40010400

0800c198 <LL_USART_IsEnabled>:
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1ac:	bf0c      	ite	eq
 800c1ae:	2301      	moveq	r3, #1
 800c1b0:	2300      	movne	r3, #0
 800c1b2:	b2db      	uxtb	r3, r3
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <LL_USART_SetStopBitsLength>:
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	431a      	orrs	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	611a      	str	r2, [r3, #16]
}
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <LL_USART_SetHWFlowCtrl>:
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	615a      	str	r2, [r3, #20]
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <LL_USART_SetBaudRate>:
{
 800c20c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c210:	b0c0      	sub	sp, #256	; 0x100
 800c212:	af00      	add	r7, sp, #0
 800c214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c218:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800c21c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c220:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c22c:	f040 810c 	bne.w	800c448 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800c230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c234:	2200      	movs	r2, #0
 800c236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c23a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c23e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c242:	4622      	mov	r2, r4
 800c244:	462b      	mov	r3, r5
 800c246:	1891      	adds	r1, r2, r2
 800c248:	6639      	str	r1, [r7, #96]	; 0x60
 800c24a:	415b      	adcs	r3, r3
 800c24c:	667b      	str	r3, [r7, #100]	; 0x64
 800c24e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c252:	4621      	mov	r1, r4
 800c254:	eb12 0801 	adds.w	r8, r2, r1
 800c258:	4629      	mov	r1, r5
 800c25a:	eb43 0901 	adc.w	r9, r3, r1
 800c25e:	f04f 0200 	mov.w	r2, #0
 800c262:	f04f 0300 	mov.w	r3, #0
 800c266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c26a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c26e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c272:	4690      	mov	r8, r2
 800c274:	4699      	mov	r9, r3
 800c276:	4623      	mov	r3, r4
 800c278:	eb18 0303 	adds.w	r3, r8, r3
 800c27c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c280:	462b      	mov	r3, r5
 800c282:	eb49 0303 	adc.w	r3, r9, r3
 800c286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c28a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c28e:	2200      	movs	r2, #0
 800c290:	469a      	mov	sl, r3
 800c292:	4693      	mov	fp, r2
 800c294:	eb1a 030a 	adds.w	r3, sl, sl
 800c298:	65bb      	str	r3, [r7, #88]	; 0x58
 800c29a:	eb4b 030b 	adc.w	r3, fp, fp
 800c29e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c2a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c2a8:	f7f4 fc7e 	bl	8000ba8 <__aeabi_uldivmod>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4b64      	ldr	r3, [pc, #400]	; (800c444 <LL_USART_SetBaudRate+0x238>)
 800c2b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c2b6:	095b      	lsrs	r3, r3, #5
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	b29c      	uxth	r4, r3
 800c2be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c2c8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c2cc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	464b      	mov	r3, r9
 800c2d4:	1891      	adds	r1, r2, r2
 800c2d6:	6539      	str	r1, [r7, #80]	; 0x50
 800c2d8:	415b      	adcs	r3, r3
 800c2da:	657b      	str	r3, [r7, #84]	; 0x54
 800c2dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c2e0:	4641      	mov	r1, r8
 800c2e2:	1851      	adds	r1, r2, r1
 800c2e4:	64b9      	str	r1, [r7, #72]	; 0x48
 800c2e6:	4649      	mov	r1, r9
 800c2e8:	414b      	adcs	r3, r1
 800c2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2ec:	f04f 0200 	mov.w	r2, #0
 800c2f0:	f04f 0300 	mov.w	r3, #0
 800c2f4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800c2f8:	4659      	mov	r1, fp
 800c2fa:	00cb      	lsls	r3, r1, #3
 800c2fc:	4651      	mov	r1, sl
 800c2fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c302:	4651      	mov	r1, sl
 800c304:	00ca      	lsls	r2, r1, #3
 800c306:	4610      	mov	r0, r2
 800c308:	4619      	mov	r1, r3
 800c30a:	4603      	mov	r3, r0
 800c30c:	4642      	mov	r2, r8
 800c30e:	189b      	adds	r3, r3, r2
 800c310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c314:	464b      	mov	r3, r9
 800c316:	460a      	mov	r2, r1
 800c318:	eb42 0303 	adc.w	r3, r2, r3
 800c31c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c324:	2200      	movs	r2, #0
 800c326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c32a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c32e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c332:	460b      	mov	r3, r1
 800c334:	18db      	adds	r3, r3, r3
 800c336:	643b      	str	r3, [r7, #64]	; 0x40
 800c338:	4613      	mov	r3, r2
 800c33a:	eb42 0303 	adc.w	r3, r2, r3
 800c33e:	647b      	str	r3, [r7, #68]	; 0x44
 800c340:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c344:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c348:	f7f4 fc2e 	bl	8000ba8 <__aeabi_uldivmod>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	4611      	mov	r1, r2
 800c352:	4b3c      	ldr	r3, [pc, #240]	; (800c444 <LL_USART_SetBaudRate+0x238>)
 800c354:	fba3 2301 	umull	r2, r3, r3, r1
 800c358:	095b      	lsrs	r3, r3, #5
 800c35a:	2264      	movs	r2, #100	; 0x64
 800c35c:	fb02 f303 	mul.w	r3, r2, r3
 800c360:	1acb      	subs	r3, r1, r3
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c368:	4b36      	ldr	r3, [pc, #216]	; (800c444 <LL_USART_SetBaudRate+0x238>)
 800c36a:	fba3 2302 	umull	r2, r3, r3, r2
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	b29b      	uxth	r3, r3
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	b29b      	uxth	r3, r3
 800c376:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	4423      	add	r3, r4
 800c37e:	b29c      	uxth	r4, r3
 800c380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c384:	2200      	movs	r2, #0
 800c386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c38a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c38e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800c392:	4642      	mov	r2, r8
 800c394:	464b      	mov	r3, r9
 800c396:	1891      	adds	r1, r2, r2
 800c398:	63b9      	str	r1, [r7, #56]	; 0x38
 800c39a:	415b      	adcs	r3, r3
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c39e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	1851      	adds	r1, r2, r1
 800c3a6:	6339      	str	r1, [r7, #48]	; 0x30
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	414b      	adcs	r3, r1
 800c3ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ae:	f04f 0200 	mov.w	r2, #0
 800c3b2:	f04f 0300 	mov.w	r3, #0
 800c3b6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c3ba:	4659      	mov	r1, fp
 800c3bc:	00cb      	lsls	r3, r1, #3
 800c3be:	4651      	mov	r1, sl
 800c3c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3c4:	4651      	mov	r1, sl
 800c3c6:	00ca      	lsls	r2, r1, #3
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	4642      	mov	r2, r8
 800c3d0:	189b      	adds	r3, r3, r2
 800c3d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3d6:	464b      	mov	r3, r9
 800c3d8:	460a      	mov	r2, r1
 800c3da:	eb42 0303 	adc.w	r3, r2, r3
 800c3de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c3e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3ec:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c3f0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	18db      	adds	r3, r3, r3
 800c3f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	eb42 0303 	adc.w	r3, r2, r3
 800c400:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c406:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800c40a:	f7f4 fbcd 	bl	8000ba8 <__aeabi_uldivmod>
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <LL_USART_SetBaudRate+0x238>)
 800c414:	fba3 1302 	umull	r1, r3, r3, r2
 800c418:	095b      	lsrs	r3, r3, #5
 800c41a:	2164      	movs	r1, #100	; 0x64
 800c41c:	fb01 f303 	mul.w	r3, r1, r3
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	00db      	lsls	r3, r3, #3
 800c424:	3332      	adds	r3, #50	; 0x32
 800c426:	4a07      	ldr	r2, [pc, #28]	; (800c444 <LL_USART_SetBaudRate+0x238>)
 800c428:	fba2 2303 	umull	r2, r3, r2, r3
 800c42c:	095b      	lsrs	r3, r3, #5
 800c42e:	b29b      	uxth	r3, r3
 800c430:	f003 0307 	and.w	r3, r3, #7
 800c434:	b29b      	uxth	r3, r3
 800c436:	4423      	add	r3, r4
 800c438:	b29b      	uxth	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c440:	609a      	str	r2, [r3, #8]
}
 800c442:	e107      	b.n	800c654 <LL_USART_SetBaudRate+0x448>
 800c444:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800c448:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c44c:	2200      	movs	r2, #0
 800c44e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c452:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c456:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800c45a:	4642      	mov	r2, r8
 800c45c:	464b      	mov	r3, r9
 800c45e:	1891      	adds	r1, r2, r2
 800c460:	6239      	str	r1, [r7, #32]
 800c462:	415b      	adcs	r3, r3
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
 800c466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c46a:	4641      	mov	r1, r8
 800c46c:	1854      	adds	r4, r2, r1
 800c46e:	4649      	mov	r1, r9
 800c470:	eb43 0501 	adc.w	r5, r3, r1
 800c474:	f04f 0200 	mov.w	r2, #0
 800c478:	f04f 0300 	mov.w	r3, #0
 800c47c:	00eb      	lsls	r3, r5, #3
 800c47e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c482:	00e2      	lsls	r2, r4, #3
 800c484:	4614      	mov	r4, r2
 800c486:	461d      	mov	r5, r3
 800c488:	4643      	mov	r3, r8
 800c48a:	18e3      	adds	r3, r4, r3
 800c48c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c490:	464b      	mov	r3, r9
 800c492:	eb45 0303 	adc.w	r3, r5, r3
 800c496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c49a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c4a8:	f04f 0200 	mov.w	r2, #0
 800c4ac:	f04f 0300 	mov.w	r3, #0
 800c4b0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	008b      	lsls	r3, r1, #2
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4be:	4621      	mov	r1, r4
 800c4c0:	008a      	lsls	r2, r1, #2
 800c4c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800c4c6:	f7f4 fb6f 	bl	8000ba8 <__aeabi_uldivmod>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4b64      	ldr	r3, [pc, #400]	; (800c660 <LL_USART_SetBaudRate+0x454>)
 800c4d0:	fba3 2302 	umull	r2, r3, r3, r2
 800c4d4:	095b      	lsrs	r3, r3, #5
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	011b      	lsls	r3, r3, #4
 800c4da:	b29c      	uxth	r4, r3
 800c4dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c4ea:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800c4ee:	4642      	mov	r2, r8
 800c4f0:	464b      	mov	r3, r9
 800c4f2:	1891      	adds	r1, r2, r2
 800c4f4:	61b9      	str	r1, [r7, #24]
 800c4f6:	415b      	adcs	r3, r3
 800c4f8:	61fb      	str	r3, [r7, #28]
 800c4fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4fe:	4641      	mov	r1, r8
 800c500:	1851      	adds	r1, r2, r1
 800c502:	6139      	str	r1, [r7, #16]
 800c504:	4649      	mov	r1, r9
 800c506:	414b      	adcs	r3, r1
 800c508:	617b      	str	r3, [r7, #20]
 800c50a:	f04f 0200 	mov.w	r2, #0
 800c50e:	f04f 0300 	mov.w	r3, #0
 800c512:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c516:	4659      	mov	r1, fp
 800c518:	00cb      	lsls	r3, r1, #3
 800c51a:	4651      	mov	r1, sl
 800c51c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c520:	4651      	mov	r1, sl
 800c522:	00ca      	lsls	r2, r1, #3
 800c524:	4610      	mov	r0, r2
 800c526:	4619      	mov	r1, r3
 800c528:	4603      	mov	r3, r0
 800c52a:	4642      	mov	r2, r8
 800c52c:	189b      	adds	r3, r3, r2
 800c52e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c532:	464b      	mov	r3, r9
 800c534:	460a      	mov	r2, r1
 800c536:	eb42 0303 	adc.w	r3, r2, r3
 800c53a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c53e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c542:	2200      	movs	r2, #0
 800c544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c548:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c54c:	f04f 0200 	mov.w	r2, #0
 800c550:	f04f 0300 	mov.w	r3, #0
 800c554:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800c558:	4649      	mov	r1, r9
 800c55a:	008b      	lsls	r3, r1, #2
 800c55c:	4641      	mov	r1, r8
 800c55e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c562:	4641      	mov	r1, r8
 800c564:	008a      	lsls	r2, r1, #2
 800c566:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800c56a:	f7f4 fb1d 	bl	8000ba8 <__aeabi_uldivmod>
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4b3b      	ldr	r3, [pc, #236]	; (800c660 <LL_USART_SetBaudRate+0x454>)
 800c574:	fba3 1302 	umull	r1, r3, r3, r2
 800c578:	095b      	lsrs	r3, r3, #5
 800c57a:	2164      	movs	r1, #100	; 0x64
 800c57c:	fb01 f303 	mul.w	r3, r1, r3
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	3332      	adds	r3, #50	; 0x32
 800c586:	4a36      	ldr	r2, [pc, #216]	; (800c660 <LL_USART_SetBaudRate+0x454>)
 800c588:	fba2 2303 	umull	r2, r3, r2, r3
 800c58c:	095b      	lsrs	r3, r3, #5
 800c58e:	b29b      	uxth	r3, r3
 800c590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c594:	b29b      	uxth	r3, r3
 800c596:	4423      	add	r3, r4
 800c598:	b29c      	uxth	r4, r3
 800c59a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c59e:	2200      	movs	r2, #0
 800c5a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c5a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c5a8:	4642      	mov	r2, r8
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	1891      	adds	r1, r2, r2
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	415b      	adcs	r3, r3
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	1851      	adds	r1, r2, r1
 800c5bc:	6039      	str	r1, [r7, #0]
 800c5be:	4649      	mov	r1, r9
 800c5c0:	414b      	adcs	r3, r1
 800c5c2:	607b      	str	r3, [r7, #4]
 800c5c4:	f04f 0200 	mov.w	r2, #0
 800c5c8:	f04f 0300 	mov.w	r3, #0
 800c5cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c5d0:	4659      	mov	r1, fp
 800c5d2:	00cb      	lsls	r3, r1, #3
 800c5d4:	4651      	mov	r1, sl
 800c5d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5da:	4651      	mov	r1, sl
 800c5dc:	00ca      	lsls	r2, r1, #3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4642      	mov	r2, r8
 800c5e6:	189b      	adds	r3, r3, r2
 800c5e8:	673b      	str	r3, [r7, #112]	; 0x70
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	460a      	mov	r2, r1
 800c5ee:	eb42 0303 	adc.w	r3, r2, r3
 800c5f2:	677b      	str	r3, [r7, #116]	; 0x74
 800c5f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5fe:	f04f 0200 	mov.w	r2, #0
 800c602:	f04f 0300 	mov.w	r3, #0
 800c606:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800c60a:	4649      	mov	r1, r9
 800c60c:	008b      	lsls	r3, r1, #2
 800c60e:	4641      	mov	r1, r8
 800c610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c614:	4641      	mov	r1, r8
 800c616:	008a      	lsls	r2, r1, #2
 800c618:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800c61c:	f7f4 fac4 	bl	8000ba8 <__aeabi_uldivmod>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4b0e      	ldr	r3, [pc, #56]	; (800c660 <LL_USART_SetBaudRate+0x454>)
 800c626:	fba3 1302 	umull	r1, r3, r3, r2
 800c62a:	095b      	lsrs	r3, r3, #5
 800c62c:	2164      	movs	r1, #100	; 0x64
 800c62e:	fb01 f303 	mul.w	r3, r1, r3
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	011b      	lsls	r3, r3, #4
 800c636:	3332      	adds	r3, #50	; 0x32
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <LL_USART_SetBaudRate+0x454>)
 800c63a:	fba2 2303 	umull	r2, r3, r2, r3
 800c63e:	095b      	lsrs	r3, r3, #5
 800c640:	b29b      	uxth	r3, r3
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	b29b      	uxth	r3, r3
 800c648:	4423      	add	r3, r4
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	461a      	mov	r2, r3
 800c64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c652:	609a      	str	r2, [r3, #8]
}
 800c654:	bf00      	nop
 800c656:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c65a:	46bd      	mov	sp, r7
 800c65c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c660:	51eb851f 	.word	0x51eb851f

0800c664 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c672:	2300      	movs	r3, #0
 800c674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff fd8e 	bl	800c198 <LL_USART_IsEnabled>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d15e      	bne.n	800c740 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c68a:	f023 030c 	bic.w	r3, r3, #12
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	6851      	ldr	r1, [r2, #4]
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	68d2      	ldr	r2, [r2, #12]
 800c696:	4311      	orrs	r1, r2
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	6912      	ldr	r2, [r2, #16]
 800c69c:	4311      	orrs	r1, r2
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	6992      	ldr	r2, [r2, #24]
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff fd85 	bl	800c1c0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f7ff fd92 	bl	800c1e6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c6c2:	f107 0308 	add.w	r3, r7, #8
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff f934 	bl	800b934 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a1f      	ldr	r2, [pc, #124]	; (800c74c <LL_USART_Init+0xe8>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d102      	bne.n	800c6da <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	61bb      	str	r3, [r7, #24]
 800c6d8:	e021      	b.n	800c71e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a1c      	ldr	r2, [pc, #112]	; (800c750 <LL_USART_Init+0xec>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d102      	bne.n	800c6e8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	61bb      	str	r3, [r7, #24]
 800c6e6:	e01a      	b.n	800c71e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a1a      	ldr	r2, [pc, #104]	; (800c754 <LL_USART_Init+0xf0>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d102      	bne.n	800c6f6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	61bb      	str	r3, [r7, #24]
 800c6f4:	e013      	b.n	800c71e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a17      	ldr	r2, [pc, #92]	; (800c758 <LL_USART_Init+0xf4>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d102      	bne.n	800c704 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	61bb      	str	r3, [r7, #24]
 800c702:	e00c      	b.n	800c71e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a15      	ldr	r2, [pc, #84]	; (800c75c <LL_USART_Init+0xf8>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d102      	bne.n	800c712 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	61bb      	str	r3, [r7, #24]
 800c710:	e005      	b.n	800c71e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a12      	ldr	r2, [pc, #72]	; (800c760 <LL_USART_Init+0xfc>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d101      	bne.n	800c71e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00d      	beq.n	800c740 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d009      	beq.n	800c740 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800c72c:	2300      	movs	r3, #0
 800c72e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	69b9      	ldr	r1, [r7, #24]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7ff fd66 	bl	800c20c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c740:	7ffb      	ldrb	r3, [r7, #31]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3720      	adds	r7, #32
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40011000 	.word	0x40011000
 800c750:	40004400 	.word	0x40004400
 800c754:	40004800 	.word	0x40004800
 800c758:	40011400 	.word	0x40011400
 800c75c:	40004c00 	.word	0x40004c00
 800c760:	40005000 	.word	0x40005000

0800c764 <__errno>:
 800c764:	4b01      	ldr	r3, [pc, #4]	; (800c76c <__errno+0x8>)
 800c766:	6818      	ldr	r0, [r3, #0]
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	20000010 	.word	0x20000010

0800c770 <__libc_init_array>:
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	4d0d      	ldr	r5, [pc, #52]	; (800c7a8 <__libc_init_array+0x38>)
 800c774:	4c0d      	ldr	r4, [pc, #52]	; (800c7ac <__libc_init_array+0x3c>)
 800c776:	1b64      	subs	r4, r4, r5
 800c778:	10a4      	asrs	r4, r4, #2
 800c77a:	2600      	movs	r6, #0
 800c77c:	42a6      	cmp	r6, r4
 800c77e:	d109      	bne.n	800c794 <__libc_init_array+0x24>
 800c780:	4d0b      	ldr	r5, [pc, #44]	; (800c7b0 <__libc_init_array+0x40>)
 800c782:	4c0c      	ldr	r4, [pc, #48]	; (800c7b4 <__libc_init_array+0x44>)
 800c784:	f003 fc22 	bl	800ffcc <_init>
 800c788:	1b64      	subs	r4, r4, r5
 800c78a:	10a4      	asrs	r4, r4, #2
 800c78c:	2600      	movs	r6, #0
 800c78e:	42a6      	cmp	r6, r4
 800c790:	d105      	bne.n	800c79e <__libc_init_array+0x2e>
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	f855 3b04 	ldr.w	r3, [r5], #4
 800c798:	4798      	blx	r3
 800c79a:	3601      	adds	r6, #1
 800c79c:	e7ee      	b.n	800c77c <__libc_init_array+0xc>
 800c79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7a2:	4798      	blx	r3
 800c7a4:	3601      	adds	r6, #1
 800c7a6:	e7f2      	b.n	800c78e <__libc_init_array+0x1e>
 800c7a8:	0801083c 	.word	0x0801083c
 800c7ac:	0801083c 	.word	0x0801083c
 800c7b0:	0801083c 	.word	0x0801083c
 800c7b4:	08010840 	.word	0x08010840

0800c7b8 <memset>:
 800c7b8:	4402      	add	r2, r0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d100      	bne.n	800c7c2 <memset+0xa>
 800c7c0:	4770      	bx	lr
 800c7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7c6:	e7f9      	b.n	800c7bc <memset+0x4>

0800c7c8 <__cvt>:
 800c7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7cc:	ec55 4b10 	vmov	r4, r5, d0
 800c7d0:	2d00      	cmp	r5, #0
 800c7d2:	460e      	mov	r6, r1
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	462b      	mov	r3, r5
 800c7d8:	bfbb      	ittet	lt
 800c7da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c7de:	461d      	movlt	r5, r3
 800c7e0:	2300      	movge	r3, #0
 800c7e2:	232d      	movlt	r3, #45	; 0x2d
 800c7e4:	700b      	strb	r3, [r1, #0]
 800c7e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c7ec:	4691      	mov	r9, r2
 800c7ee:	f023 0820 	bic.w	r8, r3, #32
 800c7f2:	bfbc      	itt	lt
 800c7f4:	4622      	movlt	r2, r4
 800c7f6:	4614      	movlt	r4, r2
 800c7f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7fc:	d005      	beq.n	800c80a <__cvt+0x42>
 800c7fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c802:	d100      	bne.n	800c806 <__cvt+0x3e>
 800c804:	3601      	adds	r6, #1
 800c806:	2102      	movs	r1, #2
 800c808:	e000      	b.n	800c80c <__cvt+0x44>
 800c80a:	2103      	movs	r1, #3
 800c80c:	ab03      	add	r3, sp, #12
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	ab02      	add	r3, sp, #8
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	ec45 4b10 	vmov	d0, r4, r5
 800c818:	4653      	mov	r3, sl
 800c81a:	4632      	mov	r2, r6
 800c81c:	f000 fe18 	bl	800d450 <_dtoa_r>
 800c820:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c824:	4607      	mov	r7, r0
 800c826:	d102      	bne.n	800c82e <__cvt+0x66>
 800c828:	f019 0f01 	tst.w	r9, #1
 800c82c:	d022      	beq.n	800c874 <__cvt+0xac>
 800c82e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c832:	eb07 0906 	add.w	r9, r7, r6
 800c836:	d110      	bne.n	800c85a <__cvt+0x92>
 800c838:	783b      	ldrb	r3, [r7, #0]
 800c83a:	2b30      	cmp	r3, #48	; 0x30
 800c83c:	d10a      	bne.n	800c854 <__cvt+0x8c>
 800c83e:	2200      	movs	r2, #0
 800c840:	2300      	movs	r3, #0
 800c842:	4620      	mov	r0, r4
 800c844:	4629      	mov	r1, r5
 800c846:	f7f4 f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c84a:	b918      	cbnz	r0, 800c854 <__cvt+0x8c>
 800c84c:	f1c6 0601 	rsb	r6, r6, #1
 800c850:	f8ca 6000 	str.w	r6, [sl]
 800c854:	f8da 3000 	ldr.w	r3, [sl]
 800c858:	4499      	add	r9, r3
 800c85a:	2200      	movs	r2, #0
 800c85c:	2300      	movs	r3, #0
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	f7f4 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 800c866:	b108      	cbz	r0, 800c86c <__cvt+0xa4>
 800c868:	f8cd 900c 	str.w	r9, [sp, #12]
 800c86c:	2230      	movs	r2, #48	; 0x30
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	454b      	cmp	r3, r9
 800c872:	d307      	bcc.n	800c884 <__cvt+0xbc>
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c878:	1bdb      	subs	r3, r3, r7
 800c87a:	4638      	mov	r0, r7
 800c87c:	6013      	str	r3, [r2, #0]
 800c87e:	b004      	add	sp, #16
 800c880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c884:	1c59      	adds	r1, r3, #1
 800c886:	9103      	str	r1, [sp, #12]
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	e7f0      	b.n	800c86e <__cvt+0xa6>

0800c88c <__exponent>:
 800c88c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c88e:	4603      	mov	r3, r0
 800c890:	2900      	cmp	r1, #0
 800c892:	bfb8      	it	lt
 800c894:	4249      	neglt	r1, r1
 800c896:	f803 2b02 	strb.w	r2, [r3], #2
 800c89a:	bfb4      	ite	lt
 800c89c:	222d      	movlt	r2, #45	; 0x2d
 800c89e:	222b      	movge	r2, #43	; 0x2b
 800c8a0:	2909      	cmp	r1, #9
 800c8a2:	7042      	strb	r2, [r0, #1]
 800c8a4:	dd2a      	ble.n	800c8fc <__exponent+0x70>
 800c8a6:	f10d 0407 	add.w	r4, sp, #7
 800c8aa:	46a4      	mov	ip, r4
 800c8ac:	270a      	movs	r7, #10
 800c8ae:	46a6      	mov	lr, r4
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c8b6:	fb07 1516 	mls	r5, r7, r6, r1
 800c8ba:	3530      	adds	r5, #48	; 0x30
 800c8bc:	2a63      	cmp	r2, #99	; 0x63
 800c8be:	f104 34ff 	add.w	r4, r4, #4294967295
 800c8c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	dcf1      	bgt.n	800c8ae <__exponent+0x22>
 800c8ca:	3130      	adds	r1, #48	; 0x30
 800c8cc:	f1ae 0502 	sub.w	r5, lr, #2
 800c8d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c8d4:	1c44      	adds	r4, r0, #1
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4561      	cmp	r1, ip
 800c8da:	d30a      	bcc.n	800c8f2 <__exponent+0x66>
 800c8dc:	f10d 0209 	add.w	r2, sp, #9
 800c8e0:	eba2 020e 	sub.w	r2, r2, lr
 800c8e4:	4565      	cmp	r5, ip
 800c8e6:	bf88      	it	hi
 800c8e8:	2200      	movhi	r2, #0
 800c8ea:	4413      	add	r3, r2
 800c8ec:	1a18      	subs	r0, r3, r0
 800c8ee:	b003      	add	sp, #12
 800c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c8fa:	e7ed      	b.n	800c8d8 <__exponent+0x4c>
 800c8fc:	2330      	movs	r3, #48	; 0x30
 800c8fe:	3130      	adds	r1, #48	; 0x30
 800c900:	7083      	strb	r3, [r0, #2]
 800c902:	70c1      	strb	r1, [r0, #3]
 800c904:	1d03      	adds	r3, r0, #4
 800c906:	e7f1      	b.n	800c8ec <__exponent+0x60>

0800c908 <_printf_float>:
 800c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90c:	ed2d 8b02 	vpush	{d8}
 800c910:	b08d      	sub	sp, #52	; 0x34
 800c912:	460c      	mov	r4, r1
 800c914:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c918:	4616      	mov	r6, r2
 800c91a:	461f      	mov	r7, r3
 800c91c:	4605      	mov	r5, r0
 800c91e:	f001 fd3d 	bl	800e39c <_localeconv_r>
 800c922:	f8d0 a000 	ldr.w	sl, [r0]
 800c926:	4650      	mov	r0, sl
 800c928:	f7f3 fc52 	bl	80001d0 <strlen>
 800c92c:	2300      	movs	r3, #0
 800c92e:	930a      	str	r3, [sp, #40]	; 0x28
 800c930:	6823      	ldr	r3, [r4, #0]
 800c932:	9305      	str	r3, [sp, #20]
 800c934:	f8d8 3000 	ldr.w	r3, [r8]
 800c938:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c93c:	3307      	adds	r3, #7
 800c93e:	f023 0307 	bic.w	r3, r3, #7
 800c942:	f103 0208 	add.w	r2, r3, #8
 800c946:	f8c8 2000 	str.w	r2, [r8]
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c952:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c956:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c95a:	9307      	str	r3, [sp, #28]
 800c95c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c960:	ee08 0a10 	vmov	s16, r0
 800c964:	4b9f      	ldr	r3, [pc, #636]	; (800cbe4 <_printf_float+0x2dc>)
 800c966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c96a:	f04f 32ff 	mov.w	r2, #4294967295
 800c96e:	f7f4 f8dd 	bl	8000b2c <__aeabi_dcmpun>
 800c972:	bb88      	cbnz	r0, 800c9d8 <_printf_float+0xd0>
 800c974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c978:	4b9a      	ldr	r3, [pc, #616]	; (800cbe4 <_printf_float+0x2dc>)
 800c97a:	f04f 32ff 	mov.w	r2, #4294967295
 800c97e:	f7f4 f8b7 	bl	8000af0 <__aeabi_dcmple>
 800c982:	bb48      	cbnz	r0, 800c9d8 <_printf_float+0xd0>
 800c984:	2200      	movs	r2, #0
 800c986:	2300      	movs	r3, #0
 800c988:	4640      	mov	r0, r8
 800c98a:	4649      	mov	r1, r9
 800c98c:	f7f4 f8a6 	bl	8000adc <__aeabi_dcmplt>
 800c990:	b110      	cbz	r0, 800c998 <_printf_float+0x90>
 800c992:	232d      	movs	r3, #45	; 0x2d
 800c994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c998:	4b93      	ldr	r3, [pc, #588]	; (800cbe8 <_printf_float+0x2e0>)
 800c99a:	4894      	ldr	r0, [pc, #592]	; (800cbec <_printf_float+0x2e4>)
 800c99c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c9a0:	bf94      	ite	ls
 800c9a2:	4698      	movls	r8, r3
 800c9a4:	4680      	movhi	r8, r0
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	6123      	str	r3, [r4, #16]
 800c9aa:	9b05      	ldr	r3, [sp, #20]
 800c9ac:	f023 0204 	bic.w	r2, r3, #4
 800c9b0:	6022      	str	r2, [r4, #0]
 800c9b2:	f04f 0900 	mov.w	r9, #0
 800c9b6:	9700      	str	r7, [sp, #0]
 800c9b8:	4633      	mov	r3, r6
 800c9ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f000 f9d8 	bl	800cd74 <_printf_common>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	f040 8090 	bne.w	800caea <_printf_float+0x1e2>
 800c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ce:	b00d      	add	sp, #52	; 0x34
 800c9d0:	ecbd 8b02 	vpop	{d8}
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	4642      	mov	r2, r8
 800c9da:	464b      	mov	r3, r9
 800c9dc:	4640      	mov	r0, r8
 800c9de:	4649      	mov	r1, r9
 800c9e0:	f7f4 f8a4 	bl	8000b2c <__aeabi_dcmpun>
 800c9e4:	b140      	cbz	r0, 800c9f8 <_printf_float+0xf0>
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	bfbc      	itt	lt
 800c9ec:	232d      	movlt	r3, #45	; 0x2d
 800c9ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c9f2:	487f      	ldr	r0, [pc, #508]	; (800cbf0 <_printf_float+0x2e8>)
 800c9f4:	4b7f      	ldr	r3, [pc, #508]	; (800cbf4 <_printf_float+0x2ec>)
 800c9f6:	e7d1      	b.n	800c99c <_printf_float+0x94>
 800c9f8:	6863      	ldr	r3, [r4, #4]
 800c9fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c9fe:	9206      	str	r2, [sp, #24]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	d13f      	bne.n	800ca84 <_printf_float+0x17c>
 800ca04:	2306      	movs	r3, #6
 800ca06:	6063      	str	r3, [r4, #4]
 800ca08:	9b05      	ldr	r3, [sp, #20]
 800ca0a:	6861      	ldr	r1, [r4, #4]
 800ca0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca10:	2300      	movs	r3, #0
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	ab0a      	add	r3, sp, #40	; 0x28
 800ca16:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca1a:	ab09      	add	r3, sp, #36	; 0x24
 800ca1c:	ec49 8b10 	vmov	d0, r8, r9
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	6022      	str	r2, [r4, #0]
 800ca24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f7ff fecd 	bl	800c7c8 <__cvt>
 800ca2e:	9b06      	ldr	r3, [sp, #24]
 800ca30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca32:	2b47      	cmp	r3, #71	; 0x47
 800ca34:	4680      	mov	r8, r0
 800ca36:	d108      	bne.n	800ca4a <_printf_float+0x142>
 800ca38:	1cc8      	adds	r0, r1, #3
 800ca3a:	db02      	blt.n	800ca42 <_printf_float+0x13a>
 800ca3c:	6863      	ldr	r3, [r4, #4]
 800ca3e:	4299      	cmp	r1, r3
 800ca40:	dd41      	ble.n	800cac6 <_printf_float+0x1be>
 800ca42:	f1ab 0b02 	sub.w	fp, fp, #2
 800ca46:	fa5f fb8b 	uxtb.w	fp, fp
 800ca4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca4e:	d820      	bhi.n	800ca92 <_printf_float+0x18a>
 800ca50:	3901      	subs	r1, #1
 800ca52:	465a      	mov	r2, fp
 800ca54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca58:	9109      	str	r1, [sp, #36]	; 0x24
 800ca5a:	f7ff ff17 	bl	800c88c <__exponent>
 800ca5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca60:	1813      	adds	r3, r2, r0
 800ca62:	2a01      	cmp	r2, #1
 800ca64:	4681      	mov	r9, r0
 800ca66:	6123      	str	r3, [r4, #16]
 800ca68:	dc02      	bgt.n	800ca70 <_printf_float+0x168>
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	07d2      	lsls	r2, r2, #31
 800ca6e:	d501      	bpl.n	800ca74 <_printf_float+0x16c>
 800ca70:	3301      	adds	r3, #1
 800ca72:	6123      	str	r3, [r4, #16]
 800ca74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d09c      	beq.n	800c9b6 <_printf_float+0xae>
 800ca7c:	232d      	movs	r3, #45	; 0x2d
 800ca7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca82:	e798      	b.n	800c9b6 <_printf_float+0xae>
 800ca84:	9a06      	ldr	r2, [sp, #24]
 800ca86:	2a47      	cmp	r2, #71	; 0x47
 800ca88:	d1be      	bne.n	800ca08 <_printf_float+0x100>
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1bc      	bne.n	800ca08 <_printf_float+0x100>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e7b9      	b.n	800ca06 <_printf_float+0xfe>
 800ca92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca96:	d118      	bne.n	800caca <_printf_float+0x1c2>
 800ca98:	2900      	cmp	r1, #0
 800ca9a:	6863      	ldr	r3, [r4, #4]
 800ca9c:	dd0b      	ble.n	800cab6 <_printf_float+0x1ae>
 800ca9e:	6121      	str	r1, [r4, #16]
 800caa0:	b913      	cbnz	r3, 800caa8 <_printf_float+0x1a0>
 800caa2:	6822      	ldr	r2, [r4, #0]
 800caa4:	07d0      	lsls	r0, r2, #31
 800caa6:	d502      	bpl.n	800caae <_printf_float+0x1a6>
 800caa8:	3301      	adds	r3, #1
 800caaa:	440b      	add	r3, r1
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	65a1      	str	r1, [r4, #88]	; 0x58
 800cab0:	f04f 0900 	mov.w	r9, #0
 800cab4:	e7de      	b.n	800ca74 <_printf_float+0x16c>
 800cab6:	b913      	cbnz	r3, 800cabe <_printf_float+0x1b6>
 800cab8:	6822      	ldr	r2, [r4, #0]
 800caba:	07d2      	lsls	r2, r2, #31
 800cabc:	d501      	bpl.n	800cac2 <_printf_float+0x1ba>
 800cabe:	3302      	adds	r3, #2
 800cac0:	e7f4      	b.n	800caac <_printf_float+0x1a4>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e7f2      	b.n	800caac <_printf_float+0x1a4>
 800cac6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800caca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cacc:	4299      	cmp	r1, r3
 800cace:	db05      	blt.n	800cadc <_printf_float+0x1d4>
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	6121      	str	r1, [r4, #16]
 800cad4:	07d8      	lsls	r0, r3, #31
 800cad6:	d5ea      	bpl.n	800caae <_printf_float+0x1a6>
 800cad8:	1c4b      	adds	r3, r1, #1
 800cada:	e7e7      	b.n	800caac <_printf_float+0x1a4>
 800cadc:	2900      	cmp	r1, #0
 800cade:	bfd4      	ite	le
 800cae0:	f1c1 0202 	rsble	r2, r1, #2
 800cae4:	2201      	movgt	r2, #1
 800cae6:	4413      	add	r3, r2
 800cae8:	e7e0      	b.n	800caac <_printf_float+0x1a4>
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	055a      	lsls	r2, r3, #21
 800caee:	d407      	bmi.n	800cb00 <_printf_float+0x1f8>
 800caf0:	6923      	ldr	r3, [r4, #16]
 800caf2:	4642      	mov	r2, r8
 800caf4:	4631      	mov	r1, r6
 800caf6:	4628      	mov	r0, r5
 800caf8:	47b8      	blx	r7
 800cafa:	3001      	adds	r0, #1
 800cafc:	d12c      	bne.n	800cb58 <_printf_float+0x250>
 800cafe:	e764      	b.n	800c9ca <_printf_float+0xc2>
 800cb00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb04:	f240 80e0 	bls.w	800ccc8 <_printf_float+0x3c0>
 800cb08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f7f3 ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d034      	beq.n	800cb82 <_printf_float+0x27a>
 800cb18:	4a37      	ldr	r2, [pc, #220]	; (800cbf8 <_printf_float+0x2f0>)
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	4631      	mov	r1, r6
 800cb1e:	4628      	mov	r0, r5
 800cb20:	47b8      	blx	r7
 800cb22:	3001      	adds	r0, #1
 800cb24:	f43f af51 	beq.w	800c9ca <_printf_float+0xc2>
 800cb28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	db02      	blt.n	800cb36 <_printf_float+0x22e>
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	07d8      	lsls	r0, r3, #31
 800cb34:	d510      	bpl.n	800cb58 <_printf_float+0x250>
 800cb36:	ee18 3a10 	vmov	r3, s16
 800cb3a:	4652      	mov	r2, sl
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4628      	mov	r0, r5
 800cb40:	47b8      	blx	r7
 800cb42:	3001      	adds	r0, #1
 800cb44:	f43f af41 	beq.w	800c9ca <_printf_float+0xc2>
 800cb48:	f04f 0800 	mov.w	r8, #0
 800cb4c:	f104 091a 	add.w	r9, r4, #26
 800cb50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb52:	3b01      	subs	r3, #1
 800cb54:	4543      	cmp	r3, r8
 800cb56:	dc09      	bgt.n	800cb6c <_printf_float+0x264>
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	079b      	lsls	r3, r3, #30
 800cb5c:	f100 8105 	bmi.w	800cd6a <_printf_float+0x462>
 800cb60:	68e0      	ldr	r0, [r4, #12]
 800cb62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb64:	4298      	cmp	r0, r3
 800cb66:	bfb8      	it	lt
 800cb68:	4618      	movlt	r0, r3
 800cb6a:	e730      	b.n	800c9ce <_printf_float+0xc6>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	464a      	mov	r2, r9
 800cb70:	4631      	mov	r1, r6
 800cb72:	4628      	mov	r0, r5
 800cb74:	47b8      	blx	r7
 800cb76:	3001      	adds	r0, #1
 800cb78:	f43f af27 	beq.w	800c9ca <_printf_float+0xc2>
 800cb7c:	f108 0801 	add.w	r8, r8, #1
 800cb80:	e7e6      	b.n	800cb50 <_printf_float+0x248>
 800cb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	dc39      	bgt.n	800cbfc <_printf_float+0x2f4>
 800cb88:	4a1b      	ldr	r2, [pc, #108]	; (800cbf8 <_printf_float+0x2f0>)
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4628      	mov	r0, r5
 800cb90:	47b8      	blx	r7
 800cb92:	3001      	adds	r0, #1
 800cb94:	f43f af19 	beq.w	800c9ca <_printf_float+0xc2>
 800cb98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	d102      	bne.n	800cba6 <_printf_float+0x29e>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	07d9      	lsls	r1, r3, #31
 800cba4:	d5d8      	bpl.n	800cb58 <_printf_float+0x250>
 800cba6:	ee18 3a10 	vmov	r3, s16
 800cbaa:	4652      	mov	r2, sl
 800cbac:	4631      	mov	r1, r6
 800cbae:	4628      	mov	r0, r5
 800cbb0:	47b8      	blx	r7
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	f43f af09 	beq.w	800c9ca <_printf_float+0xc2>
 800cbb8:	f04f 0900 	mov.w	r9, #0
 800cbbc:	f104 0a1a 	add.w	sl, r4, #26
 800cbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc2:	425b      	negs	r3, r3
 800cbc4:	454b      	cmp	r3, r9
 800cbc6:	dc01      	bgt.n	800cbcc <_printf_float+0x2c4>
 800cbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbca:	e792      	b.n	800caf2 <_printf_float+0x1ea>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	4652      	mov	r2, sl
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	47b8      	blx	r7
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	f43f aef7 	beq.w	800c9ca <_printf_float+0xc2>
 800cbdc:	f109 0901 	add.w	r9, r9, #1
 800cbe0:	e7ee      	b.n	800cbc0 <_printf_float+0x2b8>
 800cbe2:	bf00      	nop
 800cbe4:	7fefffff 	.word	0x7fefffff
 800cbe8:	08010410 	.word	0x08010410
 800cbec:	08010414 	.word	0x08010414
 800cbf0:	0801041c 	.word	0x0801041c
 800cbf4:	08010418 	.word	0x08010418
 800cbf8:	08010420 	.word	0x08010420
 800cbfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc00:	429a      	cmp	r2, r3
 800cc02:	bfa8      	it	ge
 800cc04:	461a      	movge	r2, r3
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	4691      	mov	r9, r2
 800cc0a:	dc37      	bgt.n	800cc7c <_printf_float+0x374>
 800cc0c:	f04f 0b00 	mov.w	fp, #0
 800cc10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc14:	f104 021a 	add.w	r2, r4, #26
 800cc18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc1a:	9305      	str	r3, [sp, #20]
 800cc1c:	eba3 0309 	sub.w	r3, r3, r9
 800cc20:	455b      	cmp	r3, fp
 800cc22:	dc33      	bgt.n	800cc8c <_printf_float+0x384>
 800cc24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	db3b      	blt.n	800cca4 <_printf_float+0x39c>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	07da      	lsls	r2, r3, #31
 800cc30:	d438      	bmi.n	800cca4 <_printf_float+0x39c>
 800cc32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc34:	9a05      	ldr	r2, [sp, #20]
 800cc36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc38:	1a9a      	subs	r2, r3, r2
 800cc3a:	eba3 0901 	sub.w	r9, r3, r1
 800cc3e:	4591      	cmp	r9, r2
 800cc40:	bfa8      	it	ge
 800cc42:	4691      	movge	r9, r2
 800cc44:	f1b9 0f00 	cmp.w	r9, #0
 800cc48:	dc35      	bgt.n	800ccb6 <_printf_float+0x3ae>
 800cc4a:	f04f 0800 	mov.w	r8, #0
 800cc4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc52:	f104 0a1a 	add.w	sl, r4, #26
 800cc56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc5a:	1a9b      	subs	r3, r3, r2
 800cc5c:	eba3 0309 	sub.w	r3, r3, r9
 800cc60:	4543      	cmp	r3, r8
 800cc62:	f77f af79 	ble.w	800cb58 <_printf_float+0x250>
 800cc66:	2301      	movs	r3, #1
 800cc68:	4652      	mov	r2, sl
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	47b8      	blx	r7
 800cc70:	3001      	adds	r0, #1
 800cc72:	f43f aeaa 	beq.w	800c9ca <_printf_float+0xc2>
 800cc76:	f108 0801 	add.w	r8, r8, #1
 800cc7a:	e7ec      	b.n	800cc56 <_printf_float+0x34e>
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4642      	mov	r2, r8
 800cc82:	4628      	mov	r0, r5
 800cc84:	47b8      	blx	r7
 800cc86:	3001      	adds	r0, #1
 800cc88:	d1c0      	bne.n	800cc0c <_printf_float+0x304>
 800cc8a:	e69e      	b.n	800c9ca <_printf_float+0xc2>
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4628      	mov	r0, r5
 800cc92:	9205      	str	r2, [sp, #20]
 800cc94:	47b8      	blx	r7
 800cc96:	3001      	adds	r0, #1
 800cc98:	f43f ae97 	beq.w	800c9ca <_printf_float+0xc2>
 800cc9c:	9a05      	ldr	r2, [sp, #20]
 800cc9e:	f10b 0b01 	add.w	fp, fp, #1
 800cca2:	e7b9      	b.n	800cc18 <_printf_float+0x310>
 800cca4:	ee18 3a10 	vmov	r3, s16
 800cca8:	4652      	mov	r2, sl
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b8      	blx	r7
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	d1be      	bne.n	800cc32 <_printf_float+0x32a>
 800ccb4:	e689      	b.n	800c9ca <_printf_float+0xc2>
 800ccb6:	9a05      	ldr	r2, [sp, #20]
 800ccb8:	464b      	mov	r3, r9
 800ccba:	4442      	add	r2, r8
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	47b8      	blx	r7
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	d1c1      	bne.n	800cc4a <_printf_float+0x342>
 800ccc6:	e680      	b.n	800c9ca <_printf_float+0xc2>
 800ccc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccca:	2a01      	cmp	r2, #1
 800cccc:	dc01      	bgt.n	800ccd2 <_printf_float+0x3ca>
 800ccce:	07db      	lsls	r3, r3, #31
 800ccd0:	d538      	bpl.n	800cd44 <_printf_float+0x43c>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	4642      	mov	r2, r8
 800ccd6:	4631      	mov	r1, r6
 800ccd8:	4628      	mov	r0, r5
 800ccda:	47b8      	blx	r7
 800ccdc:	3001      	adds	r0, #1
 800ccde:	f43f ae74 	beq.w	800c9ca <_printf_float+0xc2>
 800cce2:	ee18 3a10 	vmov	r3, s16
 800cce6:	4652      	mov	r2, sl
 800cce8:	4631      	mov	r1, r6
 800ccea:	4628      	mov	r0, r5
 800ccec:	47b8      	blx	r7
 800ccee:	3001      	adds	r0, #1
 800ccf0:	f43f ae6b 	beq.w	800c9ca <_printf_float+0xc2>
 800ccf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f7f3 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd00:	b9d8      	cbnz	r0, 800cd3a <_printf_float+0x432>
 800cd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd04:	f108 0201 	add.w	r2, r8, #1
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	47b8      	blx	r7
 800cd10:	3001      	adds	r0, #1
 800cd12:	d10e      	bne.n	800cd32 <_printf_float+0x42a>
 800cd14:	e659      	b.n	800c9ca <_printf_float+0xc2>
 800cd16:	2301      	movs	r3, #1
 800cd18:	4652      	mov	r2, sl
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	47b8      	blx	r7
 800cd20:	3001      	adds	r0, #1
 800cd22:	f43f ae52 	beq.w	800c9ca <_printf_float+0xc2>
 800cd26:	f108 0801 	add.w	r8, r8, #1
 800cd2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	4543      	cmp	r3, r8
 800cd30:	dcf1      	bgt.n	800cd16 <_printf_float+0x40e>
 800cd32:	464b      	mov	r3, r9
 800cd34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd38:	e6dc      	b.n	800caf4 <_printf_float+0x1ec>
 800cd3a:	f04f 0800 	mov.w	r8, #0
 800cd3e:	f104 0a1a 	add.w	sl, r4, #26
 800cd42:	e7f2      	b.n	800cd2a <_printf_float+0x422>
 800cd44:	2301      	movs	r3, #1
 800cd46:	4642      	mov	r2, r8
 800cd48:	e7df      	b.n	800cd0a <_printf_float+0x402>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	464a      	mov	r2, r9
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4628      	mov	r0, r5
 800cd52:	47b8      	blx	r7
 800cd54:	3001      	adds	r0, #1
 800cd56:	f43f ae38 	beq.w	800c9ca <_printf_float+0xc2>
 800cd5a:	f108 0801 	add.w	r8, r8, #1
 800cd5e:	68e3      	ldr	r3, [r4, #12]
 800cd60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd62:	1a5b      	subs	r3, r3, r1
 800cd64:	4543      	cmp	r3, r8
 800cd66:	dcf0      	bgt.n	800cd4a <_printf_float+0x442>
 800cd68:	e6fa      	b.n	800cb60 <_printf_float+0x258>
 800cd6a:	f04f 0800 	mov.w	r8, #0
 800cd6e:	f104 0919 	add.w	r9, r4, #25
 800cd72:	e7f4      	b.n	800cd5e <_printf_float+0x456>

0800cd74 <_printf_common>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	4616      	mov	r6, r2
 800cd7a:	4699      	mov	r9, r3
 800cd7c:	688a      	ldr	r2, [r1, #8]
 800cd7e:	690b      	ldr	r3, [r1, #16]
 800cd80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd84:	4293      	cmp	r3, r2
 800cd86:	bfb8      	it	lt
 800cd88:	4613      	movlt	r3, r2
 800cd8a:	6033      	str	r3, [r6, #0]
 800cd8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd90:	4607      	mov	r7, r0
 800cd92:	460c      	mov	r4, r1
 800cd94:	b10a      	cbz	r2, 800cd9a <_printf_common+0x26>
 800cd96:	3301      	adds	r3, #1
 800cd98:	6033      	str	r3, [r6, #0]
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	0699      	lsls	r1, r3, #26
 800cd9e:	bf42      	ittt	mi
 800cda0:	6833      	ldrmi	r3, [r6, #0]
 800cda2:	3302      	addmi	r3, #2
 800cda4:	6033      	strmi	r3, [r6, #0]
 800cda6:	6825      	ldr	r5, [r4, #0]
 800cda8:	f015 0506 	ands.w	r5, r5, #6
 800cdac:	d106      	bne.n	800cdbc <_printf_common+0x48>
 800cdae:	f104 0a19 	add.w	sl, r4, #25
 800cdb2:	68e3      	ldr	r3, [r4, #12]
 800cdb4:	6832      	ldr	r2, [r6, #0]
 800cdb6:	1a9b      	subs	r3, r3, r2
 800cdb8:	42ab      	cmp	r3, r5
 800cdba:	dc26      	bgt.n	800ce0a <_printf_common+0x96>
 800cdbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdc0:	1e13      	subs	r3, r2, #0
 800cdc2:	6822      	ldr	r2, [r4, #0]
 800cdc4:	bf18      	it	ne
 800cdc6:	2301      	movne	r3, #1
 800cdc8:	0692      	lsls	r2, r2, #26
 800cdca:	d42b      	bmi.n	800ce24 <_printf_common+0xb0>
 800cdcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdd0:	4649      	mov	r1, r9
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	47c0      	blx	r8
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	d01e      	beq.n	800ce18 <_printf_common+0xa4>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	68e5      	ldr	r5, [r4, #12]
 800cdde:	6832      	ldr	r2, [r6, #0]
 800cde0:	f003 0306 	and.w	r3, r3, #6
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	bf08      	it	eq
 800cde8:	1aad      	subeq	r5, r5, r2
 800cdea:	68a3      	ldr	r3, [r4, #8]
 800cdec:	6922      	ldr	r2, [r4, #16]
 800cdee:	bf0c      	ite	eq
 800cdf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdf4:	2500      	movne	r5, #0
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	bfc4      	itt	gt
 800cdfa:	1a9b      	subgt	r3, r3, r2
 800cdfc:	18ed      	addgt	r5, r5, r3
 800cdfe:	2600      	movs	r6, #0
 800ce00:	341a      	adds	r4, #26
 800ce02:	42b5      	cmp	r5, r6
 800ce04:	d11a      	bne.n	800ce3c <_printf_common+0xc8>
 800ce06:	2000      	movs	r0, #0
 800ce08:	e008      	b.n	800ce1c <_printf_common+0xa8>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	4652      	mov	r2, sl
 800ce0e:	4649      	mov	r1, r9
 800ce10:	4638      	mov	r0, r7
 800ce12:	47c0      	blx	r8
 800ce14:	3001      	adds	r0, #1
 800ce16:	d103      	bne.n	800ce20 <_printf_common+0xac>
 800ce18:	f04f 30ff 	mov.w	r0, #4294967295
 800ce1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce20:	3501      	adds	r5, #1
 800ce22:	e7c6      	b.n	800cdb2 <_printf_common+0x3e>
 800ce24:	18e1      	adds	r1, r4, r3
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	2030      	movs	r0, #48	; 0x30
 800ce2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce2e:	4422      	add	r2, r4
 800ce30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce38:	3302      	adds	r3, #2
 800ce3a:	e7c7      	b.n	800cdcc <_printf_common+0x58>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	4622      	mov	r2, r4
 800ce40:	4649      	mov	r1, r9
 800ce42:	4638      	mov	r0, r7
 800ce44:	47c0      	blx	r8
 800ce46:	3001      	adds	r0, #1
 800ce48:	d0e6      	beq.n	800ce18 <_printf_common+0xa4>
 800ce4a:	3601      	adds	r6, #1
 800ce4c:	e7d9      	b.n	800ce02 <_printf_common+0x8e>
	...

0800ce50 <_printf_i>:
 800ce50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	7e0f      	ldrb	r7, [r1, #24]
 800ce56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce58:	2f78      	cmp	r7, #120	; 0x78
 800ce5a:	4691      	mov	r9, r2
 800ce5c:	4680      	mov	r8, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	469a      	mov	sl, r3
 800ce62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce66:	d807      	bhi.n	800ce78 <_printf_i+0x28>
 800ce68:	2f62      	cmp	r7, #98	; 0x62
 800ce6a:	d80a      	bhi.n	800ce82 <_printf_i+0x32>
 800ce6c:	2f00      	cmp	r7, #0
 800ce6e:	f000 80d8 	beq.w	800d022 <_printf_i+0x1d2>
 800ce72:	2f58      	cmp	r7, #88	; 0x58
 800ce74:	f000 80a3 	beq.w	800cfbe <_printf_i+0x16e>
 800ce78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce80:	e03a      	b.n	800cef8 <_printf_i+0xa8>
 800ce82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce86:	2b15      	cmp	r3, #21
 800ce88:	d8f6      	bhi.n	800ce78 <_printf_i+0x28>
 800ce8a:	a101      	add	r1, pc, #4	; (adr r1, 800ce90 <_printf_i+0x40>)
 800ce8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce90:	0800cee9 	.word	0x0800cee9
 800ce94:	0800cefd 	.word	0x0800cefd
 800ce98:	0800ce79 	.word	0x0800ce79
 800ce9c:	0800ce79 	.word	0x0800ce79
 800cea0:	0800ce79 	.word	0x0800ce79
 800cea4:	0800ce79 	.word	0x0800ce79
 800cea8:	0800cefd 	.word	0x0800cefd
 800ceac:	0800ce79 	.word	0x0800ce79
 800ceb0:	0800ce79 	.word	0x0800ce79
 800ceb4:	0800ce79 	.word	0x0800ce79
 800ceb8:	0800ce79 	.word	0x0800ce79
 800cebc:	0800d009 	.word	0x0800d009
 800cec0:	0800cf2d 	.word	0x0800cf2d
 800cec4:	0800cfeb 	.word	0x0800cfeb
 800cec8:	0800ce79 	.word	0x0800ce79
 800cecc:	0800ce79 	.word	0x0800ce79
 800ced0:	0800d02b 	.word	0x0800d02b
 800ced4:	0800ce79 	.word	0x0800ce79
 800ced8:	0800cf2d 	.word	0x0800cf2d
 800cedc:	0800ce79 	.word	0x0800ce79
 800cee0:	0800ce79 	.word	0x0800ce79
 800cee4:	0800cff3 	.word	0x0800cff3
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	1d1a      	adds	r2, r3, #4
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	602a      	str	r2, [r5, #0]
 800cef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cef8:	2301      	movs	r3, #1
 800cefa:	e0a3      	b.n	800d044 <_printf_i+0x1f4>
 800cefc:	6820      	ldr	r0, [r4, #0]
 800cefe:	6829      	ldr	r1, [r5, #0]
 800cf00:	0606      	lsls	r6, r0, #24
 800cf02:	f101 0304 	add.w	r3, r1, #4
 800cf06:	d50a      	bpl.n	800cf1e <_printf_i+0xce>
 800cf08:	680e      	ldr	r6, [r1, #0]
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	2e00      	cmp	r6, #0
 800cf0e:	da03      	bge.n	800cf18 <_printf_i+0xc8>
 800cf10:	232d      	movs	r3, #45	; 0x2d
 800cf12:	4276      	negs	r6, r6
 800cf14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf18:	485e      	ldr	r0, [pc, #376]	; (800d094 <_printf_i+0x244>)
 800cf1a:	230a      	movs	r3, #10
 800cf1c:	e019      	b.n	800cf52 <_printf_i+0x102>
 800cf1e:	680e      	ldr	r6, [r1, #0]
 800cf20:	602b      	str	r3, [r5, #0]
 800cf22:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf26:	bf18      	it	ne
 800cf28:	b236      	sxthne	r6, r6
 800cf2a:	e7ef      	b.n	800cf0c <_printf_i+0xbc>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	6820      	ldr	r0, [r4, #0]
 800cf30:	1d19      	adds	r1, r3, #4
 800cf32:	6029      	str	r1, [r5, #0]
 800cf34:	0601      	lsls	r1, r0, #24
 800cf36:	d501      	bpl.n	800cf3c <_printf_i+0xec>
 800cf38:	681e      	ldr	r6, [r3, #0]
 800cf3a:	e002      	b.n	800cf42 <_printf_i+0xf2>
 800cf3c:	0646      	lsls	r6, r0, #25
 800cf3e:	d5fb      	bpl.n	800cf38 <_printf_i+0xe8>
 800cf40:	881e      	ldrh	r6, [r3, #0]
 800cf42:	4854      	ldr	r0, [pc, #336]	; (800d094 <_printf_i+0x244>)
 800cf44:	2f6f      	cmp	r7, #111	; 0x6f
 800cf46:	bf0c      	ite	eq
 800cf48:	2308      	moveq	r3, #8
 800cf4a:	230a      	movne	r3, #10
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf52:	6865      	ldr	r5, [r4, #4]
 800cf54:	60a5      	str	r5, [r4, #8]
 800cf56:	2d00      	cmp	r5, #0
 800cf58:	bfa2      	ittt	ge
 800cf5a:	6821      	ldrge	r1, [r4, #0]
 800cf5c:	f021 0104 	bicge.w	r1, r1, #4
 800cf60:	6021      	strge	r1, [r4, #0]
 800cf62:	b90e      	cbnz	r6, 800cf68 <_printf_i+0x118>
 800cf64:	2d00      	cmp	r5, #0
 800cf66:	d04d      	beq.n	800d004 <_printf_i+0x1b4>
 800cf68:	4615      	mov	r5, r2
 800cf6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf6e:	fb03 6711 	mls	r7, r3, r1, r6
 800cf72:	5dc7      	ldrb	r7, [r0, r7]
 800cf74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf78:	4637      	mov	r7, r6
 800cf7a:	42bb      	cmp	r3, r7
 800cf7c:	460e      	mov	r6, r1
 800cf7e:	d9f4      	bls.n	800cf6a <_printf_i+0x11a>
 800cf80:	2b08      	cmp	r3, #8
 800cf82:	d10b      	bne.n	800cf9c <_printf_i+0x14c>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	07de      	lsls	r6, r3, #31
 800cf88:	d508      	bpl.n	800cf9c <_printf_i+0x14c>
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	6861      	ldr	r1, [r4, #4]
 800cf8e:	4299      	cmp	r1, r3
 800cf90:	bfde      	ittt	le
 800cf92:	2330      	movle	r3, #48	; 0x30
 800cf94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf9c:	1b52      	subs	r2, r2, r5
 800cf9e:	6122      	str	r2, [r4, #16]
 800cfa0:	f8cd a000 	str.w	sl, [sp]
 800cfa4:	464b      	mov	r3, r9
 800cfa6:	aa03      	add	r2, sp, #12
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	4640      	mov	r0, r8
 800cfac:	f7ff fee2 	bl	800cd74 <_printf_common>
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d14c      	bne.n	800d04e <_printf_i+0x1fe>
 800cfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb8:	b004      	add	sp, #16
 800cfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfbe:	4835      	ldr	r0, [pc, #212]	; (800d094 <_printf_i+0x244>)
 800cfc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cfc4:	6829      	ldr	r1, [r5, #0]
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfcc:	6029      	str	r1, [r5, #0]
 800cfce:	061d      	lsls	r5, r3, #24
 800cfd0:	d514      	bpl.n	800cffc <_printf_i+0x1ac>
 800cfd2:	07df      	lsls	r7, r3, #31
 800cfd4:	bf44      	itt	mi
 800cfd6:	f043 0320 	orrmi.w	r3, r3, #32
 800cfda:	6023      	strmi	r3, [r4, #0]
 800cfdc:	b91e      	cbnz	r6, 800cfe6 <_printf_i+0x196>
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	f023 0320 	bic.w	r3, r3, #32
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	2310      	movs	r3, #16
 800cfe8:	e7b0      	b.n	800cf4c <_printf_i+0xfc>
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	f043 0320 	orr.w	r3, r3, #32
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	2378      	movs	r3, #120	; 0x78
 800cff4:	4828      	ldr	r0, [pc, #160]	; (800d098 <_printf_i+0x248>)
 800cff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cffa:	e7e3      	b.n	800cfc4 <_printf_i+0x174>
 800cffc:	0659      	lsls	r1, r3, #25
 800cffe:	bf48      	it	mi
 800d000:	b2b6      	uxthmi	r6, r6
 800d002:	e7e6      	b.n	800cfd2 <_printf_i+0x182>
 800d004:	4615      	mov	r5, r2
 800d006:	e7bb      	b.n	800cf80 <_printf_i+0x130>
 800d008:	682b      	ldr	r3, [r5, #0]
 800d00a:	6826      	ldr	r6, [r4, #0]
 800d00c:	6961      	ldr	r1, [r4, #20]
 800d00e:	1d18      	adds	r0, r3, #4
 800d010:	6028      	str	r0, [r5, #0]
 800d012:	0635      	lsls	r5, r6, #24
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	d501      	bpl.n	800d01c <_printf_i+0x1cc>
 800d018:	6019      	str	r1, [r3, #0]
 800d01a:	e002      	b.n	800d022 <_printf_i+0x1d2>
 800d01c:	0670      	lsls	r0, r6, #25
 800d01e:	d5fb      	bpl.n	800d018 <_printf_i+0x1c8>
 800d020:	8019      	strh	r1, [r3, #0]
 800d022:	2300      	movs	r3, #0
 800d024:	6123      	str	r3, [r4, #16]
 800d026:	4615      	mov	r5, r2
 800d028:	e7ba      	b.n	800cfa0 <_printf_i+0x150>
 800d02a:	682b      	ldr	r3, [r5, #0]
 800d02c:	1d1a      	adds	r2, r3, #4
 800d02e:	602a      	str	r2, [r5, #0]
 800d030:	681d      	ldr	r5, [r3, #0]
 800d032:	6862      	ldr	r2, [r4, #4]
 800d034:	2100      	movs	r1, #0
 800d036:	4628      	mov	r0, r5
 800d038:	f7f3 f8d2 	bl	80001e0 <memchr>
 800d03c:	b108      	cbz	r0, 800d042 <_printf_i+0x1f2>
 800d03e:	1b40      	subs	r0, r0, r5
 800d040:	6060      	str	r0, [r4, #4]
 800d042:	6863      	ldr	r3, [r4, #4]
 800d044:	6123      	str	r3, [r4, #16]
 800d046:	2300      	movs	r3, #0
 800d048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d04c:	e7a8      	b.n	800cfa0 <_printf_i+0x150>
 800d04e:	6923      	ldr	r3, [r4, #16]
 800d050:	462a      	mov	r2, r5
 800d052:	4649      	mov	r1, r9
 800d054:	4640      	mov	r0, r8
 800d056:	47d0      	blx	sl
 800d058:	3001      	adds	r0, #1
 800d05a:	d0ab      	beq.n	800cfb4 <_printf_i+0x164>
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	079b      	lsls	r3, r3, #30
 800d060:	d413      	bmi.n	800d08a <_printf_i+0x23a>
 800d062:	68e0      	ldr	r0, [r4, #12]
 800d064:	9b03      	ldr	r3, [sp, #12]
 800d066:	4298      	cmp	r0, r3
 800d068:	bfb8      	it	lt
 800d06a:	4618      	movlt	r0, r3
 800d06c:	e7a4      	b.n	800cfb8 <_printf_i+0x168>
 800d06e:	2301      	movs	r3, #1
 800d070:	4632      	mov	r2, r6
 800d072:	4649      	mov	r1, r9
 800d074:	4640      	mov	r0, r8
 800d076:	47d0      	blx	sl
 800d078:	3001      	adds	r0, #1
 800d07a:	d09b      	beq.n	800cfb4 <_printf_i+0x164>
 800d07c:	3501      	adds	r5, #1
 800d07e:	68e3      	ldr	r3, [r4, #12]
 800d080:	9903      	ldr	r1, [sp, #12]
 800d082:	1a5b      	subs	r3, r3, r1
 800d084:	42ab      	cmp	r3, r5
 800d086:	dcf2      	bgt.n	800d06e <_printf_i+0x21e>
 800d088:	e7eb      	b.n	800d062 <_printf_i+0x212>
 800d08a:	2500      	movs	r5, #0
 800d08c:	f104 0619 	add.w	r6, r4, #25
 800d090:	e7f5      	b.n	800d07e <_printf_i+0x22e>
 800d092:	bf00      	nop
 800d094:	08010422 	.word	0x08010422
 800d098:	08010433 	.word	0x08010433

0800d09c <iprintf>:
 800d09c:	b40f      	push	{r0, r1, r2, r3}
 800d09e:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <iprintf+0x2c>)
 800d0a0:	b513      	push	{r0, r1, r4, lr}
 800d0a2:	681c      	ldr	r4, [r3, #0]
 800d0a4:	b124      	cbz	r4, 800d0b0 <iprintf+0x14>
 800d0a6:	69a3      	ldr	r3, [r4, #24]
 800d0a8:	b913      	cbnz	r3, 800d0b0 <iprintf+0x14>
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f001 f8d8 	bl	800e260 <__sinit>
 800d0b0:	ab05      	add	r3, sp, #20
 800d0b2:	9a04      	ldr	r2, [sp, #16]
 800d0b4:	68a1      	ldr	r1, [r4, #8]
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f001 fe95 	bl	800ede8 <_vfiprintf_r>
 800d0be:	b002      	add	sp, #8
 800d0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0c4:	b004      	add	sp, #16
 800d0c6:	4770      	bx	lr
 800d0c8:	20000010 	.word	0x20000010

0800d0cc <_puts_r>:
 800d0cc:	b570      	push	{r4, r5, r6, lr}
 800d0ce:	460e      	mov	r6, r1
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	b118      	cbz	r0, 800d0dc <_puts_r+0x10>
 800d0d4:	6983      	ldr	r3, [r0, #24]
 800d0d6:	b90b      	cbnz	r3, 800d0dc <_puts_r+0x10>
 800d0d8:	f001 f8c2 	bl	800e260 <__sinit>
 800d0dc:	69ab      	ldr	r3, [r5, #24]
 800d0de:	68ac      	ldr	r4, [r5, #8]
 800d0e0:	b913      	cbnz	r3, 800d0e8 <_puts_r+0x1c>
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f001 f8bc 	bl	800e260 <__sinit>
 800d0e8:	4b2c      	ldr	r3, [pc, #176]	; (800d19c <_puts_r+0xd0>)
 800d0ea:	429c      	cmp	r4, r3
 800d0ec:	d120      	bne.n	800d130 <_puts_r+0x64>
 800d0ee:	686c      	ldr	r4, [r5, #4]
 800d0f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0f2:	07db      	lsls	r3, r3, #31
 800d0f4:	d405      	bmi.n	800d102 <_puts_r+0x36>
 800d0f6:	89a3      	ldrh	r3, [r4, #12]
 800d0f8:	0598      	lsls	r0, r3, #22
 800d0fa:	d402      	bmi.n	800d102 <_puts_r+0x36>
 800d0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0fe:	f001 f952 	bl	800e3a6 <__retarget_lock_acquire_recursive>
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	0719      	lsls	r1, r3, #28
 800d106:	d51d      	bpl.n	800d144 <_puts_r+0x78>
 800d108:	6923      	ldr	r3, [r4, #16]
 800d10a:	b1db      	cbz	r3, 800d144 <_puts_r+0x78>
 800d10c:	3e01      	subs	r6, #1
 800d10e:	68a3      	ldr	r3, [r4, #8]
 800d110:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d114:	3b01      	subs	r3, #1
 800d116:	60a3      	str	r3, [r4, #8]
 800d118:	bb39      	cbnz	r1, 800d16a <_puts_r+0x9e>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	da38      	bge.n	800d190 <_puts_r+0xc4>
 800d11e:	4622      	mov	r2, r4
 800d120:	210a      	movs	r1, #10
 800d122:	4628      	mov	r0, r5
 800d124:	f000 f848 	bl	800d1b8 <__swbuf_r>
 800d128:	3001      	adds	r0, #1
 800d12a:	d011      	beq.n	800d150 <_puts_r+0x84>
 800d12c:	250a      	movs	r5, #10
 800d12e:	e011      	b.n	800d154 <_puts_r+0x88>
 800d130:	4b1b      	ldr	r3, [pc, #108]	; (800d1a0 <_puts_r+0xd4>)
 800d132:	429c      	cmp	r4, r3
 800d134:	d101      	bne.n	800d13a <_puts_r+0x6e>
 800d136:	68ac      	ldr	r4, [r5, #8]
 800d138:	e7da      	b.n	800d0f0 <_puts_r+0x24>
 800d13a:	4b1a      	ldr	r3, [pc, #104]	; (800d1a4 <_puts_r+0xd8>)
 800d13c:	429c      	cmp	r4, r3
 800d13e:	bf08      	it	eq
 800d140:	68ec      	ldreq	r4, [r5, #12]
 800d142:	e7d5      	b.n	800d0f0 <_puts_r+0x24>
 800d144:	4621      	mov	r1, r4
 800d146:	4628      	mov	r0, r5
 800d148:	f000 f888 	bl	800d25c <__swsetup_r>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d0dd      	beq.n	800d10c <_puts_r+0x40>
 800d150:	f04f 35ff 	mov.w	r5, #4294967295
 800d154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d156:	07da      	lsls	r2, r3, #31
 800d158:	d405      	bmi.n	800d166 <_puts_r+0x9a>
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	059b      	lsls	r3, r3, #22
 800d15e:	d402      	bmi.n	800d166 <_puts_r+0x9a>
 800d160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d162:	f001 f921 	bl	800e3a8 <__retarget_lock_release_recursive>
 800d166:	4628      	mov	r0, r5
 800d168:	bd70      	pop	{r4, r5, r6, pc}
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	da04      	bge.n	800d178 <_puts_r+0xac>
 800d16e:	69a2      	ldr	r2, [r4, #24]
 800d170:	429a      	cmp	r2, r3
 800d172:	dc06      	bgt.n	800d182 <_puts_r+0xb6>
 800d174:	290a      	cmp	r1, #10
 800d176:	d004      	beq.n	800d182 <_puts_r+0xb6>
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	6022      	str	r2, [r4, #0]
 800d17e:	7019      	strb	r1, [r3, #0]
 800d180:	e7c5      	b.n	800d10e <_puts_r+0x42>
 800d182:	4622      	mov	r2, r4
 800d184:	4628      	mov	r0, r5
 800d186:	f000 f817 	bl	800d1b8 <__swbuf_r>
 800d18a:	3001      	adds	r0, #1
 800d18c:	d1bf      	bne.n	800d10e <_puts_r+0x42>
 800d18e:	e7df      	b.n	800d150 <_puts_r+0x84>
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	250a      	movs	r5, #10
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	6022      	str	r2, [r4, #0]
 800d198:	701d      	strb	r5, [r3, #0]
 800d19a:	e7db      	b.n	800d154 <_puts_r+0x88>
 800d19c:	080104f4 	.word	0x080104f4
 800d1a0:	08010514 	.word	0x08010514
 800d1a4:	080104d4 	.word	0x080104d4

0800d1a8 <puts>:
 800d1a8:	4b02      	ldr	r3, [pc, #8]	; (800d1b4 <puts+0xc>)
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	6818      	ldr	r0, [r3, #0]
 800d1ae:	f7ff bf8d 	b.w	800d0cc <_puts_r>
 800d1b2:	bf00      	nop
 800d1b4:	20000010 	.word	0x20000010

0800d1b8 <__swbuf_r>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	460e      	mov	r6, r1
 800d1bc:	4614      	mov	r4, r2
 800d1be:	4605      	mov	r5, r0
 800d1c0:	b118      	cbz	r0, 800d1ca <__swbuf_r+0x12>
 800d1c2:	6983      	ldr	r3, [r0, #24]
 800d1c4:	b90b      	cbnz	r3, 800d1ca <__swbuf_r+0x12>
 800d1c6:	f001 f84b 	bl	800e260 <__sinit>
 800d1ca:	4b21      	ldr	r3, [pc, #132]	; (800d250 <__swbuf_r+0x98>)
 800d1cc:	429c      	cmp	r4, r3
 800d1ce:	d12b      	bne.n	800d228 <__swbuf_r+0x70>
 800d1d0:	686c      	ldr	r4, [r5, #4]
 800d1d2:	69a3      	ldr	r3, [r4, #24]
 800d1d4:	60a3      	str	r3, [r4, #8]
 800d1d6:	89a3      	ldrh	r3, [r4, #12]
 800d1d8:	071a      	lsls	r2, r3, #28
 800d1da:	d52f      	bpl.n	800d23c <__swbuf_r+0x84>
 800d1dc:	6923      	ldr	r3, [r4, #16]
 800d1de:	b36b      	cbz	r3, 800d23c <__swbuf_r+0x84>
 800d1e0:	6923      	ldr	r3, [r4, #16]
 800d1e2:	6820      	ldr	r0, [r4, #0]
 800d1e4:	1ac0      	subs	r0, r0, r3
 800d1e6:	6963      	ldr	r3, [r4, #20]
 800d1e8:	b2f6      	uxtb	r6, r6
 800d1ea:	4283      	cmp	r3, r0
 800d1ec:	4637      	mov	r7, r6
 800d1ee:	dc04      	bgt.n	800d1fa <__swbuf_r+0x42>
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f000 ffa0 	bl	800e138 <_fflush_r>
 800d1f8:	bb30      	cbnz	r0, 800d248 <__swbuf_r+0x90>
 800d1fa:	68a3      	ldr	r3, [r4, #8]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	60a3      	str	r3, [r4, #8]
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	6022      	str	r2, [r4, #0]
 800d206:	701e      	strb	r6, [r3, #0]
 800d208:	6963      	ldr	r3, [r4, #20]
 800d20a:	3001      	adds	r0, #1
 800d20c:	4283      	cmp	r3, r0
 800d20e:	d004      	beq.n	800d21a <__swbuf_r+0x62>
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	07db      	lsls	r3, r3, #31
 800d214:	d506      	bpl.n	800d224 <__swbuf_r+0x6c>
 800d216:	2e0a      	cmp	r6, #10
 800d218:	d104      	bne.n	800d224 <__swbuf_r+0x6c>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4628      	mov	r0, r5
 800d21e:	f000 ff8b 	bl	800e138 <_fflush_r>
 800d222:	b988      	cbnz	r0, 800d248 <__swbuf_r+0x90>
 800d224:	4638      	mov	r0, r7
 800d226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d228:	4b0a      	ldr	r3, [pc, #40]	; (800d254 <__swbuf_r+0x9c>)
 800d22a:	429c      	cmp	r4, r3
 800d22c:	d101      	bne.n	800d232 <__swbuf_r+0x7a>
 800d22e:	68ac      	ldr	r4, [r5, #8]
 800d230:	e7cf      	b.n	800d1d2 <__swbuf_r+0x1a>
 800d232:	4b09      	ldr	r3, [pc, #36]	; (800d258 <__swbuf_r+0xa0>)
 800d234:	429c      	cmp	r4, r3
 800d236:	bf08      	it	eq
 800d238:	68ec      	ldreq	r4, [r5, #12]
 800d23a:	e7ca      	b.n	800d1d2 <__swbuf_r+0x1a>
 800d23c:	4621      	mov	r1, r4
 800d23e:	4628      	mov	r0, r5
 800d240:	f000 f80c 	bl	800d25c <__swsetup_r>
 800d244:	2800      	cmp	r0, #0
 800d246:	d0cb      	beq.n	800d1e0 <__swbuf_r+0x28>
 800d248:	f04f 37ff 	mov.w	r7, #4294967295
 800d24c:	e7ea      	b.n	800d224 <__swbuf_r+0x6c>
 800d24e:	bf00      	nop
 800d250:	080104f4 	.word	0x080104f4
 800d254:	08010514 	.word	0x08010514
 800d258:	080104d4 	.word	0x080104d4

0800d25c <__swsetup_r>:
 800d25c:	4b32      	ldr	r3, [pc, #200]	; (800d328 <__swsetup_r+0xcc>)
 800d25e:	b570      	push	{r4, r5, r6, lr}
 800d260:	681d      	ldr	r5, [r3, #0]
 800d262:	4606      	mov	r6, r0
 800d264:	460c      	mov	r4, r1
 800d266:	b125      	cbz	r5, 800d272 <__swsetup_r+0x16>
 800d268:	69ab      	ldr	r3, [r5, #24]
 800d26a:	b913      	cbnz	r3, 800d272 <__swsetup_r+0x16>
 800d26c:	4628      	mov	r0, r5
 800d26e:	f000 fff7 	bl	800e260 <__sinit>
 800d272:	4b2e      	ldr	r3, [pc, #184]	; (800d32c <__swsetup_r+0xd0>)
 800d274:	429c      	cmp	r4, r3
 800d276:	d10f      	bne.n	800d298 <__swsetup_r+0x3c>
 800d278:	686c      	ldr	r4, [r5, #4]
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d280:	0719      	lsls	r1, r3, #28
 800d282:	d42c      	bmi.n	800d2de <__swsetup_r+0x82>
 800d284:	06dd      	lsls	r5, r3, #27
 800d286:	d411      	bmi.n	800d2ac <__swsetup_r+0x50>
 800d288:	2309      	movs	r3, #9
 800d28a:	6033      	str	r3, [r6, #0]
 800d28c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d290:	81a3      	strh	r3, [r4, #12]
 800d292:	f04f 30ff 	mov.w	r0, #4294967295
 800d296:	e03e      	b.n	800d316 <__swsetup_r+0xba>
 800d298:	4b25      	ldr	r3, [pc, #148]	; (800d330 <__swsetup_r+0xd4>)
 800d29a:	429c      	cmp	r4, r3
 800d29c:	d101      	bne.n	800d2a2 <__swsetup_r+0x46>
 800d29e:	68ac      	ldr	r4, [r5, #8]
 800d2a0:	e7eb      	b.n	800d27a <__swsetup_r+0x1e>
 800d2a2:	4b24      	ldr	r3, [pc, #144]	; (800d334 <__swsetup_r+0xd8>)
 800d2a4:	429c      	cmp	r4, r3
 800d2a6:	bf08      	it	eq
 800d2a8:	68ec      	ldreq	r4, [r5, #12]
 800d2aa:	e7e6      	b.n	800d27a <__swsetup_r+0x1e>
 800d2ac:	0758      	lsls	r0, r3, #29
 800d2ae:	d512      	bpl.n	800d2d6 <__swsetup_r+0x7a>
 800d2b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2b2:	b141      	cbz	r1, 800d2c6 <__swsetup_r+0x6a>
 800d2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2b8:	4299      	cmp	r1, r3
 800d2ba:	d002      	beq.n	800d2c2 <__swsetup_r+0x66>
 800d2bc:	4630      	mov	r0, r6
 800d2be:	f001 fc89 	bl	800ebd4 <_free_r>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2cc:	81a3      	strh	r3, [r4, #12]
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	6063      	str	r3, [r4, #4]
 800d2d2:	6923      	ldr	r3, [r4, #16]
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	f043 0308 	orr.w	r3, r3, #8
 800d2dc:	81a3      	strh	r3, [r4, #12]
 800d2de:	6923      	ldr	r3, [r4, #16]
 800d2e0:	b94b      	cbnz	r3, 800d2f6 <__swsetup_r+0x9a>
 800d2e2:	89a3      	ldrh	r3, [r4, #12]
 800d2e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2ec:	d003      	beq.n	800d2f6 <__swsetup_r+0x9a>
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f001 f87f 	bl	800e3f4 <__smakebuf_r>
 800d2f6:	89a0      	ldrh	r0, [r4, #12]
 800d2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2fc:	f010 0301 	ands.w	r3, r0, #1
 800d300:	d00a      	beq.n	800d318 <__swsetup_r+0xbc>
 800d302:	2300      	movs	r3, #0
 800d304:	60a3      	str	r3, [r4, #8]
 800d306:	6963      	ldr	r3, [r4, #20]
 800d308:	425b      	negs	r3, r3
 800d30a:	61a3      	str	r3, [r4, #24]
 800d30c:	6923      	ldr	r3, [r4, #16]
 800d30e:	b943      	cbnz	r3, 800d322 <__swsetup_r+0xc6>
 800d310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d314:	d1ba      	bne.n	800d28c <__swsetup_r+0x30>
 800d316:	bd70      	pop	{r4, r5, r6, pc}
 800d318:	0781      	lsls	r1, r0, #30
 800d31a:	bf58      	it	pl
 800d31c:	6963      	ldrpl	r3, [r4, #20]
 800d31e:	60a3      	str	r3, [r4, #8]
 800d320:	e7f4      	b.n	800d30c <__swsetup_r+0xb0>
 800d322:	2000      	movs	r0, #0
 800d324:	e7f7      	b.n	800d316 <__swsetup_r+0xba>
 800d326:	bf00      	nop
 800d328:	20000010 	.word	0x20000010
 800d32c:	080104f4 	.word	0x080104f4
 800d330:	08010514 	.word	0x08010514
 800d334:	080104d4 	.word	0x080104d4

0800d338 <quorem>:
 800d338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	6903      	ldr	r3, [r0, #16]
 800d33e:	690c      	ldr	r4, [r1, #16]
 800d340:	42a3      	cmp	r3, r4
 800d342:	4607      	mov	r7, r0
 800d344:	f2c0 8081 	blt.w	800d44a <quorem+0x112>
 800d348:	3c01      	subs	r4, #1
 800d34a:	f101 0814 	add.w	r8, r1, #20
 800d34e:	f100 0514 	add.w	r5, r0, #20
 800d352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d356:	9301      	str	r3, [sp, #4]
 800d358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d35c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d360:	3301      	adds	r3, #1
 800d362:	429a      	cmp	r2, r3
 800d364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d36c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d370:	d331      	bcc.n	800d3d6 <quorem+0x9e>
 800d372:	f04f 0e00 	mov.w	lr, #0
 800d376:	4640      	mov	r0, r8
 800d378:	46ac      	mov	ip, r5
 800d37a:	46f2      	mov	sl, lr
 800d37c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d380:	b293      	uxth	r3, r2
 800d382:	fb06 e303 	mla	r3, r6, r3, lr
 800d386:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	ebaa 0303 	sub.w	r3, sl, r3
 800d390:	f8dc a000 	ldr.w	sl, [ip]
 800d394:	0c12      	lsrs	r2, r2, #16
 800d396:	fa13 f38a 	uxtah	r3, r3, sl
 800d39a:	fb06 e202 	mla	r2, r6, r2, lr
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	9b00      	ldr	r3, [sp, #0]
 800d3a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d3b4:	4581      	cmp	r9, r0
 800d3b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3ba:	f84c 3b04 	str.w	r3, [ip], #4
 800d3be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d3c2:	d2db      	bcs.n	800d37c <quorem+0x44>
 800d3c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d3c8:	b92b      	cbnz	r3, 800d3d6 <quorem+0x9e>
 800d3ca:	9b01      	ldr	r3, [sp, #4]
 800d3cc:	3b04      	subs	r3, #4
 800d3ce:	429d      	cmp	r5, r3
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	d32e      	bcc.n	800d432 <quorem+0xfa>
 800d3d4:	613c      	str	r4, [r7, #16]
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	f001 fae4 	bl	800e9a4 <__mcmp>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	db24      	blt.n	800d42a <quorem+0xf2>
 800d3e0:	3601      	adds	r6, #1
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f04f 0c00 	mov.w	ip, #0
 800d3e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3ec:	f8d0 e000 	ldr.w	lr, [r0]
 800d3f0:	b293      	uxth	r3, r2
 800d3f2:	ebac 0303 	sub.w	r3, ip, r3
 800d3f6:	0c12      	lsrs	r2, r2, #16
 800d3f8:	fa13 f38e 	uxtah	r3, r3, lr
 800d3fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d404:	b29b      	uxth	r3, r3
 800d406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d40a:	45c1      	cmp	r9, r8
 800d40c:	f840 3b04 	str.w	r3, [r0], #4
 800d410:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d414:	d2e8      	bcs.n	800d3e8 <quorem+0xb0>
 800d416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d41a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d41e:	b922      	cbnz	r2, 800d42a <quorem+0xf2>
 800d420:	3b04      	subs	r3, #4
 800d422:	429d      	cmp	r5, r3
 800d424:	461a      	mov	r2, r3
 800d426:	d30a      	bcc.n	800d43e <quorem+0x106>
 800d428:	613c      	str	r4, [r7, #16]
 800d42a:	4630      	mov	r0, r6
 800d42c:	b003      	add	sp, #12
 800d42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d432:	6812      	ldr	r2, [r2, #0]
 800d434:	3b04      	subs	r3, #4
 800d436:	2a00      	cmp	r2, #0
 800d438:	d1cc      	bne.n	800d3d4 <quorem+0x9c>
 800d43a:	3c01      	subs	r4, #1
 800d43c:	e7c7      	b.n	800d3ce <quorem+0x96>
 800d43e:	6812      	ldr	r2, [r2, #0]
 800d440:	3b04      	subs	r3, #4
 800d442:	2a00      	cmp	r2, #0
 800d444:	d1f0      	bne.n	800d428 <quorem+0xf0>
 800d446:	3c01      	subs	r4, #1
 800d448:	e7eb      	b.n	800d422 <quorem+0xea>
 800d44a:	2000      	movs	r0, #0
 800d44c:	e7ee      	b.n	800d42c <quorem+0xf4>
	...

0800d450 <_dtoa_r>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	ed2d 8b04 	vpush	{d8-d9}
 800d458:	ec57 6b10 	vmov	r6, r7, d0
 800d45c:	b093      	sub	sp, #76	; 0x4c
 800d45e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d464:	9106      	str	r1, [sp, #24]
 800d466:	ee10 aa10 	vmov	sl, s0
 800d46a:	4604      	mov	r4, r0
 800d46c:	9209      	str	r2, [sp, #36]	; 0x24
 800d46e:	930c      	str	r3, [sp, #48]	; 0x30
 800d470:	46bb      	mov	fp, r7
 800d472:	b975      	cbnz	r5, 800d492 <_dtoa_r+0x42>
 800d474:	2010      	movs	r0, #16
 800d476:	f000 fffd 	bl	800e474 <malloc>
 800d47a:	4602      	mov	r2, r0
 800d47c:	6260      	str	r0, [r4, #36]	; 0x24
 800d47e:	b920      	cbnz	r0, 800d48a <_dtoa_r+0x3a>
 800d480:	4ba7      	ldr	r3, [pc, #668]	; (800d720 <_dtoa_r+0x2d0>)
 800d482:	21ea      	movs	r1, #234	; 0xea
 800d484:	48a7      	ldr	r0, [pc, #668]	; (800d724 <_dtoa_r+0x2d4>)
 800d486:	f001 fe45 	bl	800f114 <__assert_func>
 800d48a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d48e:	6005      	str	r5, [r0, #0]
 800d490:	60c5      	str	r5, [r0, #12]
 800d492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d494:	6819      	ldr	r1, [r3, #0]
 800d496:	b151      	cbz	r1, 800d4ae <_dtoa_r+0x5e>
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	604a      	str	r2, [r1, #4]
 800d49c:	2301      	movs	r3, #1
 800d49e:	4093      	lsls	r3, r2
 800d4a0:	608b      	str	r3, [r1, #8]
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f001 f83c 	bl	800e520 <_Bfree>
 800d4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	1e3b      	subs	r3, r7, #0
 800d4b0:	bfaa      	itet	ge
 800d4b2:	2300      	movge	r3, #0
 800d4b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d4b8:	f8c8 3000 	strge.w	r3, [r8]
 800d4bc:	4b9a      	ldr	r3, [pc, #616]	; (800d728 <_dtoa_r+0x2d8>)
 800d4be:	bfbc      	itt	lt
 800d4c0:	2201      	movlt	r2, #1
 800d4c2:	f8c8 2000 	strlt.w	r2, [r8]
 800d4c6:	ea33 030b 	bics.w	r3, r3, fp
 800d4ca:	d11b      	bne.n	800d504 <_dtoa_r+0xb4>
 800d4cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800d4d2:	6013      	str	r3, [r2, #0]
 800d4d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4d8:	4333      	orrs	r3, r6
 800d4da:	f000 8592 	beq.w	800e002 <_dtoa_r+0xbb2>
 800d4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4e0:	b963      	cbnz	r3, 800d4fc <_dtoa_r+0xac>
 800d4e2:	4b92      	ldr	r3, [pc, #584]	; (800d72c <_dtoa_r+0x2dc>)
 800d4e4:	e022      	b.n	800d52c <_dtoa_r+0xdc>
 800d4e6:	4b92      	ldr	r3, [pc, #584]	; (800d730 <_dtoa_r+0x2e0>)
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	9801      	ldr	r0, [sp, #4]
 800d4f2:	b013      	add	sp, #76	; 0x4c
 800d4f4:	ecbd 8b04 	vpop	{d8-d9}
 800d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fc:	4b8b      	ldr	r3, [pc, #556]	; (800d72c <_dtoa_r+0x2dc>)
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	3303      	adds	r3, #3
 800d502:	e7f3      	b.n	800d4ec <_dtoa_r+0x9c>
 800d504:	2200      	movs	r2, #0
 800d506:	2300      	movs	r3, #0
 800d508:	4650      	mov	r0, sl
 800d50a:	4659      	mov	r1, fp
 800d50c:	f7f3 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d510:	ec4b ab19 	vmov	d9, sl, fp
 800d514:	4680      	mov	r8, r0
 800d516:	b158      	cbz	r0, 800d530 <_dtoa_r+0xe0>
 800d518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d51a:	2301      	movs	r3, #1
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 856b 	beq.w	800dffc <_dtoa_r+0xbac>
 800d526:	4883      	ldr	r0, [pc, #524]	; (800d734 <_dtoa_r+0x2e4>)
 800d528:	6018      	str	r0, [r3, #0]
 800d52a:	1e43      	subs	r3, r0, #1
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	e7df      	b.n	800d4f0 <_dtoa_r+0xa0>
 800d530:	ec4b ab10 	vmov	d0, sl, fp
 800d534:	aa10      	add	r2, sp, #64	; 0x40
 800d536:	a911      	add	r1, sp, #68	; 0x44
 800d538:	4620      	mov	r0, r4
 800d53a:	f001 fad9 	bl	800eaf0 <__d2b>
 800d53e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d542:	ee08 0a10 	vmov	s16, r0
 800d546:	2d00      	cmp	r5, #0
 800d548:	f000 8084 	beq.w	800d654 <_dtoa_r+0x204>
 800d54c:	ee19 3a90 	vmov	r3, s19
 800d550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d558:	4656      	mov	r6, sl
 800d55a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d55e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d566:	4b74      	ldr	r3, [pc, #464]	; (800d738 <_dtoa_r+0x2e8>)
 800d568:	2200      	movs	r2, #0
 800d56a:	4630      	mov	r0, r6
 800d56c:	4639      	mov	r1, r7
 800d56e:	f7f2 fe8b 	bl	8000288 <__aeabi_dsub>
 800d572:	a365      	add	r3, pc, #404	; (adr r3, 800d708 <_dtoa_r+0x2b8>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f3 f83e 	bl	80005f8 <__aeabi_dmul>
 800d57c:	a364      	add	r3, pc, #400	; (adr r3, 800d710 <_dtoa_r+0x2c0>)
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	f7f2 fe83 	bl	800028c <__adddf3>
 800d586:	4606      	mov	r6, r0
 800d588:	4628      	mov	r0, r5
 800d58a:	460f      	mov	r7, r1
 800d58c:	f7f2 ffca 	bl	8000524 <__aeabi_i2d>
 800d590:	a361      	add	r3, pc, #388	; (adr r3, 800d718 <_dtoa_r+0x2c8>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	f7f3 f82f 	bl	80005f8 <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f2 fe73 	bl	800028c <__adddf3>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	460f      	mov	r7, r1
 800d5aa:	f7f3 fad5 	bl	8000b58 <__aeabi_d2iz>
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	9000      	str	r0, [sp, #0]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f3 fa90 	bl	8000adc <__aeabi_dcmplt>
 800d5bc:	b150      	cbz	r0, 800d5d4 <_dtoa_r+0x184>
 800d5be:	9800      	ldr	r0, [sp, #0]
 800d5c0:	f7f2 ffb0 	bl	8000524 <__aeabi_i2d>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f3 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5cc:	b910      	cbnz	r0, 800d5d4 <_dtoa_r+0x184>
 800d5ce:	9b00      	ldr	r3, [sp, #0]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	9b00      	ldr	r3, [sp, #0]
 800d5d6:	2b16      	cmp	r3, #22
 800d5d8:	d85a      	bhi.n	800d690 <_dtoa_r+0x240>
 800d5da:	9a00      	ldr	r2, [sp, #0]
 800d5dc:	4b57      	ldr	r3, [pc, #348]	; (800d73c <_dtoa_r+0x2ec>)
 800d5de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	ec51 0b19 	vmov	r0, r1, d9
 800d5ea:	f7f3 fa77 	bl	8000adc <__aeabi_dcmplt>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d050      	beq.n	800d694 <_dtoa_r+0x244>
 800d5f2:	9b00      	ldr	r3, [sp, #0]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5fe:	1b5d      	subs	r5, r3, r5
 800d600:	1e6b      	subs	r3, r5, #1
 800d602:	9305      	str	r3, [sp, #20]
 800d604:	bf45      	ittet	mi
 800d606:	f1c5 0301 	rsbmi	r3, r5, #1
 800d60a:	9304      	strmi	r3, [sp, #16]
 800d60c:	2300      	movpl	r3, #0
 800d60e:	2300      	movmi	r3, #0
 800d610:	bf4c      	ite	mi
 800d612:	9305      	strmi	r3, [sp, #20]
 800d614:	9304      	strpl	r3, [sp, #16]
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	db3d      	blt.n	800d698 <_dtoa_r+0x248>
 800d61c:	9b05      	ldr	r3, [sp, #20]
 800d61e:	9a00      	ldr	r2, [sp, #0]
 800d620:	920a      	str	r2, [sp, #40]	; 0x28
 800d622:	4413      	add	r3, r2
 800d624:	9305      	str	r3, [sp, #20]
 800d626:	2300      	movs	r3, #0
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	9b06      	ldr	r3, [sp, #24]
 800d62c:	2b09      	cmp	r3, #9
 800d62e:	f200 8089 	bhi.w	800d744 <_dtoa_r+0x2f4>
 800d632:	2b05      	cmp	r3, #5
 800d634:	bfc4      	itt	gt
 800d636:	3b04      	subgt	r3, #4
 800d638:	9306      	strgt	r3, [sp, #24]
 800d63a:	9b06      	ldr	r3, [sp, #24]
 800d63c:	f1a3 0302 	sub.w	r3, r3, #2
 800d640:	bfcc      	ite	gt
 800d642:	2500      	movgt	r5, #0
 800d644:	2501      	movle	r5, #1
 800d646:	2b03      	cmp	r3, #3
 800d648:	f200 8087 	bhi.w	800d75a <_dtoa_r+0x30a>
 800d64c:	e8df f003 	tbb	[pc, r3]
 800d650:	59383a2d 	.word	0x59383a2d
 800d654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d658:	441d      	add	r5, r3
 800d65a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d65e:	2b20      	cmp	r3, #32
 800d660:	bfc1      	itttt	gt
 800d662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d66a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d66e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d672:	bfda      	itte	le
 800d674:	f1c3 0320 	rsble	r3, r3, #32
 800d678:	fa06 f003 	lslle.w	r0, r6, r3
 800d67c:	4318      	orrgt	r0, r3
 800d67e:	f7f2 ff41 	bl	8000504 <__aeabi_ui2d>
 800d682:	2301      	movs	r3, #1
 800d684:	4606      	mov	r6, r0
 800d686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d68a:	3d01      	subs	r5, #1
 800d68c:	930e      	str	r3, [sp, #56]	; 0x38
 800d68e:	e76a      	b.n	800d566 <_dtoa_r+0x116>
 800d690:	2301      	movs	r3, #1
 800d692:	e7b2      	b.n	800d5fa <_dtoa_r+0x1aa>
 800d694:	900b      	str	r0, [sp, #44]	; 0x2c
 800d696:	e7b1      	b.n	800d5fc <_dtoa_r+0x1ac>
 800d698:	9b04      	ldr	r3, [sp, #16]
 800d69a:	9a00      	ldr	r2, [sp, #0]
 800d69c:	1a9b      	subs	r3, r3, r2
 800d69e:	9304      	str	r3, [sp, #16]
 800d6a0:	4253      	negs	r3, r2
 800d6a2:	9307      	str	r3, [sp, #28]
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a8:	e7bf      	b.n	800d62a <_dtoa_r+0x1da>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	9308      	str	r3, [sp, #32]
 800d6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dc55      	bgt.n	800d760 <_dtoa_r+0x310>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d6be:	e00c      	b.n	800d6da <_dtoa_r+0x28a>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e7f3      	b.n	800d6ac <_dtoa_r+0x25c>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6c8:	9308      	str	r3, [sp, #32]
 800d6ca:	9b00      	ldr	r3, [sp, #0]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	9302      	str	r3, [sp, #8]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	9303      	str	r3, [sp, #12]
 800d6d6:	bfb8      	it	lt
 800d6d8:	2301      	movlt	r3, #1
 800d6da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6dc:	2200      	movs	r2, #0
 800d6de:	6042      	str	r2, [r0, #4]
 800d6e0:	2204      	movs	r2, #4
 800d6e2:	f102 0614 	add.w	r6, r2, #20
 800d6e6:	429e      	cmp	r6, r3
 800d6e8:	6841      	ldr	r1, [r0, #4]
 800d6ea:	d93d      	bls.n	800d768 <_dtoa_r+0x318>
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 fed7 	bl	800e4a0 <_Balloc>
 800d6f2:	9001      	str	r0, [sp, #4]
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d13b      	bne.n	800d770 <_dtoa_r+0x320>
 800d6f8:	4b11      	ldr	r3, [pc, #68]	; (800d740 <_dtoa_r+0x2f0>)
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d700:	e6c0      	b.n	800d484 <_dtoa_r+0x34>
 800d702:	2301      	movs	r3, #1
 800d704:	e7df      	b.n	800d6c6 <_dtoa_r+0x276>
 800d706:	bf00      	nop
 800d708:	636f4361 	.word	0x636f4361
 800d70c:	3fd287a7 	.word	0x3fd287a7
 800d710:	8b60c8b3 	.word	0x8b60c8b3
 800d714:	3fc68a28 	.word	0x3fc68a28
 800d718:	509f79fb 	.word	0x509f79fb
 800d71c:	3fd34413 	.word	0x3fd34413
 800d720:	08010451 	.word	0x08010451
 800d724:	08010468 	.word	0x08010468
 800d728:	7ff00000 	.word	0x7ff00000
 800d72c:	0801044d 	.word	0x0801044d
 800d730:	08010444 	.word	0x08010444
 800d734:	08010421 	.word	0x08010421
 800d738:	3ff80000 	.word	0x3ff80000
 800d73c:	080105b8 	.word	0x080105b8
 800d740:	080104c3 	.word	0x080104c3
 800d744:	2501      	movs	r5, #1
 800d746:	2300      	movs	r3, #0
 800d748:	9306      	str	r3, [sp, #24]
 800d74a:	9508      	str	r5, [sp, #32]
 800d74c:	f04f 33ff 	mov.w	r3, #4294967295
 800d750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d754:	2200      	movs	r2, #0
 800d756:	2312      	movs	r3, #18
 800d758:	e7b0      	b.n	800d6bc <_dtoa_r+0x26c>
 800d75a:	2301      	movs	r3, #1
 800d75c:	9308      	str	r3, [sp, #32]
 800d75e:	e7f5      	b.n	800d74c <_dtoa_r+0x2fc>
 800d760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d766:	e7b8      	b.n	800d6da <_dtoa_r+0x28a>
 800d768:	3101      	adds	r1, #1
 800d76a:	6041      	str	r1, [r0, #4]
 800d76c:	0052      	lsls	r2, r2, #1
 800d76e:	e7b8      	b.n	800d6e2 <_dtoa_r+0x292>
 800d770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	2b0e      	cmp	r3, #14
 800d77a:	f200 809d 	bhi.w	800d8b8 <_dtoa_r+0x468>
 800d77e:	2d00      	cmp	r5, #0
 800d780:	f000 809a 	beq.w	800d8b8 <_dtoa_r+0x468>
 800d784:	9b00      	ldr	r3, [sp, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	dd32      	ble.n	800d7f0 <_dtoa_r+0x3a0>
 800d78a:	4ab7      	ldr	r2, [pc, #732]	; (800da68 <_dtoa_r+0x618>)
 800d78c:	f003 030f 	and.w	r3, r3, #15
 800d790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d794:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d798:	9b00      	ldr	r3, [sp, #0]
 800d79a:	05d8      	lsls	r0, r3, #23
 800d79c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d7a0:	d516      	bpl.n	800d7d0 <_dtoa_r+0x380>
 800d7a2:	4bb2      	ldr	r3, [pc, #712]	; (800da6c <_dtoa_r+0x61c>)
 800d7a4:	ec51 0b19 	vmov	r0, r1, d9
 800d7a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7ac:	f7f3 f84e 	bl	800084c <__aeabi_ddiv>
 800d7b0:	f007 070f 	and.w	r7, r7, #15
 800d7b4:	4682      	mov	sl, r0
 800d7b6:	468b      	mov	fp, r1
 800d7b8:	2503      	movs	r5, #3
 800d7ba:	4eac      	ldr	r6, [pc, #688]	; (800da6c <_dtoa_r+0x61c>)
 800d7bc:	b957      	cbnz	r7, 800d7d4 <_dtoa_r+0x384>
 800d7be:	4642      	mov	r2, r8
 800d7c0:	464b      	mov	r3, r9
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	4659      	mov	r1, fp
 800d7c6:	f7f3 f841 	bl	800084c <__aeabi_ddiv>
 800d7ca:	4682      	mov	sl, r0
 800d7cc:	468b      	mov	fp, r1
 800d7ce:	e028      	b.n	800d822 <_dtoa_r+0x3d2>
 800d7d0:	2502      	movs	r5, #2
 800d7d2:	e7f2      	b.n	800d7ba <_dtoa_r+0x36a>
 800d7d4:	07f9      	lsls	r1, r7, #31
 800d7d6:	d508      	bpl.n	800d7ea <_dtoa_r+0x39a>
 800d7d8:	4640      	mov	r0, r8
 800d7da:	4649      	mov	r1, r9
 800d7dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7e0:	f7f2 ff0a 	bl	80005f8 <__aeabi_dmul>
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	4689      	mov	r9, r1
 800d7ea:	107f      	asrs	r7, r7, #1
 800d7ec:	3608      	adds	r6, #8
 800d7ee:	e7e5      	b.n	800d7bc <_dtoa_r+0x36c>
 800d7f0:	f000 809b 	beq.w	800d92a <_dtoa_r+0x4da>
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	4f9d      	ldr	r7, [pc, #628]	; (800da6c <_dtoa_r+0x61c>)
 800d7f8:	425e      	negs	r6, r3
 800d7fa:	4b9b      	ldr	r3, [pc, #620]	; (800da68 <_dtoa_r+0x618>)
 800d7fc:	f006 020f 	and.w	r2, r6, #15
 800d800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	ec51 0b19 	vmov	r0, r1, d9
 800d80c:	f7f2 fef4 	bl	80005f8 <__aeabi_dmul>
 800d810:	1136      	asrs	r6, r6, #4
 800d812:	4682      	mov	sl, r0
 800d814:	468b      	mov	fp, r1
 800d816:	2300      	movs	r3, #0
 800d818:	2502      	movs	r5, #2
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	d17a      	bne.n	800d914 <_dtoa_r+0x4c4>
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1d3      	bne.n	800d7ca <_dtoa_r+0x37a>
 800d822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 8082 	beq.w	800d92e <_dtoa_r+0x4de>
 800d82a:	4b91      	ldr	r3, [pc, #580]	; (800da70 <_dtoa_r+0x620>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4650      	mov	r0, sl
 800d830:	4659      	mov	r1, fp
 800d832:	f7f3 f953 	bl	8000adc <__aeabi_dcmplt>
 800d836:	2800      	cmp	r0, #0
 800d838:	d079      	beq.n	800d92e <_dtoa_r+0x4de>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d076      	beq.n	800d92e <_dtoa_r+0x4de>
 800d840:	9b02      	ldr	r3, [sp, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	dd36      	ble.n	800d8b4 <_dtoa_r+0x464>
 800d846:	9b00      	ldr	r3, [sp, #0]
 800d848:	4650      	mov	r0, sl
 800d84a:	4659      	mov	r1, fp
 800d84c:	1e5f      	subs	r7, r3, #1
 800d84e:	2200      	movs	r2, #0
 800d850:	4b88      	ldr	r3, [pc, #544]	; (800da74 <_dtoa_r+0x624>)
 800d852:	f7f2 fed1 	bl	80005f8 <__aeabi_dmul>
 800d856:	9e02      	ldr	r6, [sp, #8]
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	3501      	adds	r5, #1
 800d85e:	4628      	mov	r0, r5
 800d860:	f7f2 fe60 	bl	8000524 <__aeabi_i2d>
 800d864:	4652      	mov	r2, sl
 800d866:	465b      	mov	r3, fp
 800d868:	f7f2 fec6 	bl	80005f8 <__aeabi_dmul>
 800d86c:	4b82      	ldr	r3, [pc, #520]	; (800da78 <_dtoa_r+0x628>)
 800d86e:	2200      	movs	r2, #0
 800d870:	f7f2 fd0c 	bl	800028c <__adddf3>
 800d874:	46d0      	mov	r8, sl
 800d876:	46d9      	mov	r9, fp
 800d878:	4682      	mov	sl, r0
 800d87a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d87e:	2e00      	cmp	r6, #0
 800d880:	d158      	bne.n	800d934 <_dtoa_r+0x4e4>
 800d882:	4b7e      	ldr	r3, [pc, #504]	; (800da7c <_dtoa_r+0x62c>)
 800d884:	2200      	movs	r2, #0
 800d886:	4640      	mov	r0, r8
 800d888:	4649      	mov	r1, r9
 800d88a:	f7f2 fcfd 	bl	8000288 <__aeabi_dsub>
 800d88e:	4652      	mov	r2, sl
 800d890:	465b      	mov	r3, fp
 800d892:	4680      	mov	r8, r0
 800d894:	4689      	mov	r9, r1
 800d896:	f7f3 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f040 8295 	bne.w	800ddca <_dtoa_r+0x97a>
 800d8a0:	4652      	mov	r2, sl
 800d8a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	f7f3 f917 	bl	8000adc <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f040 8289 	bne.w	800ddc6 <_dtoa_r+0x976>
 800d8b4:	ec5b ab19 	vmov	sl, fp, d9
 800d8b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f2c0 8148 	blt.w	800db50 <_dtoa_r+0x700>
 800d8c0:	9a00      	ldr	r2, [sp, #0]
 800d8c2:	2a0e      	cmp	r2, #14
 800d8c4:	f300 8144 	bgt.w	800db50 <_dtoa_r+0x700>
 800d8c8:	4b67      	ldr	r3, [pc, #412]	; (800da68 <_dtoa_r+0x618>)
 800d8ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f280 80d5 	bge.w	800da84 <_dtoa_r+0x634>
 800d8da:	9b03      	ldr	r3, [sp, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f300 80d1 	bgt.w	800da84 <_dtoa_r+0x634>
 800d8e2:	f040 826f 	bne.w	800ddc4 <_dtoa_r+0x974>
 800d8e6:	4b65      	ldr	r3, [pc, #404]	; (800da7c <_dtoa_r+0x62c>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	4640      	mov	r0, r8
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	f7f2 fe83 	bl	80005f8 <__aeabi_dmul>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	f7f3 f905 	bl	8000b04 <__aeabi_dcmpge>
 800d8fa:	9e03      	ldr	r6, [sp, #12]
 800d8fc:	4637      	mov	r7, r6
 800d8fe:	2800      	cmp	r0, #0
 800d900:	f040 8245 	bne.w	800dd8e <_dtoa_r+0x93e>
 800d904:	9d01      	ldr	r5, [sp, #4]
 800d906:	2331      	movs	r3, #49	; 0x31
 800d908:	f805 3b01 	strb.w	r3, [r5], #1
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	3301      	adds	r3, #1
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	e240      	b.n	800dd96 <_dtoa_r+0x946>
 800d914:	07f2      	lsls	r2, r6, #31
 800d916:	d505      	bpl.n	800d924 <_dtoa_r+0x4d4>
 800d918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d91c:	f7f2 fe6c 	bl	80005f8 <__aeabi_dmul>
 800d920:	3501      	adds	r5, #1
 800d922:	2301      	movs	r3, #1
 800d924:	1076      	asrs	r6, r6, #1
 800d926:	3708      	adds	r7, #8
 800d928:	e777      	b.n	800d81a <_dtoa_r+0x3ca>
 800d92a:	2502      	movs	r5, #2
 800d92c:	e779      	b.n	800d822 <_dtoa_r+0x3d2>
 800d92e:	9f00      	ldr	r7, [sp, #0]
 800d930:	9e03      	ldr	r6, [sp, #12]
 800d932:	e794      	b.n	800d85e <_dtoa_r+0x40e>
 800d934:	9901      	ldr	r1, [sp, #4]
 800d936:	4b4c      	ldr	r3, [pc, #304]	; (800da68 <_dtoa_r+0x618>)
 800d938:	4431      	add	r1, r6
 800d93a:	910d      	str	r1, [sp, #52]	; 0x34
 800d93c:	9908      	ldr	r1, [sp, #32]
 800d93e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d946:	2900      	cmp	r1, #0
 800d948:	d043      	beq.n	800d9d2 <_dtoa_r+0x582>
 800d94a:	494d      	ldr	r1, [pc, #308]	; (800da80 <_dtoa_r+0x630>)
 800d94c:	2000      	movs	r0, #0
 800d94e:	f7f2 ff7d 	bl	800084c <__aeabi_ddiv>
 800d952:	4652      	mov	r2, sl
 800d954:	465b      	mov	r3, fp
 800d956:	f7f2 fc97 	bl	8000288 <__aeabi_dsub>
 800d95a:	9d01      	ldr	r5, [sp, #4]
 800d95c:	4682      	mov	sl, r0
 800d95e:	468b      	mov	fp, r1
 800d960:	4649      	mov	r1, r9
 800d962:	4640      	mov	r0, r8
 800d964:	f7f3 f8f8 	bl	8000b58 <__aeabi_d2iz>
 800d968:	4606      	mov	r6, r0
 800d96a:	f7f2 fddb 	bl	8000524 <__aeabi_i2d>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4640      	mov	r0, r8
 800d974:	4649      	mov	r1, r9
 800d976:	f7f2 fc87 	bl	8000288 <__aeabi_dsub>
 800d97a:	3630      	adds	r6, #48	; 0x30
 800d97c:	f805 6b01 	strb.w	r6, [r5], #1
 800d980:	4652      	mov	r2, sl
 800d982:	465b      	mov	r3, fp
 800d984:	4680      	mov	r8, r0
 800d986:	4689      	mov	r9, r1
 800d988:	f7f3 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d163      	bne.n	800da58 <_dtoa_r+0x608>
 800d990:	4642      	mov	r2, r8
 800d992:	464b      	mov	r3, r9
 800d994:	4936      	ldr	r1, [pc, #216]	; (800da70 <_dtoa_r+0x620>)
 800d996:	2000      	movs	r0, #0
 800d998:	f7f2 fc76 	bl	8000288 <__aeabi_dsub>
 800d99c:	4652      	mov	r2, sl
 800d99e:	465b      	mov	r3, fp
 800d9a0:	f7f3 f89c 	bl	8000adc <__aeabi_dcmplt>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f040 80b5 	bne.w	800db14 <_dtoa_r+0x6c4>
 800d9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9ac:	429d      	cmp	r5, r3
 800d9ae:	d081      	beq.n	800d8b4 <_dtoa_r+0x464>
 800d9b0:	4b30      	ldr	r3, [pc, #192]	; (800da74 <_dtoa_r+0x624>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4650      	mov	r0, sl
 800d9b6:	4659      	mov	r1, fp
 800d9b8:	f7f2 fe1e 	bl	80005f8 <__aeabi_dmul>
 800d9bc:	4b2d      	ldr	r3, [pc, #180]	; (800da74 <_dtoa_r+0x624>)
 800d9be:	4682      	mov	sl, r0
 800d9c0:	468b      	mov	fp, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f7f2 fe16 	bl	80005f8 <__aeabi_dmul>
 800d9cc:	4680      	mov	r8, r0
 800d9ce:	4689      	mov	r9, r1
 800d9d0:	e7c6      	b.n	800d960 <_dtoa_r+0x510>
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	4659      	mov	r1, fp
 800d9d6:	f7f2 fe0f 	bl	80005f8 <__aeabi_dmul>
 800d9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9dc:	9d01      	ldr	r5, [sp, #4]
 800d9de:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	468b      	mov	fp, r1
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	f7f3 f8b6 	bl	8000b58 <__aeabi_d2iz>
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	f7f2 fd99 	bl	8000524 <__aeabi_i2d>
 800d9f2:	3630      	adds	r6, #48	; 0x30
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	f7f2 fc44 	bl	8000288 <__aeabi_dsub>
 800da00:	f805 6b01 	strb.w	r6, [r5], #1
 800da04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da06:	429d      	cmp	r5, r3
 800da08:	4680      	mov	r8, r0
 800da0a:	4689      	mov	r9, r1
 800da0c:	f04f 0200 	mov.w	r2, #0
 800da10:	d124      	bne.n	800da5c <_dtoa_r+0x60c>
 800da12:	4b1b      	ldr	r3, [pc, #108]	; (800da80 <_dtoa_r+0x630>)
 800da14:	4650      	mov	r0, sl
 800da16:	4659      	mov	r1, fp
 800da18:	f7f2 fc38 	bl	800028c <__adddf3>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4640      	mov	r0, r8
 800da22:	4649      	mov	r1, r9
 800da24:	f7f3 f878 	bl	8000b18 <__aeabi_dcmpgt>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d173      	bne.n	800db14 <_dtoa_r+0x6c4>
 800da2c:	4652      	mov	r2, sl
 800da2e:	465b      	mov	r3, fp
 800da30:	4913      	ldr	r1, [pc, #76]	; (800da80 <_dtoa_r+0x630>)
 800da32:	2000      	movs	r0, #0
 800da34:	f7f2 fc28 	bl	8000288 <__aeabi_dsub>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4640      	mov	r0, r8
 800da3e:	4649      	mov	r1, r9
 800da40:	f7f3 f84c 	bl	8000adc <__aeabi_dcmplt>
 800da44:	2800      	cmp	r0, #0
 800da46:	f43f af35 	beq.w	800d8b4 <_dtoa_r+0x464>
 800da4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da4c:	1e6b      	subs	r3, r5, #1
 800da4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da54:	2b30      	cmp	r3, #48	; 0x30
 800da56:	d0f8      	beq.n	800da4a <_dtoa_r+0x5fa>
 800da58:	9700      	str	r7, [sp, #0]
 800da5a:	e049      	b.n	800daf0 <_dtoa_r+0x6a0>
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <_dtoa_r+0x624>)
 800da5e:	f7f2 fdcb 	bl	80005f8 <__aeabi_dmul>
 800da62:	4680      	mov	r8, r0
 800da64:	4689      	mov	r9, r1
 800da66:	e7bd      	b.n	800d9e4 <_dtoa_r+0x594>
 800da68:	080105b8 	.word	0x080105b8
 800da6c:	08010590 	.word	0x08010590
 800da70:	3ff00000 	.word	0x3ff00000
 800da74:	40240000 	.word	0x40240000
 800da78:	401c0000 	.word	0x401c0000
 800da7c:	40140000 	.word	0x40140000
 800da80:	3fe00000 	.word	0x3fe00000
 800da84:	9d01      	ldr	r5, [sp, #4]
 800da86:	4656      	mov	r6, sl
 800da88:	465f      	mov	r7, fp
 800da8a:	4642      	mov	r2, r8
 800da8c:	464b      	mov	r3, r9
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fedb 	bl	800084c <__aeabi_ddiv>
 800da96:	f7f3 f85f 	bl	8000b58 <__aeabi_d2iz>
 800da9a:	4682      	mov	sl, r0
 800da9c:	f7f2 fd42 	bl	8000524 <__aeabi_i2d>
 800daa0:	4642      	mov	r2, r8
 800daa2:	464b      	mov	r3, r9
 800daa4:	f7f2 fda8 	bl	80005f8 <__aeabi_dmul>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4630      	mov	r0, r6
 800daae:	4639      	mov	r1, r7
 800dab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dab4:	f7f2 fbe8 	bl	8000288 <__aeabi_dsub>
 800dab8:	f805 6b01 	strb.w	r6, [r5], #1
 800dabc:	9e01      	ldr	r6, [sp, #4]
 800dabe:	9f03      	ldr	r7, [sp, #12]
 800dac0:	1bae      	subs	r6, r5, r6
 800dac2:	42b7      	cmp	r7, r6
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	d135      	bne.n	800db36 <_dtoa_r+0x6e6>
 800daca:	f7f2 fbdf 	bl	800028c <__adddf3>
 800dace:	4642      	mov	r2, r8
 800dad0:	464b      	mov	r3, r9
 800dad2:	4606      	mov	r6, r0
 800dad4:	460f      	mov	r7, r1
 800dad6:	f7f3 f81f 	bl	8000b18 <__aeabi_dcmpgt>
 800dada:	b9d0      	cbnz	r0, 800db12 <_dtoa_r+0x6c2>
 800dadc:	4642      	mov	r2, r8
 800dade:	464b      	mov	r3, r9
 800dae0:	4630      	mov	r0, r6
 800dae2:	4639      	mov	r1, r7
 800dae4:	f7f2 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 800dae8:	b110      	cbz	r0, 800daf0 <_dtoa_r+0x6a0>
 800daea:	f01a 0f01 	tst.w	sl, #1
 800daee:	d110      	bne.n	800db12 <_dtoa_r+0x6c2>
 800daf0:	4620      	mov	r0, r4
 800daf2:	ee18 1a10 	vmov	r1, s16
 800daf6:	f000 fd13 	bl	800e520 <_Bfree>
 800dafa:	2300      	movs	r3, #0
 800dafc:	9800      	ldr	r0, [sp, #0]
 800dafe:	702b      	strb	r3, [r5, #0]
 800db00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db02:	3001      	adds	r0, #1
 800db04:	6018      	str	r0, [r3, #0]
 800db06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f43f acf1 	beq.w	800d4f0 <_dtoa_r+0xa0>
 800db0e:	601d      	str	r5, [r3, #0]
 800db10:	e4ee      	b.n	800d4f0 <_dtoa_r+0xa0>
 800db12:	9f00      	ldr	r7, [sp, #0]
 800db14:	462b      	mov	r3, r5
 800db16:	461d      	mov	r5, r3
 800db18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db1c:	2a39      	cmp	r2, #57	; 0x39
 800db1e:	d106      	bne.n	800db2e <_dtoa_r+0x6de>
 800db20:	9a01      	ldr	r2, [sp, #4]
 800db22:	429a      	cmp	r2, r3
 800db24:	d1f7      	bne.n	800db16 <_dtoa_r+0x6c6>
 800db26:	9901      	ldr	r1, [sp, #4]
 800db28:	2230      	movs	r2, #48	; 0x30
 800db2a:	3701      	adds	r7, #1
 800db2c:	700a      	strb	r2, [r1, #0]
 800db2e:	781a      	ldrb	r2, [r3, #0]
 800db30:	3201      	adds	r2, #1
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	e790      	b.n	800da58 <_dtoa_r+0x608>
 800db36:	4ba6      	ldr	r3, [pc, #664]	; (800ddd0 <_dtoa_r+0x980>)
 800db38:	2200      	movs	r2, #0
 800db3a:	f7f2 fd5d 	bl	80005f8 <__aeabi_dmul>
 800db3e:	2200      	movs	r2, #0
 800db40:	2300      	movs	r3, #0
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	f7f2 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d09d      	beq.n	800da8a <_dtoa_r+0x63a>
 800db4e:	e7cf      	b.n	800daf0 <_dtoa_r+0x6a0>
 800db50:	9a08      	ldr	r2, [sp, #32]
 800db52:	2a00      	cmp	r2, #0
 800db54:	f000 80d7 	beq.w	800dd06 <_dtoa_r+0x8b6>
 800db58:	9a06      	ldr	r2, [sp, #24]
 800db5a:	2a01      	cmp	r2, #1
 800db5c:	f300 80ba 	bgt.w	800dcd4 <_dtoa_r+0x884>
 800db60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db62:	2a00      	cmp	r2, #0
 800db64:	f000 80b2 	beq.w	800dccc <_dtoa_r+0x87c>
 800db68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db6c:	9e07      	ldr	r6, [sp, #28]
 800db6e:	9d04      	ldr	r5, [sp, #16]
 800db70:	9a04      	ldr	r2, [sp, #16]
 800db72:	441a      	add	r2, r3
 800db74:	9204      	str	r2, [sp, #16]
 800db76:	9a05      	ldr	r2, [sp, #20]
 800db78:	2101      	movs	r1, #1
 800db7a:	441a      	add	r2, r3
 800db7c:	4620      	mov	r0, r4
 800db7e:	9205      	str	r2, [sp, #20]
 800db80:	f000 fd86 	bl	800e690 <__i2b>
 800db84:	4607      	mov	r7, r0
 800db86:	2d00      	cmp	r5, #0
 800db88:	dd0c      	ble.n	800dba4 <_dtoa_r+0x754>
 800db8a:	9b05      	ldr	r3, [sp, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dd09      	ble.n	800dba4 <_dtoa_r+0x754>
 800db90:	42ab      	cmp	r3, r5
 800db92:	9a04      	ldr	r2, [sp, #16]
 800db94:	bfa8      	it	ge
 800db96:	462b      	movge	r3, r5
 800db98:	1ad2      	subs	r2, r2, r3
 800db9a:	9204      	str	r2, [sp, #16]
 800db9c:	9a05      	ldr	r2, [sp, #20]
 800db9e:	1aed      	subs	r5, r5, r3
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	9305      	str	r3, [sp, #20]
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	b31b      	cbz	r3, 800dbf0 <_dtoa_r+0x7a0>
 800dba8:	9b08      	ldr	r3, [sp, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 80af 	beq.w	800dd0e <_dtoa_r+0x8be>
 800dbb0:	2e00      	cmp	r6, #0
 800dbb2:	dd13      	ble.n	800dbdc <_dtoa_r+0x78c>
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f000 fe29 	bl	800e810 <__pow5mult>
 800dbbe:	ee18 2a10 	vmov	r2, s16
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	4607      	mov	r7, r0
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 fd78 	bl	800e6bc <__multiply>
 800dbcc:	ee18 1a10 	vmov	r1, s16
 800dbd0:	4680      	mov	r8, r0
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fca4 	bl	800e520 <_Bfree>
 800dbd8:	ee08 8a10 	vmov	s16, r8
 800dbdc:	9b07      	ldr	r3, [sp, #28]
 800dbde:	1b9a      	subs	r2, r3, r6
 800dbe0:	d006      	beq.n	800dbf0 <_dtoa_r+0x7a0>
 800dbe2:	ee18 1a10 	vmov	r1, s16
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f000 fe12 	bl	800e810 <__pow5mult>
 800dbec:	ee08 0a10 	vmov	s16, r0
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 fd4c 	bl	800e690 <__i2b>
 800dbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	f340 8088 	ble.w	800dd12 <_dtoa_r+0x8c2>
 800dc02:	461a      	mov	r2, r3
 800dc04:	4601      	mov	r1, r0
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 fe02 	bl	800e810 <__pow5mult>
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	4606      	mov	r6, r0
 800dc12:	f340 8081 	ble.w	800dd18 <_dtoa_r+0x8c8>
 800dc16:	f04f 0800 	mov.w	r8, #0
 800dc1a:	6933      	ldr	r3, [r6, #16]
 800dc1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc20:	6918      	ldr	r0, [r3, #16]
 800dc22:	f000 fce5 	bl	800e5f0 <__hi0bits>
 800dc26:	f1c0 0020 	rsb	r0, r0, #32
 800dc2a:	9b05      	ldr	r3, [sp, #20]
 800dc2c:	4418      	add	r0, r3
 800dc2e:	f010 001f 	ands.w	r0, r0, #31
 800dc32:	f000 8092 	beq.w	800dd5a <_dtoa_r+0x90a>
 800dc36:	f1c0 0320 	rsb	r3, r0, #32
 800dc3a:	2b04      	cmp	r3, #4
 800dc3c:	f340 808a 	ble.w	800dd54 <_dtoa_r+0x904>
 800dc40:	f1c0 001c 	rsb	r0, r0, #28
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	4403      	add	r3, r0
 800dc48:	9304      	str	r3, [sp, #16]
 800dc4a:	9b05      	ldr	r3, [sp, #20]
 800dc4c:	4403      	add	r3, r0
 800dc4e:	4405      	add	r5, r0
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	9b04      	ldr	r3, [sp, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	dd07      	ble.n	800dc68 <_dtoa_r+0x818>
 800dc58:	ee18 1a10 	vmov	r1, s16
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 fe30 	bl	800e8c4 <__lshift>
 800dc64:	ee08 0a10 	vmov	s16, r0
 800dc68:	9b05      	ldr	r3, [sp, #20]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	dd05      	ble.n	800dc7a <_dtoa_r+0x82a>
 800dc6e:	4631      	mov	r1, r6
 800dc70:	461a      	mov	r2, r3
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 fe26 	bl	800e8c4 <__lshift>
 800dc78:	4606      	mov	r6, r0
 800dc7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d06e      	beq.n	800dd5e <_dtoa_r+0x90e>
 800dc80:	ee18 0a10 	vmov	r0, s16
 800dc84:	4631      	mov	r1, r6
 800dc86:	f000 fe8d 	bl	800e9a4 <__mcmp>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	da67      	bge.n	800dd5e <_dtoa_r+0x90e>
 800dc8e:	9b00      	ldr	r3, [sp, #0]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	ee18 1a10 	vmov	r1, s16
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	220a      	movs	r2, #10
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f000 fc61 	bl	800e564 <__multadd>
 800dca2:	9b08      	ldr	r3, [sp, #32]
 800dca4:	ee08 0a10 	vmov	s16, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f000 81b1 	beq.w	800e010 <_dtoa_r+0xbc0>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	220a      	movs	r2, #10
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 fc55 	bl	800e564 <__multadd>
 800dcba:	9b02      	ldr	r3, [sp, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	4607      	mov	r7, r0
 800dcc0:	f300 808e 	bgt.w	800dde0 <_dtoa_r+0x990>
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	dc51      	bgt.n	800dd6e <_dtoa_r+0x91e>
 800dcca:	e089      	b.n	800dde0 <_dtoa_r+0x990>
 800dccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dcce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dcd2:	e74b      	b.n	800db6c <_dtoa_r+0x71c>
 800dcd4:	9b03      	ldr	r3, [sp, #12]
 800dcd6:	1e5e      	subs	r6, r3, #1
 800dcd8:	9b07      	ldr	r3, [sp, #28]
 800dcda:	42b3      	cmp	r3, r6
 800dcdc:	bfbf      	itttt	lt
 800dcde:	9b07      	ldrlt	r3, [sp, #28]
 800dce0:	9607      	strlt	r6, [sp, #28]
 800dce2:	1af2      	sublt	r2, r6, r3
 800dce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dce6:	bfb6      	itet	lt
 800dce8:	189b      	addlt	r3, r3, r2
 800dcea:	1b9e      	subge	r6, r3, r6
 800dcec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	bfb8      	it	lt
 800dcf2:	2600      	movlt	r6, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	bfb7      	itett	lt
 800dcf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dcfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd00:	1a9d      	sublt	r5, r3, r2
 800dd02:	2300      	movlt	r3, #0
 800dd04:	e734      	b.n	800db70 <_dtoa_r+0x720>
 800dd06:	9e07      	ldr	r6, [sp, #28]
 800dd08:	9d04      	ldr	r5, [sp, #16]
 800dd0a:	9f08      	ldr	r7, [sp, #32]
 800dd0c:	e73b      	b.n	800db86 <_dtoa_r+0x736>
 800dd0e:	9a07      	ldr	r2, [sp, #28]
 800dd10:	e767      	b.n	800dbe2 <_dtoa_r+0x792>
 800dd12:	9b06      	ldr	r3, [sp, #24]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	dc18      	bgt.n	800dd4a <_dtoa_r+0x8fa>
 800dd18:	f1ba 0f00 	cmp.w	sl, #0
 800dd1c:	d115      	bne.n	800dd4a <_dtoa_r+0x8fa>
 800dd1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd22:	b993      	cbnz	r3, 800dd4a <_dtoa_r+0x8fa>
 800dd24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd28:	0d1b      	lsrs	r3, r3, #20
 800dd2a:	051b      	lsls	r3, r3, #20
 800dd2c:	b183      	cbz	r3, 800dd50 <_dtoa_r+0x900>
 800dd2e:	9b04      	ldr	r3, [sp, #16]
 800dd30:	3301      	adds	r3, #1
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	9b05      	ldr	r3, [sp, #20]
 800dd36:	3301      	adds	r3, #1
 800dd38:	9305      	str	r3, [sp, #20]
 800dd3a:	f04f 0801 	mov.w	r8, #1
 800dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f47f af6a 	bne.w	800dc1a <_dtoa_r+0x7ca>
 800dd46:	2001      	movs	r0, #1
 800dd48:	e76f      	b.n	800dc2a <_dtoa_r+0x7da>
 800dd4a:	f04f 0800 	mov.w	r8, #0
 800dd4e:	e7f6      	b.n	800dd3e <_dtoa_r+0x8ee>
 800dd50:	4698      	mov	r8, r3
 800dd52:	e7f4      	b.n	800dd3e <_dtoa_r+0x8ee>
 800dd54:	f43f af7d 	beq.w	800dc52 <_dtoa_r+0x802>
 800dd58:	4618      	mov	r0, r3
 800dd5a:	301c      	adds	r0, #28
 800dd5c:	e772      	b.n	800dc44 <_dtoa_r+0x7f4>
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	dc37      	bgt.n	800ddd4 <_dtoa_r+0x984>
 800dd64:	9b06      	ldr	r3, [sp, #24]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	dd34      	ble.n	800ddd4 <_dtoa_r+0x984>
 800dd6a:	9b03      	ldr	r3, [sp, #12]
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	9b02      	ldr	r3, [sp, #8]
 800dd70:	b96b      	cbnz	r3, 800dd8e <_dtoa_r+0x93e>
 800dd72:	4631      	mov	r1, r6
 800dd74:	2205      	movs	r2, #5
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 fbf4 	bl	800e564 <__multadd>
 800dd7c:	4601      	mov	r1, r0
 800dd7e:	4606      	mov	r6, r0
 800dd80:	ee18 0a10 	vmov	r0, s16
 800dd84:	f000 fe0e 	bl	800e9a4 <__mcmp>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f73f adbb 	bgt.w	800d904 <_dtoa_r+0x4b4>
 800dd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd90:	9d01      	ldr	r5, [sp, #4]
 800dd92:	43db      	mvns	r3, r3
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 fbbf 	bl	800e520 <_Bfree>
 800dda2:	2f00      	cmp	r7, #0
 800dda4:	f43f aea4 	beq.w	800daf0 <_dtoa_r+0x6a0>
 800dda8:	f1b8 0f00 	cmp.w	r8, #0
 800ddac:	d005      	beq.n	800ddba <_dtoa_r+0x96a>
 800ddae:	45b8      	cmp	r8, r7
 800ddb0:	d003      	beq.n	800ddba <_dtoa_r+0x96a>
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 fbb3 	bl	800e520 <_Bfree>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 fbaf 	bl	800e520 <_Bfree>
 800ddc2:	e695      	b.n	800daf0 <_dtoa_r+0x6a0>
 800ddc4:	2600      	movs	r6, #0
 800ddc6:	4637      	mov	r7, r6
 800ddc8:	e7e1      	b.n	800dd8e <_dtoa_r+0x93e>
 800ddca:	9700      	str	r7, [sp, #0]
 800ddcc:	4637      	mov	r7, r6
 800ddce:	e599      	b.n	800d904 <_dtoa_r+0x4b4>
 800ddd0:	40240000 	.word	0x40240000
 800ddd4:	9b08      	ldr	r3, [sp, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 80ca 	beq.w	800df70 <_dtoa_r+0xb20>
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	9302      	str	r3, [sp, #8]
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	dd05      	ble.n	800ddf0 <_dtoa_r+0x9a0>
 800dde4:	4639      	mov	r1, r7
 800dde6:	462a      	mov	r2, r5
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 fd6b 	bl	800e8c4 <__lshift>
 800ddee:	4607      	mov	r7, r0
 800ddf0:	f1b8 0f00 	cmp.w	r8, #0
 800ddf4:	d05b      	beq.n	800deae <_dtoa_r+0xa5e>
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f000 fb51 	bl	800e4a0 <_Balloc>
 800ddfe:	4605      	mov	r5, r0
 800de00:	b928      	cbnz	r0, 800de0e <_dtoa_r+0x9be>
 800de02:	4b87      	ldr	r3, [pc, #540]	; (800e020 <_dtoa_r+0xbd0>)
 800de04:	4602      	mov	r2, r0
 800de06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de0a:	f7ff bb3b 	b.w	800d484 <_dtoa_r+0x34>
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	3202      	adds	r2, #2
 800de12:	0092      	lsls	r2, r2, #2
 800de14:	f107 010c 	add.w	r1, r7, #12
 800de18:	300c      	adds	r0, #12
 800de1a:	f000 fb33 	bl	800e484 <memcpy>
 800de1e:	2201      	movs	r2, #1
 800de20:	4629      	mov	r1, r5
 800de22:	4620      	mov	r0, r4
 800de24:	f000 fd4e 	bl	800e8c4 <__lshift>
 800de28:	9b01      	ldr	r3, [sp, #4]
 800de2a:	f103 0901 	add.w	r9, r3, #1
 800de2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de32:	4413      	add	r3, r2
 800de34:	9305      	str	r3, [sp, #20]
 800de36:	f00a 0301 	and.w	r3, sl, #1
 800de3a:	46b8      	mov	r8, r7
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	4607      	mov	r7, r0
 800de40:	4631      	mov	r1, r6
 800de42:	ee18 0a10 	vmov	r0, s16
 800de46:	f7ff fa77 	bl	800d338 <quorem>
 800de4a:	4641      	mov	r1, r8
 800de4c:	9002      	str	r0, [sp, #8]
 800de4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800de52:	ee18 0a10 	vmov	r0, s16
 800de56:	f000 fda5 	bl	800e9a4 <__mcmp>
 800de5a:	463a      	mov	r2, r7
 800de5c:	9003      	str	r0, [sp, #12]
 800de5e:	4631      	mov	r1, r6
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fdbb 	bl	800e9dc <__mdiff>
 800de66:	68c2      	ldr	r2, [r0, #12]
 800de68:	f109 3bff 	add.w	fp, r9, #4294967295
 800de6c:	4605      	mov	r5, r0
 800de6e:	bb02      	cbnz	r2, 800deb2 <_dtoa_r+0xa62>
 800de70:	4601      	mov	r1, r0
 800de72:	ee18 0a10 	vmov	r0, s16
 800de76:	f000 fd95 	bl	800e9a4 <__mcmp>
 800de7a:	4602      	mov	r2, r0
 800de7c:	4629      	mov	r1, r5
 800de7e:	4620      	mov	r0, r4
 800de80:	9207      	str	r2, [sp, #28]
 800de82:	f000 fb4d 	bl	800e520 <_Bfree>
 800de86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800de8a:	ea43 0102 	orr.w	r1, r3, r2
 800de8e:	9b04      	ldr	r3, [sp, #16]
 800de90:	430b      	orrs	r3, r1
 800de92:	464d      	mov	r5, r9
 800de94:	d10f      	bne.n	800deb6 <_dtoa_r+0xa66>
 800de96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de9a:	d02a      	beq.n	800def2 <_dtoa_r+0xaa2>
 800de9c:	9b03      	ldr	r3, [sp, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	dd02      	ble.n	800dea8 <_dtoa_r+0xa58>
 800dea2:	9b02      	ldr	r3, [sp, #8]
 800dea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dea8:	f88b a000 	strb.w	sl, [fp]
 800deac:	e775      	b.n	800dd9a <_dtoa_r+0x94a>
 800deae:	4638      	mov	r0, r7
 800deb0:	e7ba      	b.n	800de28 <_dtoa_r+0x9d8>
 800deb2:	2201      	movs	r2, #1
 800deb4:	e7e2      	b.n	800de7c <_dtoa_r+0xa2c>
 800deb6:	9b03      	ldr	r3, [sp, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	db04      	blt.n	800dec6 <_dtoa_r+0xa76>
 800debc:	9906      	ldr	r1, [sp, #24]
 800debe:	430b      	orrs	r3, r1
 800dec0:	9904      	ldr	r1, [sp, #16]
 800dec2:	430b      	orrs	r3, r1
 800dec4:	d122      	bne.n	800df0c <_dtoa_r+0xabc>
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	ddee      	ble.n	800dea8 <_dtoa_r+0xa58>
 800deca:	ee18 1a10 	vmov	r1, s16
 800dece:	2201      	movs	r2, #1
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fcf7 	bl	800e8c4 <__lshift>
 800ded6:	4631      	mov	r1, r6
 800ded8:	ee08 0a10 	vmov	s16, r0
 800dedc:	f000 fd62 	bl	800e9a4 <__mcmp>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dc03      	bgt.n	800deec <_dtoa_r+0xa9c>
 800dee4:	d1e0      	bne.n	800dea8 <_dtoa_r+0xa58>
 800dee6:	f01a 0f01 	tst.w	sl, #1
 800deea:	d0dd      	beq.n	800dea8 <_dtoa_r+0xa58>
 800deec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800def0:	d1d7      	bne.n	800dea2 <_dtoa_r+0xa52>
 800def2:	2339      	movs	r3, #57	; 0x39
 800def4:	f88b 3000 	strb.w	r3, [fp]
 800def8:	462b      	mov	r3, r5
 800defa:	461d      	mov	r5, r3
 800defc:	3b01      	subs	r3, #1
 800defe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df02:	2a39      	cmp	r2, #57	; 0x39
 800df04:	d071      	beq.n	800dfea <_dtoa_r+0xb9a>
 800df06:	3201      	adds	r2, #1
 800df08:	701a      	strb	r2, [r3, #0]
 800df0a:	e746      	b.n	800dd9a <_dtoa_r+0x94a>
 800df0c:	2a00      	cmp	r2, #0
 800df0e:	dd07      	ble.n	800df20 <_dtoa_r+0xad0>
 800df10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df14:	d0ed      	beq.n	800def2 <_dtoa_r+0xaa2>
 800df16:	f10a 0301 	add.w	r3, sl, #1
 800df1a:	f88b 3000 	strb.w	r3, [fp]
 800df1e:	e73c      	b.n	800dd9a <_dtoa_r+0x94a>
 800df20:	9b05      	ldr	r3, [sp, #20]
 800df22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df26:	4599      	cmp	r9, r3
 800df28:	d047      	beq.n	800dfba <_dtoa_r+0xb6a>
 800df2a:	ee18 1a10 	vmov	r1, s16
 800df2e:	2300      	movs	r3, #0
 800df30:	220a      	movs	r2, #10
 800df32:	4620      	mov	r0, r4
 800df34:	f000 fb16 	bl	800e564 <__multadd>
 800df38:	45b8      	cmp	r8, r7
 800df3a:	ee08 0a10 	vmov	s16, r0
 800df3e:	f04f 0300 	mov.w	r3, #0
 800df42:	f04f 020a 	mov.w	r2, #10
 800df46:	4641      	mov	r1, r8
 800df48:	4620      	mov	r0, r4
 800df4a:	d106      	bne.n	800df5a <_dtoa_r+0xb0a>
 800df4c:	f000 fb0a 	bl	800e564 <__multadd>
 800df50:	4680      	mov	r8, r0
 800df52:	4607      	mov	r7, r0
 800df54:	f109 0901 	add.w	r9, r9, #1
 800df58:	e772      	b.n	800de40 <_dtoa_r+0x9f0>
 800df5a:	f000 fb03 	bl	800e564 <__multadd>
 800df5e:	4639      	mov	r1, r7
 800df60:	4680      	mov	r8, r0
 800df62:	2300      	movs	r3, #0
 800df64:	220a      	movs	r2, #10
 800df66:	4620      	mov	r0, r4
 800df68:	f000 fafc 	bl	800e564 <__multadd>
 800df6c:	4607      	mov	r7, r0
 800df6e:	e7f1      	b.n	800df54 <_dtoa_r+0xb04>
 800df70:	9b03      	ldr	r3, [sp, #12]
 800df72:	9302      	str	r3, [sp, #8]
 800df74:	9d01      	ldr	r5, [sp, #4]
 800df76:	ee18 0a10 	vmov	r0, s16
 800df7a:	4631      	mov	r1, r6
 800df7c:	f7ff f9dc 	bl	800d338 <quorem>
 800df80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df84:	9b01      	ldr	r3, [sp, #4]
 800df86:	f805 ab01 	strb.w	sl, [r5], #1
 800df8a:	1aea      	subs	r2, r5, r3
 800df8c:	9b02      	ldr	r3, [sp, #8]
 800df8e:	4293      	cmp	r3, r2
 800df90:	dd09      	ble.n	800dfa6 <_dtoa_r+0xb56>
 800df92:	ee18 1a10 	vmov	r1, s16
 800df96:	2300      	movs	r3, #0
 800df98:	220a      	movs	r2, #10
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 fae2 	bl	800e564 <__multadd>
 800dfa0:	ee08 0a10 	vmov	s16, r0
 800dfa4:	e7e7      	b.n	800df76 <_dtoa_r+0xb26>
 800dfa6:	9b02      	ldr	r3, [sp, #8]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	bfc8      	it	gt
 800dfac:	461d      	movgt	r5, r3
 800dfae:	9b01      	ldr	r3, [sp, #4]
 800dfb0:	bfd8      	it	le
 800dfb2:	2501      	movle	r5, #1
 800dfb4:	441d      	add	r5, r3
 800dfb6:	f04f 0800 	mov.w	r8, #0
 800dfba:	ee18 1a10 	vmov	r1, s16
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f000 fc7f 	bl	800e8c4 <__lshift>
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	ee08 0a10 	vmov	s16, r0
 800dfcc:	f000 fcea 	bl	800e9a4 <__mcmp>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	dc91      	bgt.n	800def8 <_dtoa_r+0xaa8>
 800dfd4:	d102      	bne.n	800dfdc <_dtoa_r+0xb8c>
 800dfd6:	f01a 0f01 	tst.w	sl, #1
 800dfda:	d18d      	bne.n	800def8 <_dtoa_r+0xaa8>
 800dfdc:	462b      	mov	r3, r5
 800dfde:	461d      	mov	r5, r3
 800dfe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfe4:	2a30      	cmp	r2, #48	; 0x30
 800dfe6:	d0fa      	beq.n	800dfde <_dtoa_r+0xb8e>
 800dfe8:	e6d7      	b.n	800dd9a <_dtoa_r+0x94a>
 800dfea:	9a01      	ldr	r2, [sp, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d184      	bne.n	800defa <_dtoa_r+0xaaa>
 800dff0:	9b00      	ldr	r3, [sp, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	2331      	movs	r3, #49	; 0x31
 800dff8:	7013      	strb	r3, [r2, #0]
 800dffa:	e6ce      	b.n	800dd9a <_dtoa_r+0x94a>
 800dffc:	4b09      	ldr	r3, [pc, #36]	; (800e024 <_dtoa_r+0xbd4>)
 800dffe:	f7ff ba95 	b.w	800d52c <_dtoa_r+0xdc>
 800e002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e004:	2b00      	cmp	r3, #0
 800e006:	f47f aa6e 	bne.w	800d4e6 <_dtoa_r+0x96>
 800e00a:	4b07      	ldr	r3, [pc, #28]	; (800e028 <_dtoa_r+0xbd8>)
 800e00c:	f7ff ba8e 	b.w	800d52c <_dtoa_r+0xdc>
 800e010:	9b02      	ldr	r3, [sp, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	dcae      	bgt.n	800df74 <_dtoa_r+0xb24>
 800e016:	9b06      	ldr	r3, [sp, #24]
 800e018:	2b02      	cmp	r3, #2
 800e01a:	f73f aea8 	bgt.w	800dd6e <_dtoa_r+0x91e>
 800e01e:	e7a9      	b.n	800df74 <_dtoa_r+0xb24>
 800e020:	080104c3 	.word	0x080104c3
 800e024:	08010420 	.word	0x08010420
 800e028:	08010444 	.word	0x08010444

0800e02c <__sflush_r>:
 800e02c:	898a      	ldrh	r2, [r1, #12]
 800e02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e032:	4605      	mov	r5, r0
 800e034:	0710      	lsls	r0, r2, #28
 800e036:	460c      	mov	r4, r1
 800e038:	d458      	bmi.n	800e0ec <__sflush_r+0xc0>
 800e03a:	684b      	ldr	r3, [r1, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	dc05      	bgt.n	800e04c <__sflush_r+0x20>
 800e040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e042:	2b00      	cmp	r3, #0
 800e044:	dc02      	bgt.n	800e04c <__sflush_r+0x20>
 800e046:	2000      	movs	r0, #0
 800e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e04e:	2e00      	cmp	r6, #0
 800e050:	d0f9      	beq.n	800e046 <__sflush_r+0x1a>
 800e052:	2300      	movs	r3, #0
 800e054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e058:	682f      	ldr	r7, [r5, #0]
 800e05a:	602b      	str	r3, [r5, #0]
 800e05c:	d032      	beq.n	800e0c4 <__sflush_r+0x98>
 800e05e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	075a      	lsls	r2, r3, #29
 800e064:	d505      	bpl.n	800e072 <__sflush_r+0x46>
 800e066:	6863      	ldr	r3, [r4, #4]
 800e068:	1ac0      	subs	r0, r0, r3
 800e06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e06c:	b10b      	cbz	r3, 800e072 <__sflush_r+0x46>
 800e06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e070:	1ac0      	subs	r0, r0, r3
 800e072:	2300      	movs	r3, #0
 800e074:	4602      	mov	r2, r0
 800e076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e078:	6a21      	ldr	r1, [r4, #32]
 800e07a:	4628      	mov	r0, r5
 800e07c:	47b0      	blx	r6
 800e07e:	1c43      	adds	r3, r0, #1
 800e080:	89a3      	ldrh	r3, [r4, #12]
 800e082:	d106      	bne.n	800e092 <__sflush_r+0x66>
 800e084:	6829      	ldr	r1, [r5, #0]
 800e086:	291d      	cmp	r1, #29
 800e088:	d82c      	bhi.n	800e0e4 <__sflush_r+0xb8>
 800e08a:	4a2a      	ldr	r2, [pc, #168]	; (800e134 <__sflush_r+0x108>)
 800e08c:	40ca      	lsrs	r2, r1
 800e08e:	07d6      	lsls	r6, r2, #31
 800e090:	d528      	bpl.n	800e0e4 <__sflush_r+0xb8>
 800e092:	2200      	movs	r2, #0
 800e094:	6062      	str	r2, [r4, #4]
 800e096:	04d9      	lsls	r1, r3, #19
 800e098:	6922      	ldr	r2, [r4, #16]
 800e09a:	6022      	str	r2, [r4, #0]
 800e09c:	d504      	bpl.n	800e0a8 <__sflush_r+0x7c>
 800e09e:	1c42      	adds	r2, r0, #1
 800e0a0:	d101      	bne.n	800e0a6 <__sflush_r+0x7a>
 800e0a2:	682b      	ldr	r3, [r5, #0]
 800e0a4:	b903      	cbnz	r3, 800e0a8 <__sflush_r+0x7c>
 800e0a6:	6560      	str	r0, [r4, #84]	; 0x54
 800e0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0aa:	602f      	str	r7, [r5, #0]
 800e0ac:	2900      	cmp	r1, #0
 800e0ae:	d0ca      	beq.n	800e046 <__sflush_r+0x1a>
 800e0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0b4:	4299      	cmp	r1, r3
 800e0b6:	d002      	beq.n	800e0be <__sflush_r+0x92>
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f000 fd8b 	bl	800ebd4 <_free_r>
 800e0be:	2000      	movs	r0, #0
 800e0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800e0c2:	e7c1      	b.n	800e048 <__sflush_r+0x1c>
 800e0c4:	6a21      	ldr	r1, [r4, #32]
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	47b0      	blx	r6
 800e0cc:	1c41      	adds	r1, r0, #1
 800e0ce:	d1c7      	bne.n	800e060 <__sflush_r+0x34>
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0c4      	beq.n	800e060 <__sflush_r+0x34>
 800e0d6:	2b1d      	cmp	r3, #29
 800e0d8:	d001      	beq.n	800e0de <__sflush_r+0xb2>
 800e0da:	2b16      	cmp	r3, #22
 800e0dc:	d101      	bne.n	800e0e2 <__sflush_r+0xb6>
 800e0de:	602f      	str	r7, [r5, #0]
 800e0e0:	e7b1      	b.n	800e046 <__sflush_r+0x1a>
 800e0e2:	89a3      	ldrh	r3, [r4, #12]
 800e0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0e8:	81a3      	strh	r3, [r4, #12]
 800e0ea:	e7ad      	b.n	800e048 <__sflush_r+0x1c>
 800e0ec:	690f      	ldr	r7, [r1, #16]
 800e0ee:	2f00      	cmp	r7, #0
 800e0f0:	d0a9      	beq.n	800e046 <__sflush_r+0x1a>
 800e0f2:	0793      	lsls	r3, r2, #30
 800e0f4:	680e      	ldr	r6, [r1, #0]
 800e0f6:	bf08      	it	eq
 800e0f8:	694b      	ldreq	r3, [r1, #20]
 800e0fa:	600f      	str	r7, [r1, #0]
 800e0fc:	bf18      	it	ne
 800e0fe:	2300      	movne	r3, #0
 800e100:	eba6 0807 	sub.w	r8, r6, r7
 800e104:	608b      	str	r3, [r1, #8]
 800e106:	f1b8 0f00 	cmp.w	r8, #0
 800e10a:	dd9c      	ble.n	800e046 <__sflush_r+0x1a>
 800e10c:	6a21      	ldr	r1, [r4, #32]
 800e10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e110:	4643      	mov	r3, r8
 800e112:	463a      	mov	r2, r7
 800e114:	4628      	mov	r0, r5
 800e116:	47b0      	blx	r6
 800e118:	2800      	cmp	r0, #0
 800e11a:	dc06      	bgt.n	800e12a <__sflush_r+0xfe>
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e122:	81a3      	strh	r3, [r4, #12]
 800e124:	f04f 30ff 	mov.w	r0, #4294967295
 800e128:	e78e      	b.n	800e048 <__sflush_r+0x1c>
 800e12a:	4407      	add	r7, r0
 800e12c:	eba8 0800 	sub.w	r8, r8, r0
 800e130:	e7e9      	b.n	800e106 <__sflush_r+0xda>
 800e132:	bf00      	nop
 800e134:	20400001 	.word	0x20400001

0800e138 <_fflush_r>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	690b      	ldr	r3, [r1, #16]
 800e13c:	4605      	mov	r5, r0
 800e13e:	460c      	mov	r4, r1
 800e140:	b913      	cbnz	r3, 800e148 <_fflush_r+0x10>
 800e142:	2500      	movs	r5, #0
 800e144:	4628      	mov	r0, r5
 800e146:	bd38      	pop	{r3, r4, r5, pc}
 800e148:	b118      	cbz	r0, 800e152 <_fflush_r+0x1a>
 800e14a:	6983      	ldr	r3, [r0, #24]
 800e14c:	b90b      	cbnz	r3, 800e152 <_fflush_r+0x1a>
 800e14e:	f000 f887 	bl	800e260 <__sinit>
 800e152:	4b14      	ldr	r3, [pc, #80]	; (800e1a4 <_fflush_r+0x6c>)
 800e154:	429c      	cmp	r4, r3
 800e156:	d11b      	bne.n	800e190 <_fflush_r+0x58>
 800e158:	686c      	ldr	r4, [r5, #4]
 800e15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0ef      	beq.n	800e142 <_fflush_r+0xa>
 800e162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e164:	07d0      	lsls	r0, r2, #31
 800e166:	d404      	bmi.n	800e172 <_fflush_r+0x3a>
 800e168:	0599      	lsls	r1, r3, #22
 800e16a:	d402      	bmi.n	800e172 <_fflush_r+0x3a>
 800e16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e16e:	f000 f91a 	bl	800e3a6 <__retarget_lock_acquire_recursive>
 800e172:	4628      	mov	r0, r5
 800e174:	4621      	mov	r1, r4
 800e176:	f7ff ff59 	bl	800e02c <__sflush_r>
 800e17a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e17c:	07da      	lsls	r2, r3, #31
 800e17e:	4605      	mov	r5, r0
 800e180:	d4e0      	bmi.n	800e144 <_fflush_r+0xc>
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	059b      	lsls	r3, r3, #22
 800e186:	d4dd      	bmi.n	800e144 <_fflush_r+0xc>
 800e188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e18a:	f000 f90d 	bl	800e3a8 <__retarget_lock_release_recursive>
 800e18e:	e7d9      	b.n	800e144 <_fflush_r+0xc>
 800e190:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <_fflush_r+0x70>)
 800e192:	429c      	cmp	r4, r3
 800e194:	d101      	bne.n	800e19a <_fflush_r+0x62>
 800e196:	68ac      	ldr	r4, [r5, #8]
 800e198:	e7df      	b.n	800e15a <_fflush_r+0x22>
 800e19a:	4b04      	ldr	r3, [pc, #16]	; (800e1ac <_fflush_r+0x74>)
 800e19c:	429c      	cmp	r4, r3
 800e19e:	bf08      	it	eq
 800e1a0:	68ec      	ldreq	r4, [r5, #12]
 800e1a2:	e7da      	b.n	800e15a <_fflush_r+0x22>
 800e1a4:	080104f4 	.word	0x080104f4
 800e1a8:	08010514 	.word	0x08010514
 800e1ac:	080104d4 	.word	0x080104d4

0800e1b0 <std>:
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	b510      	push	{r4, lr}
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1be:	6083      	str	r3, [r0, #8]
 800e1c0:	8181      	strh	r1, [r0, #12]
 800e1c2:	6643      	str	r3, [r0, #100]	; 0x64
 800e1c4:	81c2      	strh	r2, [r0, #14]
 800e1c6:	6183      	str	r3, [r0, #24]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	2208      	movs	r2, #8
 800e1cc:	305c      	adds	r0, #92	; 0x5c
 800e1ce:	f7fe faf3 	bl	800c7b8 <memset>
 800e1d2:	4b05      	ldr	r3, [pc, #20]	; (800e1e8 <std+0x38>)
 800e1d4:	6263      	str	r3, [r4, #36]	; 0x24
 800e1d6:	4b05      	ldr	r3, [pc, #20]	; (800e1ec <std+0x3c>)
 800e1d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1da:	4b05      	ldr	r3, [pc, #20]	; (800e1f0 <std+0x40>)
 800e1dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1de:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <std+0x44>)
 800e1e0:	6224      	str	r4, [r4, #32]
 800e1e2:	6323      	str	r3, [r4, #48]	; 0x30
 800e1e4:	bd10      	pop	{r4, pc}
 800e1e6:	bf00      	nop
 800e1e8:	0800f069 	.word	0x0800f069
 800e1ec:	0800f08b 	.word	0x0800f08b
 800e1f0:	0800f0c3 	.word	0x0800f0c3
 800e1f4:	0800f0e7 	.word	0x0800f0e7

0800e1f8 <_cleanup_r>:
 800e1f8:	4901      	ldr	r1, [pc, #4]	; (800e200 <_cleanup_r+0x8>)
 800e1fa:	f000 b8af 	b.w	800e35c <_fwalk_reent>
 800e1fe:	bf00      	nop
 800e200:	0800e139 	.word	0x0800e139

0800e204 <__sfmoreglue>:
 800e204:	b570      	push	{r4, r5, r6, lr}
 800e206:	2268      	movs	r2, #104	; 0x68
 800e208:	1e4d      	subs	r5, r1, #1
 800e20a:	4355      	muls	r5, r2
 800e20c:	460e      	mov	r6, r1
 800e20e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e212:	f000 fd4b 	bl	800ecac <_malloc_r>
 800e216:	4604      	mov	r4, r0
 800e218:	b140      	cbz	r0, 800e22c <__sfmoreglue+0x28>
 800e21a:	2100      	movs	r1, #0
 800e21c:	e9c0 1600 	strd	r1, r6, [r0]
 800e220:	300c      	adds	r0, #12
 800e222:	60a0      	str	r0, [r4, #8]
 800e224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e228:	f7fe fac6 	bl	800c7b8 <memset>
 800e22c:	4620      	mov	r0, r4
 800e22e:	bd70      	pop	{r4, r5, r6, pc}

0800e230 <__sfp_lock_acquire>:
 800e230:	4801      	ldr	r0, [pc, #4]	; (800e238 <__sfp_lock_acquire+0x8>)
 800e232:	f000 b8b8 	b.w	800e3a6 <__retarget_lock_acquire_recursive>
 800e236:	bf00      	nop
 800e238:	20000691 	.word	0x20000691

0800e23c <__sfp_lock_release>:
 800e23c:	4801      	ldr	r0, [pc, #4]	; (800e244 <__sfp_lock_release+0x8>)
 800e23e:	f000 b8b3 	b.w	800e3a8 <__retarget_lock_release_recursive>
 800e242:	bf00      	nop
 800e244:	20000691 	.word	0x20000691

0800e248 <__sinit_lock_acquire>:
 800e248:	4801      	ldr	r0, [pc, #4]	; (800e250 <__sinit_lock_acquire+0x8>)
 800e24a:	f000 b8ac 	b.w	800e3a6 <__retarget_lock_acquire_recursive>
 800e24e:	bf00      	nop
 800e250:	20000692 	.word	0x20000692

0800e254 <__sinit_lock_release>:
 800e254:	4801      	ldr	r0, [pc, #4]	; (800e25c <__sinit_lock_release+0x8>)
 800e256:	f000 b8a7 	b.w	800e3a8 <__retarget_lock_release_recursive>
 800e25a:	bf00      	nop
 800e25c:	20000692 	.word	0x20000692

0800e260 <__sinit>:
 800e260:	b510      	push	{r4, lr}
 800e262:	4604      	mov	r4, r0
 800e264:	f7ff fff0 	bl	800e248 <__sinit_lock_acquire>
 800e268:	69a3      	ldr	r3, [r4, #24]
 800e26a:	b11b      	cbz	r3, 800e274 <__sinit+0x14>
 800e26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e270:	f7ff bff0 	b.w	800e254 <__sinit_lock_release>
 800e274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e278:	6523      	str	r3, [r4, #80]	; 0x50
 800e27a:	4b13      	ldr	r3, [pc, #76]	; (800e2c8 <__sinit+0x68>)
 800e27c:	4a13      	ldr	r2, [pc, #76]	; (800e2cc <__sinit+0x6c>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	62a2      	str	r2, [r4, #40]	; 0x28
 800e282:	42a3      	cmp	r3, r4
 800e284:	bf04      	itt	eq
 800e286:	2301      	moveq	r3, #1
 800e288:	61a3      	streq	r3, [r4, #24]
 800e28a:	4620      	mov	r0, r4
 800e28c:	f000 f820 	bl	800e2d0 <__sfp>
 800e290:	6060      	str	r0, [r4, #4]
 800e292:	4620      	mov	r0, r4
 800e294:	f000 f81c 	bl	800e2d0 <__sfp>
 800e298:	60a0      	str	r0, [r4, #8]
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 f818 	bl	800e2d0 <__sfp>
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	60e0      	str	r0, [r4, #12]
 800e2a4:	2104      	movs	r1, #4
 800e2a6:	6860      	ldr	r0, [r4, #4]
 800e2a8:	f7ff ff82 	bl	800e1b0 <std>
 800e2ac:	68a0      	ldr	r0, [r4, #8]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	2109      	movs	r1, #9
 800e2b2:	f7ff ff7d 	bl	800e1b0 <std>
 800e2b6:	68e0      	ldr	r0, [r4, #12]
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	2112      	movs	r1, #18
 800e2bc:	f7ff ff78 	bl	800e1b0 <std>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	61a3      	str	r3, [r4, #24]
 800e2c4:	e7d2      	b.n	800e26c <__sinit+0xc>
 800e2c6:	bf00      	nop
 800e2c8:	0801040c 	.word	0x0801040c
 800e2cc:	0800e1f9 	.word	0x0800e1f9

0800e2d0 <__sfp>:
 800e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d2:	4607      	mov	r7, r0
 800e2d4:	f7ff ffac 	bl	800e230 <__sfp_lock_acquire>
 800e2d8:	4b1e      	ldr	r3, [pc, #120]	; (800e354 <__sfp+0x84>)
 800e2da:	681e      	ldr	r6, [r3, #0]
 800e2dc:	69b3      	ldr	r3, [r6, #24]
 800e2de:	b913      	cbnz	r3, 800e2e6 <__sfp+0x16>
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	f7ff ffbd 	bl	800e260 <__sinit>
 800e2e6:	3648      	adds	r6, #72	; 0x48
 800e2e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	d503      	bpl.n	800e2f8 <__sfp+0x28>
 800e2f0:	6833      	ldr	r3, [r6, #0]
 800e2f2:	b30b      	cbz	r3, 800e338 <__sfp+0x68>
 800e2f4:	6836      	ldr	r6, [r6, #0]
 800e2f6:	e7f7      	b.n	800e2e8 <__sfp+0x18>
 800e2f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2fc:	b9d5      	cbnz	r5, 800e334 <__sfp+0x64>
 800e2fe:	4b16      	ldr	r3, [pc, #88]	; (800e358 <__sfp+0x88>)
 800e300:	60e3      	str	r3, [r4, #12]
 800e302:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e306:	6665      	str	r5, [r4, #100]	; 0x64
 800e308:	f000 f84c 	bl	800e3a4 <__retarget_lock_init_recursive>
 800e30c:	f7ff ff96 	bl	800e23c <__sfp_lock_release>
 800e310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e318:	6025      	str	r5, [r4, #0]
 800e31a:	61a5      	str	r5, [r4, #24]
 800e31c:	2208      	movs	r2, #8
 800e31e:	4629      	mov	r1, r5
 800e320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e324:	f7fe fa48 	bl	800c7b8 <memset>
 800e328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e32c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e330:	4620      	mov	r0, r4
 800e332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e334:	3468      	adds	r4, #104	; 0x68
 800e336:	e7d9      	b.n	800e2ec <__sfp+0x1c>
 800e338:	2104      	movs	r1, #4
 800e33a:	4638      	mov	r0, r7
 800e33c:	f7ff ff62 	bl	800e204 <__sfmoreglue>
 800e340:	4604      	mov	r4, r0
 800e342:	6030      	str	r0, [r6, #0]
 800e344:	2800      	cmp	r0, #0
 800e346:	d1d5      	bne.n	800e2f4 <__sfp+0x24>
 800e348:	f7ff ff78 	bl	800e23c <__sfp_lock_release>
 800e34c:	230c      	movs	r3, #12
 800e34e:	603b      	str	r3, [r7, #0]
 800e350:	e7ee      	b.n	800e330 <__sfp+0x60>
 800e352:	bf00      	nop
 800e354:	0801040c 	.word	0x0801040c
 800e358:	ffff0001 	.word	0xffff0001

0800e35c <_fwalk_reent>:
 800e35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e360:	4606      	mov	r6, r0
 800e362:	4688      	mov	r8, r1
 800e364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e368:	2700      	movs	r7, #0
 800e36a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e36e:	f1b9 0901 	subs.w	r9, r9, #1
 800e372:	d505      	bpl.n	800e380 <_fwalk_reent+0x24>
 800e374:	6824      	ldr	r4, [r4, #0]
 800e376:	2c00      	cmp	r4, #0
 800e378:	d1f7      	bne.n	800e36a <_fwalk_reent+0xe>
 800e37a:	4638      	mov	r0, r7
 800e37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e380:	89ab      	ldrh	r3, [r5, #12]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d907      	bls.n	800e396 <_fwalk_reent+0x3a>
 800e386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e38a:	3301      	adds	r3, #1
 800e38c:	d003      	beq.n	800e396 <_fwalk_reent+0x3a>
 800e38e:	4629      	mov	r1, r5
 800e390:	4630      	mov	r0, r6
 800e392:	47c0      	blx	r8
 800e394:	4307      	orrs	r7, r0
 800e396:	3568      	adds	r5, #104	; 0x68
 800e398:	e7e9      	b.n	800e36e <_fwalk_reent+0x12>
	...

0800e39c <_localeconv_r>:
 800e39c:	4800      	ldr	r0, [pc, #0]	; (800e3a0 <_localeconv_r+0x4>)
 800e39e:	4770      	bx	lr
 800e3a0:	20000164 	.word	0x20000164

0800e3a4 <__retarget_lock_init_recursive>:
 800e3a4:	4770      	bx	lr

0800e3a6 <__retarget_lock_acquire_recursive>:
 800e3a6:	4770      	bx	lr

0800e3a8 <__retarget_lock_release_recursive>:
 800e3a8:	4770      	bx	lr

0800e3aa <__swhatbuf_r>:
 800e3aa:	b570      	push	{r4, r5, r6, lr}
 800e3ac:	460e      	mov	r6, r1
 800e3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b2:	2900      	cmp	r1, #0
 800e3b4:	b096      	sub	sp, #88	; 0x58
 800e3b6:	4614      	mov	r4, r2
 800e3b8:	461d      	mov	r5, r3
 800e3ba:	da08      	bge.n	800e3ce <__swhatbuf_r+0x24>
 800e3bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	602a      	str	r2, [r5, #0]
 800e3c4:	061a      	lsls	r2, r3, #24
 800e3c6:	d410      	bmi.n	800e3ea <__swhatbuf_r+0x40>
 800e3c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3cc:	e00e      	b.n	800e3ec <__swhatbuf_r+0x42>
 800e3ce:	466a      	mov	r2, sp
 800e3d0:	f000 fee0 	bl	800f194 <_fstat_r>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	dbf1      	blt.n	800e3bc <__swhatbuf_r+0x12>
 800e3d8:	9a01      	ldr	r2, [sp, #4]
 800e3da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3e2:	425a      	negs	r2, r3
 800e3e4:	415a      	adcs	r2, r3
 800e3e6:	602a      	str	r2, [r5, #0]
 800e3e8:	e7ee      	b.n	800e3c8 <__swhatbuf_r+0x1e>
 800e3ea:	2340      	movs	r3, #64	; 0x40
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	6023      	str	r3, [r4, #0]
 800e3f0:	b016      	add	sp, #88	; 0x58
 800e3f2:	bd70      	pop	{r4, r5, r6, pc}

0800e3f4 <__smakebuf_r>:
 800e3f4:	898b      	ldrh	r3, [r1, #12]
 800e3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3f8:	079d      	lsls	r5, r3, #30
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	d507      	bpl.n	800e410 <__smakebuf_r+0x1c>
 800e400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	6123      	str	r3, [r4, #16]
 800e408:	2301      	movs	r3, #1
 800e40a:	6163      	str	r3, [r4, #20]
 800e40c:	b002      	add	sp, #8
 800e40e:	bd70      	pop	{r4, r5, r6, pc}
 800e410:	ab01      	add	r3, sp, #4
 800e412:	466a      	mov	r2, sp
 800e414:	f7ff ffc9 	bl	800e3aa <__swhatbuf_r>
 800e418:	9900      	ldr	r1, [sp, #0]
 800e41a:	4605      	mov	r5, r0
 800e41c:	4630      	mov	r0, r6
 800e41e:	f000 fc45 	bl	800ecac <_malloc_r>
 800e422:	b948      	cbnz	r0, 800e438 <__smakebuf_r+0x44>
 800e424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e428:	059a      	lsls	r2, r3, #22
 800e42a:	d4ef      	bmi.n	800e40c <__smakebuf_r+0x18>
 800e42c:	f023 0303 	bic.w	r3, r3, #3
 800e430:	f043 0302 	orr.w	r3, r3, #2
 800e434:	81a3      	strh	r3, [r4, #12]
 800e436:	e7e3      	b.n	800e400 <__smakebuf_r+0xc>
 800e438:	4b0d      	ldr	r3, [pc, #52]	; (800e470 <__smakebuf_r+0x7c>)
 800e43a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	6020      	str	r0, [r4, #0]
 800e440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e444:	81a3      	strh	r3, [r4, #12]
 800e446:	9b00      	ldr	r3, [sp, #0]
 800e448:	6163      	str	r3, [r4, #20]
 800e44a:	9b01      	ldr	r3, [sp, #4]
 800e44c:	6120      	str	r0, [r4, #16]
 800e44e:	b15b      	cbz	r3, 800e468 <__smakebuf_r+0x74>
 800e450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e454:	4630      	mov	r0, r6
 800e456:	f000 feaf 	bl	800f1b8 <_isatty_r>
 800e45a:	b128      	cbz	r0, 800e468 <__smakebuf_r+0x74>
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	f023 0303 	bic.w	r3, r3, #3
 800e462:	f043 0301 	orr.w	r3, r3, #1
 800e466:	81a3      	strh	r3, [r4, #12]
 800e468:	89a0      	ldrh	r0, [r4, #12]
 800e46a:	4305      	orrs	r5, r0
 800e46c:	81a5      	strh	r5, [r4, #12]
 800e46e:	e7cd      	b.n	800e40c <__smakebuf_r+0x18>
 800e470:	0800e1f9 	.word	0x0800e1f9

0800e474 <malloc>:
 800e474:	4b02      	ldr	r3, [pc, #8]	; (800e480 <malloc+0xc>)
 800e476:	4601      	mov	r1, r0
 800e478:	6818      	ldr	r0, [r3, #0]
 800e47a:	f000 bc17 	b.w	800ecac <_malloc_r>
 800e47e:	bf00      	nop
 800e480:	20000010 	.word	0x20000010

0800e484 <memcpy>:
 800e484:	440a      	add	r2, r1
 800e486:	4291      	cmp	r1, r2
 800e488:	f100 33ff 	add.w	r3, r0, #4294967295
 800e48c:	d100      	bne.n	800e490 <memcpy+0xc>
 800e48e:	4770      	bx	lr
 800e490:	b510      	push	{r4, lr}
 800e492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e49a:	4291      	cmp	r1, r2
 800e49c:	d1f9      	bne.n	800e492 <memcpy+0xe>
 800e49e:	bd10      	pop	{r4, pc}

0800e4a0 <_Balloc>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	460d      	mov	r5, r1
 800e4a8:	b976      	cbnz	r6, 800e4c8 <_Balloc+0x28>
 800e4aa:	2010      	movs	r0, #16
 800e4ac:	f7ff ffe2 	bl	800e474 <malloc>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	6260      	str	r0, [r4, #36]	; 0x24
 800e4b4:	b920      	cbnz	r0, 800e4c0 <_Balloc+0x20>
 800e4b6:	4b18      	ldr	r3, [pc, #96]	; (800e518 <_Balloc+0x78>)
 800e4b8:	4818      	ldr	r0, [pc, #96]	; (800e51c <_Balloc+0x7c>)
 800e4ba:	2166      	movs	r1, #102	; 0x66
 800e4bc:	f000 fe2a 	bl	800f114 <__assert_func>
 800e4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4c4:	6006      	str	r6, [r0, #0]
 800e4c6:	60c6      	str	r6, [r0, #12]
 800e4c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e4ca:	68f3      	ldr	r3, [r6, #12]
 800e4cc:	b183      	cbz	r3, 800e4f0 <_Balloc+0x50>
 800e4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4d6:	b9b8      	cbnz	r0, 800e508 <_Balloc+0x68>
 800e4d8:	2101      	movs	r1, #1
 800e4da:	fa01 f605 	lsl.w	r6, r1, r5
 800e4de:	1d72      	adds	r2, r6, #5
 800e4e0:	0092      	lsls	r2, r2, #2
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f000 fb60 	bl	800eba8 <_calloc_r>
 800e4e8:	b160      	cbz	r0, 800e504 <_Balloc+0x64>
 800e4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4ee:	e00e      	b.n	800e50e <_Balloc+0x6e>
 800e4f0:	2221      	movs	r2, #33	; 0x21
 800e4f2:	2104      	movs	r1, #4
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f000 fb57 	bl	800eba8 <_calloc_r>
 800e4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4fc:	60f0      	str	r0, [r6, #12]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1e4      	bne.n	800e4ce <_Balloc+0x2e>
 800e504:	2000      	movs	r0, #0
 800e506:	bd70      	pop	{r4, r5, r6, pc}
 800e508:	6802      	ldr	r2, [r0, #0]
 800e50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e50e:	2300      	movs	r3, #0
 800e510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e514:	e7f7      	b.n	800e506 <_Balloc+0x66>
 800e516:	bf00      	nop
 800e518:	08010451 	.word	0x08010451
 800e51c:	08010534 	.word	0x08010534

0800e520 <_Bfree>:
 800e520:	b570      	push	{r4, r5, r6, lr}
 800e522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e524:	4605      	mov	r5, r0
 800e526:	460c      	mov	r4, r1
 800e528:	b976      	cbnz	r6, 800e548 <_Bfree+0x28>
 800e52a:	2010      	movs	r0, #16
 800e52c:	f7ff ffa2 	bl	800e474 <malloc>
 800e530:	4602      	mov	r2, r0
 800e532:	6268      	str	r0, [r5, #36]	; 0x24
 800e534:	b920      	cbnz	r0, 800e540 <_Bfree+0x20>
 800e536:	4b09      	ldr	r3, [pc, #36]	; (800e55c <_Bfree+0x3c>)
 800e538:	4809      	ldr	r0, [pc, #36]	; (800e560 <_Bfree+0x40>)
 800e53a:	218a      	movs	r1, #138	; 0x8a
 800e53c:	f000 fdea 	bl	800f114 <__assert_func>
 800e540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e544:	6006      	str	r6, [r0, #0]
 800e546:	60c6      	str	r6, [r0, #12]
 800e548:	b13c      	cbz	r4, 800e55a <_Bfree+0x3a>
 800e54a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e54c:	6862      	ldr	r2, [r4, #4]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e554:	6021      	str	r1, [r4, #0]
 800e556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	08010451 	.word	0x08010451
 800e560:	08010534 	.word	0x08010534

0800e564 <__multadd>:
 800e564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e568:	690d      	ldr	r5, [r1, #16]
 800e56a:	4607      	mov	r7, r0
 800e56c:	460c      	mov	r4, r1
 800e56e:	461e      	mov	r6, r3
 800e570:	f101 0c14 	add.w	ip, r1, #20
 800e574:	2000      	movs	r0, #0
 800e576:	f8dc 3000 	ldr.w	r3, [ip]
 800e57a:	b299      	uxth	r1, r3
 800e57c:	fb02 6101 	mla	r1, r2, r1, r6
 800e580:	0c1e      	lsrs	r6, r3, #16
 800e582:	0c0b      	lsrs	r3, r1, #16
 800e584:	fb02 3306 	mla	r3, r2, r6, r3
 800e588:	b289      	uxth	r1, r1
 800e58a:	3001      	adds	r0, #1
 800e58c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e590:	4285      	cmp	r5, r0
 800e592:	f84c 1b04 	str.w	r1, [ip], #4
 800e596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e59a:	dcec      	bgt.n	800e576 <__multadd+0x12>
 800e59c:	b30e      	cbz	r6, 800e5e2 <__multadd+0x7e>
 800e59e:	68a3      	ldr	r3, [r4, #8]
 800e5a0:	42ab      	cmp	r3, r5
 800e5a2:	dc19      	bgt.n	800e5d8 <__multadd+0x74>
 800e5a4:	6861      	ldr	r1, [r4, #4]
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	3101      	adds	r1, #1
 800e5aa:	f7ff ff79 	bl	800e4a0 <_Balloc>
 800e5ae:	4680      	mov	r8, r0
 800e5b0:	b928      	cbnz	r0, 800e5be <__multadd+0x5a>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	4b0c      	ldr	r3, [pc, #48]	; (800e5e8 <__multadd+0x84>)
 800e5b6:	480d      	ldr	r0, [pc, #52]	; (800e5ec <__multadd+0x88>)
 800e5b8:	21b5      	movs	r1, #181	; 0xb5
 800e5ba:	f000 fdab 	bl	800f114 <__assert_func>
 800e5be:	6922      	ldr	r2, [r4, #16]
 800e5c0:	3202      	adds	r2, #2
 800e5c2:	f104 010c 	add.w	r1, r4, #12
 800e5c6:	0092      	lsls	r2, r2, #2
 800e5c8:	300c      	adds	r0, #12
 800e5ca:	f7ff ff5b 	bl	800e484 <memcpy>
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4638      	mov	r0, r7
 800e5d2:	f7ff ffa5 	bl	800e520 <_Bfree>
 800e5d6:	4644      	mov	r4, r8
 800e5d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5dc:	3501      	adds	r5, #1
 800e5de:	615e      	str	r6, [r3, #20]
 800e5e0:	6125      	str	r5, [r4, #16]
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e8:	080104c3 	.word	0x080104c3
 800e5ec:	08010534 	.word	0x08010534

0800e5f0 <__hi0bits>:
 800e5f0:	0c03      	lsrs	r3, r0, #16
 800e5f2:	041b      	lsls	r3, r3, #16
 800e5f4:	b9d3      	cbnz	r3, 800e62c <__hi0bits+0x3c>
 800e5f6:	0400      	lsls	r0, r0, #16
 800e5f8:	2310      	movs	r3, #16
 800e5fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5fe:	bf04      	itt	eq
 800e600:	0200      	lsleq	r0, r0, #8
 800e602:	3308      	addeq	r3, #8
 800e604:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e608:	bf04      	itt	eq
 800e60a:	0100      	lsleq	r0, r0, #4
 800e60c:	3304      	addeq	r3, #4
 800e60e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e612:	bf04      	itt	eq
 800e614:	0080      	lsleq	r0, r0, #2
 800e616:	3302      	addeq	r3, #2
 800e618:	2800      	cmp	r0, #0
 800e61a:	db05      	blt.n	800e628 <__hi0bits+0x38>
 800e61c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e620:	f103 0301 	add.w	r3, r3, #1
 800e624:	bf08      	it	eq
 800e626:	2320      	moveq	r3, #32
 800e628:	4618      	mov	r0, r3
 800e62a:	4770      	bx	lr
 800e62c:	2300      	movs	r3, #0
 800e62e:	e7e4      	b.n	800e5fa <__hi0bits+0xa>

0800e630 <__lo0bits>:
 800e630:	6803      	ldr	r3, [r0, #0]
 800e632:	f013 0207 	ands.w	r2, r3, #7
 800e636:	4601      	mov	r1, r0
 800e638:	d00b      	beq.n	800e652 <__lo0bits+0x22>
 800e63a:	07da      	lsls	r2, r3, #31
 800e63c:	d423      	bmi.n	800e686 <__lo0bits+0x56>
 800e63e:	0798      	lsls	r0, r3, #30
 800e640:	bf49      	itett	mi
 800e642:	085b      	lsrmi	r3, r3, #1
 800e644:	089b      	lsrpl	r3, r3, #2
 800e646:	2001      	movmi	r0, #1
 800e648:	600b      	strmi	r3, [r1, #0]
 800e64a:	bf5c      	itt	pl
 800e64c:	600b      	strpl	r3, [r1, #0]
 800e64e:	2002      	movpl	r0, #2
 800e650:	4770      	bx	lr
 800e652:	b298      	uxth	r0, r3
 800e654:	b9a8      	cbnz	r0, 800e682 <__lo0bits+0x52>
 800e656:	0c1b      	lsrs	r3, r3, #16
 800e658:	2010      	movs	r0, #16
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	b90a      	cbnz	r2, 800e662 <__lo0bits+0x32>
 800e65e:	3008      	adds	r0, #8
 800e660:	0a1b      	lsrs	r3, r3, #8
 800e662:	071a      	lsls	r2, r3, #28
 800e664:	bf04      	itt	eq
 800e666:	091b      	lsreq	r3, r3, #4
 800e668:	3004      	addeq	r0, #4
 800e66a:	079a      	lsls	r2, r3, #30
 800e66c:	bf04      	itt	eq
 800e66e:	089b      	lsreq	r3, r3, #2
 800e670:	3002      	addeq	r0, #2
 800e672:	07da      	lsls	r2, r3, #31
 800e674:	d403      	bmi.n	800e67e <__lo0bits+0x4e>
 800e676:	085b      	lsrs	r3, r3, #1
 800e678:	f100 0001 	add.w	r0, r0, #1
 800e67c:	d005      	beq.n	800e68a <__lo0bits+0x5a>
 800e67e:	600b      	str	r3, [r1, #0]
 800e680:	4770      	bx	lr
 800e682:	4610      	mov	r0, r2
 800e684:	e7e9      	b.n	800e65a <__lo0bits+0x2a>
 800e686:	2000      	movs	r0, #0
 800e688:	4770      	bx	lr
 800e68a:	2020      	movs	r0, #32
 800e68c:	4770      	bx	lr
	...

0800e690 <__i2b>:
 800e690:	b510      	push	{r4, lr}
 800e692:	460c      	mov	r4, r1
 800e694:	2101      	movs	r1, #1
 800e696:	f7ff ff03 	bl	800e4a0 <_Balloc>
 800e69a:	4602      	mov	r2, r0
 800e69c:	b928      	cbnz	r0, 800e6aa <__i2b+0x1a>
 800e69e:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <__i2b+0x24>)
 800e6a0:	4805      	ldr	r0, [pc, #20]	; (800e6b8 <__i2b+0x28>)
 800e6a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e6a6:	f000 fd35 	bl	800f114 <__assert_func>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	6144      	str	r4, [r0, #20]
 800e6ae:	6103      	str	r3, [r0, #16]
 800e6b0:	bd10      	pop	{r4, pc}
 800e6b2:	bf00      	nop
 800e6b4:	080104c3 	.word	0x080104c3
 800e6b8:	08010534 	.word	0x08010534

0800e6bc <__multiply>:
 800e6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c0:	4691      	mov	r9, r2
 800e6c2:	690a      	ldr	r2, [r1, #16]
 800e6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	bfb8      	it	lt
 800e6cc:	460b      	movlt	r3, r1
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	bfbc      	itt	lt
 800e6d2:	464c      	movlt	r4, r9
 800e6d4:	4699      	movlt	r9, r3
 800e6d6:	6927      	ldr	r7, [r4, #16]
 800e6d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e6dc:	68a3      	ldr	r3, [r4, #8]
 800e6de:	6861      	ldr	r1, [r4, #4]
 800e6e0:	eb07 060a 	add.w	r6, r7, sl
 800e6e4:	42b3      	cmp	r3, r6
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	bfb8      	it	lt
 800e6ea:	3101      	addlt	r1, #1
 800e6ec:	f7ff fed8 	bl	800e4a0 <_Balloc>
 800e6f0:	b930      	cbnz	r0, 800e700 <__multiply+0x44>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	4b44      	ldr	r3, [pc, #272]	; (800e808 <__multiply+0x14c>)
 800e6f6:	4845      	ldr	r0, [pc, #276]	; (800e80c <__multiply+0x150>)
 800e6f8:	f240 115d 	movw	r1, #349	; 0x15d
 800e6fc:	f000 fd0a 	bl	800f114 <__assert_func>
 800e700:	f100 0514 	add.w	r5, r0, #20
 800e704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e708:	462b      	mov	r3, r5
 800e70a:	2200      	movs	r2, #0
 800e70c:	4543      	cmp	r3, r8
 800e70e:	d321      	bcc.n	800e754 <__multiply+0x98>
 800e710:	f104 0314 	add.w	r3, r4, #20
 800e714:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e718:	f109 0314 	add.w	r3, r9, #20
 800e71c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e720:	9202      	str	r2, [sp, #8]
 800e722:	1b3a      	subs	r2, r7, r4
 800e724:	3a15      	subs	r2, #21
 800e726:	f022 0203 	bic.w	r2, r2, #3
 800e72a:	3204      	adds	r2, #4
 800e72c:	f104 0115 	add.w	r1, r4, #21
 800e730:	428f      	cmp	r7, r1
 800e732:	bf38      	it	cc
 800e734:	2204      	movcc	r2, #4
 800e736:	9201      	str	r2, [sp, #4]
 800e738:	9a02      	ldr	r2, [sp, #8]
 800e73a:	9303      	str	r3, [sp, #12]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d80c      	bhi.n	800e75a <__multiply+0x9e>
 800e740:	2e00      	cmp	r6, #0
 800e742:	dd03      	ble.n	800e74c <__multiply+0x90>
 800e744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d05a      	beq.n	800e802 <__multiply+0x146>
 800e74c:	6106      	str	r6, [r0, #16]
 800e74e:	b005      	add	sp, #20
 800e750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e754:	f843 2b04 	str.w	r2, [r3], #4
 800e758:	e7d8      	b.n	800e70c <__multiply+0x50>
 800e75a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e75e:	f1ba 0f00 	cmp.w	sl, #0
 800e762:	d024      	beq.n	800e7ae <__multiply+0xf2>
 800e764:	f104 0e14 	add.w	lr, r4, #20
 800e768:	46a9      	mov	r9, r5
 800e76a:	f04f 0c00 	mov.w	ip, #0
 800e76e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e772:	f8d9 1000 	ldr.w	r1, [r9]
 800e776:	fa1f fb82 	uxth.w	fp, r2
 800e77a:	b289      	uxth	r1, r1
 800e77c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e780:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e784:	f8d9 2000 	ldr.w	r2, [r9]
 800e788:	4461      	add	r1, ip
 800e78a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e78e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e792:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e796:	b289      	uxth	r1, r1
 800e798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e79c:	4577      	cmp	r7, lr
 800e79e:	f849 1b04 	str.w	r1, [r9], #4
 800e7a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7a6:	d8e2      	bhi.n	800e76e <__multiply+0xb2>
 800e7a8:	9a01      	ldr	r2, [sp, #4]
 800e7aa:	f845 c002 	str.w	ip, [r5, r2]
 800e7ae:	9a03      	ldr	r2, [sp, #12]
 800e7b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	f1b9 0f00 	cmp.w	r9, #0
 800e7ba:	d020      	beq.n	800e7fe <__multiply+0x142>
 800e7bc:	6829      	ldr	r1, [r5, #0]
 800e7be:	f104 0c14 	add.w	ip, r4, #20
 800e7c2:	46ae      	mov	lr, r5
 800e7c4:	f04f 0a00 	mov.w	sl, #0
 800e7c8:	f8bc b000 	ldrh.w	fp, [ip]
 800e7cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e7d0:	fb09 220b 	mla	r2, r9, fp, r2
 800e7d4:	4492      	add	sl, r2
 800e7d6:	b289      	uxth	r1, r1
 800e7d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e7dc:	f84e 1b04 	str.w	r1, [lr], #4
 800e7e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7e4:	f8be 1000 	ldrh.w	r1, [lr]
 800e7e8:	0c12      	lsrs	r2, r2, #16
 800e7ea:	fb09 1102 	mla	r1, r9, r2, r1
 800e7ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e7f2:	4567      	cmp	r7, ip
 800e7f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e7f8:	d8e6      	bhi.n	800e7c8 <__multiply+0x10c>
 800e7fa:	9a01      	ldr	r2, [sp, #4]
 800e7fc:	50a9      	str	r1, [r5, r2]
 800e7fe:	3504      	adds	r5, #4
 800e800:	e79a      	b.n	800e738 <__multiply+0x7c>
 800e802:	3e01      	subs	r6, #1
 800e804:	e79c      	b.n	800e740 <__multiply+0x84>
 800e806:	bf00      	nop
 800e808:	080104c3 	.word	0x080104c3
 800e80c:	08010534 	.word	0x08010534

0800e810 <__pow5mult>:
 800e810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e814:	4615      	mov	r5, r2
 800e816:	f012 0203 	ands.w	r2, r2, #3
 800e81a:	4606      	mov	r6, r0
 800e81c:	460f      	mov	r7, r1
 800e81e:	d007      	beq.n	800e830 <__pow5mult+0x20>
 800e820:	4c25      	ldr	r4, [pc, #148]	; (800e8b8 <__pow5mult+0xa8>)
 800e822:	3a01      	subs	r2, #1
 800e824:	2300      	movs	r3, #0
 800e826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e82a:	f7ff fe9b 	bl	800e564 <__multadd>
 800e82e:	4607      	mov	r7, r0
 800e830:	10ad      	asrs	r5, r5, #2
 800e832:	d03d      	beq.n	800e8b0 <__pow5mult+0xa0>
 800e834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e836:	b97c      	cbnz	r4, 800e858 <__pow5mult+0x48>
 800e838:	2010      	movs	r0, #16
 800e83a:	f7ff fe1b 	bl	800e474 <malloc>
 800e83e:	4602      	mov	r2, r0
 800e840:	6270      	str	r0, [r6, #36]	; 0x24
 800e842:	b928      	cbnz	r0, 800e850 <__pow5mult+0x40>
 800e844:	4b1d      	ldr	r3, [pc, #116]	; (800e8bc <__pow5mult+0xac>)
 800e846:	481e      	ldr	r0, [pc, #120]	; (800e8c0 <__pow5mult+0xb0>)
 800e848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e84c:	f000 fc62 	bl	800f114 <__assert_func>
 800e850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e854:	6004      	str	r4, [r0, #0]
 800e856:	60c4      	str	r4, [r0, #12]
 800e858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e860:	b94c      	cbnz	r4, 800e876 <__pow5mult+0x66>
 800e862:	f240 2171 	movw	r1, #625	; 0x271
 800e866:	4630      	mov	r0, r6
 800e868:	f7ff ff12 	bl	800e690 <__i2b>
 800e86c:	2300      	movs	r3, #0
 800e86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e872:	4604      	mov	r4, r0
 800e874:	6003      	str	r3, [r0, #0]
 800e876:	f04f 0900 	mov.w	r9, #0
 800e87a:	07eb      	lsls	r3, r5, #31
 800e87c:	d50a      	bpl.n	800e894 <__pow5mult+0x84>
 800e87e:	4639      	mov	r1, r7
 800e880:	4622      	mov	r2, r4
 800e882:	4630      	mov	r0, r6
 800e884:	f7ff ff1a 	bl	800e6bc <__multiply>
 800e888:	4639      	mov	r1, r7
 800e88a:	4680      	mov	r8, r0
 800e88c:	4630      	mov	r0, r6
 800e88e:	f7ff fe47 	bl	800e520 <_Bfree>
 800e892:	4647      	mov	r7, r8
 800e894:	106d      	asrs	r5, r5, #1
 800e896:	d00b      	beq.n	800e8b0 <__pow5mult+0xa0>
 800e898:	6820      	ldr	r0, [r4, #0]
 800e89a:	b938      	cbnz	r0, 800e8ac <__pow5mult+0x9c>
 800e89c:	4622      	mov	r2, r4
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f7ff ff0b 	bl	800e6bc <__multiply>
 800e8a6:	6020      	str	r0, [r4, #0]
 800e8a8:	f8c0 9000 	str.w	r9, [r0]
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	e7e4      	b.n	800e87a <__pow5mult+0x6a>
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b6:	bf00      	nop
 800e8b8:	08010680 	.word	0x08010680
 800e8bc:	08010451 	.word	0x08010451
 800e8c0:	08010534 	.word	0x08010534

0800e8c4 <__lshift>:
 800e8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	6849      	ldr	r1, [r1, #4]
 800e8cc:	6923      	ldr	r3, [r4, #16]
 800e8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	4691      	mov	r9, r2
 800e8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8dc:	f108 0601 	add.w	r6, r8, #1
 800e8e0:	42b3      	cmp	r3, r6
 800e8e2:	db0b      	blt.n	800e8fc <__lshift+0x38>
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	f7ff fddb 	bl	800e4a0 <_Balloc>
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	b948      	cbnz	r0, 800e902 <__lshift+0x3e>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	4b2a      	ldr	r3, [pc, #168]	; (800e99c <__lshift+0xd8>)
 800e8f2:	482b      	ldr	r0, [pc, #172]	; (800e9a0 <__lshift+0xdc>)
 800e8f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8f8:	f000 fc0c 	bl	800f114 <__assert_func>
 800e8fc:	3101      	adds	r1, #1
 800e8fe:	005b      	lsls	r3, r3, #1
 800e900:	e7ee      	b.n	800e8e0 <__lshift+0x1c>
 800e902:	2300      	movs	r3, #0
 800e904:	f100 0114 	add.w	r1, r0, #20
 800e908:	f100 0210 	add.w	r2, r0, #16
 800e90c:	4618      	mov	r0, r3
 800e90e:	4553      	cmp	r3, sl
 800e910:	db37      	blt.n	800e982 <__lshift+0xbe>
 800e912:	6920      	ldr	r0, [r4, #16]
 800e914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e918:	f104 0314 	add.w	r3, r4, #20
 800e91c:	f019 091f 	ands.w	r9, r9, #31
 800e920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e924:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e928:	d02f      	beq.n	800e98a <__lshift+0xc6>
 800e92a:	f1c9 0e20 	rsb	lr, r9, #32
 800e92e:	468a      	mov	sl, r1
 800e930:	f04f 0c00 	mov.w	ip, #0
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	fa02 f209 	lsl.w	r2, r2, r9
 800e93a:	ea42 020c 	orr.w	r2, r2, ip
 800e93e:	f84a 2b04 	str.w	r2, [sl], #4
 800e942:	f853 2b04 	ldr.w	r2, [r3], #4
 800e946:	4298      	cmp	r0, r3
 800e948:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e94c:	d8f2      	bhi.n	800e934 <__lshift+0x70>
 800e94e:	1b03      	subs	r3, r0, r4
 800e950:	3b15      	subs	r3, #21
 800e952:	f023 0303 	bic.w	r3, r3, #3
 800e956:	3304      	adds	r3, #4
 800e958:	f104 0215 	add.w	r2, r4, #21
 800e95c:	4290      	cmp	r0, r2
 800e95e:	bf38      	it	cc
 800e960:	2304      	movcc	r3, #4
 800e962:	f841 c003 	str.w	ip, [r1, r3]
 800e966:	f1bc 0f00 	cmp.w	ip, #0
 800e96a:	d001      	beq.n	800e970 <__lshift+0xac>
 800e96c:	f108 0602 	add.w	r6, r8, #2
 800e970:	3e01      	subs	r6, #1
 800e972:	4638      	mov	r0, r7
 800e974:	612e      	str	r6, [r5, #16]
 800e976:	4621      	mov	r1, r4
 800e978:	f7ff fdd2 	bl	800e520 <_Bfree>
 800e97c:	4628      	mov	r0, r5
 800e97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e982:	f842 0f04 	str.w	r0, [r2, #4]!
 800e986:	3301      	adds	r3, #1
 800e988:	e7c1      	b.n	800e90e <__lshift+0x4a>
 800e98a:	3904      	subs	r1, #4
 800e98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e990:	f841 2f04 	str.w	r2, [r1, #4]!
 800e994:	4298      	cmp	r0, r3
 800e996:	d8f9      	bhi.n	800e98c <__lshift+0xc8>
 800e998:	e7ea      	b.n	800e970 <__lshift+0xac>
 800e99a:	bf00      	nop
 800e99c:	080104c3 	.word	0x080104c3
 800e9a0:	08010534 	.word	0x08010534

0800e9a4 <__mcmp>:
 800e9a4:	b530      	push	{r4, r5, lr}
 800e9a6:	6902      	ldr	r2, [r0, #16]
 800e9a8:	690c      	ldr	r4, [r1, #16]
 800e9aa:	1b12      	subs	r2, r2, r4
 800e9ac:	d10e      	bne.n	800e9cc <__mcmp+0x28>
 800e9ae:	f100 0314 	add.w	r3, r0, #20
 800e9b2:	3114      	adds	r1, #20
 800e9b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e9b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e9c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e9c4:	42a5      	cmp	r5, r4
 800e9c6:	d003      	beq.n	800e9d0 <__mcmp+0x2c>
 800e9c8:	d305      	bcc.n	800e9d6 <__mcmp+0x32>
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	bd30      	pop	{r4, r5, pc}
 800e9d0:	4283      	cmp	r3, r0
 800e9d2:	d3f3      	bcc.n	800e9bc <__mcmp+0x18>
 800e9d4:	e7fa      	b.n	800e9cc <__mcmp+0x28>
 800e9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9da:	e7f7      	b.n	800e9cc <__mcmp+0x28>

0800e9dc <__mdiff>:
 800e9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	4690      	mov	r8, r2
 800e9ea:	f7ff ffdb 	bl	800e9a4 <__mcmp>
 800e9ee:	1e05      	subs	r5, r0, #0
 800e9f0:	d110      	bne.n	800ea14 <__mdiff+0x38>
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f7ff fd53 	bl	800e4a0 <_Balloc>
 800e9fa:	b930      	cbnz	r0, 800ea0a <__mdiff+0x2e>
 800e9fc:	4b3a      	ldr	r3, [pc, #232]	; (800eae8 <__mdiff+0x10c>)
 800e9fe:	4602      	mov	r2, r0
 800ea00:	f240 2132 	movw	r1, #562	; 0x232
 800ea04:	4839      	ldr	r0, [pc, #228]	; (800eaec <__mdiff+0x110>)
 800ea06:	f000 fb85 	bl	800f114 <__assert_func>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea14:	bfa4      	itt	ge
 800ea16:	4643      	movge	r3, r8
 800ea18:	46a0      	movge	r8, r4
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea20:	bfa6      	itte	ge
 800ea22:	461c      	movge	r4, r3
 800ea24:	2500      	movge	r5, #0
 800ea26:	2501      	movlt	r5, #1
 800ea28:	f7ff fd3a 	bl	800e4a0 <_Balloc>
 800ea2c:	b920      	cbnz	r0, 800ea38 <__mdiff+0x5c>
 800ea2e:	4b2e      	ldr	r3, [pc, #184]	; (800eae8 <__mdiff+0x10c>)
 800ea30:	4602      	mov	r2, r0
 800ea32:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea36:	e7e5      	b.n	800ea04 <__mdiff+0x28>
 800ea38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea3c:	6926      	ldr	r6, [r4, #16]
 800ea3e:	60c5      	str	r5, [r0, #12]
 800ea40:	f104 0914 	add.w	r9, r4, #20
 800ea44:	f108 0514 	add.w	r5, r8, #20
 800ea48:	f100 0e14 	add.w	lr, r0, #20
 800ea4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea54:	f108 0210 	add.w	r2, r8, #16
 800ea58:	46f2      	mov	sl, lr
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea64:	fa1f f883 	uxth.w	r8, r3
 800ea68:	fa11 f18b 	uxtah	r1, r1, fp
 800ea6c:	0c1b      	lsrs	r3, r3, #16
 800ea6e:	eba1 0808 	sub.w	r8, r1, r8
 800ea72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea7a:	fa1f f888 	uxth.w	r8, r8
 800ea7e:	1419      	asrs	r1, r3, #16
 800ea80:	454e      	cmp	r6, r9
 800ea82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea86:	f84a 3b04 	str.w	r3, [sl], #4
 800ea8a:	d8e7      	bhi.n	800ea5c <__mdiff+0x80>
 800ea8c:	1b33      	subs	r3, r6, r4
 800ea8e:	3b15      	subs	r3, #21
 800ea90:	f023 0303 	bic.w	r3, r3, #3
 800ea94:	3304      	adds	r3, #4
 800ea96:	3415      	adds	r4, #21
 800ea98:	42a6      	cmp	r6, r4
 800ea9a:	bf38      	it	cc
 800ea9c:	2304      	movcc	r3, #4
 800ea9e:	441d      	add	r5, r3
 800eaa0:	4473      	add	r3, lr
 800eaa2:	469e      	mov	lr, r3
 800eaa4:	462e      	mov	r6, r5
 800eaa6:	4566      	cmp	r6, ip
 800eaa8:	d30e      	bcc.n	800eac8 <__mdiff+0xec>
 800eaaa:	f10c 0203 	add.w	r2, ip, #3
 800eaae:	1b52      	subs	r2, r2, r5
 800eab0:	f022 0203 	bic.w	r2, r2, #3
 800eab4:	3d03      	subs	r5, #3
 800eab6:	45ac      	cmp	ip, r5
 800eab8:	bf38      	it	cc
 800eaba:	2200      	movcc	r2, #0
 800eabc:	441a      	add	r2, r3
 800eabe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eac2:	b17b      	cbz	r3, 800eae4 <__mdiff+0x108>
 800eac4:	6107      	str	r7, [r0, #16]
 800eac6:	e7a3      	b.n	800ea10 <__mdiff+0x34>
 800eac8:	f856 8b04 	ldr.w	r8, [r6], #4
 800eacc:	fa11 f288 	uxtah	r2, r1, r8
 800ead0:	1414      	asrs	r4, r2, #16
 800ead2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ead6:	b292      	uxth	r2, r2
 800ead8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eadc:	f84e 2b04 	str.w	r2, [lr], #4
 800eae0:	1421      	asrs	r1, r4, #16
 800eae2:	e7e0      	b.n	800eaa6 <__mdiff+0xca>
 800eae4:	3f01      	subs	r7, #1
 800eae6:	e7ea      	b.n	800eabe <__mdiff+0xe2>
 800eae8:	080104c3 	.word	0x080104c3
 800eaec:	08010534 	.word	0x08010534

0800eaf0 <__d2b>:
 800eaf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eaf4:	4689      	mov	r9, r1
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	ec57 6b10 	vmov	r6, r7, d0
 800eafc:	4690      	mov	r8, r2
 800eafe:	f7ff fccf 	bl	800e4a0 <_Balloc>
 800eb02:	4604      	mov	r4, r0
 800eb04:	b930      	cbnz	r0, 800eb14 <__d2b+0x24>
 800eb06:	4602      	mov	r2, r0
 800eb08:	4b25      	ldr	r3, [pc, #148]	; (800eba0 <__d2b+0xb0>)
 800eb0a:	4826      	ldr	r0, [pc, #152]	; (800eba4 <__d2b+0xb4>)
 800eb0c:	f240 310a 	movw	r1, #778	; 0x30a
 800eb10:	f000 fb00 	bl	800f114 <__assert_func>
 800eb14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eb18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb1c:	bb35      	cbnz	r5, 800eb6c <__d2b+0x7c>
 800eb1e:	2e00      	cmp	r6, #0
 800eb20:	9301      	str	r3, [sp, #4]
 800eb22:	d028      	beq.n	800eb76 <__d2b+0x86>
 800eb24:	4668      	mov	r0, sp
 800eb26:	9600      	str	r6, [sp, #0]
 800eb28:	f7ff fd82 	bl	800e630 <__lo0bits>
 800eb2c:	9900      	ldr	r1, [sp, #0]
 800eb2e:	b300      	cbz	r0, 800eb72 <__d2b+0x82>
 800eb30:	9a01      	ldr	r2, [sp, #4]
 800eb32:	f1c0 0320 	rsb	r3, r0, #32
 800eb36:	fa02 f303 	lsl.w	r3, r2, r3
 800eb3a:	430b      	orrs	r3, r1
 800eb3c:	40c2      	lsrs	r2, r0
 800eb3e:	6163      	str	r3, [r4, #20]
 800eb40:	9201      	str	r2, [sp, #4]
 800eb42:	9b01      	ldr	r3, [sp, #4]
 800eb44:	61a3      	str	r3, [r4, #24]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bf14      	ite	ne
 800eb4a:	2202      	movne	r2, #2
 800eb4c:	2201      	moveq	r2, #1
 800eb4e:	6122      	str	r2, [r4, #16]
 800eb50:	b1d5      	cbz	r5, 800eb88 <__d2b+0x98>
 800eb52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb56:	4405      	add	r5, r0
 800eb58:	f8c9 5000 	str.w	r5, [r9]
 800eb5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb60:	f8c8 0000 	str.w	r0, [r8]
 800eb64:	4620      	mov	r0, r4
 800eb66:	b003      	add	sp, #12
 800eb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb70:	e7d5      	b.n	800eb1e <__d2b+0x2e>
 800eb72:	6161      	str	r1, [r4, #20]
 800eb74:	e7e5      	b.n	800eb42 <__d2b+0x52>
 800eb76:	a801      	add	r0, sp, #4
 800eb78:	f7ff fd5a 	bl	800e630 <__lo0bits>
 800eb7c:	9b01      	ldr	r3, [sp, #4]
 800eb7e:	6163      	str	r3, [r4, #20]
 800eb80:	2201      	movs	r2, #1
 800eb82:	6122      	str	r2, [r4, #16]
 800eb84:	3020      	adds	r0, #32
 800eb86:	e7e3      	b.n	800eb50 <__d2b+0x60>
 800eb88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb90:	f8c9 0000 	str.w	r0, [r9]
 800eb94:	6918      	ldr	r0, [r3, #16]
 800eb96:	f7ff fd2b 	bl	800e5f0 <__hi0bits>
 800eb9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb9e:	e7df      	b.n	800eb60 <__d2b+0x70>
 800eba0:	080104c3 	.word	0x080104c3
 800eba4:	08010534 	.word	0x08010534

0800eba8 <_calloc_r>:
 800eba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebaa:	fba1 2402 	umull	r2, r4, r1, r2
 800ebae:	b94c      	cbnz	r4, 800ebc4 <_calloc_r+0x1c>
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	9201      	str	r2, [sp, #4]
 800ebb4:	f000 f87a 	bl	800ecac <_malloc_r>
 800ebb8:	9a01      	ldr	r2, [sp, #4]
 800ebba:	4605      	mov	r5, r0
 800ebbc:	b930      	cbnz	r0, 800ebcc <_calloc_r+0x24>
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	b003      	add	sp, #12
 800ebc2:	bd30      	pop	{r4, r5, pc}
 800ebc4:	220c      	movs	r2, #12
 800ebc6:	6002      	str	r2, [r0, #0]
 800ebc8:	2500      	movs	r5, #0
 800ebca:	e7f8      	b.n	800ebbe <_calloc_r+0x16>
 800ebcc:	4621      	mov	r1, r4
 800ebce:	f7fd fdf3 	bl	800c7b8 <memset>
 800ebd2:	e7f4      	b.n	800ebbe <_calloc_r+0x16>

0800ebd4 <_free_r>:
 800ebd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebd6:	2900      	cmp	r1, #0
 800ebd8:	d044      	beq.n	800ec64 <_free_r+0x90>
 800ebda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebde:	9001      	str	r0, [sp, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f1a1 0404 	sub.w	r4, r1, #4
 800ebe6:	bfb8      	it	lt
 800ebe8:	18e4      	addlt	r4, r4, r3
 800ebea:	f000 fb19 	bl	800f220 <__malloc_lock>
 800ebee:	4a1e      	ldr	r2, [pc, #120]	; (800ec68 <_free_r+0x94>)
 800ebf0:	9801      	ldr	r0, [sp, #4]
 800ebf2:	6813      	ldr	r3, [r2, #0]
 800ebf4:	b933      	cbnz	r3, 800ec04 <_free_r+0x30>
 800ebf6:	6063      	str	r3, [r4, #4]
 800ebf8:	6014      	str	r4, [r2, #0]
 800ebfa:	b003      	add	sp, #12
 800ebfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec00:	f000 bb14 	b.w	800f22c <__malloc_unlock>
 800ec04:	42a3      	cmp	r3, r4
 800ec06:	d908      	bls.n	800ec1a <_free_r+0x46>
 800ec08:	6825      	ldr	r5, [r4, #0]
 800ec0a:	1961      	adds	r1, r4, r5
 800ec0c:	428b      	cmp	r3, r1
 800ec0e:	bf01      	itttt	eq
 800ec10:	6819      	ldreq	r1, [r3, #0]
 800ec12:	685b      	ldreq	r3, [r3, #4]
 800ec14:	1949      	addeq	r1, r1, r5
 800ec16:	6021      	streq	r1, [r4, #0]
 800ec18:	e7ed      	b.n	800ebf6 <_free_r+0x22>
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	b10b      	cbz	r3, 800ec24 <_free_r+0x50>
 800ec20:	42a3      	cmp	r3, r4
 800ec22:	d9fa      	bls.n	800ec1a <_free_r+0x46>
 800ec24:	6811      	ldr	r1, [r2, #0]
 800ec26:	1855      	adds	r5, r2, r1
 800ec28:	42a5      	cmp	r5, r4
 800ec2a:	d10b      	bne.n	800ec44 <_free_r+0x70>
 800ec2c:	6824      	ldr	r4, [r4, #0]
 800ec2e:	4421      	add	r1, r4
 800ec30:	1854      	adds	r4, r2, r1
 800ec32:	42a3      	cmp	r3, r4
 800ec34:	6011      	str	r1, [r2, #0]
 800ec36:	d1e0      	bne.n	800ebfa <_free_r+0x26>
 800ec38:	681c      	ldr	r4, [r3, #0]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	6053      	str	r3, [r2, #4]
 800ec3e:	4421      	add	r1, r4
 800ec40:	6011      	str	r1, [r2, #0]
 800ec42:	e7da      	b.n	800ebfa <_free_r+0x26>
 800ec44:	d902      	bls.n	800ec4c <_free_r+0x78>
 800ec46:	230c      	movs	r3, #12
 800ec48:	6003      	str	r3, [r0, #0]
 800ec4a:	e7d6      	b.n	800ebfa <_free_r+0x26>
 800ec4c:	6825      	ldr	r5, [r4, #0]
 800ec4e:	1961      	adds	r1, r4, r5
 800ec50:	428b      	cmp	r3, r1
 800ec52:	bf04      	itt	eq
 800ec54:	6819      	ldreq	r1, [r3, #0]
 800ec56:	685b      	ldreq	r3, [r3, #4]
 800ec58:	6063      	str	r3, [r4, #4]
 800ec5a:	bf04      	itt	eq
 800ec5c:	1949      	addeq	r1, r1, r5
 800ec5e:	6021      	streq	r1, [r4, #0]
 800ec60:	6054      	str	r4, [r2, #4]
 800ec62:	e7ca      	b.n	800ebfa <_free_r+0x26>
 800ec64:	b003      	add	sp, #12
 800ec66:	bd30      	pop	{r4, r5, pc}
 800ec68:	20000694 	.word	0x20000694

0800ec6c <sbrk_aligned>:
 800ec6c:	b570      	push	{r4, r5, r6, lr}
 800ec6e:	4e0e      	ldr	r6, [pc, #56]	; (800eca8 <sbrk_aligned+0x3c>)
 800ec70:	460c      	mov	r4, r1
 800ec72:	6831      	ldr	r1, [r6, #0]
 800ec74:	4605      	mov	r5, r0
 800ec76:	b911      	cbnz	r1, 800ec7e <sbrk_aligned+0x12>
 800ec78:	f000 f9e6 	bl	800f048 <_sbrk_r>
 800ec7c:	6030      	str	r0, [r6, #0]
 800ec7e:	4621      	mov	r1, r4
 800ec80:	4628      	mov	r0, r5
 800ec82:	f000 f9e1 	bl	800f048 <_sbrk_r>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	d00a      	beq.n	800eca0 <sbrk_aligned+0x34>
 800ec8a:	1cc4      	adds	r4, r0, #3
 800ec8c:	f024 0403 	bic.w	r4, r4, #3
 800ec90:	42a0      	cmp	r0, r4
 800ec92:	d007      	beq.n	800eca4 <sbrk_aligned+0x38>
 800ec94:	1a21      	subs	r1, r4, r0
 800ec96:	4628      	mov	r0, r5
 800ec98:	f000 f9d6 	bl	800f048 <_sbrk_r>
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d101      	bne.n	800eca4 <sbrk_aligned+0x38>
 800eca0:	f04f 34ff 	mov.w	r4, #4294967295
 800eca4:	4620      	mov	r0, r4
 800eca6:	bd70      	pop	{r4, r5, r6, pc}
 800eca8:	20000698 	.word	0x20000698

0800ecac <_malloc_r>:
 800ecac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb0:	1ccd      	adds	r5, r1, #3
 800ecb2:	f025 0503 	bic.w	r5, r5, #3
 800ecb6:	3508      	adds	r5, #8
 800ecb8:	2d0c      	cmp	r5, #12
 800ecba:	bf38      	it	cc
 800ecbc:	250c      	movcc	r5, #12
 800ecbe:	2d00      	cmp	r5, #0
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	db01      	blt.n	800ecc8 <_malloc_r+0x1c>
 800ecc4:	42a9      	cmp	r1, r5
 800ecc6:	d905      	bls.n	800ecd4 <_malloc_r+0x28>
 800ecc8:	230c      	movs	r3, #12
 800ecca:	603b      	str	r3, [r7, #0]
 800eccc:	2600      	movs	r6, #0
 800ecce:	4630      	mov	r0, r6
 800ecd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd4:	4e2e      	ldr	r6, [pc, #184]	; (800ed90 <_malloc_r+0xe4>)
 800ecd6:	f000 faa3 	bl	800f220 <__malloc_lock>
 800ecda:	6833      	ldr	r3, [r6, #0]
 800ecdc:	461c      	mov	r4, r3
 800ecde:	bb34      	cbnz	r4, 800ed2e <_malloc_r+0x82>
 800ece0:	4629      	mov	r1, r5
 800ece2:	4638      	mov	r0, r7
 800ece4:	f7ff ffc2 	bl	800ec6c <sbrk_aligned>
 800ece8:	1c43      	adds	r3, r0, #1
 800ecea:	4604      	mov	r4, r0
 800ecec:	d14d      	bne.n	800ed8a <_malloc_r+0xde>
 800ecee:	6834      	ldr	r4, [r6, #0]
 800ecf0:	4626      	mov	r6, r4
 800ecf2:	2e00      	cmp	r6, #0
 800ecf4:	d140      	bne.n	800ed78 <_malloc_r+0xcc>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	4631      	mov	r1, r6
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	eb04 0803 	add.w	r8, r4, r3
 800ed00:	f000 f9a2 	bl	800f048 <_sbrk_r>
 800ed04:	4580      	cmp	r8, r0
 800ed06:	d13a      	bne.n	800ed7e <_malloc_r+0xd2>
 800ed08:	6821      	ldr	r1, [r4, #0]
 800ed0a:	3503      	adds	r5, #3
 800ed0c:	1a6d      	subs	r5, r5, r1
 800ed0e:	f025 0503 	bic.w	r5, r5, #3
 800ed12:	3508      	adds	r5, #8
 800ed14:	2d0c      	cmp	r5, #12
 800ed16:	bf38      	it	cc
 800ed18:	250c      	movcc	r5, #12
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	f7ff ffa5 	bl	800ec6c <sbrk_aligned>
 800ed22:	3001      	adds	r0, #1
 800ed24:	d02b      	beq.n	800ed7e <_malloc_r+0xd2>
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	442b      	add	r3, r5
 800ed2a:	6023      	str	r3, [r4, #0]
 800ed2c:	e00e      	b.n	800ed4c <_malloc_r+0xa0>
 800ed2e:	6822      	ldr	r2, [r4, #0]
 800ed30:	1b52      	subs	r2, r2, r5
 800ed32:	d41e      	bmi.n	800ed72 <_malloc_r+0xc6>
 800ed34:	2a0b      	cmp	r2, #11
 800ed36:	d916      	bls.n	800ed66 <_malloc_r+0xba>
 800ed38:	1961      	adds	r1, r4, r5
 800ed3a:	42a3      	cmp	r3, r4
 800ed3c:	6025      	str	r5, [r4, #0]
 800ed3e:	bf18      	it	ne
 800ed40:	6059      	strne	r1, [r3, #4]
 800ed42:	6863      	ldr	r3, [r4, #4]
 800ed44:	bf08      	it	eq
 800ed46:	6031      	streq	r1, [r6, #0]
 800ed48:	5162      	str	r2, [r4, r5]
 800ed4a:	604b      	str	r3, [r1, #4]
 800ed4c:	4638      	mov	r0, r7
 800ed4e:	f104 060b 	add.w	r6, r4, #11
 800ed52:	f000 fa6b 	bl	800f22c <__malloc_unlock>
 800ed56:	f026 0607 	bic.w	r6, r6, #7
 800ed5a:	1d23      	adds	r3, r4, #4
 800ed5c:	1af2      	subs	r2, r6, r3
 800ed5e:	d0b6      	beq.n	800ecce <_malloc_r+0x22>
 800ed60:	1b9b      	subs	r3, r3, r6
 800ed62:	50a3      	str	r3, [r4, r2]
 800ed64:	e7b3      	b.n	800ecce <_malloc_r+0x22>
 800ed66:	6862      	ldr	r2, [r4, #4]
 800ed68:	42a3      	cmp	r3, r4
 800ed6a:	bf0c      	ite	eq
 800ed6c:	6032      	streq	r2, [r6, #0]
 800ed6e:	605a      	strne	r2, [r3, #4]
 800ed70:	e7ec      	b.n	800ed4c <_malloc_r+0xa0>
 800ed72:	4623      	mov	r3, r4
 800ed74:	6864      	ldr	r4, [r4, #4]
 800ed76:	e7b2      	b.n	800ecde <_malloc_r+0x32>
 800ed78:	4634      	mov	r4, r6
 800ed7a:	6876      	ldr	r6, [r6, #4]
 800ed7c:	e7b9      	b.n	800ecf2 <_malloc_r+0x46>
 800ed7e:	230c      	movs	r3, #12
 800ed80:	603b      	str	r3, [r7, #0]
 800ed82:	4638      	mov	r0, r7
 800ed84:	f000 fa52 	bl	800f22c <__malloc_unlock>
 800ed88:	e7a1      	b.n	800ecce <_malloc_r+0x22>
 800ed8a:	6025      	str	r5, [r4, #0]
 800ed8c:	e7de      	b.n	800ed4c <_malloc_r+0xa0>
 800ed8e:	bf00      	nop
 800ed90:	20000694 	.word	0x20000694

0800ed94 <__sfputc_r>:
 800ed94:	6893      	ldr	r3, [r2, #8]
 800ed96:	3b01      	subs	r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	b410      	push	{r4}
 800ed9c:	6093      	str	r3, [r2, #8]
 800ed9e:	da08      	bge.n	800edb2 <__sfputc_r+0x1e>
 800eda0:	6994      	ldr	r4, [r2, #24]
 800eda2:	42a3      	cmp	r3, r4
 800eda4:	db01      	blt.n	800edaa <__sfputc_r+0x16>
 800eda6:	290a      	cmp	r1, #10
 800eda8:	d103      	bne.n	800edb2 <__sfputc_r+0x1e>
 800edaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edae:	f7fe ba03 	b.w	800d1b8 <__swbuf_r>
 800edb2:	6813      	ldr	r3, [r2, #0]
 800edb4:	1c58      	adds	r0, r3, #1
 800edb6:	6010      	str	r0, [r2, #0]
 800edb8:	7019      	strb	r1, [r3, #0]
 800edba:	4608      	mov	r0, r1
 800edbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc0:	4770      	bx	lr

0800edc2 <__sfputs_r>:
 800edc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc4:	4606      	mov	r6, r0
 800edc6:	460f      	mov	r7, r1
 800edc8:	4614      	mov	r4, r2
 800edca:	18d5      	adds	r5, r2, r3
 800edcc:	42ac      	cmp	r4, r5
 800edce:	d101      	bne.n	800edd4 <__sfputs_r+0x12>
 800edd0:	2000      	movs	r0, #0
 800edd2:	e007      	b.n	800ede4 <__sfputs_r+0x22>
 800edd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd8:	463a      	mov	r2, r7
 800edda:	4630      	mov	r0, r6
 800eddc:	f7ff ffda 	bl	800ed94 <__sfputc_r>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d1f3      	bne.n	800edcc <__sfputs_r+0xa>
 800ede4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ede8 <_vfiprintf_r>:
 800ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	460d      	mov	r5, r1
 800edee:	b09d      	sub	sp, #116	; 0x74
 800edf0:	4614      	mov	r4, r2
 800edf2:	4698      	mov	r8, r3
 800edf4:	4606      	mov	r6, r0
 800edf6:	b118      	cbz	r0, 800ee00 <_vfiprintf_r+0x18>
 800edf8:	6983      	ldr	r3, [r0, #24]
 800edfa:	b90b      	cbnz	r3, 800ee00 <_vfiprintf_r+0x18>
 800edfc:	f7ff fa30 	bl	800e260 <__sinit>
 800ee00:	4b89      	ldr	r3, [pc, #548]	; (800f028 <_vfiprintf_r+0x240>)
 800ee02:	429d      	cmp	r5, r3
 800ee04:	d11b      	bne.n	800ee3e <_vfiprintf_r+0x56>
 800ee06:	6875      	ldr	r5, [r6, #4]
 800ee08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee0a:	07d9      	lsls	r1, r3, #31
 800ee0c:	d405      	bmi.n	800ee1a <_vfiprintf_r+0x32>
 800ee0e:	89ab      	ldrh	r3, [r5, #12]
 800ee10:	059a      	lsls	r2, r3, #22
 800ee12:	d402      	bmi.n	800ee1a <_vfiprintf_r+0x32>
 800ee14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee16:	f7ff fac6 	bl	800e3a6 <__retarget_lock_acquire_recursive>
 800ee1a:	89ab      	ldrh	r3, [r5, #12]
 800ee1c:	071b      	lsls	r3, r3, #28
 800ee1e:	d501      	bpl.n	800ee24 <_vfiprintf_r+0x3c>
 800ee20:	692b      	ldr	r3, [r5, #16]
 800ee22:	b9eb      	cbnz	r3, 800ee60 <_vfiprintf_r+0x78>
 800ee24:	4629      	mov	r1, r5
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7fe fa18 	bl	800d25c <__swsetup_r>
 800ee2c:	b1c0      	cbz	r0, 800ee60 <_vfiprintf_r+0x78>
 800ee2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee30:	07dc      	lsls	r4, r3, #31
 800ee32:	d50e      	bpl.n	800ee52 <_vfiprintf_r+0x6a>
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	b01d      	add	sp, #116	; 0x74
 800ee3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3e:	4b7b      	ldr	r3, [pc, #492]	; (800f02c <_vfiprintf_r+0x244>)
 800ee40:	429d      	cmp	r5, r3
 800ee42:	d101      	bne.n	800ee48 <_vfiprintf_r+0x60>
 800ee44:	68b5      	ldr	r5, [r6, #8]
 800ee46:	e7df      	b.n	800ee08 <_vfiprintf_r+0x20>
 800ee48:	4b79      	ldr	r3, [pc, #484]	; (800f030 <_vfiprintf_r+0x248>)
 800ee4a:	429d      	cmp	r5, r3
 800ee4c:	bf08      	it	eq
 800ee4e:	68f5      	ldreq	r5, [r6, #12]
 800ee50:	e7da      	b.n	800ee08 <_vfiprintf_r+0x20>
 800ee52:	89ab      	ldrh	r3, [r5, #12]
 800ee54:	0598      	lsls	r0, r3, #22
 800ee56:	d4ed      	bmi.n	800ee34 <_vfiprintf_r+0x4c>
 800ee58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee5a:	f7ff faa5 	bl	800e3a8 <__retarget_lock_release_recursive>
 800ee5e:	e7e9      	b.n	800ee34 <_vfiprintf_r+0x4c>
 800ee60:	2300      	movs	r3, #0
 800ee62:	9309      	str	r3, [sp, #36]	; 0x24
 800ee64:	2320      	movs	r3, #32
 800ee66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee6e:	2330      	movs	r3, #48	; 0x30
 800ee70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f034 <_vfiprintf_r+0x24c>
 800ee74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee78:	f04f 0901 	mov.w	r9, #1
 800ee7c:	4623      	mov	r3, r4
 800ee7e:	469a      	mov	sl, r3
 800ee80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee84:	b10a      	cbz	r2, 800ee8a <_vfiprintf_r+0xa2>
 800ee86:	2a25      	cmp	r2, #37	; 0x25
 800ee88:	d1f9      	bne.n	800ee7e <_vfiprintf_r+0x96>
 800ee8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee8e:	d00b      	beq.n	800eea8 <_vfiprintf_r+0xc0>
 800ee90:	465b      	mov	r3, fp
 800ee92:	4622      	mov	r2, r4
 800ee94:	4629      	mov	r1, r5
 800ee96:	4630      	mov	r0, r6
 800ee98:	f7ff ff93 	bl	800edc2 <__sfputs_r>
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	f000 80aa 	beq.w	800eff6 <_vfiprintf_r+0x20e>
 800eea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eea4:	445a      	add	r2, fp
 800eea6:	9209      	str	r2, [sp, #36]	; 0x24
 800eea8:	f89a 3000 	ldrb.w	r3, [sl]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 80a2 	beq.w	800eff6 <_vfiprintf_r+0x20e>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eebc:	f10a 0a01 	add.w	sl, sl, #1
 800eec0:	9304      	str	r3, [sp, #16]
 800eec2:	9307      	str	r3, [sp, #28]
 800eec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eec8:	931a      	str	r3, [sp, #104]	; 0x68
 800eeca:	4654      	mov	r4, sl
 800eecc:	2205      	movs	r2, #5
 800eece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed2:	4858      	ldr	r0, [pc, #352]	; (800f034 <_vfiprintf_r+0x24c>)
 800eed4:	f7f1 f984 	bl	80001e0 <memchr>
 800eed8:	9a04      	ldr	r2, [sp, #16]
 800eeda:	b9d8      	cbnz	r0, 800ef14 <_vfiprintf_r+0x12c>
 800eedc:	06d1      	lsls	r1, r2, #27
 800eede:	bf44      	itt	mi
 800eee0:	2320      	movmi	r3, #32
 800eee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eee6:	0713      	lsls	r3, r2, #28
 800eee8:	bf44      	itt	mi
 800eeea:	232b      	movmi	r3, #43	; 0x2b
 800eeec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef0:	f89a 3000 	ldrb.w	r3, [sl]
 800eef4:	2b2a      	cmp	r3, #42	; 0x2a
 800eef6:	d015      	beq.n	800ef24 <_vfiprintf_r+0x13c>
 800eef8:	9a07      	ldr	r2, [sp, #28]
 800eefa:	4654      	mov	r4, sl
 800eefc:	2000      	movs	r0, #0
 800eefe:	f04f 0c0a 	mov.w	ip, #10
 800ef02:	4621      	mov	r1, r4
 800ef04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef08:	3b30      	subs	r3, #48	; 0x30
 800ef0a:	2b09      	cmp	r3, #9
 800ef0c:	d94e      	bls.n	800efac <_vfiprintf_r+0x1c4>
 800ef0e:	b1b0      	cbz	r0, 800ef3e <_vfiprintf_r+0x156>
 800ef10:	9207      	str	r2, [sp, #28]
 800ef12:	e014      	b.n	800ef3e <_vfiprintf_r+0x156>
 800ef14:	eba0 0308 	sub.w	r3, r0, r8
 800ef18:	fa09 f303 	lsl.w	r3, r9, r3
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	46a2      	mov	sl, r4
 800ef22:	e7d2      	b.n	800eeca <_vfiprintf_r+0xe2>
 800ef24:	9b03      	ldr	r3, [sp, #12]
 800ef26:	1d19      	adds	r1, r3, #4
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	9103      	str	r1, [sp, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	bfbb      	ittet	lt
 800ef30:	425b      	neglt	r3, r3
 800ef32:	f042 0202 	orrlt.w	r2, r2, #2
 800ef36:	9307      	strge	r3, [sp, #28]
 800ef38:	9307      	strlt	r3, [sp, #28]
 800ef3a:	bfb8      	it	lt
 800ef3c:	9204      	strlt	r2, [sp, #16]
 800ef3e:	7823      	ldrb	r3, [r4, #0]
 800ef40:	2b2e      	cmp	r3, #46	; 0x2e
 800ef42:	d10c      	bne.n	800ef5e <_vfiprintf_r+0x176>
 800ef44:	7863      	ldrb	r3, [r4, #1]
 800ef46:	2b2a      	cmp	r3, #42	; 0x2a
 800ef48:	d135      	bne.n	800efb6 <_vfiprintf_r+0x1ce>
 800ef4a:	9b03      	ldr	r3, [sp, #12]
 800ef4c:	1d1a      	adds	r2, r3, #4
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	9203      	str	r2, [sp, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	bfb8      	it	lt
 800ef56:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef5a:	3402      	adds	r4, #2
 800ef5c:	9305      	str	r3, [sp, #20]
 800ef5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f044 <_vfiprintf_r+0x25c>
 800ef62:	7821      	ldrb	r1, [r4, #0]
 800ef64:	2203      	movs	r2, #3
 800ef66:	4650      	mov	r0, sl
 800ef68:	f7f1 f93a 	bl	80001e0 <memchr>
 800ef6c:	b140      	cbz	r0, 800ef80 <_vfiprintf_r+0x198>
 800ef6e:	2340      	movs	r3, #64	; 0x40
 800ef70:	eba0 000a 	sub.w	r0, r0, sl
 800ef74:	fa03 f000 	lsl.w	r0, r3, r0
 800ef78:	9b04      	ldr	r3, [sp, #16]
 800ef7a:	4303      	orrs	r3, r0
 800ef7c:	3401      	adds	r4, #1
 800ef7e:	9304      	str	r3, [sp, #16]
 800ef80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef84:	482c      	ldr	r0, [pc, #176]	; (800f038 <_vfiprintf_r+0x250>)
 800ef86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef8a:	2206      	movs	r2, #6
 800ef8c:	f7f1 f928 	bl	80001e0 <memchr>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d03f      	beq.n	800f014 <_vfiprintf_r+0x22c>
 800ef94:	4b29      	ldr	r3, [pc, #164]	; (800f03c <_vfiprintf_r+0x254>)
 800ef96:	bb1b      	cbnz	r3, 800efe0 <_vfiprintf_r+0x1f8>
 800ef98:	9b03      	ldr	r3, [sp, #12]
 800ef9a:	3307      	adds	r3, #7
 800ef9c:	f023 0307 	bic.w	r3, r3, #7
 800efa0:	3308      	adds	r3, #8
 800efa2:	9303      	str	r3, [sp, #12]
 800efa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa6:	443b      	add	r3, r7
 800efa8:	9309      	str	r3, [sp, #36]	; 0x24
 800efaa:	e767      	b.n	800ee7c <_vfiprintf_r+0x94>
 800efac:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb0:	460c      	mov	r4, r1
 800efb2:	2001      	movs	r0, #1
 800efb4:	e7a5      	b.n	800ef02 <_vfiprintf_r+0x11a>
 800efb6:	2300      	movs	r3, #0
 800efb8:	3401      	adds	r4, #1
 800efba:	9305      	str	r3, [sp, #20]
 800efbc:	4619      	mov	r1, r3
 800efbe:	f04f 0c0a 	mov.w	ip, #10
 800efc2:	4620      	mov	r0, r4
 800efc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efc8:	3a30      	subs	r2, #48	; 0x30
 800efca:	2a09      	cmp	r2, #9
 800efcc:	d903      	bls.n	800efd6 <_vfiprintf_r+0x1ee>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0c5      	beq.n	800ef5e <_vfiprintf_r+0x176>
 800efd2:	9105      	str	r1, [sp, #20]
 800efd4:	e7c3      	b.n	800ef5e <_vfiprintf_r+0x176>
 800efd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800efda:	4604      	mov	r4, r0
 800efdc:	2301      	movs	r3, #1
 800efde:	e7f0      	b.n	800efc2 <_vfiprintf_r+0x1da>
 800efe0:	ab03      	add	r3, sp, #12
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	462a      	mov	r2, r5
 800efe6:	4b16      	ldr	r3, [pc, #88]	; (800f040 <_vfiprintf_r+0x258>)
 800efe8:	a904      	add	r1, sp, #16
 800efea:	4630      	mov	r0, r6
 800efec:	f7fd fc8c 	bl	800c908 <_printf_float>
 800eff0:	4607      	mov	r7, r0
 800eff2:	1c78      	adds	r0, r7, #1
 800eff4:	d1d6      	bne.n	800efa4 <_vfiprintf_r+0x1bc>
 800eff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eff8:	07d9      	lsls	r1, r3, #31
 800effa:	d405      	bmi.n	800f008 <_vfiprintf_r+0x220>
 800effc:	89ab      	ldrh	r3, [r5, #12]
 800effe:	059a      	lsls	r2, r3, #22
 800f000:	d402      	bmi.n	800f008 <_vfiprintf_r+0x220>
 800f002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f004:	f7ff f9d0 	bl	800e3a8 <__retarget_lock_release_recursive>
 800f008:	89ab      	ldrh	r3, [r5, #12]
 800f00a:	065b      	lsls	r3, r3, #25
 800f00c:	f53f af12 	bmi.w	800ee34 <_vfiprintf_r+0x4c>
 800f010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f012:	e711      	b.n	800ee38 <_vfiprintf_r+0x50>
 800f014:	ab03      	add	r3, sp, #12
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	462a      	mov	r2, r5
 800f01a:	4b09      	ldr	r3, [pc, #36]	; (800f040 <_vfiprintf_r+0x258>)
 800f01c:	a904      	add	r1, sp, #16
 800f01e:	4630      	mov	r0, r6
 800f020:	f7fd ff16 	bl	800ce50 <_printf_i>
 800f024:	e7e4      	b.n	800eff0 <_vfiprintf_r+0x208>
 800f026:	bf00      	nop
 800f028:	080104f4 	.word	0x080104f4
 800f02c:	08010514 	.word	0x08010514
 800f030:	080104d4 	.word	0x080104d4
 800f034:	0801068c 	.word	0x0801068c
 800f038:	08010696 	.word	0x08010696
 800f03c:	0800c909 	.word	0x0800c909
 800f040:	0800edc3 	.word	0x0800edc3
 800f044:	08010692 	.word	0x08010692

0800f048 <_sbrk_r>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	4d06      	ldr	r5, [pc, #24]	; (800f064 <_sbrk_r+0x1c>)
 800f04c:	2300      	movs	r3, #0
 800f04e:	4604      	mov	r4, r0
 800f050:	4608      	mov	r0, r1
 800f052:	602b      	str	r3, [r5, #0]
 800f054:	f7f7 fc24 	bl	80068a0 <_sbrk>
 800f058:	1c43      	adds	r3, r0, #1
 800f05a:	d102      	bne.n	800f062 <_sbrk_r+0x1a>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	b103      	cbz	r3, 800f062 <_sbrk_r+0x1a>
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	bd38      	pop	{r3, r4, r5, pc}
 800f064:	2000069c 	.word	0x2000069c

0800f068 <__sread>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	460c      	mov	r4, r1
 800f06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f070:	f000 f8e2 	bl	800f238 <_read_r>
 800f074:	2800      	cmp	r0, #0
 800f076:	bfab      	itete	ge
 800f078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f07a:	89a3      	ldrhlt	r3, [r4, #12]
 800f07c:	181b      	addge	r3, r3, r0
 800f07e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f082:	bfac      	ite	ge
 800f084:	6563      	strge	r3, [r4, #84]	; 0x54
 800f086:	81a3      	strhlt	r3, [r4, #12]
 800f088:	bd10      	pop	{r4, pc}

0800f08a <__swrite>:
 800f08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08e:	461f      	mov	r7, r3
 800f090:	898b      	ldrh	r3, [r1, #12]
 800f092:	05db      	lsls	r3, r3, #23
 800f094:	4605      	mov	r5, r0
 800f096:	460c      	mov	r4, r1
 800f098:	4616      	mov	r6, r2
 800f09a:	d505      	bpl.n	800f0a8 <__swrite+0x1e>
 800f09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	f000 f898 	bl	800f1d8 <_lseek_r>
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0b2:	81a3      	strh	r3, [r4, #12]
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	463b      	mov	r3, r7
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0be:	f000 b817 	b.w	800f0f0 <_write_r>

0800f0c2 <__sseek>:
 800f0c2:	b510      	push	{r4, lr}
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ca:	f000 f885 	bl	800f1d8 <_lseek_r>
 800f0ce:	1c43      	adds	r3, r0, #1
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	bf15      	itete	ne
 800f0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0de:	81a3      	strheq	r3, [r4, #12]
 800f0e0:	bf18      	it	ne
 800f0e2:	81a3      	strhne	r3, [r4, #12]
 800f0e4:	bd10      	pop	{r4, pc}

0800f0e6 <__sclose>:
 800f0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ea:	f000 b831 	b.w	800f150 <_close_r>
	...

0800f0f0 <_write_r>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	4d07      	ldr	r5, [pc, #28]	; (800f110 <_write_r+0x20>)
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	4608      	mov	r0, r1
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	602a      	str	r2, [r5, #0]
 800f0fe:	461a      	mov	r2, r3
 800f100:	f7f4 fece 	bl	8003ea0 <_write>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d102      	bne.n	800f10e <_write_r+0x1e>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	b103      	cbz	r3, 800f10e <_write_r+0x1e>
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	bd38      	pop	{r3, r4, r5, pc}
 800f110:	2000069c 	.word	0x2000069c

0800f114 <__assert_func>:
 800f114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f116:	4614      	mov	r4, r2
 800f118:	461a      	mov	r2, r3
 800f11a:	4b09      	ldr	r3, [pc, #36]	; (800f140 <__assert_func+0x2c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4605      	mov	r5, r0
 800f120:	68d8      	ldr	r0, [r3, #12]
 800f122:	b14c      	cbz	r4, 800f138 <__assert_func+0x24>
 800f124:	4b07      	ldr	r3, [pc, #28]	; (800f144 <__assert_func+0x30>)
 800f126:	9100      	str	r1, [sp, #0]
 800f128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f12c:	4906      	ldr	r1, [pc, #24]	; (800f148 <__assert_func+0x34>)
 800f12e:	462b      	mov	r3, r5
 800f130:	f000 f81e 	bl	800f170 <fiprintf>
 800f134:	f000 f89f 	bl	800f276 <abort>
 800f138:	4b04      	ldr	r3, [pc, #16]	; (800f14c <__assert_func+0x38>)
 800f13a:	461c      	mov	r4, r3
 800f13c:	e7f3      	b.n	800f126 <__assert_func+0x12>
 800f13e:	bf00      	nop
 800f140:	20000010 	.word	0x20000010
 800f144:	0801069d 	.word	0x0801069d
 800f148:	080106aa 	.word	0x080106aa
 800f14c:	080106d8 	.word	0x080106d8

0800f150 <_close_r>:
 800f150:	b538      	push	{r3, r4, r5, lr}
 800f152:	4d06      	ldr	r5, [pc, #24]	; (800f16c <_close_r+0x1c>)
 800f154:	2300      	movs	r3, #0
 800f156:	4604      	mov	r4, r0
 800f158:	4608      	mov	r0, r1
 800f15a:	602b      	str	r3, [r5, #0]
 800f15c:	f7f7 fb6b 	bl	8006836 <_close>
 800f160:	1c43      	adds	r3, r0, #1
 800f162:	d102      	bne.n	800f16a <_close_r+0x1a>
 800f164:	682b      	ldr	r3, [r5, #0]
 800f166:	b103      	cbz	r3, 800f16a <_close_r+0x1a>
 800f168:	6023      	str	r3, [r4, #0]
 800f16a:	bd38      	pop	{r3, r4, r5, pc}
 800f16c:	2000069c 	.word	0x2000069c

0800f170 <fiprintf>:
 800f170:	b40e      	push	{r1, r2, r3}
 800f172:	b503      	push	{r0, r1, lr}
 800f174:	4601      	mov	r1, r0
 800f176:	ab03      	add	r3, sp, #12
 800f178:	4805      	ldr	r0, [pc, #20]	; (800f190 <fiprintf+0x20>)
 800f17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f17e:	6800      	ldr	r0, [r0, #0]
 800f180:	9301      	str	r3, [sp, #4]
 800f182:	f7ff fe31 	bl	800ede8 <_vfiprintf_r>
 800f186:	b002      	add	sp, #8
 800f188:	f85d eb04 	ldr.w	lr, [sp], #4
 800f18c:	b003      	add	sp, #12
 800f18e:	4770      	bx	lr
 800f190:	20000010 	.word	0x20000010

0800f194 <_fstat_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	4d07      	ldr	r5, [pc, #28]	; (800f1b4 <_fstat_r+0x20>)
 800f198:	2300      	movs	r3, #0
 800f19a:	4604      	mov	r4, r0
 800f19c:	4608      	mov	r0, r1
 800f19e:	4611      	mov	r1, r2
 800f1a0:	602b      	str	r3, [r5, #0]
 800f1a2:	f7f7 fb54 	bl	800684e <_fstat>
 800f1a6:	1c43      	adds	r3, r0, #1
 800f1a8:	d102      	bne.n	800f1b0 <_fstat_r+0x1c>
 800f1aa:	682b      	ldr	r3, [r5, #0]
 800f1ac:	b103      	cbz	r3, 800f1b0 <_fstat_r+0x1c>
 800f1ae:	6023      	str	r3, [r4, #0]
 800f1b0:	bd38      	pop	{r3, r4, r5, pc}
 800f1b2:	bf00      	nop
 800f1b4:	2000069c 	.word	0x2000069c

0800f1b8 <_isatty_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d06      	ldr	r5, [pc, #24]	; (800f1d4 <_isatty_r+0x1c>)
 800f1bc:	2300      	movs	r3, #0
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	602b      	str	r3, [r5, #0]
 800f1c4:	f7f7 fb53 	bl	800686e <_isatty>
 800f1c8:	1c43      	adds	r3, r0, #1
 800f1ca:	d102      	bne.n	800f1d2 <_isatty_r+0x1a>
 800f1cc:	682b      	ldr	r3, [r5, #0]
 800f1ce:	b103      	cbz	r3, 800f1d2 <_isatty_r+0x1a>
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	bd38      	pop	{r3, r4, r5, pc}
 800f1d4:	2000069c 	.word	0x2000069c

0800f1d8 <_lseek_r>:
 800f1d8:	b538      	push	{r3, r4, r5, lr}
 800f1da:	4d07      	ldr	r5, [pc, #28]	; (800f1f8 <_lseek_r+0x20>)
 800f1dc:	4604      	mov	r4, r0
 800f1de:	4608      	mov	r0, r1
 800f1e0:	4611      	mov	r1, r2
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	602a      	str	r2, [r5, #0]
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	f7f7 fb4c 	bl	8006884 <_lseek>
 800f1ec:	1c43      	adds	r3, r0, #1
 800f1ee:	d102      	bne.n	800f1f6 <_lseek_r+0x1e>
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	b103      	cbz	r3, 800f1f6 <_lseek_r+0x1e>
 800f1f4:	6023      	str	r3, [r4, #0]
 800f1f6:	bd38      	pop	{r3, r4, r5, pc}
 800f1f8:	2000069c 	.word	0x2000069c

0800f1fc <__ascii_mbtowc>:
 800f1fc:	b082      	sub	sp, #8
 800f1fe:	b901      	cbnz	r1, 800f202 <__ascii_mbtowc+0x6>
 800f200:	a901      	add	r1, sp, #4
 800f202:	b142      	cbz	r2, 800f216 <__ascii_mbtowc+0x1a>
 800f204:	b14b      	cbz	r3, 800f21a <__ascii_mbtowc+0x1e>
 800f206:	7813      	ldrb	r3, [r2, #0]
 800f208:	600b      	str	r3, [r1, #0]
 800f20a:	7812      	ldrb	r2, [r2, #0]
 800f20c:	1e10      	subs	r0, r2, #0
 800f20e:	bf18      	it	ne
 800f210:	2001      	movne	r0, #1
 800f212:	b002      	add	sp, #8
 800f214:	4770      	bx	lr
 800f216:	4610      	mov	r0, r2
 800f218:	e7fb      	b.n	800f212 <__ascii_mbtowc+0x16>
 800f21a:	f06f 0001 	mvn.w	r0, #1
 800f21e:	e7f8      	b.n	800f212 <__ascii_mbtowc+0x16>

0800f220 <__malloc_lock>:
 800f220:	4801      	ldr	r0, [pc, #4]	; (800f228 <__malloc_lock+0x8>)
 800f222:	f7ff b8c0 	b.w	800e3a6 <__retarget_lock_acquire_recursive>
 800f226:	bf00      	nop
 800f228:	20000690 	.word	0x20000690

0800f22c <__malloc_unlock>:
 800f22c:	4801      	ldr	r0, [pc, #4]	; (800f234 <__malloc_unlock+0x8>)
 800f22e:	f7ff b8bb 	b.w	800e3a8 <__retarget_lock_release_recursive>
 800f232:	bf00      	nop
 800f234:	20000690 	.word	0x20000690

0800f238 <_read_r>:
 800f238:	b538      	push	{r3, r4, r5, lr}
 800f23a:	4d07      	ldr	r5, [pc, #28]	; (800f258 <_read_r+0x20>)
 800f23c:	4604      	mov	r4, r0
 800f23e:	4608      	mov	r0, r1
 800f240:	4611      	mov	r1, r2
 800f242:	2200      	movs	r2, #0
 800f244:	602a      	str	r2, [r5, #0]
 800f246:	461a      	mov	r2, r3
 800f248:	f7f7 fad8 	bl	80067fc <_read>
 800f24c:	1c43      	adds	r3, r0, #1
 800f24e:	d102      	bne.n	800f256 <_read_r+0x1e>
 800f250:	682b      	ldr	r3, [r5, #0]
 800f252:	b103      	cbz	r3, 800f256 <_read_r+0x1e>
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	bd38      	pop	{r3, r4, r5, pc}
 800f258:	2000069c 	.word	0x2000069c

0800f25c <__ascii_wctomb>:
 800f25c:	b149      	cbz	r1, 800f272 <__ascii_wctomb+0x16>
 800f25e:	2aff      	cmp	r2, #255	; 0xff
 800f260:	bf85      	ittet	hi
 800f262:	238a      	movhi	r3, #138	; 0x8a
 800f264:	6003      	strhi	r3, [r0, #0]
 800f266:	700a      	strbls	r2, [r1, #0]
 800f268:	f04f 30ff 	movhi.w	r0, #4294967295
 800f26c:	bf98      	it	ls
 800f26e:	2001      	movls	r0, #1
 800f270:	4770      	bx	lr
 800f272:	4608      	mov	r0, r1
 800f274:	4770      	bx	lr

0800f276 <abort>:
 800f276:	b508      	push	{r3, lr}
 800f278:	2006      	movs	r0, #6
 800f27a:	f000 f82b 	bl	800f2d4 <raise>
 800f27e:	2001      	movs	r0, #1
 800f280:	f7f7 fab2 	bl	80067e8 <_exit>

0800f284 <_raise_r>:
 800f284:	291f      	cmp	r1, #31
 800f286:	b538      	push	{r3, r4, r5, lr}
 800f288:	4604      	mov	r4, r0
 800f28a:	460d      	mov	r5, r1
 800f28c:	d904      	bls.n	800f298 <_raise_r+0x14>
 800f28e:	2316      	movs	r3, #22
 800f290:	6003      	str	r3, [r0, #0]
 800f292:	f04f 30ff 	mov.w	r0, #4294967295
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f29a:	b112      	cbz	r2, 800f2a2 <_raise_r+0x1e>
 800f29c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2a0:	b94b      	cbnz	r3, 800f2b6 <_raise_r+0x32>
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f000 f830 	bl	800f308 <_getpid_r>
 800f2a8:	462a      	mov	r2, r5
 800f2aa:	4601      	mov	r1, r0
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2b2:	f000 b817 	b.w	800f2e4 <_kill_r>
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d00a      	beq.n	800f2d0 <_raise_r+0x4c>
 800f2ba:	1c59      	adds	r1, r3, #1
 800f2bc:	d103      	bne.n	800f2c6 <_raise_r+0x42>
 800f2be:	2316      	movs	r3, #22
 800f2c0:	6003      	str	r3, [r0, #0]
 800f2c2:	2001      	movs	r0, #1
 800f2c4:	e7e7      	b.n	800f296 <_raise_r+0x12>
 800f2c6:	2400      	movs	r4, #0
 800f2c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	4798      	blx	r3
 800f2d0:	2000      	movs	r0, #0
 800f2d2:	e7e0      	b.n	800f296 <_raise_r+0x12>

0800f2d4 <raise>:
 800f2d4:	4b02      	ldr	r3, [pc, #8]	; (800f2e0 <raise+0xc>)
 800f2d6:	4601      	mov	r1, r0
 800f2d8:	6818      	ldr	r0, [r3, #0]
 800f2da:	f7ff bfd3 	b.w	800f284 <_raise_r>
 800f2de:	bf00      	nop
 800f2e0:	20000010 	.word	0x20000010

0800f2e4 <_kill_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d07      	ldr	r5, [pc, #28]	; (800f304 <_kill_r+0x20>)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	602b      	str	r3, [r5, #0]
 800f2f2:	f7f7 fa69 	bl	80067c8 <_kill>
 800f2f6:	1c43      	adds	r3, r0, #1
 800f2f8:	d102      	bne.n	800f300 <_kill_r+0x1c>
 800f2fa:	682b      	ldr	r3, [r5, #0]
 800f2fc:	b103      	cbz	r3, 800f300 <_kill_r+0x1c>
 800f2fe:	6023      	str	r3, [r4, #0]
 800f300:	bd38      	pop	{r3, r4, r5, pc}
 800f302:	bf00      	nop
 800f304:	2000069c 	.word	0x2000069c

0800f308 <_getpid_r>:
 800f308:	f7f7 ba56 	b.w	80067b8 <_getpid>

0800f30c <asinf>:
 800f30c:	b508      	push	{r3, lr}
 800f30e:	ed2d 8b02 	vpush	{d8}
 800f312:	eeb0 8a40 	vmov.f32	s16, s0
 800f316:	f000 f87f 	bl	800f418 <__ieee754_asinf>
 800f31a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f322:	eef0 8a40 	vmov.f32	s17, s0
 800f326:	d615      	bvs.n	800f354 <asinf+0x48>
 800f328:	eeb0 0a48 	vmov.f32	s0, s16
 800f32c:	f000 fdc2 	bl	800feb4 <fabsf>
 800f330:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f334:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f33c:	dd0a      	ble.n	800f354 <asinf+0x48>
 800f33e:	f7fd fa11 	bl	800c764 <__errno>
 800f342:	ecbd 8b02 	vpop	{d8}
 800f346:	2321      	movs	r3, #33	; 0x21
 800f348:	6003      	str	r3, [r0, #0]
 800f34a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f34e:	4804      	ldr	r0, [pc, #16]	; (800f360 <asinf+0x54>)
 800f350:	f000 bdc4 	b.w	800fedc <nanf>
 800f354:	eeb0 0a68 	vmov.f32	s0, s17
 800f358:	ecbd 8b02 	vpop	{d8}
 800f35c:	bd08      	pop	{r3, pc}
 800f35e:	bf00      	nop
 800f360:	080106d8 	.word	0x080106d8

0800f364 <atan2f>:
 800f364:	f000 b93e 	b.w	800f5e4 <__ieee754_atan2f>

0800f368 <powf>:
 800f368:	b508      	push	{r3, lr}
 800f36a:	ed2d 8b04 	vpush	{d8-d9}
 800f36e:	eeb0 8a60 	vmov.f32	s16, s1
 800f372:	eeb0 9a40 	vmov.f32	s18, s0
 800f376:	f000 f9d5 	bl	800f724 <__ieee754_powf>
 800f37a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f382:	eef0 8a40 	vmov.f32	s17, s0
 800f386:	d63e      	bvs.n	800f406 <powf+0x9e>
 800f388:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f390:	d112      	bne.n	800f3b8 <powf+0x50>
 800f392:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39a:	d039      	beq.n	800f410 <powf+0xa8>
 800f39c:	eeb0 0a48 	vmov.f32	s0, s16
 800f3a0:	f000 fd8f 	bl	800fec2 <finitef>
 800f3a4:	b378      	cbz	r0, 800f406 <powf+0x9e>
 800f3a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ae:	d52a      	bpl.n	800f406 <powf+0x9e>
 800f3b0:	f7fd f9d8 	bl	800c764 <__errno>
 800f3b4:	2322      	movs	r3, #34	; 0x22
 800f3b6:	e014      	b.n	800f3e2 <powf+0x7a>
 800f3b8:	f000 fd83 	bl	800fec2 <finitef>
 800f3bc:	b998      	cbnz	r0, 800f3e6 <powf+0x7e>
 800f3be:	eeb0 0a49 	vmov.f32	s0, s18
 800f3c2:	f000 fd7e 	bl	800fec2 <finitef>
 800f3c6:	b170      	cbz	r0, 800f3e6 <powf+0x7e>
 800f3c8:	eeb0 0a48 	vmov.f32	s0, s16
 800f3cc:	f000 fd79 	bl	800fec2 <finitef>
 800f3d0:	b148      	cbz	r0, 800f3e6 <powf+0x7e>
 800f3d2:	eef4 8a68 	vcmp.f32	s17, s17
 800f3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3da:	d7e9      	bvc.n	800f3b0 <powf+0x48>
 800f3dc:	f7fd f9c2 	bl	800c764 <__errno>
 800f3e0:	2321      	movs	r3, #33	; 0x21
 800f3e2:	6003      	str	r3, [r0, #0]
 800f3e4:	e00f      	b.n	800f406 <powf+0x9e>
 800f3e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ee:	d10a      	bne.n	800f406 <powf+0x9e>
 800f3f0:	eeb0 0a49 	vmov.f32	s0, s18
 800f3f4:	f000 fd65 	bl	800fec2 <finitef>
 800f3f8:	b128      	cbz	r0, 800f406 <powf+0x9e>
 800f3fa:	eeb0 0a48 	vmov.f32	s0, s16
 800f3fe:	f000 fd60 	bl	800fec2 <finitef>
 800f402:	2800      	cmp	r0, #0
 800f404:	d1d4      	bne.n	800f3b0 <powf+0x48>
 800f406:	eeb0 0a68 	vmov.f32	s0, s17
 800f40a:	ecbd 8b04 	vpop	{d8-d9}
 800f40e:	bd08      	pop	{r3, pc}
 800f410:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f414:	e7f7      	b.n	800f406 <powf+0x9e>
	...

0800f418 <__ieee754_asinf>:
 800f418:	b538      	push	{r3, r4, r5, lr}
 800f41a:	ee10 5a10 	vmov	r5, s0
 800f41e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f422:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f426:	ed2d 8b04 	vpush	{d8-d9}
 800f42a:	d10c      	bne.n	800f446 <__ieee754_asinf+0x2e>
 800f42c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f5a4 <__ieee754_asinf+0x18c>
 800f430:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f5a8 <__ieee754_asinf+0x190>
 800f434:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f438:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f43c:	eeb0 0a67 	vmov.f32	s0, s15
 800f440:	ecbd 8b04 	vpop	{d8-d9}
 800f444:	bd38      	pop	{r3, r4, r5, pc}
 800f446:	dd04      	ble.n	800f452 <__ieee754_asinf+0x3a>
 800f448:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f44c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f450:	e7f6      	b.n	800f440 <__ieee754_asinf+0x28>
 800f452:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f456:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f45a:	da0b      	bge.n	800f474 <__ieee754_asinf+0x5c>
 800f45c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f460:	da52      	bge.n	800f508 <__ieee754_asinf+0xf0>
 800f462:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f5ac <__ieee754_asinf+0x194>
 800f466:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f46a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f472:	dce5      	bgt.n	800f440 <__ieee754_asinf+0x28>
 800f474:	f000 fd1e 	bl	800feb4 <fabsf>
 800f478:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f47c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f480:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f484:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f5b0 <__ieee754_asinf+0x198>
 800f488:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f5b4 <__ieee754_asinf+0x19c>
 800f48c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f5b8 <__ieee754_asinf+0x1a0>
 800f490:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f494:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f5bc <__ieee754_asinf+0x1a4>
 800f498:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f49c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f5c0 <__ieee754_asinf+0x1a8>
 800f4a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f4a4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f5c4 <__ieee754_asinf+0x1ac>
 800f4a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f4ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f5c8 <__ieee754_asinf+0x1b0>
 800f4b0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f4b4:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f5cc <__ieee754_asinf+0x1b4>
 800f4b8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f4bc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f5d0 <__ieee754_asinf+0x1b8>
 800f4c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f4c4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f5d4 <__ieee754_asinf+0x1bc>
 800f4c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f4cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f4d0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f4d4:	f000 fbf4 	bl	800fcc0 <__ieee754_sqrtf>
 800f4d8:	4b3f      	ldr	r3, [pc, #252]	; (800f5d8 <__ieee754_asinf+0x1c0>)
 800f4da:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f4de:	429c      	cmp	r4, r3
 800f4e0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f4e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f4e8:	dd3d      	ble.n	800f566 <__ieee754_asinf+0x14e>
 800f4ea:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f4ee:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f5dc <__ieee754_asinf+0x1c4>
 800f4f2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f4f6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f5a8 <__ieee754_asinf+0x190>
 800f4fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f4fe:	2d00      	cmp	r5, #0
 800f500:	bfd8      	it	le
 800f502:	eeb1 0a40 	vnegle.f32	s0, s0
 800f506:	e79b      	b.n	800f440 <__ieee754_asinf+0x28>
 800f508:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f50c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f5b0 <__ieee754_asinf+0x198>
 800f510:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f5b4 <__ieee754_asinf+0x19c>
 800f514:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f5c8 <__ieee754_asinf+0x1b0>
 800f518:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f51c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f5bc <__ieee754_asinf+0x1a4>
 800f520:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f524:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f5c0 <__ieee754_asinf+0x1a8>
 800f528:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f52c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f5c4 <__ieee754_asinf+0x1ac>
 800f530:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f534:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f5b8 <__ieee754_asinf+0x1a0>
 800f538:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f53c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f5cc <__ieee754_asinf+0x1b4>
 800f540:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f544:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f5d0 <__ieee754_asinf+0x1b8>
 800f548:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f54c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f5d4 <__ieee754_asinf+0x1bc>
 800f550:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f554:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f558:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f55c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f560:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f564:	e76c      	b.n	800f440 <__ieee754_asinf+0x28>
 800f566:	ee10 3a10 	vmov	r3, s0
 800f56a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f56e:	f023 030f 	bic.w	r3, r3, #15
 800f572:	ee07 3a10 	vmov	s14, r3
 800f576:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f57a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f57e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f582:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f586:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f5a4 <__ieee754_asinf+0x18c>
 800f58a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f58e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f592:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f5e0 <__ieee754_asinf+0x1c8>
 800f596:	eeb0 6a40 	vmov.f32	s12, s0
 800f59a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f59e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f5a2:	e7aa      	b.n	800f4fa <__ieee754_asinf+0xe2>
 800f5a4:	b33bbd2e 	.word	0xb33bbd2e
 800f5a8:	3fc90fdb 	.word	0x3fc90fdb
 800f5ac:	7149f2ca 	.word	0x7149f2ca
 800f5b0:	3811ef08 	.word	0x3811ef08
 800f5b4:	3a4f7f04 	.word	0x3a4f7f04
 800f5b8:	3e2aaaab 	.word	0x3e2aaaab
 800f5bc:	bd241146 	.word	0xbd241146
 800f5c0:	3e4e0aa8 	.word	0x3e4e0aa8
 800f5c4:	bea6b090 	.word	0xbea6b090
 800f5c8:	3d9dc62e 	.word	0x3d9dc62e
 800f5cc:	bf303361 	.word	0xbf303361
 800f5d0:	4001572d 	.word	0x4001572d
 800f5d4:	c019d139 	.word	0xc019d139
 800f5d8:	3f799999 	.word	0x3f799999
 800f5dc:	333bbd2e 	.word	0x333bbd2e
 800f5e0:	3f490fdb 	.word	0x3f490fdb

0800f5e4 <__ieee754_atan2f>:
 800f5e4:	ee10 2a90 	vmov	r2, s1
 800f5e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f5ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f5f0:	b510      	push	{r4, lr}
 800f5f2:	eef0 7a40 	vmov.f32	s15, s0
 800f5f6:	dc06      	bgt.n	800f606 <__ieee754_atan2f+0x22>
 800f5f8:	ee10 0a10 	vmov	r0, s0
 800f5fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f600:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f604:	dd04      	ble.n	800f610 <__ieee754_atan2f+0x2c>
 800f606:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f60a:	eeb0 0a67 	vmov.f32	s0, s15
 800f60e:	bd10      	pop	{r4, pc}
 800f610:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f614:	d103      	bne.n	800f61e <__ieee754_atan2f+0x3a>
 800f616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f61a:	f000 bb77 	b.w	800fd0c <atanf>
 800f61e:	1794      	asrs	r4, r2, #30
 800f620:	f004 0402 	and.w	r4, r4, #2
 800f624:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f628:	b943      	cbnz	r3, 800f63c <__ieee754_atan2f+0x58>
 800f62a:	2c02      	cmp	r4, #2
 800f62c:	d05e      	beq.n	800f6ec <__ieee754_atan2f+0x108>
 800f62e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f700 <__ieee754_atan2f+0x11c>
 800f632:	2c03      	cmp	r4, #3
 800f634:	bf08      	it	eq
 800f636:	eef0 7a47 	vmoveq.f32	s15, s14
 800f63a:	e7e6      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f63c:	b941      	cbnz	r1, 800f650 <__ieee754_atan2f+0x6c>
 800f63e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f704 <__ieee754_atan2f+0x120>
 800f642:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f708 <__ieee754_atan2f+0x124>
 800f646:	2800      	cmp	r0, #0
 800f648:	bfb8      	it	lt
 800f64a:	eef0 7a40 	vmovlt.f32	s15, s0
 800f64e:	e7dc      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f650:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f654:	d110      	bne.n	800f678 <__ieee754_atan2f+0x94>
 800f656:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f65a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f65e:	d107      	bne.n	800f670 <__ieee754_atan2f+0x8c>
 800f660:	2c02      	cmp	r4, #2
 800f662:	d846      	bhi.n	800f6f2 <__ieee754_atan2f+0x10e>
 800f664:	4b29      	ldr	r3, [pc, #164]	; (800f70c <__ieee754_atan2f+0x128>)
 800f666:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f66a:	edd4 7a00 	vldr	s15, [r4]
 800f66e:	e7cc      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f670:	2c02      	cmp	r4, #2
 800f672:	d841      	bhi.n	800f6f8 <__ieee754_atan2f+0x114>
 800f674:	4b26      	ldr	r3, [pc, #152]	; (800f710 <__ieee754_atan2f+0x12c>)
 800f676:	e7f6      	b.n	800f666 <__ieee754_atan2f+0x82>
 800f678:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f67c:	d0df      	beq.n	800f63e <__ieee754_atan2f+0x5a>
 800f67e:	1a5b      	subs	r3, r3, r1
 800f680:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f684:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f688:	da1a      	bge.n	800f6c0 <__ieee754_atan2f+0xdc>
 800f68a:	2a00      	cmp	r2, #0
 800f68c:	da01      	bge.n	800f692 <__ieee754_atan2f+0xae>
 800f68e:	313c      	adds	r1, #60	; 0x3c
 800f690:	db19      	blt.n	800f6c6 <__ieee754_atan2f+0xe2>
 800f692:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f696:	f000 fc0d 	bl	800feb4 <fabsf>
 800f69a:	f000 fb37 	bl	800fd0c <atanf>
 800f69e:	eef0 7a40 	vmov.f32	s15, s0
 800f6a2:	2c01      	cmp	r4, #1
 800f6a4:	d012      	beq.n	800f6cc <__ieee754_atan2f+0xe8>
 800f6a6:	2c02      	cmp	r4, #2
 800f6a8:	d017      	beq.n	800f6da <__ieee754_atan2f+0xf6>
 800f6aa:	2c00      	cmp	r4, #0
 800f6ac:	d0ad      	beq.n	800f60a <__ieee754_atan2f+0x26>
 800f6ae:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f714 <__ieee754_atan2f+0x130>
 800f6b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f6b6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f718 <__ieee754_atan2f+0x134>
 800f6ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f6be:	e7a4      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f6c0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f704 <__ieee754_atan2f+0x120>
 800f6c4:	e7ed      	b.n	800f6a2 <__ieee754_atan2f+0xbe>
 800f6c6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f71c <__ieee754_atan2f+0x138>
 800f6ca:	e7ea      	b.n	800f6a2 <__ieee754_atan2f+0xbe>
 800f6cc:	ee17 3a90 	vmov	r3, s15
 800f6d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6d4:	ee07 3a90 	vmov	s15, r3
 800f6d8:	e797      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f6da:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f714 <__ieee754_atan2f+0x130>
 800f6de:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f6e2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f718 <__ieee754_atan2f+0x134>
 800f6e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f6ea:	e78e      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f6ec:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f718 <__ieee754_atan2f+0x134>
 800f6f0:	e78b      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f6f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f720 <__ieee754_atan2f+0x13c>
 800f6f6:	e788      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f6f8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f71c <__ieee754_atan2f+0x138>
 800f6fc:	e785      	b.n	800f60a <__ieee754_atan2f+0x26>
 800f6fe:	bf00      	nop
 800f700:	c0490fdb 	.word	0xc0490fdb
 800f704:	3fc90fdb 	.word	0x3fc90fdb
 800f708:	bfc90fdb 	.word	0xbfc90fdb
 800f70c:	080107e4 	.word	0x080107e4
 800f710:	080107f0 	.word	0x080107f0
 800f714:	33bbbd2e 	.word	0x33bbbd2e
 800f718:	40490fdb 	.word	0x40490fdb
 800f71c:	00000000 	.word	0x00000000
 800f720:	3f490fdb 	.word	0x3f490fdb

0800f724 <__ieee754_powf>:
 800f724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f728:	ee10 4a90 	vmov	r4, s1
 800f72c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800f730:	ed2d 8b02 	vpush	{d8}
 800f734:	ee10 6a10 	vmov	r6, s0
 800f738:	eeb0 8a40 	vmov.f32	s16, s0
 800f73c:	eef0 8a60 	vmov.f32	s17, s1
 800f740:	d10c      	bne.n	800f75c <__ieee754_powf+0x38>
 800f742:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800f746:	0076      	lsls	r6, r6, #1
 800f748:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800f74c:	f240 8296 	bls.w	800fc7c <__ieee754_powf+0x558>
 800f750:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f754:	ecbd 8b02 	vpop	{d8}
 800f758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f75c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f760:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f764:	dcf4      	bgt.n	800f750 <__ieee754_powf+0x2c>
 800f766:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f76a:	dd08      	ble.n	800f77e <__ieee754_powf+0x5a>
 800f76c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f770:	d1ee      	bne.n	800f750 <__ieee754_powf+0x2c>
 800f772:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800f776:	0064      	lsls	r4, r4, #1
 800f778:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800f77c:	e7e6      	b.n	800f74c <__ieee754_powf+0x28>
 800f77e:	2e00      	cmp	r6, #0
 800f780:	da20      	bge.n	800f7c4 <__ieee754_powf+0xa0>
 800f782:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800f786:	da2d      	bge.n	800f7e4 <__ieee754_powf+0xc0>
 800f788:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f78c:	f2c0 827f 	blt.w	800fc8e <__ieee754_powf+0x56a>
 800f790:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800f794:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f798:	fa48 f703 	asr.w	r7, r8, r3
 800f79c:	fa07 f303 	lsl.w	r3, r7, r3
 800f7a0:	4543      	cmp	r3, r8
 800f7a2:	f040 8274 	bne.w	800fc8e <__ieee754_powf+0x56a>
 800f7a6:	f007 0701 	and.w	r7, r7, #1
 800f7aa:	f1c7 0702 	rsb	r7, r7, #2
 800f7ae:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f7b2:	d11f      	bne.n	800f7f4 <__ieee754_powf+0xd0>
 800f7b4:	2c00      	cmp	r4, #0
 800f7b6:	f280 8267 	bge.w	800fc88 <__ieee754_powf+0x564>
 800f7ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f7be:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f7c2:	e7c7      	b.n	800f754 <__ieee754_powf+0x30>
 800f7c4:	2700      	movs	r7, #0
 800f7c6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f7ca:	d1f0      	bne.n	800f7ae <__ieee754_powf+0x8a>
 800f7cc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f7d0:	f000 8254 	beq.w	800fc7c <__ieee754_powf+0x558>
 800f7d4:	dd08      	ble.n	800f7e8 <__ieee754_powf+0xc4>
 800f7d6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800fae0 <__ieee754_powf+0x3bc>
 800f7da:	2c00      	cmp	r4, #0
 800f7dc:	bfa8      	it	ge
 800f7de:	eeb0 0a68 	vmovge.f32	s0, s17
 800f7e2:	e7b7      	b.n	800f754 <__ieee754_powf+0x30>
 800f7e4:	2702      	movs	r7, #2
 800f7e6:	e7ee      	b.n	800f7c6 <__ieee754_powf+0xa2>
 800f7e8:	2c00      	cmp	r4, #0
 800f7ea:	f280 824a 	bge.w	800fc82 <__ieee754_powf+0x55e>
 800f7ee:	eeb1 0a68 	vneg.f32	s0, s17
 800f7f2:	e7af      	b.n	800f754 <__ieee754_powf+0x30>
 800f7f4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f7f8:	d102      	bne.n	800f800 <__ieee754_powf+0xdc>
 800f7fa:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f7fe:	e7a9      	b.n	800f754 <__ieee754_powf+0x30>
 800f800:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f804:	eeb0 0a48 	vmov.f32	s0, s16
 800f808:	d107      	bne.n	800f81a <__ieee754_powf+0xf6>
 800f80a:	2e00      	cmp	r6, #0
 800f80c:	db05      	blt.n	800f81a <__ieee754_powf+0xf6>
 800f80e:	ecbd 8b02 	vpop	{d8}
 800f812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f816:	f000 ba53 	b.w	800fcc0 <__ieee754_sqrtf>
 800f81a:	f000 fb4b 	bl	800feb4 <fabsf>
 800f81e:	b125      	cbz	r5, 800f82a <__ieee754_powf+0x106>
 800f820:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800f824:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f828:	d116      	bne.n	800f858 <__ieee754_powf+0x134>
 800f82a:	2c00      	cmp	r4, #0
 800f82c:	bfbc      	itt	lt
 800f82e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f832:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f836:	2e00      	cmp	r6, #0
 800f838:	da8c      	bge.n	800f754 <__ieee754_powf+0x30>
 800f83a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800f83e:	ea55 0307 	orrs.w	r3, r5, r7
 800f842:	d104      	bne.n	800f84e <__ieee754_powf+0x12a>
 800f844:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f848:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f84c:	e782      	b.n	800f754 <__ieee754_powf+0x30>
 800f84e:	2f01      	cmp	r7, #1
 800f850:	d180      	bne.n	800f754 <__ieee754_powf+0x30>
 800f852:	eeb1 0a40 	vneg.f32	s0, s0
 800f856:	e77d      	b.n	800f754 <__ieee754_powf+0x30>
 800f858:	0ff0      	lsrs	r0, r6, #31
 800f85a:	3801      	subs	r0, #1
 800f85c:	ea57 0300 	orrs.w	r3, r7, r0
 800f860:	d104      	bne.n	800f86c <__ieee754_powf+0x148>
 800f862:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f866:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f86a:	e773      	b.n	800f754 <__ieee754_powf+0x30>
 800f86c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800f870:	dd74      	ble.n	800f95c <__ieee754_powf+0x238>
 800f872:	4b9c      	ldr	r3, [pc, #624]	; (800fae4 <__ieee754_powf+0x3c0>)
 800f874:	429d      	cmp	r5, r3
 800f876:	dc08      	bgt.n	800f88a <__ieee754_powf+0x166>
 800f878:	2c00      	cmp	r4, #0
 800f87a:	da0b      	bge.n	800f894 <__ieee754_powf+0x170>
 800f87c:	2000      	movs	r0, #0
 800f87e:	ecbd 8b02 	vpop	{d8}
 800f882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f886:	f000 ba3b 	b.w	800fd00 <__math_oflowf>
 800f88a:	4b97      	ldr	r3, [pc, #604]	; (800fae8 <__ieee754_powf+0x3c4>)
 800f88c:	429d      	cmp	r5, r3
 800f88e:	dd08      	ble.n	800f8a2 <__ieee754_powf+0x17e>
 800f890:	2c00      	cmp	r4, #0
 800f892:	dcf3      	bgt.n	800f87c <__ieee754_powf+0x158>
 800f894:	2000      	movs	r0, #0
 800f896:	ecbd 8b02 	vpop	{d8}
 800f89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f89e:	f000 ba29 	b.w	800fcf4 <__math_uflowf>
 800f8a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f8aa:	eddf 6a90 	vldr	s13, [pc, #576]	; 800faec <__ieee754_powf+0x3c8>
 800f8ae:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f8b2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f8b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f8ba:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f8be:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8c6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800faf0 <__ieee754_powf+0x3cc>
 800f8ca:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f8ce:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800faf4 <__ieee754_powf+0x3d0>
 800f8d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f8d6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800faf8 <__ieee754_powf+0x3d4>
 800f8da:	eef0 6a67 	vmov.f32	s13, s15
 800f8de:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f8e2:	ee16 3a90 	vmov	r3, s13
 800f8e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f8ea:	f023 030f 	bic.w	r3, r3, #15
 800f8ee:	ee00 3a90 	vmov	s1, r3
 800f8f2:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f8f6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f8fa:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f8fe:	f024 040f 	bic.w	r4, r4, #15
 800f902:	ee07 4a10 	vmov	s14, r4
 800f906:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f90a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f90e:	ee07 3a90 	vmov	s15, r3
 800f912:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f916:	3f01      	subs	r7, #1
 800f918:	ea57 0200 	orrs.w	r2, r7, r0
 800f91c:	ee07 4a10 	vmov	s14, r4
 800f920:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f924:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f928:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f92c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f930:	ee17 4a10 	vmov	r4, s14
 800f934:	bf08      	it	eq
 800f936:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f93a:	2c00      	cmp	r4, #0
 800f93c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f940:	f340 817e 	ble.w	800fc40 <__ieee754_powf+0x51c>
 800f944:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f948:	f340 80f8 	ble.w	800fb3c <__ieee754_powf+0x418>
 800f94c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f954:	bf4c      	ite	mi
 800f956:	2001      	movmi	r0, #1
 800f958:	2000      	movpl	r0, #0
 800f95a:	e790      	b.n	800f87e <__ieee754_powf+0x15a>
 800f95c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800f960:	bf01      	itttt	eq
 800f962:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800fafc <__ieee754_powf+0x3d8>
 800f966:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f96a:	f06f 0217 	mvneq.w	r2, #23
 800f96e:	ee17 5a90 	vmoveq	r5, s15
 800f972:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f976:	bf18      	it	ne
 800f978:	2200      	movne	r2, #0
 800f97a:	3b7f      	subs	r3, #127	; 0x7f
 800f97c:	4413      	add	r3, r2
 800f97e:	4a60      	ldr	r2, [pc, #384]	; (800fb00 <__ieee754_powf+0x3dc>)
 800f980:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800f984:	4295      	cmp	r5, r2
 800f986:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800f98a:	dd06      	ble.n	800f99a <__ieee754_powf+0x276>
 800f98c:	4a5d      	ldr	r2, [pc, #372]	; (800fb04 <__ieee754_powf+0x3e0>)
 800f98e:	4295      	cmp	r5, r2
 800f990:	f340 80a4 	ble.w	800fadc <__ieee754_powf+0x3b8>
 800f994:	3301      	adds	r3, #1
 800f996:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f99a:	2500      	movs	r5, #0
 800f99c:	4a5a      	ldr	r2, [pc, #360]	; (800fb08 <__ieee754_powf+0x3e4>)
 800f99e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f9a2:	ee07 1a90 	vmov	s15, r1
 800f9a6:	ed92 7a00 	vldr	s14, [r2]
 800f9aa:	4a58      	ldr	r2, [pc, #352]	; (800fb0c <__ieee754_powf+0x3e8>)
 800f9ac:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f9b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f9b4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f9b8:	1049      	asrs	r1, r1, #1
 800f9ba:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f9be:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f9c2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800f9c6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800f9ca:	ee06 1a10 	vmov	s12, r1
 800f9ce:	ee65 4a26 	vmul.f32	s9, s10, s13
 800f9d2:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f9d6:	ee14 6a90 	vmov	r6, s9
 800f9da:	4016      	ands	r6, r2
 800f9dc:	ee05 6a90 	vmov	s11, r6
 800f9e0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800f9e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9e8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fb10 <__ieee754_powf+0x3ec>
 800f9ec:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800f9f0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f9f4:	ee25 6a26 	vmul.f32	s12, s10, s13
 800f9f8:	eddf 6a46 	vldr	s13, [pc, #280]	; 800fb14 <__ieee754_powf+0x3f0>
 800f9fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fa00:	eddf 6a45 	vldr	s13, [pc, #276]	; 800fb18 <__ieee754_powf+0x3f4>
 800fa04:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa08:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800faec <__ieee754_powf+0x3c8>
 800fa0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa10:	eddf 6a42 	vldr	s13, [pc, #264]	; 800fb1c <__ieee754_powf+0x3f8>
 800fa14:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa18:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800fb20 <__ieee754_powf+0x3fc>
 800fa1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa20:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800fa24:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800fa28:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fa2c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800fa30:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800fa34:	eef0 7a45 	vmov.f32	s15, s10
 800fa38:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fa3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa40:	ee17 1a90 	vmov	r1, s15
 800fa44:	4011      	ands	r1, r2
 800fa46:	ee07 1a90 	vmov	s15, r1
 800fa4a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800fa4e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800fa52:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fa56:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fa5a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fa5e:	eeb0 6a47 	vmov.f32	s12, s14
 800fa62:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800fa66:	ee16 1a10 	vmov	r1, s12
 800fa6a:	4011      	ands	r1, r2
 800fa6c:	ee06 1a90 	vmov	s13, r1
 800fa70:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800fa74:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fb24 <__ieee754_powf+0x400>
 800fa78:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800fb28 <__ieee754_powf+0x404>
 800fa7c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fa80:	ee06 1a10 	vmov	s12, r1
 800fa84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fa88:	eddf 7a28 	vldr	s15, [pc, #160]	; 800fb2c <__ieee754_powf+0x408>
 800fa8c:	4928      	ldr	r1, [pc, #160]	; (800fb30 <__ieee754_powf+0x40c>)
 800fa8e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fa92:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800fa96:	edd1 7a00 	vldr	s15, [r1]
 800fa9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fa9e:	ee07 3a90 	vmov	s15, r3
 800faa2:	4b24      	ldr	r3, [pc, #144]	; (800fb34 <__ieee754_powf+0x410>)
 800faa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800faa8:	eef0 7a47 	vmov.f32	s15, s14
 800faac:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fab0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fab4:	edd5 0a00 	vldr	s1, [r5]
 800fab8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fabc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fac0:	ee17 3a90 	vmov	r3, s15
 800fac4:	4013      	ands	r3, r2
 800fac6:	ee07 3a90 	vmov	s15, r3
 800faca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800face:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800fad2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fad6:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fada:	e70e      	b.n	800f8fa <__ieee754_powf+0x1d6>
 800fadc:	2501      	movs	r5, #1
 800fade:	e75d      	b.n	800f99c <__ieee754_powf+0x278>
 800fae0:	00000000 	.word	0x00000000
 800fae4:	3f7ffff3 	.word	0x3f7ffff3
 800fae8:	3f800007 	.word	0x3f800007
 800faec:	3eaaaaab 	.word	0x3eaaaaab
 800faf0:	3fb8aa3b 	.word	0x3fb8aa3b
 800faf4:	36eca570 	.word	0x36eca570
 800faf8:	3fb8aa00 	.word	0x3fb8aa00
 800fafc:	4b800000 	.word	0x4b800000
 800fb00:	001cc471 	.word	0x001cc471
 800fb04:	005db3d6 	.word	0x005db3d6
 800fb08:	080107fc 	.word	0x080107fc
 800fb0c:	fffff000 	.word	0xfffff000
 800fb10:	3e6c3255 	.word	0x3e6c3255
 800fb14:	3e53f142 	.word	0x3e53f142
 800fb18:	3e8ba305 	.word	0x3e8ba305
 800fb1c:	3edb6db7 	.word	0x3edb6db7
 800fb20:	3f19999a 	.word	0x3f19999a
 800fb24:	3f76384f 	.word	0x3f76384f
 800fb28:	3f763800 	.word	0x3f763800
 800fb2c:	369dc3a0 	.word	0x369dc3a0
 800fb30:	0801080c 	.word	0x0801080c
 800fb34:	08010804 	.word	0x08010804
 800fb38:	3338aa3c 	.word	0x3338aa3c
 800fb3c:	f040 8095 	bne.w	800fc6a <__ieee754_powf+0x546>
 800fb40:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800fb38 <__ieee754_powf+0x414>
 800fb44:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb48:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fb4c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb54:	f73f aefa 	bgt.w	800f94c <__ieee754_powf+0x228>
 800fb58:	15db      	asrs	r3, r3, #23
 800fb5a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800fb5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fb62:	4103      	asrs	r3, r0
 800fb64:	4423      	add	r3, r4
 800fb66:	494b      	ldr	r1, [pc, #300]	; (800fc94 <__ieee754_powf+0x570>)
 800fb68:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb6c:	3a7f      	subs	r2, #127	; 0x7f
 800fb6e:	4111      	asrs	r1, r2
 800fb70:	ea23 0101 	bic.w	r1, r3, r1
 800fb74:	ee07 1a10 	vmov	s14, r1
 800fb78:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800fb7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fb80:	f1c2 0217 	rsb	r2, r2, #23
 800fb84:	4110      	asrs	r0, r2
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb8c:	bfb8      	it	lt
 800fb8e:	4240      	neglt	r0, r0
 800fb90:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fb94:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800fc98 <__ieee754_powf+0x574>
 800fb98:	eddf 6a40 	vldr	s13, [pc, #256]	; 800fc9c <__ieee754_powf+0x578>
 800fb9c:	ee17 3a10 	vmov	r3, s14
 800fba0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fba4:	f023 030f 	bic.w	r3, r3, #15
 800fba8:	ee07 3a10 	vmov	s14, r3
 800fbac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbb0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800fbb4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fbb8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fca0 <__ieee754_powf+0x57c>
 800fbbc:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800fbc0:	eef0 7a40 	vmov.f32	s15, s0
 800fbc4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800fbc8:	eeb0 6a67 	vmov.f32	s12, s15
 800fbcc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fbd0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fbd4:	ee30 0a46 	vsub.f32	s0, s0, s12
 800fbd8:	eddf 6a32 	vldr	s13, [pc, #200]	; 800fca4 <__ieee754_powf+0x580>
 800fbdc:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800fca8 <__ieee754_powf+0x584>
 800fbe0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800fbe4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800fcac <__ieee754_powf+0x588>
 800fbe8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fbec:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fcb0 <__ieee754_powf+0x58c>
 800fbf0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fbf4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800fcb4 <__ieee754_powf+0x590>
 800fbf8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fbfc:	eef0 6a67 	vmov.f32	s13, s15
 800fc00:	eee6 6a47 	vfms.f32	s13, s12, s14
 800fc04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fc08:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800fc0c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fc10:	eea7 0a80 	vfma.f32	s0, s15, s0
 800fc14:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fc18:	ee37 0a40 	vsub.f32	s0, s14, s0
 800fc1c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fc20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fc24:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc28:	ee10 3a10 	vmov	r3, s0
 800fc2c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fc30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc34:	da1f      	bge.n	800fc76 <__ieee754_powf+0x552>
 800fc36:	f000 f957 	bl	800fee8 <scalbnf>
 800fc3a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fc3e:	e589      	b.n	800f754 <__ieee754_powf+0x30>
 800fc40:	4a1d      	ldr	r2, [pc, #116]	; (800fcb8 <__ieee754_powf+0x594>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	dd07      	ble.n	800fc56 <__ieee754_powf+0x532>
 800fc46:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4e:	bf4c      	ite	mi
 800fc50:	2001      	movmi	r0, #1
 800fc52:	2000      	movpl	r0, #0
 800fc54:	e61f      	b.n	800f896 <__ieee754_powf+0x172>
 800fc56:	d108      	bne.n	800fc6a <__ieee754_powf+0x546>
 800fc58:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc5c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc64:	f6ff af78 	blt.w	800fb58 <__ieee754_powf+0x434>
 800fc68:	e7ed      	b.n	800fc46 <__ieee754_powf+0x522>
 800fc6a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fc6e:	f73f af73 	bgt.w	800fb58 <__ieee754_powf+0x434>
 800fc72:	2000      	movs	r0, #0
 800fc74:	e78c      	b.n	800fb90 <__ieee754_powf+0x46c>
 800fc76:	ee00 3a10 	vmov	s0, r3
 800fc7a:	e7de      	b.n	800fc3a <__ieee754_powf+0x516>
 800fc7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fc80:	e568      	b.n	800f754 <__ieee754_powf+0x30>
 800fc82:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fcbc <__ieee754_powf+0x598>
 800fc86:	e565      	b.n	800f754 <__ieee754_powf+0x30>
 800fc88:	eeb0 0a48 	vmov.f32	s0, s16
 800fc8c:	e562      	b.n	800f754 <__ieee754_powf+0x30>
 800fc8e:	2700      	movs	r7, #0
 800fc90:	e58d      	b.n	800f7ae <__ieee754_powf+0x8a>
 800fc92:	bf00      	nop
 800fc94:	007fffff 	.word	0x007fffff
 800fc98:	35bfbe8c 	.word	0x35bfbe8c
 800fc9c:	3f317200 	.word	0x3f317200
 800fca0:	3f317218 	.word	0x3f317218
 800fca4:	b5ddea0e 	.word	0xb5ddea0e
 800fca8:	3331bb4c 	.word	0x3331bb4c
 800fcac:	388ab355 	.word	0x388ab355
 800fcb0:	bb360b61 	.word	0xbb360b61
 800fcb4:	3e2aaaab 	.word	0x3e2aaaab
 800fcb8:	43160000 	.word	0x43160000
 800fcbc:	00000000 	.word	0x00000000

0800fcc0 <__ieee754_sqrtf>:
 800fcc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fcc4:	4770      	bx	lr

0800fcc6 <with_errnof>:
 800fcc6:	b513      	push	{r0, r1, r4, lr}
 800fcc8:	4604      	mov	r4, r0
 800fcca:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fcce:	f7fc fd49 	bl	800c764 <__errno>
 800fcd2:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fcd6:	6004      	str	r4, [r0, #0]
 800fcd8:	b002      	add	sp, #8
 800fcda:	bd10      	pop	{r4, pc}

0800fcdc <xflowf>:
 800fcdc:	b130      	cbz	r0, 800fcec <xflowf+0x10>
 800fcde:	eef1 7a40 	vneg.f32	s15, s0
 800fce2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fce6:	2022      	movs	r0, #34	; 0x22
 800fce8:	f7ff bfed 	b.w	800fcc6 <with_errnof>
 800fcec:	eef0 7a40 	vmov.f32	s15, s0
 800fcf0:	e7f7      	b.n	800fce2 <xflowf+0x6>
	...

0800fcf4 <__math_uflowf>:
 800fcf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fcfc <__math_uflowf+0x8>
 800fcf8:	f7ff bff0 	b.w	800fcdc <xflowf>
 800fcfc:	10000000 	.word	0x10000000

0800fd00 <__math_oflowf>:
 800fd00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fd08 <__math_oflowf+0x8>
 800fd04:	f7ff bfea 	b.w	800fcdc <xflowf>
 800fd08:	70000000 	.word	0x70000000

0800fd0c <atanf>:
 800fd0c:	b538      	push	{r3, r4, r5, lr}
 800fd0e:	ee10 5a10 	vmov	r5, s0
 800fd12:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fd16:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fd1a:	eef0 7a40 	vmov.f32	s15, s0
 800fd1e:	db10      	blt.n	800fd42 <atanf+0x36>
 800fd20:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fd24:	dd04      	ble.n	800fd30 <atanf+0x24>
 800fd26:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fd2a:	eeb0 0a67 	vmov.f32	s0, s15
 800fd2e:	bd38      	pop	{r3, r4, r5, pc}
 800fd30:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fe68 <atanf+0x15c>
 800fd34:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fe6c <atanf+0x160>
 800fd38:	2d00      	cmp	r5, #0
 800fd3a:	bfd8      	it	le
 800fd3c:	eef0 7a40 	vmovle.f32	s15, s0
 800fd40:	e7f3      	b.n	800fd2a <atanf+0x1e>
 800fd42:	4b4b      	ldr	r3, [pc, #300]	; (800fe70 <atanf+0x164>)
 800fd44:	429c      	cmp	r4, r3
 800fd46:	dc10      	bgt.n	800fd6a <atanf+0x5e>
 800fd48:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fd4c:	da0a      	bge.n	800fd64 <atanf+0x58>
 800fd4e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fe74 <atanf+0x168>
 800fd52:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fd56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd5a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd62:	dce2      	bgt.n	800fd2a <atanf+0x1e>
 800fd64:	f04f 33ff 	mov.w	r3, #4294967295
 800fd68:	e013      	b.n	800fd92 <atanf+0x86>
 800fd6a:	f000 f8a3 	bl	800feb4 <fabsf>
 800fd6e:	4b42      	ldr	r3, [pc, #264]	; (800fe78 <atanf+0x16c>)
 800fd70:	429c      	cmp	r4, r3
 800fd72:	dc4f      	bgt.n	800fe14 <atanf+0x108>
 800fd74:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fd78:	429c      	cmp	r4, r3
 800fd7a:	dc41      	bgt.n	800fe00 <atanf+0xf4>
 800fd7c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fd80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fd84:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fd88:	2300      	movs	r3, #0
 800fd8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd92:	1c5a      	adds	r2, r3, #1
 800fd94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fd98:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fe7c <atanf+0x170>
 800fd9c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800fe80 <atanf+0x174>
 800fda0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800fe84 <atanf+0x178>
 800fda4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fda8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fdac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fe88 <atanf+0x17c>
 800fdb0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fdb4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fe8c <atanf+0x180>
 800fdb8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fdbc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800fe90 <atanf+0x184>
 800fdc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fdc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fe94 <atanf+0x188>
 800fdc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fdcc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fe98 <atanf+0x18c>
 800fdd0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fdd4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fe9c <atanf+0x190>
 800fdd8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fddc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800fea0 <atanf+0x194>
 800fde0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fde4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fea4 <atanf+0x198>
 800fde8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fdec:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fdf0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fdf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fdf8:	d121      	bne.n	800fe3e <atanf+0x132>
 800fdfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdfe:	e794      	b.n	800fd2a <atanf+0x1e>
 800fe00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe04:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fe08:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe12:	e7be      	b.n	800fd92 <atanf+0x86>
 800fe14:	4b24      	ldr	r3, [pc, #144]	; (800fea8 <atanf+0x19c>)
 800fe16:	429c      	cmp	r4, r3
 800fe18:	dc0b      	bgt.n	800fe32 <atanf+0x126>
 800fe1a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fe1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe22:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fe26:	2302      	movs	r3, #2
 800fe28:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fe2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe30:	e7af      	b.n	800fd92 <atanf+0x86>
 800fe32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fe36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe3a:	2303      	movs	r3, #3
 800fe3c:	e7a9      	b.n	800fd92 <atanf+0x86>
 800fe3e:	4a1b      	ldr	r2, [pc, #108]	; (800feac <atanf+0x1a0>)
 800fe40:	491b      	ldr	r1, [pc, #108]	; (800feb0 <atanf+0x1a4>)
 800fe42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fe46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fe4a:	ed93 0a00 	vldr	s0, [r3]
 800fe4e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800fe52:	ed92 0a00 	vldr	s0, [r2]
 800fe56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe5a:	2d00      	cmp	r5, #0
 800fe5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fe60:	bfb8      	it	lt
 800fe62:	eef1 7a67 	vneglt.f32	s15, s15
 800fe66:	e760      	b.n	800fd2a <atanf+0x1e>
 800fe68:	3fc90fdb 	.word	0x3fc90fdb
 800fe6c:	bfc90fdb 	.word	0xbfc90fdb
 800fe70:	3edfffff 	.word	0x3edfffff
 800fe74:	7149f2ca 	.word	0x7149f2ca
 800fe78:	3f97ffff 	.word	0x3f97ffff
 800fe7c:	3c8569d7 	.word	0x3c8569d7
 800fe80:	3d4bda59 	.word	0x3d4bda59
 800fe84:	bd6ef16b 	.word	0xbd6ef16b
 800fe88:	3d886b35 	.word	0x3d886b35
 800fe8c:	3dba2e6e 	.word	0x3dba2e6e
 800fe90:	3e124925 	.word	0x3e124925
 800fe94:	3eaaaaab 	.word	0x3eaaaaab
 800fe98:	bd15a221 	.word	0xbd15a221
 800fe9c:	bd9d8795 	.word	0xbd9d8795
 800fea0:	bde38e38 	.word	0xbde38e38
 800fea4:	be4ccccd 	.word	0xbe4ccccd
 800fea8:	401bffff 	.word	0x401bffff
 800feac:	08010814 	.word	0x08010814
 800feb0:	08010824 	.word	0x08010824

0800feb4 <fabsf>:
 800feb4:	ee10 3a10 	vmov	r3, s0
 800feb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800febc:	ee00 3a10 	vmov	s0, r3
 800fec0:	4770      	bx	lr

0800fec2 <finitef>:
 800fec2:	b082      	sub	sp, #8
 800fec4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fec8:	9801      	ldr	r0, [sp, #4]
 800feca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fece:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fed2:	bfac      	ite	ge
 800fed4:	2000      	movge	r0, #0
 800fed6:	2001      	movlt	r0, #1
 800fed8:	b002      	add	sp, #8
 800feda:	4770      	bx	lr

0800fedc <nanf>:
 800fedc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fee4 <nanf+0x8>
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	7fc00000 	.word	0x7fc00000

0800fee8 <scalbnf>:
 800fee8:	ee10 3a10 	vmov	r3, s0
 800feec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fef0:	d025      	beq.n	800ff3e <scalbnf+0x56>
 800fef2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fef6:	d302      	bcc.n	800fefe <scalbnf+0x16>
 800fef8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fefc:	4770      	bx	lr
 800fefe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ff02:	d122      	bne.n	800ff4a <scalbnf+0x62>
 800ff04:	4b2a      	ldr	r3, [pc, #168]	; (800ffb0 <scalbnf+0xc8>)
 800ff06:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ffb4 <scalbnf+0xcc>
 800ff0a:	4298      	cmp	r0, r3
 800ff0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff10:	db16      	blt.n	800ff40 <scalbnf+0x58>
 800ff12:	ee10 3a10 	vmov	r3, s0
 800ff16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ff1a:	3a19      	subs	r2, #25
 800ff1c:	4402      	add	r2, r0
 800ff1e:	2afe      	cmp	r2, #254	; 0xfe
 800ff20:	dd15      	ble.n	800ff4e <scalbnf+0x66>
 800ff22:	ee10 3a10 	vmov	r3, s0
 800ff26:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ffb8 <scalbnf+0xd0>
 800ff2a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ffbc <scalbnf+0xd4>
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	eeb0 7a67 	vmov.f32	s14, s15
 800ff34:	bfb8      	it	lt
 800ff36:	eef0 7a66 	vmovlt.f32	s15, s13
 800ff3a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ff3e:	4770      	bx	lr
 800ff40:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ffc0 <scalbnf+0xd8>
 800ff44:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff48:	4770      	bx	lr
 800ff4a:	0dd2      	lsrs	r2, r2, #23
 800ff4c:	e7e6      	b.n	800ff1c <scalbnf+0x34>
 800ff4e:	2a00      	cmp	r2, #0
 800ff50:	dd06      	ble.n	800ff60 <scalbnf+0x78>
 800ff52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff56:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ff5a:	ee00 3a10 	vmov	s0, r3
 800ff5e:	4770      	bx	lr
 800ff60:	f112 0f16 	cmn.w	r2, #22
 800ff64:	da1a      	bge.n	800ff9c <scalbnf+0xb4>
 800ff66:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ff6a:	4298      	cmp	r0, r3
 800ff6c:	ee10 3a10 	vmov	r3, s0
 800ff70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff74:	dd0a      	ble.n	800ff8c <scalbnf+0xa4>
 800ff76:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ffb8 <scalbnf+0xd0>
 800ff7a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ffbc <scalbnf+0xd4>
 800ff7e:	eef0 7a40 	vmov.f32	s15, s0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	bf18      	it	ne
 800ff86:	eeb0 0a47 	vmovne.f32	s0, s14
 800ff8a:	e7db      	b.n	800ff44 <scalbnf+0x5c>
 800ff8c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ffc0 <scalbnf+0xd8>
 800ff90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ffc4 <scalbnf+0xdc>
 800ff94:	eef0 7a40 	vmov.f32	s15, s0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	e7f3      	b.n	800ff84 <scalbnf+0x9c>
 800ff9c:	3219      	adds	r2, #25
 800ff9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffa2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ffa6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ffc8 <scalbnf+0xe0>
 800ffaa:	ee07 3a10 	vmov	s14, r3
 800ffae:	e7c4      	b.n	800ff3a <scalbnf+0x52>
 800ffb0:	ffff3cb0 	.word	0xffff3cb0
 800ffb4:	4c000000 	.word	0x4c000000
 800ffb8:	7149f2ca 	.word	0x7149f2ca
 800ffbc:	f149f2ca 	.word	0xf149f2ca
 800ffc0:	0da24260 	.word	0x0da24260
 800ffc4:	8da24260 	.word	0x8da24260
 800ffc8:	33000000 	.word	0x33000000

0800ffcc <_init>:
 800ffcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffce:	bf00      	nop
 800ffd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd2:	bc08      	pop	{r3}
 800ffd4:	469e      	mov	lr, r3
 800ffd6:	4770      	bx	lr

0800ffd8 <_fini>:
 800ffd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffda:	bf00      	nop
 800ffdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffde:	bc08      	pop	{r3}
 800ffe0:	469e      	mov	lr, r3
 800ffe2:	4770      	bx	lr
