
4-3. i-Bus Pasing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08007fa0  08007fa0  00017fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008584  08008584  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800858c  0800858c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000128  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e06b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc9  00000000  00000000  0002e277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00031240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da0  00000000  00000000  00032140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243d6  00000000  00000000  00032ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efe6  00000000  00000000  000572b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca55c  00000000  00000000  0006629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001307f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c78  00000000  00000000  00130848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f84 	.word	0x08007f84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007f84 	.word	0x08007f84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f023 0210 	bic.w	r2, r3, #16
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	605a      	str	r2, [r3, #4]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d101      	bne.n	8000f30 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	330c      	adds	r3, #12
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b085      	sub	sp, #20
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	619a      	str	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800

08001014 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800101e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4013      	ands	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40023800 	.word	0x40023800

08001044 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	; 0x40
 8001048:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 f9ea 	bl	800542c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001068:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800106c:	f7ff ffd2 	bl	8001014 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ffb7 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ffb4 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ffb1 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001082:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001086:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001088:	2302      	movs	r3, #2
 800108a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001098:	2305      	movs	r3, #5
 800109a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4841      	ldr	r0, [pc, #260]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010a2:	f003 f99e 	bl	80043e2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010ae:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010b4:	2302      	movs	r3, #2
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010c2:	2318      	movs	r3, #24
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4834      	ldr	r0, [pc, #208]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 80010da:	f003 fb52 	bl	8004782 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010de:	2100      	movs	r1, #0
 80010e0:	4832      	ldr	r0, [pc, #200]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 80010e2:	f7ff fef3 	bl	8000ecc <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010ec:	f7ff ff6a 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f4:	482c      	ldr	r0, [pc, #176]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010f6:	f7ff ff65 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001100:	f7ff ff60 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4822      	ldr	r0, [pc, #136]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001120:	f003 f95f 	bl	80043e2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001128:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	481c      	ldr	r0, [pc, #112]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001140:	f003 f94f 	bl	80043e2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001160:	f003 f93f 	bl	80043e2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001178:	f003 f933 	bl	80043e2 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 800117e:	f7ff fe95 	bl	8000eac <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	4808      	ldr	r0, [pc, #32]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001188:	f7ff ff0e 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800118c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001192:	f7ff ff09 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800119c:	f7ff ff04 	bl	8000fa8 <LL_GPIO_SetOutputPin>
}
 80011a0:	bf00      	nop
 80011a2:	3740      	adds	r7, #64	; 0x40
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40003800 	.word	0x40003800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000

080011b8 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011be:	f7ff ff41 	bl	8001044 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011c2:	482e      	ldr	r0, [pc, #184]	; (800127c <BNO080_Initialization+0xc4>)
 80011c4:	f004 fda4 	bl	8005d10 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	482c      	ldr	r0, [pc, #176]	; (8001280 <BNO080_Initialization+0xc8>)
 80011ce:	f7ff feeb 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	482b      	ldr	r0, [pc, #172]	; (8001284 <BNO080_Initialization+0xcc>)
 80011d8:	f7ff fee6 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e0:	4829      	ldr	r0, [pc, #164]	; (8001288 <BNO080_Initialization+0xd0>)
 80011e2:	f7ff feef 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011e6:	20c8      	movs	r0, #200	; 0xc8
 80011e8:	f002 fa88 	bl	80036fc <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	4825      	ldr	r0, [pc, #148]	; (8001288 <BNO080_Initialization+0xd0>)
 80011f2:	f7ff fed9 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011f6:	f000 f8d7 	bl	80013a8 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011fa:	f000 f8d5 	bl	80013a8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011fe:	f000 f8f7 	bl	80013f0 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001202:	f000 f8d1 	bl	80013a8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001206:	f000 f8f3 	bl	80013f0 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <BNO080_Initialization+0xd4>)
 800120c:	22f9      	movs	r2, #249	; 0xf9
 800120e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <BNO080_Initialization+0xd4>)
 8001212:	2200      	movs	r2, #0
 8001214:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001216:	2102      	movs	r1, #2
 8001218:	2002      	movs	r0, #2
 800121a:	f000 f959 	bl	80014d0 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800121e:	f000 f8c3 	bl	80013a8 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001222:	f000 f8e5 	bl	80013f0 <BNO080_receivePacket>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d11b      	bne.n	8001264 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <BNO080_Initialization+0xd8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <BNO080_Initialization+0xd8>)
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	461a      	mov	r2, r3
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <BNO080_Initialization+0xd8>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4618      	mov	r0, r3
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <BNO080_Initialization+0xd8>)
 8001240:	78db      	ldrb	r3, [r3, #3]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <BNO080_Initialization+0xdc>)
 8001248:	f004 fd62 	bl	8005d10 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <BNO080_Initialization+0xd4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2bf8      	cmp	r3, #248	; 0xf8
 8001252:	d107      	bne.n	8001264 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <BNO080_Initialization+0xd4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <BNO080_Initialization+0xe0>)
 800125c:	f004 fd58 	bl	8005d10 <iprintf>
			return (0);
 8001260:	2300      	movs	r3, #0
 8001262:	e007      	b.n	8001274 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <BNO080_Initialization+0xd4>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	22f8      	movs	r2, #248	; 0xf8
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <BNO080_Initialization+0xe4>)
 800126e:	f004 fd4f 	bl	8005d10 <iprintf>
	return (1); //Something went wrong
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	08007fa0 	.word	0x08007fa0
 8001280:	40020400 	.word	0x40020400
 8001284:	40020000 	.word	0x40020000
 8001288:	40020800 	.word	0x40020800
 800128c:	200001fc 	.word	0x200001fc
 8001290:	200001f8 	.word	0x200001f8
 8001294:	08007fb4 	.word	0x08007fb4
 8001298:	08007fcc 	.word	0x08007fcc
 800129c:	08007fec 	.word	0x08007fec

080012a0 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012aa:	bf00      	nop
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <SPI2_SendByte+0x40>)
 80012ae:	f7ff fe33 	bl	8000f18 <LL_SPI_IsActiveFlag_TXE>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f9      	beq.n	80012ac <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <SPI2_SendByte+0x40>)
 80012be:	f7ff fe4c 	bl	8000f5a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012c2:	bf00      	nop
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <SPI2_SendByte+0x40>)
 80012c6:	f7ff fe14 	bl	8000ef2 <LL_SPI_IsActiveFlag_RXNE>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f9      	beq.n	80012c4 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <SPI2_SendByte+0x40>)
 80012d2:	f7ff fe34 	bl	8000f3e <LL_SPI_ReceiveData8>
 80012d6:	4603      	mov	r3, r0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40003800 	.word	0x40003800

080012e4 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	2005      	movs	r0, #5
 80012f6:	f000 f805 	bl	8001304 <BNO080_setFeatureCommand>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001314:	22fd      	movs	r2, #253	; 0xfd
 8001316:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001318:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001336:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001340:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800134a:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	0e1b      	lsrs	r3, r3, #24
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001354:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001358:	2200      	movs	r2, #0
 800135a:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800135e:	2200      	movs	r2, #0
 8001360:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001364:	2200      	movs	r2, #0
 8001366:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800136a:	2200      	movs	r2, #0
 800136c:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001374:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800137e:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001388:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0e1b      	lsrs	r3, r3, #24
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001392:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001394:	2111      	movs	r1, #17
 8001396:	2002      	movs	r0, #2
 8001398:	f000 f89a 	bl	80014d0 <BNO080_sendPacket>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001fc 	.word	0x200001fc

080013a8 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e00c      	b.n	80013ce <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <BNO080_waitForSPI+0x40>)
 80013ba:	f7ff fde0 	bl	8000f7e <LL_GPIO_IsInputPinSet>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00a      	b.n	80013de <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d1ee      	bne.n	80013b4 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <BNO080_waitForSPI+0x44>)
 80013d8:	f004 fd20 	bl	8005e1c <puts>
	return (0);
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40020800 	.word	0x40020800
 80013ec:	08008038 	.word	0x08008038

080013f0 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fa:	4831      	ldr	r0, [pc, #196]	; (80014c0 <BNO080_receivePacket+0xd0>)
 80013fc:	f7ff fdbf 	bl	8000f7e <LL_GPIO_IsInputPinSet>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001406:	2300      	movs	r3, #0
 8001408:	e056      	b.n	80014b8 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800140a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <BNO080_receivePacket+0xd4>)
 8001410:	f7ff fdd8 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff ff43 	bl	80012a0 <SPI2_SendByte>
 800141a:	4603      	mov	r3, r0
 800141c:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff3e 	bl	80012a0 <SPI2_SendByte>
 8001424:	4603      	mov	r3, r0
 8001426:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ff39 	bl	80012a0 <SPI2_SendByte>
 800142e:	4603      	mov	r3, r0
 8001430:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ff34 	bl	80012a0 <SPI2_SendByte>
 8001438:	4603      	mov	r3, r0
 800143a:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <BNO080_receivePacket+0xd8>)
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <BNO080_receivePacket+0xd8>)
 8001444:	7b3b      	ldrb	r3, [r7, #12]
 8001446:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <BNO080_receivePacket+0xd8>)
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <BNO080_receivePacket+0xd8>)
 8001450:	7abb      	ldrb	r3, [r7, #10]
 8001452:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001454:	7b3b      	ldrb	r3, [r7, #12]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001462:	893b      	ldrh	r3, [r7, #8]
 8001464:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001468:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800146a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001472:	2300      	movs	r3, #0
 8001474:	e020      	b.n	80014b8 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001476:	893b      	ldrh	r3, [r7, #8]
 8001478:	3b04      	subs	r3, #4
 800147a:	b29b      	uxth	r3, r3
 800147c:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800147e:	2300      	movs	r3, #0
 8001480:	81fb      	strh	r3, [r7, #14]
 8001482:	e00e      	b.n	80014a2 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001484:	20ff      	movs	r0, #255	; 0xff
 8001486:	f7ff ff0b 	bl	80012a0 <SPI2_SendByte>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	2b7f      	cmp	r3, #127	; 0x7f
 8001492:	d803      	bhi.n	800149c <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	490d      	ldr	r1, [pc, #52]	; (80014cc <BNO080_receivePacket+0xdc>)
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	3301      	adds	r3, #1
 80014a0:	81fb      	strh	r3, [r7, #14]
 80014a2:	89fa      	ldrh	r2, [r7, #14]
 80014a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbeb      	blt.n	8001484 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <BNO080_receivePacket+0xd4>)
 80014b2:	f7ff fd79 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	200001f8 	.word	0x200001f8
 80014cc:	200001fc 	.word	0x200001fc

080014d0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3304      	adds	r3, #4
 80014e4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014e6:	f7ff ff5f 	bl	80013a8 <BNO080_waitForSPI>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014f0:	2300      	movs	r3, #0
 80014f2:	e032      	b.n	800155a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f8:	481a      	ldr	r0, [pc, #104]	; (8001564 <BNO080_sendPacket+0x94>)
 80014fa:	f7ff fd63 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fecd 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fec7 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fec3 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4a12      	ldr	r2, [pc, #72]	; (8001568 <BNO080_sendPacket+0x98>)
 800151e:	5cd2      	ldrb	r2, [r2, r3]
 8001520:	1c51      	adds	r1, r2, #1
 8001522:	b2c8      	uxtb	r0, r1
 8001524:	4910      	ldr	r1, [pc, #64]	; (8001568 <BNO080_sendPacket+0x98>)
 8001526:	54c8      	strb	r0, [r1, r3]
 8001528:	4610      	mov	r0, r2
 800152a:	f7ff feb9 	bl	80012a0 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e008      	b.n	8001546 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4a0d      	ldr	r2, [pc, #52]	; (800156c <BNO080_sendPacket+0x9c>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff feb0 	bl	80012a0 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	429a      	cmp	r2, r3
 800154c:	d3f2      	bcc.n	8001534 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800154e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <BNO080_sendPacket+0x94>)
 8001554:	f7ff fd28 	bl	8000fa8 <LL_GPIO_SetOutputPin>

	return (1);
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020400 	.word	0x40020400
 8001568:	2000027c 	.word	0x2000027c
 800156c:	200001fc 	.word	0x200001fc

08001570 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 800157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001580:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	e00a      	b.n	800159e <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	89fa      	ldrh	r2, [r7, #14]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3301      	adds	r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	3b02      	subs	r3, #2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbef      	blt.n	8001588 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	321e      	adds	r2, #30
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10a      	bne.n	80015cc <iBus_Check_CHKSUM+0x5c>
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	331f      	adds	r3, #31
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d101      	bne.n	80015cc <iBus_Check_CHKSUM+0x5c>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <iBus_Check_CHKSUM+0x5e>
 80015cc:	2300      	movs	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3302      	adds	r3, #2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3303      	adds	r3, #3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001602:	b29a      	uxth	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3304      	adds	r3, #4
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b21a      	sxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3305      	adds	r3, #5
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001624:	b29a      	uxth	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3306      	adds	r3, #6
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b21a      	sxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3307      	adds	r3, #7
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21b      	sxth	r3, r3
 8001640:	b29b      	uxth	r3, r3
 8001642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001646:	b29a      	uxth	r2, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3308      	adds	r3, #8
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b21a      	sxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3309      	adds	r3, #9
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	b29b      	uxth	r3, r3
 8001664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001668:	b29a      	uxth	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	330a      	adds	r3, #10
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b21a      	sxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	330b      	adds	r3, #11
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21b      	sxth	r3, r3
 8001684:	b29b      	uxth	r3, r3
 8001686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168a:	b29a      	uxth	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	330c      	adds	r3, #12
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b21a      	sxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	330d      	adds	r3, #13
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	819a      	strh	r2, [r3, #12]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_SPI_Enable>:
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_SPI_SetStandard>:
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 0210 	bic.w	r2, r3, #16
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	605a      	str	r2, [r3, #4]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_SPI_IsActiveFlag_TXE>:
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d101      	bne.n	8001742 <LL_SPI_IsActiveFlag_TXE+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_SPI_ReceiveData8>:
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	330c      	adds	r3, #12
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_SPI_TransmitData8>:
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	330c      	adds	r3, #12
 800177c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	701a      	strb	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_GPIO_SetOutputPin>:
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	619a      	str	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_GPIO_ResetOutputPin>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <LL_AHB1_GRP1_EnableClock>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4013      	ands	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40023800 	.word	0x40023800

080017fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <LL_APB2_GRP1_EnableClock+0x2c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4313      	orrs	r3, r2
 800180e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4013      	ands	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40023800 	.word	0x40023800

0800182c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b090      	sub	sp, #64	; 0x40
 8001830:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	2228      	movs	r2, #40	; 0x28
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fdf6 	bl	800542c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001850:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001854:	f7ff ffd2 	bl	80017fc <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff ffb7 	bl	80017cc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800185e:	2004      	movs	r0, #4
 8001860:	f7ff ffb4 	bl	80017cc <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001864:	23e0      	movs	r3, #224	; 0xe0
 8001866:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001868:	2302      	movs	r3, #2
 800186a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001878:	2305      	movs	r3, #5
 800187a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4825      	ldr	r0, [pc, #148]	; (8001918 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001882:	f002 fdae 	bl	80043e2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800188a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800188e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001894:	2302      	movs	r3, #2
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001898:	2301      	movs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800189c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80018a2:	2310      	movs	r3, #16
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80018ae:	230a      	movs	r3, #10
 80018b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4818      	ldr	r0, [pc, #96]	; (800191c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80018ba:	f002 ff62 	bl	8004782 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80018be:	2100      	movs	r1, #0
 80018c0:	4816      	ldr	r0, [pc, #88]	; (800191c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80018c2:	f7ff ff0c 	bl	80016de <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80018c6:	2110      	movs	r1, #16
 80018c8:	4815      	ldr	r0, [pc, #84]	; (8001920 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80018ca:	f7ff ff6f 	bl	80017ac <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80018ce:	2310      	movs	r3, #16
 80018d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018d2:	2301      	movs	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80018e2:	463b      	mov	r3, r7
 80018e4:	4619      	mov	r1, r3
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80018e8:	f002 fd7b 	bl	80043e2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80018ec:	2320      	movs	r3, #32
 80018ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80018fe:	f002 fd70 	bl	80043e2 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001904:	f7ff fedb 	bl	80016be <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001908:	2110      	movs	r1, #16
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800190c:	f7ff ff40 	bl	8001790 <LL_GPIO_SetOutputPin>
}
 8001910:	bf00      	nop
 8001912:	3740      	adds	r7, #64	; 0x40
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020000 	.word	0x40020000
 800191c:	40013000 	.word	0x40013000
 8001920:	40020800 	.word	0x40020800

08001924 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800192e:	bf00      	nop
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <SPI1_SendByte+0x40>)
 8001932:	f7ff fefa 	bl	800172a <LL_SPI_IsActiveFlag_TXE>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f9      	beq.n	8001930 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4619      	mov	r1, r3
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <SPI1_SendByte+0x40>)
 8001942:	f7ff ff13 	bl	800176c <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001946:	bf00      	nop
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <SPI1_SendByte+0x40>)
 800194a:	f7ff fedb 	bl	8001704 <LL_SPI_IsActiveFlag_RXNE>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f9      	beq.n	8001948 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <SPI1_SendByte+0x40>)
 8001956:	f7ff fefb 	bl	8001750 <LL_SPI_ReceiveData8>
 800195a:	4603      	mov	r3, r0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013000 	.word	0x40013000

08001968 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001972:	2110      	movs	r1, #16
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <ICM20602_Readbyte+0x3c>)
 8001976:	f7ff ff19 	bl	80017ac <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffce 	bl	8001924 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff ffcb 	bl	8001924 <SPI1_SendByte>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001992:	2110      	movs	r1, #16
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <ICM20602_Readbyte+0x3c>)
 8001996:	f7ff fefb 	bl	8001790 <LL_GPIO_SetOutputPin>
	
	return val;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020800 	.word	0x40020800

080019a8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80019b8:	2110      	movs	r1, #16
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <ICM20602_Writebyte+0x40>)
 80019bc:	f7ff fef6 	bl	80017ac <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ffab 	bl	8001924 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ffa7 	bl	8001924 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80019d6:	2110      	movs	r1, #16
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <ICM20602_Writebyte+0x40>)
 80019da:	f7ff fed9 	bl	8001790 <LL_GPIO_SetOutputPin>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020800 	.word	0x40020800

080019ec <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001a08:	f7ff ff10 	bl	800182c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001a0c:	4833      	ldr	r0, [pc, #204]	; (8001adc <ICM20602_Initialization+0xf0>)
 8001a0e:	f004 f97f 	bl	8005d10 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001a12:	2075      	movs	r0, #117	; 0x75
 8001a14:	f7ff ffa8 	bl	8001968 <ICM20602_Readbyte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d105      	bne.n	8001a2e <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	4619      	mov	r1, r3
 8001a26:	482e      	ldr	r0, [pc, #184]	; (8001ae0 <ICM20602_Initialization+0xf4>)
 8001a28:	f004 f972 	bl	8005d10 <iprintf>
 8001a2c:	e012      	b.n	8001a54 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b12      	cmp	r3, #18
 8001a32:	d00f      	beq.n	8001a54 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001a34:	2075      	movs	r0, #117	; 0x75
 8001a36:	f7ff ff97 	bl	8001968 <ICM20602_Readbyte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d007      	beq.n	8001a54 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2212      	movs	r2, #18
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <ICM20602_Initialization+0xf8>)
 8001a4c:	f004 f960 	bl	8005d10 <iprintf>
			return 1; //ERROR
 8001a50:	2301      	movs	r3, #1
 8001a52:	e03f      	b.n	8001ad4 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	206b      	movs	r0, #107	; 0x6b
 8001a58:	f7ff ffa6 	bl	80019a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a5c:	2032      	movs	r0, #50	; 0x32
 8001a5e:	f001 fe4d 	bl	80036fc <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001a62:	2101      	movs	r1, #1
 8001a64:	206b      	movs	r0, #107	; 0x6b
 8001a66:	f7ff ff9f 	bl	80019a8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001a6a:	2032      	movs	r0, #50	; 0x32
 8001a6c:	f001 fe46 	bl	80036fc <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001a70:	2138      	movs	r1, #56	; 0x38
 8001a72:	206c      	movs	r0, #108	; 0x6c
 8001a74:	f7ff ff98 	bl	80019a8 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f001 fe3f 	bl	80036fc <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2019      	movs	r0, #25
 8001a82:	f7ff ff91 	bl	80019a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a86:	2032      	movs	r0, #50	; 0x32
 8001a88:	f001 fe38 	bl	80036fc <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001a8c:	2105      	movs	r1, #5
 8001a8e:	201a      	movs	r0, #26
 8001a90:	f7ff ff8a 	bl	80019a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a94:	2032      	movs	r0, #50	; 0x32
 8001a96:	f001 fe31 	bl	80036fc <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001a9a:	2118      	movs	r1, #24
 8001a9c:	201b      	movs	r0, #27
 8001a9e:	f7ff ff83 	bl	80019a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001aa2:	2032      	movs	r0, #50	; 0x32
 8001aa4:	f001 fe2a 	bl	80036fc <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001aa8:	2118      	movs	r1, #24
 8001aaa:	201c      	movs	r0, #28
 8001aac:	f7ff ff7c 	bl	80019a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f001 fe23 	bl	80036fc <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	201d      	movs	r0, #29
 8001aba:	f7ff ff75 	bl	80019a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001abe:	2032      	movs	r0, #50	; 0x32
 8001ac0:	f001 fe1c 	bl	80036fc <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2038      	movs	r0, #56	; 0x38
 8001ac8:	f7ff ff6e 	bl	80019a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f001 fe15 	bl	80036fc <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	0800804c 	.word	0x0800804c
 8001ae0:	08008064 	.word	0x08008064
 8001ae4:	08008088 	.word	0x08008088

08001ae8 <LL_SPI_Enable>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_SPI_SetStandard>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f023 0210 	bic.w	r2, r3, #16
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	605a      	str	r2, [r3, #4]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_SPI_IsActiveFlag_RXNE>:
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_SPI_IsActiveFlag_TXE>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d101      	bne.n	8001b6c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_SPI_ReceiveData8>:
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	330c      	adds	r3, #12
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_SPI_TransmitData8>:
{
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	330c      	adds	r3, #12
 8001ba6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	701a      	strb	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_GPIO_SetOutputPin>:
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_GPIO_ResetOutputPin>:
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	041a      	lsls	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_AHB1_GRP1_EnableClock>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023800 	.word	0x40023800

08001c24 <LL_APB1_GRP1_EnableClock>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40023800 	.word	0x40023800

08001c54 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b090      	sub	sp, #64	; 0x40
 8001c58:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001c5a:	f107 0318 	add.w	r3, r7, #24
 8001c5e:	2228      	movs	r2, #40	; 0x28
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fbe2 	bl	800542c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001c78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c7c:	f7ff ffd2 	bl	8001c24 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7ff ffb7 	bl	8001bf4 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001c86:	2338      	movs	r3, #56	; 0x38
 8001c88:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4826      	ldr	r0, [pc, #152]	; (8001d3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001ca4:	f002 fb9d 	bl	80043e2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001cac:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001cb0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4819      	ldr	r0, [pc, #100]	; (8001d40 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001cdc:	f002 fd51 	bl	8004782 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001ce4:	f7ff ff10 	bl	8001b08 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001ce8:	2140      	movs	r1, #64	; 0x40
 8001cea:	4814      	ldr	r0, [pc, #80]	; (8001d3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001cec:	f7ff ff73 	bl	8001bd6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001cf0:	2340      	movs	r3, #64	; 0x40
 8001cf2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001d04:	463b      	mov	r3, r7
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d0a:	f002 fb6a 	bl	80043e2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d20:	f002 fb5f 	bl	80043e2 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001d24:	4806      	ldr	r0, [pc, #24]	; (8001d40 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d26:	f7ff fedf 	bl	8001ae8 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d2e:	f7ff ff44 	bl	8001bba <LL_GPIO_SetOutputPin>
}
 8001d32:	bf00      	nop
 8001d34:	3740      	adds	r7, #64	; 0x40
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40003c00 	.word	0x40003c00

08001d44 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001d4e:	bf00      	nop
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <SPI3_SendByte+0x40>)
 8001d52:	f7ff feff 	bl	8001b54 <LL_SPI_IsActiveFlag_TXE>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f9      	beq.n	8001d50 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <SPI3_SendByte+0x40>)
 8001d62:	f7ff ff18 	bl	8001b96 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001d66:	bf00      	nop
 8001d68:	4806      	ldr	r0, [pc, #24]	; (8001d84 <SPI3_SendByte+0x40>)
 8001d6a:	f7ff fee0 	bl	8001b2e <LL_SPI_IsActiveFlag_RXNE>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f9      	beq.n	8001d68 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <SPI3_SendByte+0x40>)
 8001d76:	f7ff ff00 	bl	8001b7a <LL_SPI_ReceiveData8>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40003c00 	.word	0x40003c00

08001d88 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001d92:	2140      	movs	r1, #64	; 0x40
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <LPS22HH_Readbyte+0x3c>)
 8001d96:	f7ff ff1e 	bl	8001bd6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ffce 	bl	8001d44 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff ffcb 	bl	8001d44 <SPI3_SendByte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001db2:	2140      	movs	r1, #64	; 0x40
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <LPS22HH_Readbyte+0x3c>)
 8001db6:	f7ff ff00 	bl	8001bba <LL_GPIO_SetOutputPin>
	
	return val;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001dd8:	2140      	movs	r1, #64	; 0x40
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <LPS22HH_Writebyte+0x40>)
 8001ddc:	f7ff fefb 	bl	8001bd6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ffab 	bl	8001d44 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffa7 	bl	8001d44 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <LPS22HH_Writebyte+0x40>)
 8001dfa:	f7ff fede 	bl	8001bba <LL_GPIO_SetOutputPin>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40020400 	.word	0x40020400

08001e0c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001e16:	f7ff ff1d 	bl	8001c54 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001e1a:	4841      	ldr	r0, [pc, #260]	; (8001f20 <LPS22HH_Initialization+0x114>)
 8001e1c:	f003 ff78 	bl	8005d10 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001e20:	200f      	movs	r0, #15
 8001e22:	f7ff ffb1 	bl	8001d88 <LPS22HH_Readbyte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2bb3      	cmp	r3, #179	; 0xb3
 8001e2e:	d105      	bne.n	8001e3c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4619      	mov	r1, r3
 8001e34:	483b      	ldr	r0, [pc, #236]	; (8001f24 <LPS22HH_Initialization+0x118>)
 8001e36:	f003 ff6b 	bl	8005d10 <iprintf>
 8001e3a:	e012      	b.n	8001e62 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2bb3      	cmp	r3, #179	; 0xb3
 8001e40:	d00f      	beq.n	8001e62 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001e42:	200f      	movs	r0, #15
 8001e44:	f7ff ffa0 	bl	8001d88 <LPS22HH_Readbyte>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2bb3      	cmp	r3, #179	; 0xb3
 8001e50:	d007      	beq.n	8001e62 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	22b3      	movs	r2, #179	; 0xb3
 8001e56:	4619      	mov	r1, r3
 8001e58:	4833      	ldr	r0, [pc, #204]	; (8001f28 <LPS22HH_Initialization+0x11c>)
 8001e5a:	f003 ff59 	bl	8005d10 <iprintf>
			return 1; //ERROR
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e059      	b.n	8001f16 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001e62:	2104      	movs	r1, #4
 8001e64:	2011      	movs	r0, #17
 8001e66:	f7ff ffaf 	bl	8001dc8 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001e6a:	2011      	movs	r0, #17
 8001e6c:	f7ff ff8c 	bl	8001d88 <LPS22HH_Readbyte>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f7      	bne.n	8001e6a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e7a:	2010      	movs	r0, #16
 8001e7c:	f7ff ff84 	bl	8001d88 <LPS22HH_Readbyte>
 8001e80:	4603      	mov	r3, r0
 8001e82:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e8a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	2010      	movs	r0, #16
 8001e92:	f7ff ff99 	bl	8001dc8 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e9a:	2010      	movs	r0, #16
 8001e9c:	f7ff ff74 	bl	8001d88 <LPS22HH_Readbyte>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ea4:	2010      	movs	r0, #16
 8001ea6:	f7ff ff6f 	bl	8001d88 <LPS22HH_Readbyte>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	f043 030c 	orr.w	r3, r3, #12
 8001eb4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f7ff ff84 	bl	8001dc8 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ec0:	2010      	movs	r0, #16
 8001ec2:	f7ff ff61 	bl	8001d88 <LPS22HH_Readbyte>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	2010      	movs	r0, #16
 8001ed8:	f7ff ff76 	bl	8001dc8 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001edc:	2011      	movs	r0, #17
 8001ede:	f7ff ff53 	bl	8001d88 <LPS22HH_Readbyte>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2011      	movs	r0, #17
 8001ef4:	f7ff ff68 	bl	8001dc8 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001ef8:	2012      	movs	r0, #18
 8001efa:	f7ff ff45 	bl	8001d88 <LPS22HH_Readbyte>
 8001efe:	4603      	mov	r3, r0
 8001f00:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001f02:	79bb      	ldrb	r3, [r7, #6]
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	2012      	movs	r0, #18
 8001f10:	f7ff ff5a 	bl	8001dc8 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	080080b4 	.word	0x080080b4
 8001f24:	080080c8 	.word	0x080080c8
 8001f28:	080080ec 	.word	0x080080ec

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60da      	str	r2, [r3, #12]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b80      	cmp	r3, #128	; 0x80
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	605a      	str	r2, [r3, #4]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <LL_AHB1_GRP1_EnableClock>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40023800 	.word	0x40023800

08002100 <LL_APB1_GRP1_EnableClock>:
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <LL_APB1_GRP1_EnableClock+0x2c>)
 800210a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <LL_APB1_GRP1_EnableClock+0x2c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4313      	orrs	r3, r2
 8002112:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40023800 	.word	0x40023800

08002130 <M8N_TransmitDATA>:
	0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitDATA(unsigned char* data, unsigned char len) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < len; i++) {
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e011      	b.n	8002166 <M8N_TransmitDATA+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002142:	bf00      	nop
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <M8N_TransmitDATA+0x48>)
 8002146:	f7ff ffa0 	bl	800208a <LL_USART_IsActiveFlag_TXE>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f9      	beq.n	8002144 <M8N_TransmitDATA+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <M8N_TransmitDATA+0x48>)
 800215c:	f7ff ffa8 	bl	80020b0 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++) {
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbe9      	blt.n	8002142 <M8N_TransmitDATA+0x12>
	}
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40004c00 	.word	0x40004c00

0800217c <M8N_UART4_Initialzation>:

void M8N_UART4_Initialzation(void){
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	; 0x38
 8002180:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */

	  /* USER CODE END UART4_Init 0 */

	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	615a      	str	r2, [r3, #20]
 8002194:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
 80021a4:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80021a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021aa:	f7ff ffa9 	bl	8002100 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80021ae:	2004      	movs	r0, #4
 80021b0:	f7ff ff8e 	bl	80020d0 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80021b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021b8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021ba:	2302      	movs	r3, #2
 80021bc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80021ca:	2308      	movs	r3, #8
 80021cc:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4819      	ldr	r0, [pc, #100]	; (8002238 <M8N_UART4_Initialzation+0xbc>)
 80021d4:	f002 f905 	bl	80043e2 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021d8:	f7ff fea8 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80021dc:	4603      	mov	r3, r0
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fef8 	bl	8001fd8 <NVIC_EncodePriority>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4619      	mov	r1, r3
 80021ec:	2034      	movs	r0, #52	; 0x34
 80021ee:	f7ff fec9 	bl	8001f84 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 80021f2:	2034      	movs	r0, #52	; 0x34
 80021f4:	f7ff fea8 	bl	8001f48 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 80021f8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80021fc:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800220a:	230c      	movs	r3, #12
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800220e:	2300      	movs	r3, #0
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <M8N_UART4_Initialzation+0xc0>)
 800221e:	f003 f85b 	bl	80052d8 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <M8N_UART4_Initialzation+0xc0>)
 8002224:	f7ff ff1b 	bl	800205e <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <M8N_UART4_Initialzation+0xc0>)
 800222a:	f7ff ff08 	bl	800203e <LL_USART_Enable>
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */
}
 800222e:	bf00      	nop
 8002230:	3738      	adds	r7, #56	; 0x38
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40020800 	.word	0x40020800
 800223c:	40004c00 	.word	0x40004c00

08002240 <M8N_Initialzation>:

void M8N_Initialzation(void) {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	M8N_UART4_Initialzation();
 8002244:	f7ff ff9a 	bl	800217c <M8N_UART4_Initialzation>

	M8N_TransmitDATA(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002248:	211c      	movs	r1, #28
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <M8N_Initialzation+0x40>)
 800224c:	f7ff ff70 	bl	8002130 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002250:	2064      	movs	r0, #100	; 0x64
 8002252:	f001 fa53 	bl	80036fc <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002256:	2110      	movs	r1, #16
 8002258:	480a      	ldr	r0, [pc, #40]	; (8002284 <M8N_Initialzation+0x44>)
 800225a:	f7ff ff69 	bl	8002130 <M8N_TransmitDATA>
	HAL_Delay(100);
 800225e:	2064      	movs	r0, #100	; 0x64
 8002260:	f001 fa4c 	bl	80036fc <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002264:	210e      	movs	r1, #14
 8002266:	4808      	ldr	r0, [pc, #32]	; (8002288 <M8N_Initialzation+0x48>)
 8002268:	f7ff ff62 	bl	8002130 <M8N_TransmitDATA>
	HAL_Delay(100);
 800226c:	2064      	movs	r0, #100	; 0x64
 800226e:	f001 fa45 	bl	80036fc <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002272:	2115      	movs	r1, #21
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <M8N_Initialzation+0x4c>)
 8002276:	f7ff ff5b 	bl	8002130 <M8N_TransmitDATA>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	0800812c 	.word	0x0800812c
 8002284:	08008148 	.word	0x08008148
 8002288:	08008158 	.word	0x08008158
 800228c:	08008168 	.word	0x08008168

08002290 <LL_GPIO_ResetOutputPin>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	041a      	lsls	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	619a      	str	r2, [r3, #24]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <LL_AHB1_GRP1_EnableClock>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4013      	ands	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40023800 	.word	0x40023800

080022e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	463b      	mov	r3, r7
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80022f6:	2080      	movs	r0, #128	; 0x80
 80022f8:	f7ff ffda 	bl	80022b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80022fc:	2004      	movs	r0, #4
 80022fe:	f7ff ffd7 	bl	80022b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff ffd4 	bl	80022b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002308:	2002      	movs	r0, #2
 800230a:	f7ff ffd1 	bl	80022b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800230e:	2008      	movs	r0, #8
 8002310:	f7ff ffce 	bl	80022b0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002314:	f240 2117 	movw	r1, #535	; 0x217
 8002318:	482b      	ldr	r0, [pc, #172]	; (80023c8 <MX_GPIO_Init+0xe8>)
 800231a:	f7ff ffb9 	bl	8002290 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 800231e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002322:	482a      	ldr	r0, [pc, #168]	; (80023cc <MX_GPIO_Init+0xec>)
 8002324:	f7ff ffb4 	bl	8002290 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232c:	4828      	ldr	r0, [pc, #160]	; (80023d0 <MX_GPIO_Init+0xf0>)
 800232e:	f7ff ffaf 	bl	8002290 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002332:	f240 2317 	movw	r3, #535	; 0x217
 8002336:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002338:	2301      	movs	r3, #1
 800233a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	481e      	ldr	r0, [pc, #120]	; (80023c8 <MX_GPIO_Init+0xe8>)
 800234e:	f002 f848 	bl	80043e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002352:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002356:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	463b      	mov	r3, r7
 8002362:	4619      	mov	r1, r3
 8002364:	4818      	ldr	r0, [pc, #96]	; (80023c8 <MX_GPIO_Init+0xe8>)
 8002366:	f002 f83c 	bl	80043e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 800236a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800236e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002370:	2301      	movs	r3, #1
 8002372:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	463b      	mov	r3, r7
 8002382:	4619      	mov	r1, r3
 8002384:	4811      	ldr	r0, [pc, #68]	; (80023cc <MX_GPIO_Init+0xec>)
 8002386:	f002 f82c 	bl	80043e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800238a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002390:	2301      	movs	r3, #1
 8002392:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	463b      	mov	r3, r7
 80023a2:	4619      	mov	r1, r3
 80023a4:	480a      	ldr	r0, [pc, #40]	; (80023d0 <MX_GPIO_Init+0xf0>)
 80023a6:	f002 f81c 	bl	80043e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	463b      	mov	r3, r7
 80023b8:	4619      	mov	r1, r3
 80023ba:	4804      	ldr	r0, [pc, #16]	; (80023cc <MX_GPIO_Init+0xec>)
 80023bc:	f002 f811 	bl	80043e2 <LL_GPIO_Init>

}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020000 	.word	0x40020000

080023d4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	621a      	str	r2, [r3, #32]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	621a      	str	r2, [r3, #32]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_USART_IsActiveFlag_TXE>:
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b80      	cmp	r3, #128	; 0x80
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_USART_EnableIT_RXNE>:
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	330c      	adds	r3, #12
 800246c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	60bb      	str	r3, [r7, #8]
   return(result);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f043 0320 	orr.w	r3, r3, #32
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	330c      	adds	r3, #12
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	61ba      	str	r2, [r7, #24]
 8002486:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002488:	6979      	ldr	r1, [r7, #20]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	e841 2300 	strex	r3, r2, [r1]
 8002490:	613b      	str	r3, [r7, #16]
   return(result);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e7      	bne.n	8002468 <LL_USART_EnableIT_RXNE+0x8>
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_USART_TransmitData8>:
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	605a      	str	r2, [r3, #4]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4013      	ands	r3, r2
 80024da:	041a      	lsls	r2, r3, #16
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43d9      	mvns	r1, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	400b      	ands	r3, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <_write>:
#include "FS-iA6B.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e011      	b.n	800252e <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 800250a:	bf00      	nop
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <_write+0x48>)
 800250e:	f7ff ff94 	bl	800243a <LL_USART_IsActiveFlag_TXE>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f9      	beq.n	800250c <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p + i));
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4807      	ldr	r0, [pc, #28]	; (8002540 <_write+0x48>)
 8002524:	f7ff ffbf 	bl	80024a6 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++){
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	dbe9      	blt.n	800250a <_write+0x12>
	}
	return len;
 8002536:	687b      	ldr	r3, [r7, #4]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40011400 	.word	0x40011400

08002544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254a:	f001 f865 	bl	8003618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800254e:	f000 f88d 	bl	800266c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002552:	f7ff fec5 	bl	80022e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002556:	f000 fd91 	bl	800307c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800255a:	f000 ffd3 	bl	8003504 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800255e:	f000 f9a1 	bl	80028a4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002562:	f000 f94d 	bl	8002800 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002566:	f000 f9f1 	bl	800294c <MX_SPI3_Init>
  MX_UART4_Init();
 800256a:	f000 fef1 	bl	8003350 <MX_UART4_Init>
  MX_UART5_Init();
 800256e:	f000 ff51 	bl	8003414 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8002572:	4835      	ldr	r0, [pc, #212]	; (8002648 <main+0x104>)
 8002574:	f7ff ff2e 	bl	80023d4 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002578:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800257c:	4832      	ldr	r0, [pc, #200]	; (8002648 <main+0x104>)
 800257e:	f7ff ff39 	bl	80023f4 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000;
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <main+0x104>)
 8002584:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800258a:	2064      	movs	r0, #100	; 0x64
 800258c:	f001 f8b6 	bl	80036fc <HAL_Delay>
  TIM3->PSC = 1500;
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <main+0x104>)
 8002592:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8002598:	2064      	movs	r0, #100	; 0x64
 800259a:	f001 f8af 	bl	80036fc <HAL_Delay>
  TIM3->PSC = 1000;
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <main+0x104>)
 80025a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80025a6:	2064      	movs	r0, #100	; 0x64
 80025a8:	f001 f8a8 	bl	80036fc <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80025ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b0:	4825      	ldr	r0, [pc, #148]	; (8002648 <main+0x104>)
 80025b2:	f7ff ff30 	bl	8002416 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 80025b6:	4825      	ldr	r0, [pc, #148]	; (800264c <main+0x108>)
 80025b8:	f7ff ff52 	bl	8002460 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 80025bc:	4824      	ldr	r0, [pc, #144]	; (8002650 <main+0x10c>)
 80025be:	f7ff ff4f 	bl	8002460 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);
 80025c2:	4824      	ldr	r0, [pc, #144]	; (8002654 <main+0x110>)
 80025c4:	f7ff ff4c 	bl	8002460 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 80025c8:	f7fe fdf6 	bl	80011b8 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 80025cc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80025d0:	f7fe fe88 	bl	80012e4 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 80025d4:	f7ff fa0a 	bl	80019ec <ICM20602_Initialization>
  LPS22HH_Initialization();
 80025d8:	f7ff fc18 	bl	8001e0c <LPS22HH_Initialization>
  M8N_Initialzation();
 80025dc:	f7ff fe30 	bl	8002240 <M8N_Initialzation>
			  M8N_UBX_NAV_POSLLH_Pasing(&m8n_rx_buf[0], &posllh);

			  printf("LAT: %d\tLOT: %d\tLength: %d\t\n", posllh.lon, posllh.lat, posllh.length);
		  }
	  }*/
	  if(ibus_rx_cplt_flag == 1){
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <main+0x114>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d1fb      	bne.n	80025e0 <main+0x9c>
		  ibus_rx_cplt_flag = 0;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <main+0x114>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 80025ee:	2120      	movs	r1, #32
 80025f0:	481a      	ldr	r0, [pc, #104]	; (800265c <main+0x118>)
 80025f2:	f7fe ffbd 	bl	8001570 <iBus_Check_CHKSUM>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d1f1      	bne.n	80025e0 <main+0x9c>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80025fc:	2104      	movs	r1, #4
 80025fe:	4818      	ldr	r0, [pc, #96]	; (8002660 <main+0x11c>)
 8002600:	f7ff ff60 	bl	80024c4 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002604:	4917      	ldr	r1, [pc, #92]	; (8002664 <main+0x120>)
 8002606:	4815      	ldr	r0, [pc, #84]	; (800265c <main+0x118>)
 8002608:	f7fe ffe8 	bl	80015dc <iBus_Parsing>
			  printf("%d\t%d\t%d\t%d\t%d\t%d\n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <main+0x120>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <main+0x120>)
 8002614:	885b      	ldrh	r3, [r3, #2]
 8002616:	461c      	mov	r4, r3
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <main+0x120>)
 800261a:	889b      	ldrh	r3, [r3, #4]
 800261c:	461d      	mov	r5, r3
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <main+0x120>)
 8002620:	88db      	ldrh	r3, [r3, #6]
 8002622:	461a      	mov	r2, r3
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <main+0x120>)
 8002626:	891b      	ldrh	r3, [r3, #8]
 8002628:	4619      	mov	r1, r3
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <main+0x120>)
 800262c:	899b      	ldrh	r3, [r3, #12]
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	9101      	str	r1, [sp, #4]
 8002632:	9200      	str	r2, [sp, #0]
 8002634:	462b      	mov	r3, r5
 8002636:	4622      	mov	r2, r4
 8002638:	4601      	mov	r1, r0
 800263a:	480b      	ldr	r0, [pc, #44]	; (8002668 <main+0x124>)
 800263c:	f003 fb68 	bl	8005d10 <iprintf>
			  HAL_Delay(30);
 8002640:	201e      	movs	r0, #30
 8002642:	f001 f85b 	bl	80036fc <HAL_Delay>
	  if(ibus_rx_cplt_flag == 1){
 8002646:	e7cb      	b.n	80025e0 <main+0x9c>
 8002648:	40000400 	.word	0x40000400
 800264c:	40011400 	.word	0x40011400
 8002650:	40004c00 	.word	0x40004c00
 8002654:	40005000 	.word	0x40005000
 8002658:	200002e8 	.word	0x200002e8
 800265c:	200002c8 	.word	0x200002c8
 8002660:	40020800 	.word	0x40020800
 8002664:	20000284 	.word	0x20000284
 8002668:	08008118 	.word	0x08008118

0800266c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b094      	sub	sp, #80	; 0x50
 8002670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	2230      	movs	r2, #48	; 0x30
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fed6 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <SystemClock_Config+0xcc>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <SystemClock_Config+0xcc>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <SystemClock_Config+0xcc>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <SystemClock_Config+0xd0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a21      	ldr	r2, [pc, #132]	; (800273c <SystemClock_Config+0xd0>)
 80026b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <SystemClock_Config+0xd0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d2:	2302      	movs	r3, #2
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026dc:	2304      	movs	r3, #4
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026e0:	23a8      	movs	r3, #168	; 0xa8
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e4:	2302      	movs	r3, #2
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026e8:	2304      	movs	r3, #4
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 f90d 	bl	8003910 <HAL_RCC_OscConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026fc:	f000 f820 	bl	8002740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002700:	230f      	movs	r3, #15
 8002702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002704:	2302      	movs	r3, #2
 8002706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800270c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2105      	movs	r1, #5
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fb6e 	bl	8003e00 <HAL_RCC_ClockConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800272a:	f000 f809 	bl	8002740 <Error_Handler>
  }
}
 800272e:	bf00      	nop
 8002730:	3750      	adds	r7, #80	; 0x50
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40007000 	.word	0x40007000

08002740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002744:	b672      	cpsid	i
}
 8002746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002748:	e7fe      	b.n	8002748 <Error_Handler+0x8>

0800274a <LL_SPI_SetStandard>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 0210 	bic.w	r2, r3, #16
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	605a      	str	r2, [r3, #4]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_AHB1_GRP1_EnableClock>:
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800277a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4313      	orrs	r3, r2
 8002782:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4013      	ands	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40023800 	.word	0x40023800

080027a0 <LL_APB1_GRP1_EnableClock>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80027aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ac:	4907      	ldr	r1, [pc, #28]	; (80027cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80027b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40023800 	.word	0x40023800

080027d0 <LL_APB2_GRP1_EnableClock>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80027da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80027e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4013      	ands	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40023800 	.word	0x40023800

08002800 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b090      	sub	sp, #64	; 0x40
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	2228      	movs	r2, #40	; 0x28
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f002 fe0c 	bl	800542c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	463b      	mov	r3, r7
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]
 8002822:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002824:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002828:	f7ff ffd2 	bl	80027d0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff ff9f 	bl	8002770 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002832:	23e0      	movs	r3, #224	; 0xe0
 8002834:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002836:	2302      	movs	r3, #2
 8002838:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002846:	2305      	movs	r3, #5
 8002848:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	463b      	mov	r3, r7
 800284c:	4619      	mov	r1, r3
 800284e:	4813      	ldr	r0, [pc, #76]	; (800289c <MX_SPI1_Init+0x9c>)
 8002850:	f001 fdc7 	bl	80043e2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002858:	f44f 7382 	mov.w	r3, #260	; 0x104
 800285c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002862:	2302      	movs	r3, #2
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002866:	2301      	movs	r3, #1
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800286a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002870:	2310      	movs	r3, #16
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002874:	2300      	movs	r3, #0
 8002876:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800287c:	230a      	movs	r3, #10
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002880:	f107 0318 	add.w	r3, r7, #24
 8002884:	4619      	mov	r1, r3
 8002886:	4806      	ldr	r0, [pc, #24]	; (80028a0 <MX_SPI1_Init+0xa0>)
 8002888:	f001 ff7b 	bl	8004782 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800288c:	2100      	movs	r1, #0
 800288e:	4804      	ldr	r0, [pc, #16]	; (80028a0 <MX_SPI1_Init+0xa0>)
 8002890:	f7ff ff5b 	bl	800274a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	3740      	adds	r7, #64	; 0x40
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020000 	.word	0x40020000
 80028a0:	40013000 	.word	0x40013000

080028a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b090      	sub	sp, #64	; 0x40
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80028aa:	f107 0318 	add.w	r3, r7, #24
 80028ae:	2228      	movs	r2, #40	; 0x28
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fdba 	bl	800542c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	463b      	mov	r3, r7
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80028c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028cc:	f7ff ff68 	bl	80027a0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028d0:	2002      	movs	r0, #2
 80028d2:	f7ff ff4d 	bl	8002770 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80028d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028dc:	2302      	movs	r3, #2
 80028de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80028ec:	2305      	movs	r3, #5
 80028ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	4813      	ldr	r0, [pc, #76]	; (8002944 <MX_SPI2_Init+0xa0>)
 80028f6:	f001 fd74 	bl	80043e2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80028fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002902:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002908:	2302      	movs	r3, #2
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800290c:	2301      	movs	r3, #1
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002916:	2318      	movs	r3, #24
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800291a:	2300      	movs	r3, #0
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002922:	230a      	movs	r3, #10
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002926:	f107 0318 	add.w	r3, r7, #24
 800292a:	4619      	mov	r1, r3
 800292c:	4806      	ldr	r0, [pc, #24]	; (8002948 <MX_SPI2_Init+0xa4>)
 800292e:	f001 ff28 	bl	8004782 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002932:	2100      	movs	r1, #0
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <MX_SPI2_Init+0xa4>)
 8002936:	f7ff ff08 	bl	800274a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	3740      	adds	r7, #64	; 0x40
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40020400 	.word	0x40020400
 8002948:	40003800 	.word	0x40003800

0800294c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b090      	sub	sp, #64	; 0x40
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002952:	f107 0318 	add.w	r3, r7, #24
 8002956:	2228      	movs	r2, #40	; 0x28
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f002 fd66 	bl	800542c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	463b      	mov	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	611a      	str	r2, [r3, #16]
 800296e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002974:	f7ff ff14 	bl	80027a0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002978:	2002      	movs	r0, #2
 800297a:	f7ff fef9 	bl	8002770 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800297e:	2338      	movs	r3, #56	; 0x38
 8002980:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002982:	2302      	movs	r3, #2
 8002984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002992:	2306      	movs	r3, #6
 8002994:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002996:	463b      	mov	r3, r7
 8002998:	4619      	mov	r1, r3
 800299a:	4813      	ldr	r0, [pc, #76]	; (80029e8 <MX_SPI3_Init+0x9c>)
 800299c:	f001 fd21 	bl	80043e2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80029a4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029a8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80029ae:	2302      	movs	r3, #2
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80029b2:	2301      	movs	r3, #1
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80029b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80029bc:	2308      	movs	r3, #8
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80029c0:	2300      	movs	r3, #0
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80029c8:	230a      	movs	r3, #10
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80029cc:	f107 0318 	add.w	r3, r7, #24
 80029d0:	4619      	mov	r1, r3
 80029d2:	4806      	ldr	r0, [pc, #24]	; (80029ec <MX_SPI3_Init+0xa0>)
 80029d4:	f001 fed5 	bl	8004782 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80029d8:	2100      	movs	r1, #0
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <MX_SPI3_Init+0xa0>)
 80029dc:	f7ff feb5 	bl	800274a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3740      	adds	r7, #64	; 0x40
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40003c00 	.word	0x40003c00

080029f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_MspInit+0x4c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800

08002a40 <LL_USART_IsActiveFlag_RXNE>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_USART_ClearFlag_RXNE>:
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f06f 0220 	mvn.w	r2, #32
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_USART_ReceiveData8>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	b2db      	uxtb	r3, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 fde8 	bl	80036bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4)){
 8002af4:	4833      	ldr	r0, [pc, #204]	; (8002bc4 <UART4_IRQHandler+0xd4>)
 8002af6:	f7ff ffa3 	bl	8002a40 <LL_USART_IsActiveFlag_RXNE>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05b      	beq.n	8002bb8 <UART4_IRQHandler+0xc8>
			LL_USART_ClearFlag_RXNE(UART4);
 8002b00:	4830      	ldr	r0, [pc, #192]	; (8002bc4 <UART4_IRQHandler+0xd4>)
 8002b02:	f7ff ffb0 	bl	8002a66 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8002b06:	482f      	ldr	r0, [pc, #188]	; (8002bc4 <UART4_IRQHandler+0xd4>)
 8002b08:	f7ff ffbb 	bl	8002a82 <LL_USART_ReceiveData8>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <UART4_IRQHandler+0xd8>)
 8002b12:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <UART4_IRQHandler+0xdc>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]

//			LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt){
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b23      	cmp	r3, #35	; 0x23
 8002b20:	d02e      	beq.n	8002b80 <UART4_IRQHandler+0x90>
 8002b22:	2b23      	cmp	r3, #35	; 0x23
 8002b24:	dc3a      	bgt.n	8002b9c <UART4_IRQHandler+0xac>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <UART4_IRQHandler+0x40>
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d012      	beq.n	8002b54 <UART4_IRQHandler+0x64>
 8002b2e:	e035      	b.n	8002b9c <UART4_IRQHandler+0xac>
			case 0:
				if(uart4_rx_data == 0xb5){
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <UART4_IRQHandler+0xd8>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2bb5      	cmp	r3, #181	; 0xb5
 8002b36:	d141      	bne.n	8002bbc <UART4_IRQHandler+0xcc>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <UART4_IRQHandler+0xd8>)
 8002b40:	7819      	ldrb	r1, [r3, #0]
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <UART4_IRQHandler+0xe4>)
 8002b44:	5499      	strb	r1, [r3, r2]
					cnt++;
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b50:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002b52:	e033      	b.n	8002bbc <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62) {
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <UART4_IRQHandler+0xd8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b62      	cmp	r3, #98	; 0x62
 8002b5a:	d10d      	bne.n	8002b78 <UART4_IRQHandler+0x88>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <UART4_IRQHandler+0xd8>)
 8002b64:	7819      	ldrb	r1, [r3, #0]
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <UART4_IRQHandler+0xe4>)
 8002b68:	5499      	strb	r1, [r3, r2]
					cnt++;
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b74:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8002b76:	e022      	b.n	8002bbe <UART4_IRQHandler+0xce>
					cnt = 0;
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
				break;
 8002b7e:	e01e      	b.n	8002bbe <UART4_IRQHandler+0xce>
			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <UART4_IRQHandler+0xd8>)
 8002b88:	7819      	ldrb	r1, [r3, #0]
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <UART4_IRQHandler+0xe4>)
 8002b8c:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <UART4_IRQHandler+0xe8>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
				break;
 8002b9a:	e010      	b.n	8002bbe <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <UART4_IRQHandler+0xd8>)
 8002ba4:	7819      	ldrb	r1, [r3, #0]
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <UART4_IRQHandler+0xe4>)
 8002ba8:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <UART4_IRQHandler+0xe0>)
 8002bb4:	701a      	strb	r2, [r3, #0]
				break;
 8002bb6:	e002      	b.n	8002bbe <UART4_IRQHandler+0xce>
			}
	}
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <UART4_IRQHandler+0xce>
				break;
 8002bbc:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40004c00 	.word	0x40004c00
 8002bc8:	2000029d 	.word	0x2000029d
 8002bcc:	2000029c 	.word	0x2000029c
 8002bd0:	200002e9 	.word	0x200002e9
 8002bd4:	200002a0 	.word	0x200002a0
 8002bd8:	200002c4 	.word	0x200002c4

08002bdc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5)){
 8002be0:	4833      	ldr	r0, [pc, #204]	; (8002cb0 <UART5_IRQHandler+0xd4>)
 8002be2:	f7ff ff2d 	bl	8002a40 <LL_USART_IsActiveFlag_RXNE>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d05b      	beq.n	8002ca4 <UART5_IRQHandler+0xc8>
		LL_USART_ClearFlag_RXNE(UART5);
 8002bec:	4830      	ldr	r0, [pc, #192]	; (8002cb0 <UART5_IRQHandler+0xd4>)
 8002bee:	f7ff ff3a 	bl	8002a66 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8002bf2:	482f      	ldr	r0, [pc, #188]	; (8002cb0 <UART5_IRQHandler+0xd4>)
 8002bf4:	f7ff ff45 	bl	8002a82 <LL_USART_ReceiveData8>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <UART5_IRQHandler+0xd8>)
 8002bfe:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <UART5_IRQHandler+0xdc>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
		/*while(!LL_USART_IsActiveFlag_TXE(USART6));
		LL_USART_TransmitData8(USART6, uart5_rx_data);*/

		switch(cnt){
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b1f      	cmp	r3, #31
 8002c0c:	d02e      	beq.n	8002c6c <UART5_IRQHandler+0x90>
 8002c0e:	2b1f      	cmp	r3, #31
 8002c10:	dc3a      	bgt.n	8002c88 <UART5_IRQHandler+0xac>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <UART5_IRQHandler+0x40>
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d012      	beq.n	8002c40 <UART5_IRQHandler+0x64>
 8002c1a:	e035      	b.n	8002c88 <UART5_IRQHandler+0xac>
		case 0:
			if(uart5_rx_data == 0x20){
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <UART5_IRQHandler+0xd8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d141      	bne.n	8002ca8 <UART5_IRQHandler+0xcc>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <UART5_IRQHandler+0xd8>)
 8002c2c:	7819      	ldrb	r1, [r3, #0]
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <UART5_IRQHandler+0xe4>)
 8002c30:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c3c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c3e:	e033      	b.n	8002ca8 <UART5_IRQHandler+0xcc>

		case 1:
			if(uart5_rx_data == 0x40) {
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <UART5_IRQHandler+0xd8>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	d10d      	bne.n	8002c64 <UART5_IRQHandler+0x88>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <UART5_IRQHandler+0xd8>)
 8002c50:	7819      	ldrb	r1, [r3, #0]
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <UART5_IRQHandler+0xe4>)
 8002c54:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c60:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8002c62:	e022      	b.n	8002caa <UART5_IRQHandler+0xce>
				cnt = 0;
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
			break;
 8002c6a:	e01e      	b.n	8002caa <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <UART5_IRQHandler+0xd8>)
 8002c74:	7819      	ldrb	r1, [r3, #0]
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <UART5_IRQHandler+0xe4>)
 8002c78:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <UART5_IRQHandler+0xe8>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
			break;
 8002c86:	e010      	b.n	8002caa <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <UART5_IRQHandler+0xd8>)
 8002c90:	7819      	ldrb	r1, [r3, #0]
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <UART5_IRQHandler+0xe4>)
 8002c94:	5499      	strb	r1, [r3, r2]
			cnt++;
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <UART5_IRQHandler+0xe0>)
 8002ca0:	701a      	strb	r2, [r3, #0]
			break;
 8002ca2:	e002      	b.n	8002caa <UART5_IRQHandler+0xce>
		}
	}
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <UART5_IRQHandler+0xce>
			break;
 8002ca8:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40005000 	.word	0x40005000
 8002cb4:	200002c6 	.word	0x200002c6
 8002cb8:	200002c5 	.word	0x200002c5
 8002cbc:	200002ea 	.word	0x200002ea
 8002cc0:	200002c8 	.word	0x200002c8
 8002cc4:	200002e8 	.word	0x200002e8

08002cc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)){
 8002ccc:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <USART6_IRQHandler+0x30>)
 8002cce:	f7ff feb7 	bl	8002a40 <LL_USART_IsActiveFlag_RXNE>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00c      	beq.n	8002cf2 <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8002cd8:	4807      	ldr	r0, [pc, #28]	; (8002cf8 <USART6_IRQHandler+0x30>)
 8002cda:	f7ff fec4 	bl	8002a66 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <USART6_IRQHandler+0x30>)
 8002ce0:	f7ff fecf 	bl	8002a82 <LL_USART_ReceiveData8>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <USART6_IRQHandler+0x34>)
 8002cea:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <USART6_IRQHandler+0x38>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	2000029b 	.word	0x2000029b
 8002d00:	2000029a 	.word	0x2000029a

08002d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return 1;
 8002d08:	2301      	movs	r3, #1
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_kill>:

int _kill(int pid, int sig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d1e:	f002 fb5b 	bl	80053d8 <__errno>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2216      	movs	r2, #22
 8002d26:	601a      	str	r2, [r3, #0]
  return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_exit>:

void _exit (int status)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ffe7 	bl	8002d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d46:	e7fe      	b.n	8002d46 <_exit+0x12>

08002d48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e00a      	b.n	8002d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d5a:	f3af 8000 	nop.w
 8002d5e:	4601      	mov	r1, r0
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	60ba      	str	r2, [r7, #8]
 8002d66:	b2ca      	uxtb	r2, r1
 8002d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbf0      	blt.n	8002d5a <_read+0x12>
  }

  return len;
 8002d78:	687b      	ldr	r3, [r7, #4]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002daa:	605a      	str	r2, [r3, #4]
  return 0;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_isatty>:

int _isatty(int file)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <_sbrk+0x5c>)
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <_sbrk+0x60>)
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <_sbrk+0x64>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <_sbrk+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e1c:	f002 fadc 	bl	80053d8 <__errno>
 8002e20:	4603      	mov	r3, r0
 8002e22:	220c      	movs	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e009      	b.n	8002e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <_sbrk+0x64>)
 8002e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20020000 	.word	0x20020000
 8002e4c:	00000400 	.word	0x00000400
 8002e50:	200002ec 	.word	0x200002ec
 8002e54:	20000308 	.word	0x20000308

08002e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <SystemInit+0x20>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <SystemInit+0x20>)
 8002e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <LL_TIM_EnableARRPreload>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	601a      	str	r2, [r3, #0]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d01c      	beq.n	8002ee6 <LL_TIM_OC_EnableFast+0x4a>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d017      	beq.n	8002ee2 <LL_TIM_OC_EnableFast+0x46>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d012      	beq.n	8002ede <LL_TIM_OC_EnableFast+0x42>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d00d      	beq.n	8002eda <LL_TIM_OC_EnableFast+0x3e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d007      	beq.n	8002ed6 <LL_TIM_OC_EnableFast+0x3a>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d101      	bne.n	8002ed2 <LL_TIM_OC_EnableFast+0x36>
 8002ece:	2305      	movs	r3, #5
 8002ed0:	e00a      	b.n	8002ee8 <LL_TIM_OC_EnableFast+0x4c>
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	e008      	b.n	8002ee8 <LL_TIM_OC_EnableFast+0x4c>
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	e006      	b.n	8002ee8 <LL_TIM_OC_EnableFast+0x4c>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e004      	b.n	8002ee8 <LL_TIM_OC_EnableFast+0x4c>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e002      	b.n	8002ee8 <LL_TIM_OC_EnableFast+0x4c>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <LL_TIM_OC_EnableFast+0x4c>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3318      	adds	r3, #24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <LL_TIM_OC_EnableFast+0x80>)
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	440b      	add	r3, r1
 8002ef8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <LL_TIM_OC_EnableFast+0x84>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	4619      	mov	r1, r3
 8002f06:	2304      	movs	r3, #4
 8002f08:	408b      	lsls	r3, r1
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	601a      	str	r2, [r3, #0]

}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	08008198 	.word	0x08008198
 8002f20:	080081a0 	.word	0x080081a0

08002f24 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d01c      	beq.n	8002f6e <LL_TIM_OC_EnablePreload+0x4a>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d017      	beq.n	8002f6a <LL_TIM_OC_EnablePreload+0x46>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d012      	beq.n	8002f66 <LL_TIM_OC_EnablePreload+0x42>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d00d      	beq.n	8002f62 <LL_TIM_OC_EnablePreload+0x3e>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4c:	d007      	beq.n	8002f5e <LL_TIM_OC_EnablePreload+0x3a>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	d101      	bne.n	8002f5a <LL_TIM_OC_EnablePreload+0x36>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e00a      	b.n	8002f70 <LL_TIM_OC_EnablePreload+0x4c>
 8002f5a:	2306      	movs	r3, #6
 8002f5c:	e008      	b.n	8002f70 <LL_TIM_OC_EnablePreload+0x4c>
 8002f5e:	2304      	movs	r3, #4
 8002f60:	e006      	b.n	8002f70 <LL_TIM_OC_EnablePreload+0x4c>
 8002f62:	2303      	movs	r3, #3
 8002f64:	e004      	b.n	8002f70 <LL_TIM_OC_EnablePreload+0x4c>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e002      	b.n	8002f70 <LL_TIM_OC_EnablePreload+0x4c>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <LL_TIM_OC_EnablePreload+0x4c>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3318      	adds	r3, #24
 8002f76:	4619      	mov	r1, r3
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <LL_TIM_OC_EnablePreload+0x80>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	440b      	add	r3, r1
 8002f80:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <LL_TIM_OC_EnablePreload+0x84>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	2308      	movs	r3, #8
 8002f90:	408b      	lsls	r3, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	08008198 	.word	0x08008198
 8002fa8:	080081a0 	.word	0x080081a0

08002fac <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fbe:	f023 0307 	bic.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	605a      	str	r2, [r3, #4]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	609a      	str	r2, [r3, #8]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_AHB1_GRP1_EnableClock>:
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4313      	orrs	r3, r2
 800302e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4013      	ands	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40023800 	.word	0x40023800

0800304c <LL_APB1_GRP1_EnableClock>:
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003058:	4907      	ldr	r1, [pc, #28]	; (8003078 <LL_APB1_GRP1_EnableClock+0x2c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40023800 	.word	0x40023800

0800307c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b094      	sub	sp, #80	; 0x50
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003082:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003092:	f107 031c 	add.w	r3, r7, #28
 8003096:	2220      	movs	r2, #32
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f002 f9c6 	bl	800542c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	611a      	str	r2, [r3, #16]
 80030ae:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80030b0:	2002      	movs	r0, #2
 80030b2:	f7ff ffcb 	bl	800304c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80030b6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80030ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80030bc:	2300      	movs	r3, #0
 80030be:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 80030c0:	2314      	movs	r3, #20
 80030c2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80030c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030cc:	4619      	mov	r1, r3
 80030ce:	4822      	ldr	r0, [pc, #136]	; (8003158 <MX_TIM3_Init+0xdc>)
 80030d0:	f001 fc1c 	bl	800490c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80030d4:	4820      	ldr	r0, [pc, #128]	; (8003158 <MX_TIM3_Init+0xdc>)
 80030d6:	f7ff fed1 	bl	8002e7c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80030da:	2100      	movs	r1, #0
 80030dc:	481e      	ldr	r0, [pc, #120]	; (8003158 <MX_TIM3_Init+0xdc>)
 80030de:	f7ff ff65 	bl	8002fac <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80030e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e6:	481c      	ldr	r0, [pc, #112]	; (8003158 <MX_TIM3_Init+0xdc>)
 80030e8:	f7ff ff1c 	bl	8002f24 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80030ec:	2360      	movs	r3, #96	; 0x60
 80030ee:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 80030f8:	230a      	movs	r3, #10
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	461a      	mov	r2, r3
 8003106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800310a:	4813      	ldr	r0, [pc, #76]	; (8003158 <MX_TIM3_Init+0xdc>)
 800310c:	f001 fc98 	bl	8004a40 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003114:	4810      	ldr	r0, [pc, #64]	; (8003158 <MX_TIM3_Init+0xdc>)
 8003116:	f7ff fec1 	bl	8002e9c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800311a:	2100      	movs	r1, #0
 800311c:	480e      	ldr	r0, [pc, #56]	; (8003158 <MX_TIM3_Init+0xdc>)
 800311e:	f7ff ff5a 	bl	8002fd6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003122:	480d      	ldr	r0, [pc, #52]	; (8003158 <MX_TIM3_Init+0xdc>)
 8003124:	f7ff ff6a 	bl	8002ffc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003128:	2002      	movs	r0, #2
 800312a:	f7ff ff77 	bl	800301c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800312e:	2302      	movs	r3, #2
 8003130:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003132:	2302      	movs	r3, #2
 8003134:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003142:	2302      	movs	r3, #2
 8003144:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4804      	ldr	r0, [pc, #16]	; (800315c <MX_TIM3_Init+0xe0>)
 800314c:	f001 f949 	bl	80043e2 <LL_GPIO_Init>

}
 8003150:	bf00      	nop
 8003152:	3750      	adds	r7, #80	; 0x50
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40000400 	.word	0x40000400
 800315c:	40020400 	.word	0x40020400

08003160 <__NVIC_GetPriorityGrouping>:
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4907      	ldr	r1, [pc, #28]	; (80031b4 <__NVIC_EnableIRQ+0x38>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db0a      	blt.n	80031e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <__NVIC_SetPriority+0x4c>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031e0:	e00a      	b.n	80031f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4908      	ldr	r1, [pc, #32]	; (8003208 <__NVIC_SetPriority+0x50>)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3b04      	subs	r3, #4
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	440b      	add	r3, r1
 80031f6:	761a      	strb	r2, [r3, #24]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <NVIC_EncodePriority>:
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf28      	it	cs
 800322a:	2304      	movcs	r3, #4
 800322c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3304      	adds	r3, #4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <NVIC_EncodePriority+0x30>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b03      	subs	r3, #3
 800323a:	e000      	b.n	800323e <NVIC_EncodePriority+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43d9      	mvns	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	4313      	orrs	r3, r2
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_USART_Enable>:
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60da      	str	r2, [r3, #12]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_USART_ConfigAsyncMode>:
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	615a      	str	r2, [r3, #20]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <LL_AHB1_GRP1_EnableClock>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032cc:	4907      	ldr	r1, [pc, #28]	; (80032ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4013      	ands	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032de:	68fb      	ldr	r3, [r7, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40023800 	.word	0x40023800

080032f0 <LL_APB1_GRP1_EnableClock>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <LL_APB1_GRP1_EnableClock+0x2c>)
 80032fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fc:	4907      	ldr	r1, [pc, #28]	; (800331c <LL_APB1_GRP1_EnableClock+0x2c>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4313      	orrs	r3, r2
 8003302:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4013      	ands	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40023800 	.word	0x40023800

08003320 <LL_APB2_GRP1_EnableClock>:
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <LL_APB2_GRP1_EnableClock+0x2c>)
 800332a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332c:	4907      	ldr	r1, [pc, #28]	; (800334c <LL_APB2_GRP1_EnableClock+0x2c>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4313      	orrs	r3, r2
 8003332:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40023800 	.word	0x40023800

08003350 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	; 0x38
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
 8003378:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800337a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800337e:	f7ff ffb7 	bl	80032f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003382:	2004      	movs	r0, #4
 8003384:	f7ff ff9c 	bl	80032c0 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8003388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800338c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800338e:	2302      	movs	r3, #2
 8003390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800339e:	2308      	movs	r3, #8
 80033a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4819      	ldr	r0, [pc, #100]	; (800340c <MX_UART4_Init+0xbc>)
 80033a8:	f001 f81b 	bl	80043e2 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80033ac:	f7ff fed8 	bl	8003160 <__NVIC_GetPriorityGrouping>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff28 	bl	800320c <NVIC_EncodePriority>
 80033bc:	4603      	mov	r3, r0
 80033be:	4619      	mov	r1, r3
 80033c0:	2034      	movs	r0, #52	; 0x34
 80033c2:	f7ff fef9 	bl	80031b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80033c6:	2034      	movs	r0, #52	; 0x34
 80033c8:	f7ff fed8 	bl	800317c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80033cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80033d0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033da:	2300      	movs	r3, #0
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033de:	230c      	movs	r3, #12
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80033e6:	2300      	movs	r3, #0
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80033ea:	f107 031c 	add.w	r3, r7, #28
 80033ee:	4619      	mov	r1, r3
 80033f0:	4807      	ldr	r0, [pc, #28]	; (8003410 <MX_UART4_Init+0xc0>)
 80033f2:	f001 ff71 	bl	80052d8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80033f6:	4806      	ldr	r0, [pc, #24]	; (8003410 <MX_UART4_Init+0xc0>)
 80033f8:	f7ff ff4b 	bl	8003292 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80033fc:	4804      	ldr	r0, [pc, #16]	; (8003410 <MX_UART4_Init+0xc0>)
 80033fe:	f7ff ff38 	bl	8003272 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003402:	bf00      	nop
 8003404:	3738      	adds	r7, #56	; 0x38
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020800 	.word	0x40020800
 8003410:	40004c00 	.word	0x40004c00

08003414 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08e      	sub	sp, #56	; 0x38
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800341a:	f107 031c 	add.w	r3, r7, #28
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
 800343c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800343e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003442:	f7ff ff55 	bl	80032f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003446:	2004      	movs	r0, #4
 8003448:	f7ff ff3a 	bl	80032c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800344c:	2008      	movs	r0, #8
 800344e:	f7ff ff37 	bl	80032c0 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8003452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003458:	2302      	movs	r3, #2
 800345a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003468:	2308      	movs	r3, #8
 800346a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4821      	ldr	r0, [pc, #132]	; (80034f8 <MX_UART5_Init+0xe4>)
 8003472:	f000 ffb6 	bl	80043e2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003476:	2304      	movs	r3, #4
 8003478:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800347a:	2302      	movs	r3, #2
 800347c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800347e:	2303      	movs	r3, #3
 8003480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800348a:	2308      	movs	r3, #8
 800348c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	4619      	mov	r1, r3
 8003492:	481a      	ldr	r0, [pc, #104]	; (80034fc <MX_UART5_Init+0xe8>)
 8003494:	f000 ffa5 	bl	80043e2 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003498:	f7ff fe62 	bl	8003160 <__NVIC_GetPriorityGrouping>
 800349c:	4603      	mov	r3, r0
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff feb2 	bl	800320c <NVIC_EncodePriority>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4619      	mov	r1, r3
 80034ac:	2035      	movs	r0, #53	; 0x35
 80034ae:	f7ff fe83 	bl	80031b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80034b2:	2035      	movs	r0, #53	; 0x35
 80034b4:	f7ff fe62 	bl	800317c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80034b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80034bc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 80034ca:	2304      	movs	r3, #4
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80034d6:	f107 031c 	add.w	r3, r7, #28
 80034da:	4619      	mov	r1, r3
 80034dc:	4808      	ldr	r0, [pc, #32]	; (8003500 <MX_UART5_Init+0xec>)
 80034de:	f001 fefb 	bl	80052d8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80034e2:	4807      	ldr	r0, [pc, #28]	; (8003500 <MX_UART5_Init+0xec>)
 80034e4:	f7ff fed5 	bl	8003292 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <MX_UART5_Init+0xec>)
 80034ea:	f7ff fec2 	bl	8003272 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80034ee:	bf00      	nop
 80034f0:	3738      	adds	r7, #56	; 0x38
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020c00 	.word	0x40020c00
 8003500:	40005000 	.word	0x40005000

08003504 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	611a      	str	r2, [r3, #16]
 800351a:	615a      	str	r2, [r3, #20]
 800351c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
 800352c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800352e:	2020      	movs	r0, #32
 8003530:	f7ff fef6 	bl	8003320 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003534:	2004      	movs	r0, #4
 8003536:	f7ff fec3 	bl	80032c0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800353a:	23c0      	movs	r3, #192	; 0xc0
 800353c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800353e:	2302      	movs	r3, #2
 8003540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003542:	2303      	movs	r3, #3
 8003544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800354e:	2308      	movs	r3, #8
 8003550:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4819      	ldr	r0, [pc, #100]	; (80035bc <MX_USART6_UART_Init+0xb8>)
 8003558:	f000 ff43 	bl	80043e2 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800355c:	f7ff fe00 	bl	8003160 <__NVIC_GetPriorityGrouping>
 8003560:	4603      	mov	r3, r0
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fe50 	bl	800320c <NVIC_EncodePriority>
 800356c:	4603      	mov	r3, r0
 800356e:	4619      	mov	r1, r3
 8003570:	2047      	movs	r0, #71	; 0x47
 8003572:	f7ff fe21 	bl	80031b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8003576:	2047      	movs	r0, #71	; 0x47
 8003578:	f7ff fe00 	bl	800317c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800357c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003580:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800358e:	230c      	movs	r3, #12
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003592:	2300      	movs	r3, #0
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800359a:	f107 031c 	add.w	r3, r7, #28
 800359e:	4619      	mov	r1, r3
 80035a0:	4807      	ldr	r0, [pc, #28]	; (80035c0 <MX_USART6_UART_Init+0xbc>)
 80035a2:	f001 fe99 	bl	80052d8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80035a6:	4806      	ldr	r0, [pc, #24]	; (80035c0 <MX_USART6_UART_Init+0xbc>)
 80035a8:	f7ff fe73 	bl	8003292 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80035ac:	4804      	ldr	r0, [pc, #16]	; (80035c0 <MX_USART6_UART_Init+0xbc>)
 80035ae:	f7ff fe60 	bl	8003272 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80035b2:	bf00      	nop
 80035b4:	3738      	adds	r7, #56	; 0x38
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40011400 	.word	0x40011400

080035c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035ca:	490e      	ldr	r1, [pc, #56]	; (8003604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035cc:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d0:	e002      	b.n	80035d8 <LoopCopyDataInit>

080035d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d6:	3304      	adds	r3, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035dc:	d3f9      	bcc.n	80035d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035e0:	4c0b      	ldr	r4, [pc, #44]	; (8003610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e4:	e001      	b.n	80035ea <LoopFillZerobss>

080035e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e8:	3204      	adds	r2, #4

080035ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ec:	d3fb      	bcc.n	80035e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ee:	f7ff fc33 	bl	8002e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035f2:	f001 fef7 	bl	80053e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035f6:	f7fe ffa5 	bl	8002544 <main>
  bx  lr    
 80035fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003604:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003608:	08008594 	.word	0x08008594
  ldr r2, =_sbss
 800360c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003610:	20000304 	.word	0x20000304

08003614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC_IRQHandler>
	...

08003618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_Init+0x40>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <HAL_Init+0x40>)
 8003622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_Init+0x40>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <HAL_Init+0x40>)
 800362e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_Init+0x40>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a07      	ldr	r2, [pc, #28]	; (8003658 <HAL_Init+0x40>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003640:	2003      	movs	r0, #3
 8003642:	f000 f931 	bl	80038a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003646:	200f      	movs	r0, #15
 8003648:	f000 f808 	bl	800365c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800364c:	f7ff f9d0 	bl	80029f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00

0800365c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_InitTick+0x54>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_InitTick+0x58>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003672:	fbb3 f3f1 	udiv	r3, r3, r1
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f93b 	bl	80038f6 <HAL_SYSTICK_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e00e      	b.n	80036a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d80a      	bhi.n	80036a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003690:	2200      	movs	r2, #0
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	f000 f911 	bl	80038be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800369c:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <HAL_InitTick+0x5c>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000008 	.word	0x20000008
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_IncTick+0x20>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_IncTick+0x24>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_IncTick+0x24>)
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000008 	.word	0x20000008
 80036e0:	200002f0 	.word	0x200002f0

080036e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return uwTick;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_GetTick+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	200002f0 	.word	0x200002f0

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff ffee 	bl	80036e4 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d005      	beq.n	8003722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_Delay+0x44>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003722:	bf00      	nop
 8003724:	f7ff ffde 	bl	80036e4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d8f7      	bhi.n	8003724 <HAL_Delay+0x28>
  {
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000008 	.word	0x20000008

08003744 <__NVIC_SetPriorityGrouping>:
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800376c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	60d3      	str	r3, [r2, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_GetPriorityGrouping>:
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	f003 0307 	and.w	r3, r3, #7
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_SetPriority>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003874:	d301      	bcc.n	800387a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003876:	2301      	movs	r3, #1
 8003878:	e00f      	b.n	800389a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <SysTick_Config+0x40>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003882:	210f      	movs	r1, #15
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	f7ff ff8e 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <SysTick_Config+0x40>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SysTick_Config+0x40>)
 8003894:	2207      	movs	r2, #7
 8003896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff47 	bl	8003744 <__NVIC_SetPriorityGrouping>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d0:	f7ff ff5c 	bl	800378c <__NVIC_GetPriorityGrouping>
 80038d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	f7ff ff8e 	bl	80037fc <NVIC_EncodePriority>
 80038e0:	4602      	mov	r2, r0
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff5d 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffb0 	bl	8003864 <SysTick_Config>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e267      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d075      	beq.n	8003a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392e:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b04      	cmp	r3, #4
 8003938:	d00c      	beq.n	8003954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	4b85      	ldr	r3, [pc, #532]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003942:	2b08      	cmp	r3, #8
 8003944:	d112      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	4b82      	ldr	r3, [pc, #520]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003952:	d10b      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	4b7e      	ldr	r3, [pc, #504]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05b      	beq.n	8003a18 <HAL_RCC_OscConfig+0x108>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d157      	bne.n	8003a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e242      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d106      	bne.n	8003984 <HAL_RCC_OscConfig+0x74>
 8003976:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a75      	ldr	r2, [pc, #468]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e01d      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x98>
 800398e:	4b70      	ldr	r3, [pc, #448]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6f      	ldr	r2, [pc, #444]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b6d      	ldr	r3, [pc, #436]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6c      	ldr	r2, [pc, #432]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 80039a8:	4b69      	ldr	r3, [pc, #420]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a68      	ldr	r2, [pc, #416]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b66      	ldr	r3, [pc, #408]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7ff fe8c 	bl	80036e4 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d0:	f7ff fe88 	bl	80036e4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e207      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b5b      	ldr	r3, [pc, #364]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0xc0>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7ff fe78 	bl	80036e4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f8:	f7ff fe74 	bl	80036e4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1f3      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	4b51      	ldr	r3, [pc, #324]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0xe8>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d063      	beq.n	8003aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a26:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b44      	ldr	r3, [pc, #272]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e1c7      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4937      	ldr	r1, [pc, #220]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	e03a      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7ff fe2d 	bl	80036e4 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7ff fe29 	bl	80036e4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1a8      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4925      	ldr	r1, [pc, #148]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7ff fe0c 	bl	80036e4 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7ff fe08 	bl	80036e4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e187      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d036      	beq.n	8003b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7ff fdec 	bl	80036e4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b10:	f7ff fde8 	bl	80036e4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e167      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x200>
 8003b2e:	e01b      	b.n	8003b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7ff fdd5 	bl	80036e4 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	e00e      	b.n	8003b5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7ff fdd1 	bl	80036e4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d907      	bls.n	8003b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e150      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	42470000 	.word	0x42470000
 8003b58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5c:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ea      	bne.n	8003b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8097 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b81      	ldr	r3, [pc, #516]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
 8003b96:	4b7a      	ldr	r3, [pc, #488]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b77      	ldr	r3, [pc, #476]	; (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a73      	ldr	r2, [pc, #460]	; (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7ff fd91 	bl	80036e4 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7ff fd8d 	bl	80036e4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e10c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2ea>
 8003bec:	4b64      	ldr	r3, [pc, #400]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a63      	ldr	r2, [pc, #396]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x30c>
 8003c02:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a5e      	ldr	r2, [pc, #376]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003c1c:	4b58      	ldr	r3, [pc, #352]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a57      	ldr	r2, [pc, #348]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
 8003c28:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a54      	ldr	r2, [pc, #336]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7ff fd52 	bl	80036e4 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c44:	f7ff fd4e 	bl	80036e4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0cb      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ee      	beq.n	8003c44 <HAL_RCC_OscConfig+0x334>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7ff fd3c 	bl	80036e4 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7ff fd38 	bl	80036e4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0b5      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ee      	bne.n	8003c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	4a38      	ldr	r2, [pc, #224]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a1 	beq.w	8003df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cae:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d05c      	beq.n	8003d74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d141      	bne.n	8003d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7ff fd0c 	bl	80036e4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7ff fd08 	bl	80036e4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e087      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	491b      	ldr	r1, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7ff fce1 	bl	80036e4 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7ff fcdd 	bl	80036e4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e05c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003d44:	e054      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7ff fcca 	bl	80036e4 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7ff fcc6 	bl	80036e4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e045      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x444>
 8003d72:	e03d      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e038      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_RCC_OscConfig+0x4ec>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d028      	beq.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d121      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d111      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0cc      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d90c      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b8      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e54:	4b59      	ldr	r3, [pc, #356]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a58      	ldr	r2, [pc, #352]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a52      	ldr	r2, [pc, #328]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	494d      	ldr	r1, [pc, #308]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d044      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d119      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e067      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b37      	ldr	r3, [pc, #220]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4934      	ldr	r1, [pc, #208]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7ff fbf8 	bl	80036e4 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7ff fbf4 	bl	80036e4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e04f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d20c      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e032      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4916      	ldr	r1, [pc, #88]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	490e      	ldr	r1, [pc, #56]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f86:	f000 f821 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	490a      	ldr	r1, [pc, #40]	; (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	5ccb      	ldrb	r3, [r1, r3]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fb58 	bl	800365c <HAL_InitTick>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023c00 	.word	0x40023c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	08008180 	.word	0x08008180
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	20000004 	.word	0x20000004

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b094      	sub	sp, #80	; 0x50
 8003fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd8:	2300      	movs	r3, #0
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fdc:	2300      	movs	r3, #0
 8003fde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe4:	4b79      	ldr	r3, [pc, #484]	; (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d00d      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x40>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	f200 80e1 	bhi.w	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffe:	e0db      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b73      	ldr	r3, [pc, #460]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004004:	e0db      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004006:	4b73      	ldr	r3, [pc, #460]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800400a:	e0d8      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800400c:	4b6f      	ldr	r3, [pc, #444]	; (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004014:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004016:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38
 800402c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
 800403a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4621      	mov	r1, r4
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	6139      	str	r1, [r7, #16]
 800405c:	4629      	mov	r1, r5
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004070:	4659      	mov	r1, fp
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4651      	mov	r1, sl
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4651      	mov	r1, sl
 8004080:	ebb2 0801 	subs.w	r8, r2, r1
 8004084:	4659      	mov	r1, fp
 8004086:	eb63 0901 	sbc.w	r9, r3, r1
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800409a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409e:	4690      	mov	r8, r2
 80040a0:	4699      	mov	r9, r3
 80040a2:	4623      	mov	r3, r4
 80040a4:	eb18 0303 	adds.w	r3, r8, r3
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	462b      	mov	r3, r5
 80040ac:	eb49 0303 	adc.w	r3, r9, r3
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040be:	4629      	mov	r1, r5
 80040c0:	024b      	lsls	r3, r1, #9
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c8:	4621      	mov	r1, r4
 80040ca:	024a      	lsls	r2, r1, #9
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	2200      	movs	r2, #0
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040dc:	f7fc fd64 	bl	8000ba8 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e8:	e058      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	4b38      	ldr	r3, [pc, #224]	; (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	2200      	movs	r2, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	4611      	mov	r1, r2
 80040f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	0159      	lsls	r1, r3, #5
 8004112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004116:	0150      	lsls	r0, r2, #5
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4641      	mov	r1, r8
 800411e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004122:	4649      	mov	r1, r9
 8004124:	eb63 0b01 	sbc.w	fp, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800413c:	ebb2 040a 	subs.w	r4, r2, sl
 8004140:	eb63 050b 	sbc.w	r5, r3, fp
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	00eb      	lsls	r3, r5, #3
 800414e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004152:	00e2      	lsls	r2, r4, #3
 8004154:	4614      	mov	r4, r2
 8004156:	461d      	mov	r5, r3
 8004158:	4643      	mov	r3, r8
 800415a:	18e3      	adds	r3, r4, r3
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	464b      	mov	r3, r9
 8004160:	eb45 0303 	adc.w	r3, r5, r3
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004172:	4629      	mov	r1, r5
 8004174:	028b      	lsls	r3, r1, #10
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800417c:	4621      	mov	r1, r4
 800417e:	028a      	lsls	r2, r1, #10
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004186:	2200      	movs	r2, #0
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	61fa      	str	r2, [r7, #28]
 800418c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004190:	f7fc fd0a 	bl	8000ba8 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3750      	adds	r7, #80	; 0x50
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	007a1200 	.word	0x007a1200

080041d8 <LL_GPIO_SetPinMode>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	613b      	str	r3, [r7, #16]
  return result;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	2103      	movs	r1, #3
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	401a      	ands	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	61bb      	str	r3, [r7, #24]
  return result;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	3724      	adds	r7, #36	; 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_GPIO_SetPinOutputType>:
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	43db      	mvns	r3, r3
 800424a:	401a      	ands	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	431a      	orrs	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	605a      	str	r2, [r3, #4]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <LL_GPIO_SetPinSpeed>:
{
 8004266:	b480      	push	{r7}
 8004268:	b089      	sub	sp, #36	; 0x24
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	613b      	str	r3, [r7, #16]
  return result;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	2103      	movs	r1, #3
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	401a      	ands	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	61bb      	str	r3, [r7, #24]
  return result;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	fab3 f383 	clz	r3, r3
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	431a      	orrs	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	3724      	adds	r7, #36	; 0x24
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_GPIO_SetPinPull>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	613b      	str	r3, [r7, #16]
  return result;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2103      	movs	r1, #3
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	60da      	str	r2, [r3, #12]
}
 8004316:	bf00      	nop
 8004318:	3724      	adds	r7, #36	; 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_GPIO_SetAFPin_0_7>:
{
 8004322:	b480      	push	{r7}
 8004324:	b089      	sub	sp, #36	; 0x24
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	613b      	str	r3, [r7, #16]
  return result;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	210f      	movs	r1, #15
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	401a      	ands	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	61bb      	str	r3, [r7, #24]
  return result;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	621a      	str	r2, [r3, #32]
}
 8004374:	bf00      	nop
 8004376:	3724      	adds	r7, #36	; 0x24
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_GPIO_SetAFPin_8_15>:
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	613b      	str	r3, [r7, #16]
  return result;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	210f      	movs	r1, #15
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	401a      	ands	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	61bb      	str	r3, [r7, #24]
  return result;
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	fa01 f303 	lsl.w	r3, r1, r3
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80043d6:	bf00      	nop
 80043d8:	3724      	adds	r7, #36	; 0x24
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b088      	sub	sp, #32
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	613b      	str	r3, [r7, #16]
  return result;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800440c:	e050      	b.n	80044b0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	2101      	movs	r1, #1
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d042      	beq.n	80044aa <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d003      	beq.n	8004434 <LL_GPIO_Init+0x52>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d10d      	bne.n	8004450 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	461a      	mov	r2, r3
 800443a:	69b9      	ldr	r1, [r7, #24]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff ff12 	bl	8004266 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	69b9      	ldr	r1, [r7, #24]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fef3 	bl	8004236 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	461a      	mov	r2, r3
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff ff33 	bl	80042c4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d11a      	bne.n	800449c <LL_GPIO_Init+0xba>
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	60bb      	str	r3, [r7, #8]
  return result;
 8004472:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b07      	cmp	r3, #7
 800447c:	d807      	bhi.n	800448e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	461a      	mov	r2, r3
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ff4b 	bl	8004322 <LL_GPIO_SetAFPin_0_7>
 800448c:	e006      	b.n	800449c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	461a      	mov	r2, r3
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ff72 	bl	8004380 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	461a      	mov	r2, r3
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fe97 	bl	80041d8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1a7      	bne.n	800440e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <LL_RCC_GetSysClkSource+0x18>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <LL_RCC_GetAHBPrescaler+0x18>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800

08004500 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800

0800451c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800

08004538 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <LL_RCC_PLL_GetMainSource+0x18>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800

08004554 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <LL_RCC_PLL_GetN+0x18>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40023800 	.word	0x40023800

08004570 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <LL_RCC_PLL_GetP+0x18>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800

0800458c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <LL_RCC_PLL_GetDivider+0x18>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800

080045a8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80045b0:	f000 f820 	bl	80045f4 <RCC_GetSystemClockFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f840 	bl	8004644 <RCC_GetHCLKClockFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f84e 	bl	8004670 <RCC_GetPCLK1ClockFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f85a 	bl	8004698 <RCC_GetPCLK2ClockFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60da      	str	r2, [r3, #12]
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80045fe:	f7ff ff63 	bl	80044c8 <LL_RCC_GetSysClkSource>
 8004602:	4603      	mov	r3, r0
 8004604:	2b08      	cmp	r3, #8
 8004606:	d00c      	beq.n	8004622 <RCC_GetSystemClockFreq+0x2e>
 8004608:	2b08      	cmp	r3, #8
 800460a:	d80f      	bhi.n	800462c <RCC_GetSystemClockFreq+0x38>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <RCC_GetSystemClockFreq+0x22>
 8004610:	2b04      	cmp	r3, #4
 8004612:	d003      	beq.n	800461c <RCC_GetSystemClockFreq+0x28>
 8004614:	e00a      	b.n	800462c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <RCC_GetSystemClockFreq+0x48>)
 8004618:	607b      	str	r3, [r7, #4]
      break;
 800461a:	e00a      	b.n	8004632 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <RCC_GetSystemClockFreq+0x4c>)
 800461e:	607b      	str	r3, [r7, #4]
      break;
 8004620:	e007      	b.n	8004632 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004622:	2008      	movs	r0, #8
 8004624:	f000 f84c 	bl	80046c0 <RCC_PLL_GetFreqDomain_SYS>
 8004628:	6078      	str	r0, [r7, #4]
      break;
 800462a:	e002      	b.n	8004632 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <RCC_GetSystemClockFreq+0x48>)
 800462e:	607b      	str	r3, [r7, #4]
      break;
 8004630:	bf00      	nop
  }

  return frequency;
 8004632:	687b      	ldr	r3, [r7, #4]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	00f42400 	.word	0x00f42400
 8004640:	007a1200 	.word	0x007a1200

08004644 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800464c:	f7ff ff4a 	bl	80044e4 <LL_RCC_GetAHBPrescaler>
 8004650:	4603      	mov	r3, r0
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <RCC_GetHCLKClockFreq+0x28>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	461a      	mov	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	40d3      	lsrs	r3, r2
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	08008180 	.word	0x08008180

08004670 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004678:	f7ff ff42 	bl	8004500 <LL_RCC_GetAPB1Prescaler>
 800467c:	4603      	mov	r3, r0
 800467e:	0a9b      	lsrs	r3, r3, #10
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <RCC_GetPCLK1ClockFreq+0x24>)
 8004682:	5cd3      	ldrb	r3, [r2, r3]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	40d3      	lsrs	r3, r2
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	08008190 	.word	0x08008190

08004698 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80046a0:	f7ff ff3c 	bl	800451c <LL_RCC_GetAPB2Prescaler>
 80046a4:	4603      	mov	r3, r0
 80046a6:	0b5b      	lsrs	r3, r3, #13
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <RCC_GetPCLK2ClockFreq+0x24>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	40d3      	lsrs	r3, r2
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	08008190 	.word	0x08008190

080046c0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80046d4:	f7ff ff30 	bl	8004538 <LL_RCC_PLL_GetMainSource>
 80046d8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d003      	beq.n	80046f0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80046e8:	e005      	b.n	80046f6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80046ec:	617b      	str	r3, [r7, #20]
      break;
 80046ee:	e005      	b.n	80046fc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80046f2:	617b      	str	r3, [r7, #20]
      break;
 80046f4:	e002      	b.n	80046fc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80046f8:	617b      	str	r3, [r7, #20]
      break;
 80046fa:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d113      	bne.n	800472a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004702:	f7ff ff43 	bl	800458c <LL_RCC_PLL_GetDivider>
 8004706:	4602      	mov	r2, r0
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fbb3 f4f2 	udiv	r4, r3, r2
 800470e:	f7ff ff21 	bl	8004554 <LL_RCC_PLL_GetN>
 8004712:	4603      	mov	r3, r0
 8004714:	fb03 f404 	mul.w	r4, r3, r4
 8004718:	f7ff ff2a 	bl	8004570 <LL_RCC_PLL_GetP>
 800471c:	4603      	mov	r3, r0
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	3301      	adds	r3, #1
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fbb4 f3f3 	udiv	r3, r4, r3
 8004728:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800472a:	693b      	ldr	r3, [r7, #16]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd90      	pop	{r4, r7, pc}
 8004734:	00f42400 	.word	0x00f42400
 8004738:	007a1200 	.word	0x007a1200

0800473c <LL_SPI_IsEnabled>:
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d101      	bne.n	8004754 <LL_SPI_IsEnabled+0x18>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <LL_SPI_IsEnabled+0x1a>
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_SPI_SetCRCPolynomial>:
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	611a      	str	r2, [r3, #16]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ffd3 	bl	800473c <LL_SPI_IsEnabled>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d139      	bne.n	8004810 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	6811      	ldr	r1, [r2, #0]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	6852      	ldr	r2, [r2, #4]
 80047b0:	4311      	orrs	r1, r2
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6892      	ldr	r2, [r2, #8]
 80047b6:	4311      	orrs	r1, r2
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	68d2      	ldr	r2, [r2, #12]
 80047bc:	4311      	orrs	r1, r2
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	6912      	ldr	r2, [r2, #16]
 80047c2:	4311      	orrs	r1, r2
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	6952      	ldr	r2, [r2, #20]
 80047c8:	4311      	orrs	r1, r2
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	6992      	ldr	r2, [r2, #24]
 80047ce:	4311      	orrs	r1, r2
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	69d2      	ldr	r2, [r2, #28]
 80047d4:	4311      	orrs	r1, r2
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	6a12      	ldr	r2, [r2, #32]
 80047da:	430a      	orrs	r2, r1
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f023 0204 	bic.w	r2, r3, #4
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fe:	d105      	bne.n	800480c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff ffab 	bl	8004762 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800480c:	2300      	movs	r3, #0
 800480e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	61da      	str	r2, [r3, #28]
  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <LL_TIM_SetPrescaler>:
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_TIM_SetAutoReload>:
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <LL_TIM_SetRepetitionCounter>:
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_TIM_OC_SetCompareCH1>:
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	635a      	str	r2, [r3, #52]	; 0x34
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <LL_TIM_OC_SetCompareCH2>:
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <LL_TIM_OC_SetCompareCH3>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <LL_TIM_OC_SetCompareCH4>:
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3d      	ldr	r2, [pc, #244]	; (8004a14 <LL_TIM_Init+0x108>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <LL_TIM_Init+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492a:	d00f      	beq.n	800494c <LL_TIM_Init+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3a      	ldr	r2, [pc, #232]	; (8004a18 <LL_TIM_Init+0x10c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <LL_TIM_Init+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a39      	ldr	r2, [pc, #228]	; (8004a1c <LL_TIM_Init+0x110>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <LL_TIM_Init+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <LL_TIM_Init+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <LL_TIM_Init+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a37      	ldr	r2, [pc, #220]	; (8004a24 <LL_TIM_Init+0x118>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d106      	bne.n	800495a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <LL_TIM_Init+0x108>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02b      	beq.n	80049ba <LL_TIM_Init+0xae>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d027      	beq.n	80049ba <LL_TIM_Init+0xae>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <LL_TIM_Init+0x10c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d023      	beq.n	80049ba <LL_TIM_Init+0xae>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <LL_TIM_Init+0x110>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01f      	beq.n	80049ba <LL_TIM_Init+0xae>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a28      	ldr	r2, [pc, #160]	; (8004a20 <LL_TIM_Init+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01b      	beq.n	80049ba <LL_TIM_Init+0xae>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a27      	ldr	r2, [pc, #156]	; (8004a24 <LL_TIM_Init+0x118>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d017      	beq.n	80049ba <LL_TIM_Init+0xae>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <LL_TIM_Init+0x11c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <LL_TIM_Init+0xae>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <LL_TIM_Init+0x120>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00f      	beq.n	80049ba <LL_TIM_Init+0xae>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <LL_TIM_Init+0x124>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <LL_TIM_Init+0xae>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <LL_TIM_Init+0x128>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <LL_TIM_Init+0xae>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <LL_TIM_Init+0x12c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <LL_TIM_Init+0xae>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <LL_TIM_Init+0x130>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d106      	bne.n	80049c8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff34 	bl	8004842 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff20 	bl	8004826 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <LL_TIM_Init+0x108>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <LL_TIM_Init+0xea>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <LL_TIM_Init+0x118>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d105      	bne.n	8004a02 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ff2e 	bl	800485e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ff71 	bl	80048ea <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	40014800 	.word	0x40014800
 8004a34:	40001800 	.word	0x40001800
 8004a38:	40001c00 	.word	0x40001c00
 8004a3c:	40002000 	.word	0x40002000

08004a40 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d027      	beq.n	8004aa8 <LL_TIM_OC_Init+0x68>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	d82a      	bhi.n	8004ab6 <LL_TIM_OC_Init+0x76>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a66:	d018      	beq.n	8004a9a <LL_TIM_OC_Init+0x5a>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6e:	d822      	bhi.n	8004ab6 <LL_TIM_OC_Init+0x76>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d003      	beq.n	8004a7e <LL_TIM_OC_Init+0x3e>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d007      	beq.n	8004a8c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004a7c:	e01b      	b.n	8004ab6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f81f 	bl	8004ac4 <OC1Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8a:	e015      	b.n	8004ab8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f884 	bl	8004b9c <OC2Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	75fb      	strb	r3, [r7, #23]
      break;
 8004a98:	e00e      	b.n	8004ab8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f8ed 	bl	8004c7c <OC3Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa6:	e007      	b.n	8004ab8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f956 	bl	8004d5c <OC4Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab4:	e000      	b.n	8004ab8 <LL_TIM_OC_Init+0x78>
      break;
 8004ab6:	bf00      	nop
  }

  return result;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 0202 	bic.w	r2, r3, #2
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <OC1Config+0xd0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <OC1Config+0x6a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <OC1Config+0xd4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d11e      	bne.n	8004b6c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 0208 	bic.w	r2, r3, #8
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0204 	bic.w	r2, r3, #4
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fe7b 	bl	800487a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40010400 	.word	0x40010400

08004b9c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f023 0210 	bic.w	r2, r3, #16
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0220 	bic.w	r2, r3, #32
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0210 	bic.w	r2, r3, #16
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <OC2Config+0xd8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <OC2Config+0x70>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <OC2Config+0xdc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d11f      	bne.n	8004c4c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	019b      	lsls	r3, r3, #6
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	019b      	lsls	r3, r3, #6
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fe19 	bl	8004896 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40010400 	.word	0x40010400

08004c7c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <OC3Config+0xd8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <OC3Config+0x6e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <OC3Config+0xdc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d11f      	bne.n	8004d2a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	015b      	lsls	r3, r3, #5
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fdb8 	bl	80048b2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010400 	.word	0x40010400

08004d5c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	031b      	lsls	r3, r3, #12
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	031b      	lsls	r3, r3, #12
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <OC4Config+0xa8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <OC4Config+0x70>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <OC4Config+0xac>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d107      	bne.n	8004ddc <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	019b      	lsls	r3, r3, #6
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fd6d 	bl	80048ce <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400

08004e0c <LL_USART_IsEnabled>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_USART_SetStopBitsLength>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	611a      	str	r2, [r3, #16]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_USART_SetHWFlowCtrl>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	615a      	str	r2, [r3, #20]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_USART_SetBaudRate>:
{
 8004e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e84:	b0c0      	sub	sp, #256	; 0x100
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e8c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004e90:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004e94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	f040 810c 	bne.w	80050bc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004ea4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	462b      	mov	r3, r5
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	6639      	str	r1, [r7, #96]	; 0x60
 8004ebe:	415b      	adcs	r3, r3
 8004ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ec2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	eb12 0801 	adds.w	r8, r2, r1
 8004ecc:	4629      	mov	r1, r5
 8004ece:	eb43 0901 	adc.w	r9, r3, r1
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee6:	4690      	mov	r8, r2
 8004ee8:	4699      	mov	r9, r3
 8004eea:	4623      	mov	r3, r4
 8004eec:	eb18 0303 	adds.w	r3, r8, r3
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	eb49 0303 	adc.w	r3, r9, r3
 8004efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004efe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f02:	2200      	movs	r2, #0
 8004f04:	469a      	mov	sl, r3
 8004f06:	4693      	mov	fp, r2
 8004f08:	eb1a 030a 	adds.w	r3, sl, sl
 8004f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f0e:	eb4b 030b 	adc.w	r3, fp, fp
 8004f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f1c:	f7fb fe44 	bl	8000ba8 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b64      	ldr	r3, [pc, #400]	; (80050b8 <LL_USART_SetBaudRate+0x238>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	b29c      	uxth	r4, r3
 8004f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f3c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	1891      	adds	r1, r2, r2
 8004f4a:	6539      	str	r1, [r7, #80]	; 0x50
 8004f4c:	415b      	adcs	r3, r3
 8004f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f54:	4641      	mov	r1, r8
 8004f56:	1851      	adds	r1, r2, r1
 8004f58:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	414b      	adcs	r3, r1
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	00cb      	lsls	r3, r1, #3
 8004f70:	4651      	mov	r1, sl
 8004f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f76:	4651      	mov	r1, sl
 8004f78:	00ca      	lsls	r2, r1, #3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4642      	mov	r2, r8
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f88:	464b      	mov	r3, r9
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f9e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004fa2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	18db      	adds	r3, r3, r3
 8004faa:	643b      	str	r3, [r7, #64]	; 0x40
 8004fac:	4613      	mov	r3, r2
 8004fae:	eb42 0303 	adc.w	r3, r2, r3
 8004fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fb8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004fbc:	f7fb fdf4 	bl	8000ba8 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <LL_USART_SetBaudRate+0x238>)
 8004fc8:	fba3 2301 	umull	r2, r3, r3, r1
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	2264      	movs	r2, #100	; 0x64
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
 8004fd4:	1acb      	subs	r3, r1, r3
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <LL_USART_SetBaudRate+0x238>)
 8004fde:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4423      	add	r3, r4
 8004ff2:	b29c      	uxth	r4, r3
 8004ff4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ffe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005002:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005006:	4642      	mov	r2, r8
 8005008:	464b      	mov	r3, r9
 800500a:	1891      	adds	r1, r2, r2
 800500c:	63b9      	str	r1, [r7, #56]	; 0x38
 800500e:	415b      	adcs	r3, r3
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005012:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005016:	4641      	mov	r1, r8
 8005018:	1851      	adds	r1, r2, r1
 800501a:	6339      	str	r1, [r7, #48]	; 0x30
 800501c:	4649      	mov	r1, r9
 800501e:	414b      	adcs	r3, r1
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800502e:	4659      	mov	r1, fp
 8005030:	00cb      	lsls	r3, r1, #3
 8005032:	4651      	mov	r1, sl
 8005034:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005038:	4651      	mov	r1, sl
 800503a:	00ca      	lsls	r2, r1, #3
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	4603      	mov	r3, r0
 8005042:	4642      	mov	r2, r8
 8005044:	189b      	adds	r3, r3, r2
 8005046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800504a:	464b      	mov	r3, r9
 800504c:	460a      	mov	r2, r1
 800504e:	eb42 0303 	adc.w	r3, r2, r3
 8005052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005056:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005060:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005064:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005068:	460b      	mov	r3, r1
 800506a:	18db      	adds	r3, r3, r3
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
 800506e:	4613      	mov	r3, r2
 8005070:	eb42 0303 	adc.w	r3, r2, r3
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800507a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800507e:	f7fb fd93 	bl	8000ba8 <__aeabi_uldivmod>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <LL_USART_SetBaudRate+0x238>)
 8005088:	fba3 1302 	umull	r1, r3, r3, r2
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	2164      	movs	r1, #100	; 0x64
 8005090:	fb01 f303 	mul.w	r3, r1, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	3332      	adds	r3, #50	; 0x32
 800509a:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <LL_USART_SetBaudRate+0x238>)
 800509c:	fba2 2303 	umull	r2, r3, r2, r3
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4423      	add	r3, r4
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b4:	609a      	str	r2, [r3, #8]
}
 80050b6:	e107      	b.n	80052c8 <LL_USART_SetBaudRate+0x448>
 80050b8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80050bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050ca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	1891      	adds	r1, r2, r2
 80050d4:	6239      	str	r1, [r7, #32]
 80050d6:	415b      	adcs	r3, r3
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
 80050da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050de:	4641      	mov	r1, r8
 80050e0:	1854      	adds	r4, r2, r1
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb43 0501 	adc.w	r5, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	00eb      	lsls	r3, r5, #3
 80050f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f6:	00e2      	lsls	r2, r4, #3
 80050f8:	4614      	mov	r4, r2
 80050fa:	461d      	mov	r5, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	18e3      	adds	r3, r4, r3
 8005100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005104:	464b      	mov	r3, r9
 8005106:	eb45 0303 	adc.w	r3, r5, r3
 800510a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800510e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005112:	2200      	movs	r2, #0
 8005114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005118:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005128:	4629      	mov	r1, r5
 800512a:	008b      	lsls	r3, r1, #2
 800512c:	4621      	mov	r1, r4
 800512e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005132:	4621      	mov	r1, r4
 8005134:	008a      	lsls	r2, r1, #2
 8005136:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800513a:	f7fb fd35 	bl	8000ba8 <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4b64      	ldr	r3, [pc, #400]	; (80052d4 <LL_USART_SetBaudRate+0x454>)
 8005144:	fba3 2302 	umull	r2, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	b29b      	uxth	r3, r3
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	b29c      	uxth	r4, r3
 8005150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005154:	2200      	movs	r2, #0
 8005156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800515a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800515e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	1891      	adds	r1, r2, r2
 8005168:	61b9      	str	r1, [r7, #24]
 800516a:	415b      	adcs	r3, r3
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005172:	4641      	mov	r1, r8
 8005174:	1851      	adds	r1, r2, r1
 8005176:	6139      	str	r1, [r7, #16]
 8005178:	4649      	mov	r1, r9
 800517a:	414b      	adcs	r3, r1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800518a:	4659      	mov	r1, fp
 800518c:	00cb      	lsls	r3, r1, #3
 800518e:	4651      	mov	r1, sl
 8005190:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005194:	4651      	mov	r1, sl
 8005196:	00ca      	lsls	r2, r1, #3
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	4603      	mov	r3, r0
 800519e:	4642      	mov	r2, r8
 80051a0:	189b      	adds	r3, r3, r2
 80051a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051a6:	464b      	mov	r3, r9
 80051a8:	460a      	mov	r2, r1
 80051aa:	eb42 0303 	adc.w	r3, r2, r3
 80051ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80051cc:	4649      	mov	r1, r9
 80051ce:	008b      	lsls	r3, r1, #2
 80051d0:	4641      	mov	r1, r8
 80051d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d6:	4641      	mov	r1, r8
 80051d8:	008a      	lsls	r2, r1, #2
 80051da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051de:	f7fb fce3 	bl	8000ba8 <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <LL_USART_SetBaudRate+0x454>)
 80051e8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	2164      	movs	r1, #100	; 0x64
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	3332      	adds	r3, #50	; 0x32
 80051fa:	4a36      	ldr	r2, [pc, #216]	; (80052d4 <LL_USART_SetBaudRate+0x454>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	b29b      	uxth	r3, r3
 8005204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005208:	b29b      	uxth	r3, r3
 800520a:	4423      	add	r3, r4
 800520c:	b29c      	uxth	r4, r3
 800520e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005212:	2200      	movs	r2, #0
 8005214:	67bb      	str	r3, [r7, #120]	; 0x78
 8005216:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	1891      	adds	r1, r2, r2
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	415b      	adcs	r3, r3
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800522c:	4641      	mov	r1, r8
 800522e:	1851      	adds	r1, r2, r1
 8005230:	6039      	str	r1, [r7, #0]
 8005232:	4649      	mov	r1, r9
 8005234:	414b      	adcs	r3, r1
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005244:	4659      	mov	r1, fp
 8005246:	00cb      	lsls	r3, r1, #3
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524e:	4651      	mov	r1, sl
 8005250:	00ca      	lsls	r2, r1, #3
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	4603      	mov	r3, r0
 8005258:	4642      	mov	r2, r8
 800525a:	189b      	adds	r3, r3, r2
 800525c:	673b      	str	r3, [r7, #112]	; 0x70
 800525e:	464b      	mov	r3, r9
 8005260:	460a      	mov	r2, r1
 8005262:	eb42 0303 	adc.w	r3, r2, r3
 8005266:	677b      	str	r3, [r7, #116]	; 0x74
 8005268:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800526c:	2200      	movs	r2, #0
 800526e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005270:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800527e:	4649      	mov	r1, r9
 8005280:	008b      	lsls	r3, r1, #2
 8005282:	4641      	mov	r1, r8
 8005284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005288:	4641      	mov	r1, r8
 800528a:	008a      	lsls	r2, r1, #2
 800528c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005290:	f7fb fc8a 	bl	8000ba8 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <LL_USART_SetBaudRate+0x454>)
 800529a:	fba3 1302 	umull	r1, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2164      	movs	r1, #100	; 0x64
 80052a2:	fb01 f303 	mul.w	r3, r1, r3
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	3332      	adds	r3, #50	; 0x32
 80052ac:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <LL_USART_SetBaudRate+0x454>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4423      	add	r3, r4
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d4:	51eb851f 	.word	0x51eb851f

080052d8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fd8e 	bl	8004e0c <LL_USART_IsEnabled>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d15e      	bne.n	80053b4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052fe:	f023 030c 	bic.w	r3, r3, #12
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	6851      	ldr	r1, [r2, #4]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	68d2      	ldr	r2, [r2, #12]
 800530a:	4311      	orrs	r1, r2
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	6912      	ldr	r2, [r2, #16]
 8005310:	4311      	orrs	r1, r2
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	6992      	ldr	r2, [r2, #24]
 8005316:	430a      	orrs	r2, r1
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fd85 	bl	8004e34 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fd92 	bl	8004e5a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f934 	bl	80045a8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <LL_USART_Init+0xe8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d102      	bne.n	800534e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	e021      	b.n	8005392 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1c      	ldr	r2, [pc, #112]	; (80053c4 <LL_USART_Init+0xec>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d102      	bne.n	800535c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	e01a      	b.n	8005392 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <LL_USART_Init+0xf0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d102      	bne.n	800536a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e013      	b.n	8005392 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a17      	ldr	r2, [pc, #92]	; (80053cc <LL_USART_Init+0xf4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d102      	bne.n	8005378 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e00c      	b.n	8005392 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <LL_USART_Init+0xf8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d102      	bne.n	8005386 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e005      	b.n	8005392 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <LL_USART_Init+0xfc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00d      	beq.n	80053b4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80053a0:	2300      	movs	r3, #0
 80053a2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fd66 	bl	8004e80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80053b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40011000 	.word	0x40011000
 80053c4:	40004400 	.word	0x40004400
 80053c8:	40004800 	.word	0x40004800
 80053cc:	40011400 	.word	0x40011400
 80053d0:	40004c00 	.word	0x40004c00
 80053d4:	40005000 	.word	0x40005000

080053d8 <__errno>:
 80053d8:	4b01      	ldr	r3, [pc, #4]	; (80053e0 <__errno+0x8>)
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	2000000c 	.word	0x2000000c

080053e4 <__libc_init_array>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4d0d      	ldr	r5, [pc, #52]	; (800541c <__libc_init_array+0x38>)
 80053e8:	4c0d      	ldr	r4, [pc, #52]	; (8005420 <__libc_init_array+0x3c>)
 80053ea:	1b64      	subs	r4, r4, r5
 80053ec:	10a4      	asrs	r4, r4, #2
 80053ee:	2600      	movs	r6, #0
 80053f0:	42a6      	cmp	r6, r4
 80053f2:	d109      	bne.n	8005408 <__libc_init_array+0x24>
 80053f4:	4d0b      	ldr	r5, [pc, #44]	; (8005424 <__libc_init_array+0x40>)
 80053f6:	4c0c      	ldr	r4, [pc, #48]	; (8005428 <__libc_init_array+0x44>)
 80053f8:	f002 fdc4 	bl	8007f84 <_init>
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	2600      	movs	r6, #0
 8005402:	42a6      	cmp	r6, r4
 8005404:	d105      	bne.n	8005412 <__libc_init_array+0x2e>
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	f855 3b04 	ldr.w	r3, [r5], #4
 800540c:	4798      	blx	r3
 800540e:	3601      	adds	r6, #1
 8005410:	e7ee      	b.n	80053f0 <__libc_init_array+0xc>
 8005412:	f855 3b04 	ldr.w	r3, [r5], #4
 8005416:	4798      	blx	r3
 8005418:	3601      	adds	r6, #1
 800541a:	e7f2      	b.n	8005402 <__libc_init_array+0x1e>
 800541c:	0800858c 	.word	0x0800858c
 8005420:	0800858c 	.word	0x0800858c
 8005424:	0800858c 	.word	0x0800858c
 8005428:	08008590 	.word	0x08008590

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <__cvt>:
 800543c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	ec55 4b10 	vmov	r4, r5, d0
 8005444:	2d00      	cmp	r5, #0
 8005446:	460e      	mov	r6, r1
 8005448:	4619      	mov	r1, r3
 800544a:	462b      	mov	r3, r5
 800544c:	bfbb      	ittet	lt
 800544e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005452:	461d      	movlt	r5, r3
 8005454:	2300      	movge	r3, #0
 8005456:	232d      	movlt	r3, #45	; 0x2d
 8005458:	700b      	strb	r3, [r1, #0]
 800545a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800545c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005460:	4691      	mov	r9, r2
 8005462:	f023 0820 	bic.w	r8, r3, #32
 8005466:	bfbc      	itt	lt
 8005468:	4622      	movlt	r2, r4
 800546a:	4614      	movlt	r4, r2
 800546c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005470:	d005      	beq.n	800547e <__cvt+0x42>
 8005472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005476:	d100      	bne.n	800547a <__cvt+0x3e>
 8005478:	3601      	adds	r6, #1
 800547a:	2102      	movs	r1, #2
 800547c:	e000      	b.n	8005480 <__cvt+0x44>
 800547e:	2103      	movs	r1, #3
 8005480:	ab03      	add	r3, sp, #12
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	ab02      	add	r3, sp, #8
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	ec45 4b10 	vmov	d0, r4, r5
 800548c:	4653      	mov	r3, sl
 800548e:	4632      	mov	r2, r6
 8005490:	f000 fe1a 	bl	80060c8 <_dtoa_r>
 8005494:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005498:	4607      	mov	r7, r0
 800549a:	d102      	bne.n	80054a2 <__cvt+0x66>
 800549c:	f019 0f01 	tst.w	r9, #1
 80054a0:	d022      	beq.n	80054e8 <__cvt+0xac>
 80054a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a6:	eb07 0906 	add.w	r9, r7, r6
 80054aa:	d110      	bne.n	80054ce <__cvt+0x92>
 80054ac:	783b      	ldrb	r3, [r7, #0]
 80054ae:	2b30      	cmp	r3, #48	; 0x30
 80054b0:	d10a      	bne.n	80054c8 <__cvt+0x8c>
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fb fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80054be:	b918      	cbnz	r0, 80054c8 <__cvt+0x8c>
 80054c0:	f1c6 0601 	rsb	r6, r6, #1
 80054c4:	f8ca 6000 	str.w	r6, [sl]
 80054c8:	f8da 3000 	ldr.w	r3, [sl]
 80054cc:	4499      	add	r9, r3
 80054ce:	2200      	movs	r2, #0
 80054d0:	2300      	movs	r3, #0
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	f7fb faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80054da:	b108      	cbz	r0, 80054e0 <__cvt+0xa4>
 80054dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80054e0:	2230      	movs	r2, #48	; 0x30
 80054e2:	9b03      	ldr	r3, [sp, #12]
 80054e4:	454b      	cmp	r3, r9
 80054e6:	d307      	bcc.n	80054f8 <__cvt+0xbc>
 80054e8:	9b03      	ldr	r3, [sp, #12]
 80054ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ec:	1bdb      	subs	r3, r3, r7
 80054ee:	4638      	mov	r0, r7
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	b004      	add	sp, #16
 80054f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f8:	1c59      	adds	r1, r3, #1
 80054fa:	9103      	str	r1, [sp, #12]
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e7f0      	b.n	80054e2 <__cvt+0xa6>

08005500 <__exponent>:
 8005500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005502:	4603      	mov	r3, r0
 8005504:	2900      	cmp	r1, #0
 8005506:	bfb8      	it	lt
 8005508:	4249      	neglt	r1, r1
 800550a:	f803 2b02 	strb.w	r2, [r3], #2
 800550e:	bfb4      	ite	lt
 8005510:	222d      	movlt	r2, #45	; 0x2d
 8005512:	222b      	movge	r2, #43	; 0x2b
 8005514:	2909      	cmp	r1, #9
 8005516:	7042      	strb	r2, [r0, #1]
 8005518:	dd2a      	ble.n	8005570 <__exponent+0x70>
 800551a:	f10d 0407 	add.w	r4, sp, #7
 800551e:	46a4      	mov	ip, r4
 8005520:	270a      	movs	r7, #10
 8005522:	46a6      	mov	lr, r4
 8005524:	460a      	mov	r2, r1
 8005526:	fb91 f6f7 	sdiv	r6, r1, r7
 800552a:	fb07 1516 	mls	r5, r7, r6, r1
 800552e:	3530      	adds	r5, #48	; 0x30
 8005530:	2a63      	cmp	r2, #99	; 0x63
 8005532:	f104 34ff 	add.w	r4, r4, #4294967295
 8005536:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800553a:	4631      	mov	r1, r6
 800553c:	dcf1      	bgt.n	8005522 <__exponent+0x22>
 800553e:	3130      	adds	r1, #48	; 0x30
 8005540:	f1ae 0502 	sub.w	r5, lr, #2
 8005544:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005548:	1c44      	adds	r4, r0, #1
 800554a:	4629      	mov	r1, r5
 800554c:	4561      	cmp	r1, ip
 800554e:	d30a      	bcc.n	8005566 <__exponent+0x66>
 8005550:	f10d 0209 	add.w	r2, sp, #9
 8005554:	eba2 020e 	sub.w	r2, r2, lr
 8005558:	4565      	cmp	r5, ip
 800555a:	bf88      	it	hi
 800555c:	2200      	movhi	r2, #0
 800555e:	4413      	add	r3, r2
 8005560:	1a18      	subs	r0, r3, r0
 8005562:	b003      	add	sp, #12
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800556a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800556e:	e7ed      	b.n	800554c <__exponent+0x4c>
 8005570:	2330      	movs	r3, #48	; 0x30
 8005572:	3130      	adds	r1, #48	; 0x30
 8005574:	7083      	strb	r3, [r0, #2]
 8005576:	70c1      	strb	r1, [r0, #3]
 8005578:	1d03      	adds	r3, r0, #4
 800557a:	e7f1      	b.n	8005560 <__exponent+0x60>

0800557c <_printf_float>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	ed2d 8b02 	vpush	{d8}
 8005584:	b08d      	sub	sp, #52	; 0x34
 8005586:	460c      	mov	r4, r1
 8005588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800558c:	4616      	mov	r6, r2
 800558e:	461f      	mov	r7, r3
 8005590:	4605      	mov	r5, r0
 8005592:	f001 fd3f 	bl	8007014 <_localeconv_r>
 8005596:	f8d0 a000 	ldr.w	sl, [r0]
 800559a:	4650      	mov	r0, sl
 800559c:	f7fa fe18 	bl	80001d0 <strlen>
 80055a0:	2300      	movs	r3, #0
 80055a2:	930a      	str	r3, [sp, #40]	; 0x28
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055b0:	3307      	adds	r3, #7
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	f103 0208 	add.w	r2, r3, #8
 80055ba:	f8c8 2000 	str.w	r2, [r8]
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80055d4:	ee08 0a10 	vmov	s16, r0
 80055d8:	4b9f      	ldr	r3, [pc, #636]	; (8005858 <_printf_float+0x2dc>)
 80055da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055de:	f04f 32ff 	mov.w	r2, #4294967295
 80055e2:	f7fb faa3 	bl	8000b2c <__aeabi_dcmpun>
 80055e6:	bb88      	cbnz	r0, 800564c <_printf_float+0xd0>
 80055e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ec:	4b9a      	ldr	r3, [pc, #616]	; (8005858 <_printf_float+0x2dc>)
 80055ee:	f04f 32ff 	mov.w	r2, #4294967295
 80055f2:	f7fb fa7d 	bl	8000af0 <__aeabi_dcmple>
 80055f6:	bb48      	cbnz	r0, 800564c <_printf_float+0xd0>
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4640      	mov	r0, r8
 80055fe:	4649      	mov	r1, r9
 8005600:	f7fb fa6c 	bl	8000adc <__aeabi_dcmplt>
 8005604:	b110      	cbz	r0, 800560c <_printf_float+0x90>
 8005606:	232d      	movs	r3, #45	; 0x2d
 8005608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560c:	4b93      	ldr	r3, [pc, #588]	; (800585c <_printf_float+0x2e0>)
 800560e:	4894      	ldr	r0, [pc, #592]	; (8005860 <_printf_float+0x2e4>)
 8005610:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005614:	bf94      	ite	ls
 8005616:	4698      	movls	r8, r3
 8005618:	4680      	movhi	r8, r0
 800561a:	2303      	movs	r3, #3
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	9b05      	ldr	r3, [sp, #20]
 8005620:	f023 0204 	bic.w	r2, r3, #4
 8005624:	6022      	str	r2, [r4, #0]
 8005626:	f04f 0900 	mov.w	r9, #0
 800562a:	9700      	str	r7, [sp, #0]
 800562c:	4633      	mov	r3, r6
 800562e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005630:	4621      	mov	r1, r4
 8005632:	4628      	mov	r0, r5
 8005634:	f000 f9d8 	bl	80059e8 <_printf_common>
 8005638:	3001      	adds	r0, #1
 800563a:	f040 8090 	bne.w	800575e <_printf_float+0x1e2>
 800563e:	f04f 30ff 	mov.w	r0, #4294967295
 8005642:	b00d      	add	sp, #52	; 0x34
 8005644:	ecbd 8b02 	vpop	{d8}
 8005648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	4640      	mov	r0, r8
 8005652:	4649      	mov	r1, r9
 8005654:	f7fb fa6a 	bl	8000b2c <__aeabi_dcmpun>
 8005658:	b140      	cbz	r0, 800566c <_printf_float+0xf0>
 800565a:	464b      	mov	r3, r9
 800565c:	2b00      	cmp	r3, #0
 800565e:	bfbc      	itt	lt
 8005660:	232d      	movlt	r3, #45	; 0x2d
 8005662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005666:	487f      	ldr	r0, [pc, #508]	; (8005864 <_printf_float+0x2e8>)
 8005668:	4b7f      	ldr	r3, [pc, #508]	; (8005868 <_printf_float+0x2ec>)
 800566a:	e7d1      	b.n	8005610 <_printf_float+0x94>
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005672:	9206      	str	r2, [sp, #24]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	d13f      	bne.n	80056f8 <_printf_float+0x17c>
 8005678:	2306      	movs	r3, #6
 800567a:	6063      	str	r3, [r4, #4]
 800567c:	9b05      	ldr	r3, [sp, #20]
 800567e:	6861      	ldr	r1, [r4, #4]
 8005680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005684:	2300      	movs	r3, #0
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	ab0a      	add	r3, sp, #40	; 0x28
 800568a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800568e:	ab09      	add	r3, sp, #36	; 0x24
 8005690:	ec49 8b10 	vmov	d0, r8, r9
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800569c:	4628      	mov	r0, r5
 800569e:	f7ff fecd 	bl	800543c <__cvt>
 80056a2:	9b06      	ldr	r3, [sp, #24]
 80056a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a6:	2b47      	cmp	r3, #71	; 0x47
 80056a8:	4680      	mov	r8, r0
 80056aa:	d108      	bne.n	80056be <_printf_float+0x142>
 80056ac:	1cc8      	adds	r0, r1, #3
 80056ae:	db02      	blt.n	80056b6 <_printf_float+0x13a>
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	4299      	cmp	r1, r3
 80056b4:	dd41      	ble.n	800573a <_printf_float+0x1be>
 80056b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80056ba:	fa5f fb8b 	uxtb.w	fp, fp
 80056be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056c2:	d820      	bhi.n	8005706 <_printf_float+0x18a>
 80056c4:	3901      	subs	r1, #1
 80056c6:	465a      	mov	r2, fp
 80056c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056cc:	9109      	str	r1, [sp, #36]	; 0x24
 80056ce:	f7ff ff17 	bl	8005500 <__exponent>
 80056d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056d4:	1813      	adds	r3, r2, r0
 80056d6:	2a01      	cmp	r2, #1
 80056d8:	4681      	mov	r9, r0
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	dc02      	bgt.n	80056e4 <_printf_float+0x168>
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	07d2      	lsls	r2, r2, #31
 80056e2:	d501      	bpl.n	80056e8 <_printf_float+0x16c>
 80056e4:	3301      	adds	r3, #1
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d09c      	beq.n	800562a <_printf_float+0xae>
 80056f0:	232d      	movs	r3, #45	; 0x2d
 80056f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f6:	e798      	b.n	800562a <_printf_float+0xae>
 80056f8:	9a06      	ldr	r2, [sp, #24]
 80056fa:	2a47      	cmp	r2, #71	; 0x47
 80056fc:	d1be      	bne.n	800567c <_printf_float+0x100>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1bc      	bne.n	800567c <_printf_float+0x100>
 8005702:	2301      	movs	r3, #1
 8005704:	e7b9      	b.n	800567a <_printf_float+0xfe>
 8005706:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800570a:	d118      	bne.n	800573e <_printf_float+0x1c2>
 800570c:	2900      	cmp	r1, #0
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	dd0b      	ble.n	800572a <_printf_float+0x1ae>
 8005712:	6121      	str	r1, [r4, #16]
 8005714:	b913      	cbnz	r3, 800571c <_printf_float+0x1a0>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	07d0      	lsls	r0, r2, #31
 800571a:	d502      	bpl.n	8005722 <_printf_float+0x1a6>
 800571c:	3301      	adds	r3, #1
 800571e:	440b      	add	r3, r1
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	65a1      	str	r1, [r4, #88]	; 0x58
 8005724:	f04f 0900 	mov.w	r9, #0
 8005728:	e7de      	b.n	80056e8 <_printf_float+0x16c>
 800572a:	b913      	cbnz	r3, 8005732 <_printf_float+0x1b6>
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	07d2      	lsls	r2, r2, #31
 8005730:	d501      	bpl.n	8005736 <_printf_float+0x1ba>
 8005732:	3302      	adds	r3, #2
 8005734:	e7f4      	b.n	8005720 <_printf_float+0x1a4>
 8005736:	2301      	movs	r3, #1
 8005738:	e7f2      	b.n	8005720 <_printf_float+0x1a4>
 800573a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800573e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005740:	4299      	cmp	r1, r3
 8005742:	db05      	blt.n	8005750 <_printf_float+0x1d4>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	6121      	str	r1, [r4, #16]
 8005748:	07d8      	lsls	r0, r3, #31
 800574a:	d5ea      	bpl.n	8005722 <_printf_float+0x1a6>
 800574c:	1c4b      	adds	r3, r1, #1
 800574e:	e7e7      	b.n	8005720 <_printf_float+0x1a4>
 8005750:	2900      	cmp	r1, #0
 8005752:	bfd4      	ite	le
 8005754:	f1c1 0202 	rsble	r2, r1, #2
 8005758:	2201      	movgt	r2, #1
 800575a:	4413      	add	r3, r2
 800575c:	e7e0      	b.n	8005720 <_printf_float+0x1a4>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	055a      	lsls	r2, r3, #21
 8005762:	d407      	bmi.n	8005774 <_printf_float+0x1f8>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	4642      	mov	r2, r8
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	d12c      	bne.n	80057cc <_printf_float+0x250>
 8005772:	e764      	b.n	800563e <_printf_float+0xc2>
 8005774:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005778:	f240 80e0 	bls.w	800593c <_printf_float+0x3c0>
 800577c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005780:	2200      	movs	r2, #0
 8005782:	2300      	movs	r3, #0
 8005784:	f7fb f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005788:	2800      	cmp	r0, #0
 800578a:	d034      	beq.n	80057f6 <_printf_float+0x27a>
 800578c:	4a37      	ldr	r2, [pc, #220]	; (800586c <_printf_float+0x2f0>)
 800578e:	2301      	movs	r3, #1
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f af51 	beq.w	800563e <_printf_float+0xc2>
 800579c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a0:	429a      	cmp	r2, r3
 80057a2:	db02      	blt.n	80057aa <_printf_float+0x22e>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	07d8      	lsls	r0, r3, #31
 80057a8:	d510      	bpl.n	80057cc <_printf_float+0x250>
 80057aa:	ee18 3a10 	vmov	r3, s16
 80057ae:	4652      	mov	r2, sl
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f af41 	beq.w	800563e <_printf_float+0xc2>
 80057bc:	f04f 0800 	mov.w	r8, #0
 80057c0:	f104 091a 	add.w	r9, r4, #26
 80057c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4543      	cmp	r3, r8
 80057ca:	dc09      	bgt.n	80057e0 <_printf_float+0x264>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	079b      	lsls	r3, r3, #30
 80057d0:	f100 8105 	bmi.w	80059de <_printf_float+0x462>
 80057d4:	68e0      	ldr	r0, [r4, #12]
 80057d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d8:	4298      	cmp	r0, r3
 80057da:	bfb8      	it	lt
 80057dc:	4618      	movlt	r0, r3
 80057de:	e730      	b.n	8005642 <_printf_float+0xc6>
 80057e0:	2301      	movs	r3, #1
 80057e2:	464a      	mov	r2, r9
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f af27 	beq.w	800563e <_printf_float+0xc2>
 80057f0:	f108 0801 	add.w	r8, r8, #1
 80057f4:	e7e6      	b.n	80057c4 <_printf_float+0x248>
 80057f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dc39      	bgt.n	8005870 <_printf_float+0x2f4>
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <_printf_float+0x2f0>)
 80057fe:	2301      	movs	r3, #1
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f af19 	beq.w	800563e <_printf_float+0xc2>
 800580c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005810:	4313      	orrs	r3, r2
 8005812:	d102      	bne.n	800581a <_printf_float+0x29e>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07d9      	lsls	r1, r3, #31
 8005818:	d5d8      	bpl.n	80057cc <_printf_float+0x250>
 800581a:	ee18 3a10 	vmov	r3, s16
 800581e:	4652      	mov	r2, sl
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f af09 	beq.w	800563e <_printf_float+0xc2>
 800582c:	f04f 0900 	mov.w	r9, #0
 8005830:	f104 0a1a 	add.w	sl, r4, #26
 8005834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005836:	425b      	negs	r3, r3
 8005838:	454b      	cmp	r3, r9
 800583a:	dc01      	bgt.n	8005840 <_printf_float+0x2c4>
 800583c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800583e:	e792      	b.n	8005766 <_printf_float+0x1ea>
 8005840:	2301      	movs	r3, #1
 8005842:	4652      	mov	r2, sl
 8005844:	4631      	mov	r1, r6
 8005846:	4628      	mov	r0, r5
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	f43f aef7 	beq.w	800563e <_printf_float+0xc2>
 8005850:	f109 0901 	add.w	r9, r9, #1
 8005854:	e7ee      	b.n	8005834 <_printf_float+0x2b8>
 8005856:	bf00      	nop
 8005858:	7fefffff 	.word	0x7fefffff
 800585c:	080081ac 	.word	0x080081ac
 8005860:	080081b0 	.word	0x080081b0
 8005864:	080081b8 	.word	0x080081b8
 8005868:	080081b4 	.word	0x080081b4
 800586c:	080081bc 	.word	0x080081bc
 8005870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005874:	429a      	cmp	r2, r3
 8005876:	bfa8      	it	ge
 8005878:	461a      	movge	r2, r3
 800587a:	2a00      	cmp	r2, #0
 800587c:	4691      	mov	r9, r2
 800587e:	dc37      	bgt.n	80058f0 <_printf_float+0x374>
 8005880:	f04f 0b00 	mov.w	fp, #0
 8005884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005888:	f104 021a 	add.w	r2, r4, #26
 800588c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800588e:	9305      	str	r3, [sp, #20]
 8005890:	eba3 0309 	sub.w	r3, r3, r9
 8005894:	455b      	cmp	r3, fp
 8005896:	dc33      	bgt.n	8005900 <_printf_float+0x384>
 8005898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800589c:	429a      	cmp	r2, r3
 800589e:	db3b      	blt.n	8005918 <_printf_float+0x39c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07da      	lsls	r2, r3, #31
 80058a4:	d438      	bmi.n	8005918 <_printf_float+0x39c>
 80058a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a8:	9a05      	ldr	r2, [sp, #20]
 80058aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ac:	1a9a      	subs	r2, r3, r2
 80058ae:	eba3 0901 	sub.w	r9, r3, r1
 80058b2:	4591      	cmp	r9, r2
 80058b4:	bfa8      	it	ge
 80058b6:	4691      	movge	r9, r2
 80058b8:	f1b9 0f00 	cmp.w	r9, #0
 80058bc:	dc35      	bgt.n	800592a <_printf_float+0x3ae>
 80058be:	f04f 0800 	mov.w	r8, #0
 80058c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058c6:	f104 0a1a 	add.w	sl, r4, #26
 80058ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	eba3 0309 	sub.w	r3, r3, r9
 80058d4:	4543      	cmp	r3, r8
 80058d6:	f77f af79 	ble.w	80057cc <_printf_float+0x250>
 80058da:	2301      	movs	r3, #1
 80058dc:	4652      	mov	r2, sl
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	f43f aeaa 	beq.w	800563e <_printf_float+0xc2>
 80058ea:	f108 0801 	add.w	r8, r8, #1
 80058ee:	e7ec      	b.n	80058ca <_printf_float+0x34e>
 80058f0:	4613      	mov	r3, r2
 80058f2:	4631      	mov	r1, r6
 80058f4:	4642      	mov	r2, r8
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	d1c0      	bne.n	8005880 <_printf_float+0x304>
 80058fe:	e69e      	b.n	800563e <_printf_float+0xc2>
 8005900:	2301      	movs	r3, #1
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	9205      	str	r2, [sp, #20]
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f ae97 	beq.w	800563e <_printf_float+0xc2>
 8005910:	9a05      	ldr	r2, [sp, #20]
 8005912:	f10b 0b01 	add.w	fp, fp, #1
 8005916:	e7b9      	b.n	800588c <_printf_float+0x310>
 8005918:	ee18 3a10 	vmov	r3, s16
 800591c:	4652      	mov	r2, sl
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	d1be      	bne.n	80058a6 <_printf_float+0x32a>
 8005928:	e689      	b.n	800563e <_printf_float+0xc2>
 800592a:	9a05      	ldr	r2, [sp, #20]
 800592c:	464b      	mov	r3, r9
 800592e:	4442      	add	r2, r8
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	d1c1      	bne.n	80058be <_printf_float+0x342>
 800593a:	e680      	b.n	800563e <_printf_float+0xc2>
 800593c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800593e:	2a01      	cmp	r2, #1
 8005940:	dc01      	bgt.n	8005946 <_printf_float+0x3ca>
 8005942:	07db      	lsls	r3, r3, #31
 8005944:	d538      	bpl.n	80059b8 <_printf_float+0x43c>
 8005946:	2301      	movs	r3, #1
 8005948:	4642      	mov	r2, r8
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	f43f ae74 	beq.w	800563e <_printf_float+0xc2>
 8005956:	ee18 3a10 	vmov	r3, s16
 800595a:	4652      	mov	r2, sl
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	f43f ae6b 	beq.w	800563e <_printf_float+0xc2>
 8005968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	f7fb f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005974:	b9d8      	cbnz	r0, 80059ae <_printf_float+0x432>
 8005976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005978:	f108 0201 	add.w	r2, r8, #1
 800597c:	3b01      	subs	r3, #1
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	d10e      	bne.n	80059a6 <_printf_float+0x42a>
 8005988:	e659      	b.n	800563e <_printf_float+0xc2>
 800598a:	2301      	movs	r3, #1
 800598c:	4652      	mov	r2, sl
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	47b8      	blx	r7
 8005994:	3001      	adds	r0, #1
 8005996:	f43f ae52 	beq.w	800563e <_printf_float+0xc2>
 800599a:	f108 0801 	add.w	r8, r8, #1
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	4543      	cmp	r3, r8
 80059a4:	dcf1      	bgt.n	800598a <_printf_float+0x40e>
 80059a6:	464b      	mov	r3, r9
 80059a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059ac:	e6dc      	b.n	8005768 <_printf_float+0x1ec>
 80059ae:	f04f 0800 	mov.w	r8, #0
 80059b2:	f104 0a1a 	add.w	sl, r4, #26
 80059b6:	e7f2      	b.n	800599e <_printf_float+0x422>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4642      	mov	r2, r8
 80059bc:	e7df      	b.n	800597e <_printf_float+0x402>
 80059be:	2301      	movs	r3, #1
 80059c0:	464a      	mov	r2, r9
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f ae38 	beq.w	800563e <_printf_float+0xc2>
 80059ce:	f108 0801 	add.w	r8, r8, #1
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	4543      	cmp	r3, r8
 80059da:	dcf0      	bgt.n	80059be <_printf_float+0x442>
 80059dc:	e6fa      	b.n	80057d4 <_printf_float+0x258>
 80059de:	f04f 0800 	mov.w	r8, #0
 80059e2:	f104 0919 	add.w	r9, r4, #25
 80059e6:	e7f4      	b.n	80059d2 <_printf_float+0x456>

080059e8 <_printf_common>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	4616      	mov	r6, r2
 80059ee:	4699      	mov	r9, r3
 80059f0:	688a      	ldr	r2, [r1, #8]
 80059f2:	690b      	ldr	r3, [r1, #16]
 80059f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bfb8      	it	lt
 80059fc:	4613      	movlt	r3, r2
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a04:	4607      	mov	r7, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b10a      	cbz	r2, 8005a0e <_printf_common+0x26>
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	0699      	lsls	r1, r3, #26
 8005a12:	bf42      	ittt	mi
 8005a14:	6833      	ldrmi	r3, [r6, #0]
 8005a16:	3302      	addmi	r3, #2
 8005a18:	6033      	strmi	r3, [r6, #0]
 8005a1a:	6825      	ldr	r5, [r4, #0]
 8005a1c:	f015 0506 	ands.w	r5, r5, #6
 8005a20:	d106      	bne.n	8005a30 <_printf_common+0x48>
 8005a22:	f104 0a19 	add.w	sl, r4, #25
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	6832      	ldr	r2, [r6, #0]
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dc26      	bgt.n	8005a7e <_printf_common+0x96>
 8005a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a34:	1e13      	subs	r3, r2, #0
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	bf18      	it	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	0692      	lsls	r2, r2, #26
 8005a3e:	d42b      	bmi.n	8005a98 <_printf_common+0xb0>
 8005a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a44:	4649      	mov	r1, r9
 8005a46:	4638      	mov	r0, r7
 8005a48:	47c0      	blx	r8
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d01e      	beq.n	8005a8c <_printf_common+0xa4>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	68e5      	ldr	r5, [r4, #12]
 8005a52:	6832      	ldr	r2, [r6, #0]
 8005a54:	f003 0306 	and.w	r3, r3, #6
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	bf08      	it	eq
 8005a5c:	1aad      	subeq	r5, r5, r2
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	6922      	ldr	r2, [r4, #16]
 8005a62:	bf0c      	ite	eq
 8005a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a68:	2500      	movne	r5, #0
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	bfc4      	itt	gt
 8005a6e:	1a9b      	subgt	r3, r3, r2
 8005a70:	18ed      	addgt	r5, r5, r3
 8005a72:	2600      	movs	r6, #0
 8005a74:	341a      	adds	r4, #26
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	d11a      	bne.n	8005ab0 <_printf_common+0xc8>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e008      	b.n	8005a90 <_printf_common+0xa8>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4649      	mov	r1, r9
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c0      	blx	r8
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_printf_common+0xac>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	3501      	adds	r5, #1
 8005a96:	e7c6      	b.n	8005a26 <_printf_common+0x3e>
 8005a98:	18e1      	adds	r1, r4, r3
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	2030      	movs	r0, #48	; 0x30
 8005a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aa2:	4422      	add	r2, r4
 8005aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aac:	3302      	adds	r3, #2
 8005aae:	e7c7      	b.n	8005a40 <_printf_common+0x58>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d0e6      	beq.n	8005a8c <_printf_common+0xa4>
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7d9      	b.n	8005a76 <_printf_common+0x8e>
	...

08005ac4 <_printf_i>:
 8005ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	7e0f      	ldrb	r7, [r1, #24]
 8005aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005acc:	2f78      	cmp	r7, #120	; 0x78
 8005ace:	4691      	mov	r9, r2
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	469a      	mov	sl, r3
 8005ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ada:	d807      	bhi.n	8005aec <_printf_i+0x28>
 8005adc:	2f62      	cmp	r7, #98	; 0x62
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x32>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 80d8 	beq.w	8005c96 <_printf_i+0x1d2>
 8005ae6:	2f58      	cmp	r7, #88	; 0x58
 8005ae8:	f000 80a3 	beq.w	8005c32 <_printf_i+0x16e>
 8005aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005af4:	e03a      	b.n	8005b6c <_printf_i+0xa8>
 8005af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005afa:	2b15      	cmp	r3, #21
 8005afc:	d8f6      	bhi.n	8005aec <_printf_i+0x28>
 8005afe:	a101      	add	r1, pc, #4	; (adr r1, 8005b04 <_printf_i+0x40>)
 8005b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005aed 	.word	0x08005aed
 8005b10:	08005aed 	.word	0x08005aed
 8005b14:	08005aed 	.word	0x08005aed
 8005b18:	08005aed 	.word	0x08005aed
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005aed 	.word	0x08005aed
 8005b24:	08005aed 	.word	0x08005aed
 8005b28:	08005aed 	.word	0x08005aed
 8005b2c:	08005aed 	.word	0x08005aed
 8005b30:	08005c7d 	.word	0x08005c7d
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005c5f 	.word	0x08005c5f
 8005b3c:	08005aed 	.word	0x08005aed
 8005b40:	08005aed 	.word	0x08005aed
 8005b44:	08005c9f 	.word	0x08005c9f
 8005b48:	08005aed 	.word	0x08005aed
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005aed 	.word	0x08005aed
 8005b54:	08005aed 	.word	0x08005aed
 8005b58:	08005c67 	.word	0x08005c67
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	602a      	str	r2, [r5, #0]
 8005b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0a3      	b.n	8005cb8 <_printf_i+0x1f4>
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	6829      	ldr	r1, [r5, #0]
 8005b74:	0606      	lsls	r6, r0, #24
 8005b76:	f101 0304 	add.w	r3, r1, #4
 8005b7a:	d50a      	bpl.n	8005b92 <_printf_i+0xce>
 8005b7c:	680e      	ldr	r6, [r1, #0]
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	2e00      	cmp	r6, #0
 8005b82:	da03      	bge.n	8005b8c <_printf_i+0xc8>
 8005b84:	232d      	movs	r3, #45	; 0x2d
 8005b86:	4276      	negs	r6, r6
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8c:	485e      	ldr	r0, [pc, #376]	; (8005d08 <_printf_i+0x244>)
 8005b8e:	230a      	movs	r3, #10
 8005b90:	e019      	b.n	8005bc6 <_printf_i+0x102>
 8005b92:	680e      	ldr	r6, [r1, #0]
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b9a:	bf18      	it	ne
 8005b9c:	b236      	sxthne	r6, r6
 8005b9e:	e7ef      	b.n	8005b80 <_printf_i+0xbc>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	6820      	ldr	r0, [r4, #0]
 8005ba4:	1d19      	adds	r1, r3, #4
 8005ba6:	6029      	str	r1, [r5, #0]
 8005ba8:	0601      	lsls	r1, r0, #24
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0xec>
 8005bac:	681e      	ldr	r6, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0xf2>
 8005bb0:	0646      	lsls	r6, r0, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0xe8>
 8005bb4:	881e      	ldrh	r6, [r3, #0]
 8005bb6:	4854      	ldr	r0, [pc, #336]	; (8005d08 <_printf_i+0x244>)
 8005bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bba:	bf0c      	ite	eq
 8005bbc:	2308      	moveq	r3, #8
 8005bbe:	230a      	movne	r3, #10
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc6:	6865      	ldr	r5, [r4, #4]
 8005bc8:	60a5      	str	r5, [r4, #8]
 8005bca:	2d00      	cmp	r5, #0
 8005bcc:	bfa2      	ittt	ge
 8005bce:	6821      	ldrge	r1, [r4, #0]
 8005bd0:	f021 0104 	bicge.w	r1, r1, #4
 8005bd4:	6021      	strge	r1, [r4, #0]
 8005bd6:	b90e      	cbnz	r6, 8005bdc <_printf_i+0x118>
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	d04d      	beq.n	8005c78 <_printf_i+0x1b4>
 8005bdc:	4615      	mov	r5, r2
 8005bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8005be2:	fb03 6711 	mls	r7, r3, r1, r6
 8005be6:	5dc7      	ldrb	r7, [r0, r7]
 8005be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bec:	4637      	mov	r7, r6
 8005bee:	42bb      	cmp	r3, r7
 8005bf0:	460e      	mov	r6, r1
 8005bf2:	d9f4      	bls.n	8005bde <_printf_i+0x11a>
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d10b      	bne.n	8005c10 <_printf_i+0x14c>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	07de      	lsls	r6, r3, #31
 8005bfc:	d508      	bpl.n	8005c10 <_printf_i+0x14c>
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	6861      	ldr	r1, [r4, #4]
 8005c02:	4299      	cmp	r1, r3
 8005c04:	bfde      	ittt	le
 8005c06:	2330      	movle	r3, #48	; 0x30
 8005c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c10:	1b52      	subs	r2, r2, r5
 8005c12:	6122      	str	r2, [r4, #16]
 8005c14:	f8cd a000 	str.w	sl, [sp]
 8005c18:	464b      	mov	r3, r9
 8005c1a:	aa03      	add	r2, sp, #12
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f7ff fee2 	bl	80059e8 <_printf_common>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d14c      	bne.n	8005cc2 <_printf_i+0x1fe>
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	b004      	add	sp, #16
 8005c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c32:	4835      	ldr	r0, [pc, #212]	; (8005d08 <_printf_i+0x244>)
 8005c34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c40:	6029      	str	r1, [r5, #0]
 8005c42:	061d      	lsls	r5, r3, #24
 8005c44:	d514      	bpl.n	8005c70 <_printf_i+0x1ac>
 8005c46:	07df      	lsls	r7, r3, #31
 8005c48:	bf44      	itt	mi
 8005c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c4e:	6023      	strmi	r3, [r4, #0]
 8005c50:	b91e      	cbnz	r6, 8005c5a <_printf_i+0x196>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f023 0320 	bic.w	r3, r3, #32
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	e7b0      	b.n	8005bc0 <_printf_i+0xfc>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f043 0320 	orr.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2378      	movs	r3, #120	; 0x78
 8005c68:	4828      	ldr	r0, [pc, #160]	; (8005d0c <_printf_i+0x248>)
 8005c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c6e:	e7e3      	b.n	8005c38 <_printf_i+0x174>
 8005c70:	0659      	lsls	r1, r3, #25
 8005c72:	bf48      	it	mi
 8005c74:	b2b6      	uxthmi	r6, r6
 8005c76:	e7e6      	b.n	8005c46 <_printf_i+0x182>
 8005c78:	4615      	mov	r5, r2
 8005c7a:	e7bb      	b.n	8005bf4 <_printf_i+0x130>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	6826      	ldr	r6, [r4, #0]
 8005c80:	6961      	ldr	r1, [r4, #20]
 8005c82:	1d18      	adds	r0, r3, #4
 8005c84:	6028      	str	r0, [r5, #0]
 8005c86:	0635      	lsls	r5, r6, #24
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	d501      	bpl.n	8005c90 <_printf_i+0x1cc>
 8005c8c:	6019      	str	r1, [r3, #0]
 8005c8e:	e002      	b.n	8005c96 <_printf_i+0x1d2>
 8005c90:	0670      	lsls	r0, r6, #25
 8005c92:	d5fb      	bpl.n	8005c8c <_printf_i+0x1c8>
 8005c94:	8019      	strh	r1, [r3, #0]
 8005c96:	2300      	movs	r3, #0
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	e7ba      	b.n	8005c14 <_printf_i+0x150>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	1d1a      	adds	r2, r3, #4
 8005ca2:	602a      	str	r2, [r5, #0]
 8005ca4:	681d      	ldr	r5, [r3, #0]
 8005ca6:	6862      	ldr	r2, [r4, #4]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7fa fa98 	bl	80001e0 <memchr>
 8005cb0:	b108      	cbz	r0, 8005cb6 <_printf_i+0x1f2>
 8005cb2:	1b40      	subs	r0, r0, r5
 8005cb4:	6060      	str	r0, [r4, #4]
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	e7a8      	b.n	8005c14 <_printf_i+0x150>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	47d0      	blx	sl
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d0ab      	beq.n	8005c28 <_printf_i+0x164>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	079b      	lsls	r3, r3, #30
 8005cd4:	d413      	bmi.n	8005cfe <_printf_i+0x23a>
 8005cd6:	68e0      	ldr	r0, [r4, #12]
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	4298      	cmp	r0, r3
 8005cdc:	bfb8      	it	lt
 8005cde:	4618      	movlt	r0, r3
 8005ce0:	e7a4      	b.n	8005c2c <_printf_i+0x168>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4640      	mov	r0, r8
 8005cea:	47d0      	blx	sl
 8005cec:	3001      	adds	r0, #1
 8005cee:	d09b      	beq.n	8005c28 <_printf_i+0x164>
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	9903      	ldr	r1, [sp, #12]
 8005cf6:	1a5b      	subs	r3, r3, r1
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	dcf2      	bgt.n	8005ce2 <_printf_i+0x21e>
 8005cfc:	e7eb      	b.n	8005cd6 <_printf_i+0x212>
 8005cfe:	2500      	movs	r5, #0
 8005d00:	f104 0619 	add.w	r6, r4, #25
 8005d04:	e7f5      	b.n	8005cf2 <_printf_i+0x22e>
 8005d06:	bf00      	nop
 8005d08:	080081be 	.word	0x080081be
 8005d0c:	080081cf 	.word	0x080081cf

08005d10 <iprintf>:
 8005d10:	b40f      	push	{r0, r1, r2, r3}
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <iprintf+0x2c>)
 8005d14:	b513      	push	{r0, r1, r4, lr}
 8005d16:	681c      	ldr	r4, [r3, #0]
 8005d18:	b124      	cbz	r4, 8005d24 <iprintf+0x14>
 8005d1a:	69a3      	ldr	r3, [r4, #24]
 8005d1c:	b913      	cbnz	r3, 8005d24 <iprintf+0x14>
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f001 f8da 	bl	8006ed8 <__sinit>
 8005d24:	ab05      	add	r3, sp, #20
 8005d26:	9a04      	ldr	r2, [sp, #16]
 8005d28:	68a1      	ldr	r1, [r4, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f001 fe97 	bl	8007a60 <_vfiprintf_r>
 8005d32:	b002      	add	sp, #8
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d38:	b004      	add	sp, #16
 8005d3a:	4770      	bx	lr
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <_puts_r>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	460e      	mov	r6, r1
 8005d44:	4605      	mov	r5, r0
 8005d46:	b118      	cbz	r0, 8005d50 <_puts_r+0x10>
 8005d48:	6983      	ldr	r3, [r0, #24]
 8005d4a:	b90b      	cbnz	r3, 8005d50 <_puts_r+0x10>
 8005d4c:	f001 f8c4 	bl	8006ed8 <__sinit>
 8005d50:	69ab      	ldr	r3, [r5, #24]
 8005d52:	68ac      	ldr	r4, [r5, #8]
 8005d54:	b913      	cbnz	r3, 8005d5c <_puts_r+0x1c>
 8005d56:	4628      	mov	r0, r5
 8005d58:	f001 f8be 	bl	8006ed8 <__sinit>
 8005d5c:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <_puts_r+0xd0>)
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d120      	bne.n	8005da4 <_puts_r+0x64>
 8005d62:	686c      	ldr	r4, [r5, #4]
 8005d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d66:	07db      	lsls	r3, r3, #31
 8005d68:	d405      	bmi.n	8005d76 <_puts_r+0x36>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	0598      	lsls	r0, r3, #22
 8005d6e:	d402      	bmi.n	8005d76 <_puts_r+0x36>
 8005d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d72:	f001 f954 	bl	800701e <__retarget_lock_acquire_recursive>
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	0719      	lsls	r1, r3, #28
 8005d7a:	d51d      	bpl.n	8005db8 <_puts_r+0x78>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	b1db      	cbz	r3, 8005db8 <_puts_r+0x78>
 8005d80:	3e01      	subs	r6, #1
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	60a3      	str	r3, [r4, #8]
 8005d8c:	bb39      	cbnz	r1, 8005dde <_puts_r+0x9e>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da38      	bge.n	8005e04 <_puts_r+0xc4>
 8005d92:	4622      	mov	r2, r4
 8005d94:	210a      	movs	r1, #10
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 f848 	bl	8005e2c <__swbuf_r>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d011      	beq.n	8005dc4 <_puts_r+0x84>
 8005da0:	250a      	movs	r5, #10
 8005da2:	e011      	b.n	8005dc8 <_puts_r+0x88>
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <_puts_r+0xd4>)
 8005da6:	429c      	cmp	r4, r3
 8005da8:	d101      	bne.n	8005dae <_puts_r+0x6e>
 8005daa:	68ac      	ldr	r4, [r5, #8]
 8005dac:	e7da      	b.n	8005d64 <_puts_r+0x24>
 8005dae:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <_puts_r+0xd8>)
 8005db0:	429c      	cmp	r4, r3
 8005db2:	bf08      	it	eq
 8005db4:	68ec      	ldreq	r4, [r5, #12]
 8005db6:	e7d5      	b.n	8005d64 <_puts_r+0x24>
 8005db8:	4621      	mov	r1, r4
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f888 	bl	8005ed0 <__swsetup_r>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d0dd      	beq.n	8005d80 <_puts_r+0x40>
 8005dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8005dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dca:	07da      	lsls	r2, r3, #31
 8005dcc:	d405      	bmi.n	8005dda <_puts_r+0x9a>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d402      	bmi.n	8005dda <_puts_r+0x9a>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd6:	f001 f923 	bl	8007020 <__retarget_lock_release_recursive>
 8005dda:	4628      	mov	r0, r5
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	da04      	bge.n	8005dec <_puts_r+0xac>
 8005de2:	69a2      	ldr	r2, [r4, #24]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	dc06      	bgt.n	8005df6 <_puts_r+0xb6>
 8005de8:	290a      	cmp	r1, #10
 8005dea:	d004      	beq.n	8005df6 <_puts_r+0xb6>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	6022      	str	r2, [r4, #0]
 8005df2:	7019      	strb	r1, [r3, #0]
 8005df4:	e7c5      	b.n	8005d82 <_puts_r+0x42>
 8005df6:	4622      	mov	r2, r4
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 f817 	bl	8005e2c <__swbuf_r>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d1bf      	bne.n	8005d82 <_puts_r+0x42>
 8005e02:	e7df      	b.n	8005dc4 <_puts_r+0x84>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	250a      	movs	r5, #10
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	6022      	str	r2, [r4, #0]
 8005e0c:	701d      	strb	r5, [r3, #0]
 8005e0e:	e7db      	b.n	8005dc8 <_puts_r+0x88>
 8005e10:	08008290 	.word	0x08008290
 8005e14:	080082b0 	.word	0x080082b0
 8005e18:	08008270 	.word	0x08008270

08005e1c <puts>:
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <puts+0xc>)
 8005e1e:	4601      	mov	r1, r0
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	f7ff bf8d 	b.w	8005d40 <_puts_r>
 8005e26:	bf00      	nop
 8005e28:	2000000c 	.word	0x2000000c

08005e2c <__swbuf_r>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	460e      	mov	r6, r1
 8005e30:	4614      	mov	r4, r2
 8005e32:	4605      	mov	r5, r0
 8005e34:	b118      	cbz	r0, 8005e3e <__swbuf_r+0x12>
 8005e36:	6983      	ldr	r3, [r0, #24]
 8005e38:	b90b      	cbnz	r3, 8005e3e <__swbuf_r+0x12>
 8005e3a:	f001 f84d 	bl	8006ed8 <__sinit>
 8005e3e:	4b21      	ldr	r3, [pc, #132]	; (8005ec4 <__swbuf_r+0x98>)
 8005e40:	429c      	cmp	r4, r3
 8005e42:	d12b      	bne.n	8005e9c <__swbuf_r+0x70>
 8005e44:	686c      	ldr	r4, [r5, #4]
 8005e46:	69a3      	ldr	r3, [r4, #24]
 8005e48:	60a3      	str	r3, [r4, #8]
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	071a      	lsls	r2, r3, #28
 8005e4e:	d52f      	bpl.n	8005eb0 <__swbuf_r+0x84>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	b36b      	cbz	r3, 8005eb0 <__swbuf_r+0x84>
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	6820      	ldr	r0, [r4, #0]
 8005e58:	1ac0      	subs	r0, r0, r3
 8005e5a:	6963      	ldr	r3, [r4, #20]
 8005e5c:	b2f6      	uxtb	r6, r6
 8005e5e:	4283      	cmp	r3, r0
 8005e60:	4637      	mov	r7, r6
 8005e62:	dc04      	bgt.n	8005e6e <__swbuf_r+0x42>
 8005e64:	4621      	mov	r1, r4
 8005e66:	4628      	mov	r0, r5
 8005e68:	f000 ffa2 	bl	8006db0 <_fflush_r>
 8005e6c:	bb30      	cbnz	r0, 8005ebc <__swbuf_r+0x90>
 8005e6e:	68a3      	ldr	r3, [r4, #8]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	60a3      	str	r3, [r4, #8]
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	701e      	strb	r6, [r3, #0]
 8005e7c:	6963      	ldr	r3, [r4, #20]
 8005e7e:	3001      	adds	r0, #1
 8005e80:	4283      	cmp	r3, r0
 8005e82:	d004      	beq.n	8005e8e <__swbuf_r+0x62>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	07db      	lsls	r3, r3, #31
 8005e88:	d506      	bpl.n	8005e98 <__swbuf_r+0x6c>
 8005e8a:	2e0a      	cmp	r6, #10
 8005e8c:	d104      	bne.n	8005e98 <__swbuf_r+0x6c>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 ff8d 	bl	8006db0 <_fflush_r>
 8005e96:	b988      	cbnz	r0, 8005ebc <__swbuf_r+0x90>
 8005e98:	4638      	mov	r0, r7
 8005e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <__swbuf_r+0x9c>)
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d101      	bne.n	8005ea6 <__swbuf_r+0x7a>
 8005ea2:	68ac      	ldr	r4, [r5, #8]
 8005ea4:	e7cf      	b.n	8005e46 <__swbuf_r+0x1a>
 8005ea6:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <__swbuf_r+0xa0>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	bf08      	it	eq
 8005eac:	68ec      	ldreq	r4, [r5, #12]
 8005eae:	e7ca      	b.n	8005e46 <__swbuf_r+0x1a>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f000 f80c 	bl	8005ed0 <__swsetup_r>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d0cb      	beq.n	8005e54 <__swbuf_r+0x28>
 8005ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8005ec0:	e7ea      	b.n	8005e98 <__swbuf_r+0x6c>
 8005ec2:	bf00      	nop
 8005ec4:	08008290 	.word	0x08008290
 8005ec8:	080082b0 	.word	0x080082b0
 8005ecc:	08008270 	.word	0x08008270

08005ed0 <__swsetup_r>:
 8005ed0:	4b32      	ldr	r3, [pc, #200]	; (8005f9c <__swsetup_r+0xcc>)
 8005ed2:	b570      	push	{r4, r5, r6, lr}
 8005ed4:	681d      	ldr	r5, [r3, #0]
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	460c      	mov	r4, r1
 8005eda:	b125      	cbz	r5, 8005ee6 <__swsetup_r+0x16>
 8005edc:	69ab      	ldr	r3, [r5, #24]
 8005ede:	b913      	cbnz	r3, 8005ee6 <__swsetup_r+0x16>
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 fff9 	bl	8006ed8 <__sinit>
 8005ee6:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <__swsetup_r+0xd0>)
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	d10f      	bne.n	8005f0c <__swsetup_r+0x3c>
 8005eec:	686c      	ldr	r4, [r5, #4]
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ef4:	0719      	lsls	r1, r3, #28
 8005ef6:	d42c      	bmi.n	8005f52 <__swsetup_r+0x82>
 8005ef8:	06dd      	lsls	r5, r3, #27
 8005efa:	d411      	bmi.n	8005f20 <__swsetup_r+0x50>
 8005efc:	2309      	movs	r3, #9
 8005efe:	6033      	str	r3, [r6, #0]
 8005f00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0a:	e03e      	b.n	8005f8a <__swsetup_r+0xba>
 8005f0c:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <__swsetup_r+0xd4>)
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	d101      	bne.n	8005f16 <__swsetup_r+0x46>
 8005f12:	68ac      	ldr	r4, [r5, #8]
 8005f14:	e7eb      	b.n	8005eee <__swsetup_r+0x1e>
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <__swsetup_r+0xd8>)
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	bf08      	it	eq
 8005f1c:	68ec      	ldreq	r4, [r5, #12]
 8005f1e:	e7e6      	b.n	8005eee <__swsetup_r+0x1e>
 8005f20:	0758      	lsls	r0, r3, #29
 8005f22:	d512      	bpl.n	8005f4a <__swsetup_r+0x7a>
 8005f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f26:	b141      	cbz	r1, 8005f3a <__swsetup_r+0x6a>
 8005f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d002      	beq.n	8005f36 <__swsetup_r+0x66>
 8005f30:	4630      	mov	r0, r6
 8005f32:	f001 fc8b 	bl	800784c <_free_r>
 8005f36:	2300      	movs	r3, #0
 8005f38:	6363      	str	r3, [r4, #52]	; 0x34
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	2300      	movs	r3, #0
 8005f44:	6063      	str	r3, [r4, #4]
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	89a3      	ldrh	r3, [r4, #12]
 8005f4c:	f043 0308 	orr.w	r3, r3, #8
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	b94b      	cbnz	r3, 8005f6a <__swsetup_r+0x9a>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f60:	d003      	beq.n	8005f6a <__swsetup_r+0x9a>
 8005f62:	4621      	mov	r1, r4
 8005f64:	4630      	mov	r0, r6
 8005f66:	f001 f881 	bl	800706c <__smakebuf_r>
 8005f6a:	89a0      	ldrh	r0, [r4, #12]
 8005f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f70:	f010 0301 	ands.w	r3, r0, #1
 8005f74:	d00a      	beq.n	8005f8c <__swsetup_r+0xbc>
 8005f76:	2300      	movs	r3, #0
 8005f78:	60a3      	str	r3, [r4, #8]
 8005f7a:	6963      	ldr	r3, [r4, #20]
 8005f7c:	425b      	negs	r3, r3
 8005f7e:	61a3      	str	r3, [r4, #24]
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	b943      	cbnz	r3, 8005f96 <__swsetup_r+0xc6>
 8005f84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f88:	d1ba      	bne.n	8005f00 <__swsetup_r+0x30>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	0781      	lsls	r1, r0, #30
 8005f8e:	bf58      	it	pl
 8005f90:	6963      	ldrpl	r3, [r4, #20]
 8005f92:	60a3      	str	r3, [r4, #8]
 8005f94:	e7f4      	b.n	8005f80 <__swsetup_r+0xb0>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e7f7      	b.n	8005f8a <__swsetup_r+0xba>
 8005f9a:	bf00      	nop
 8005f9c:	2000000c 	.word	0x2000000c
 8005fa0:	08008290 	.word	0x08008290
 8005fa4:	080082b0 	.word	0x080082b0
 8005fa8:	08008270 	.word	0x08008270

08005fac <quorem>:
 8005fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	6903      	ldr	r3, [r0, #16]
 8005fb2:	690c      	ldr	r4, [r1, #16]
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	f2c0 8081 	blt.w	80060be <quorem+0x112>
 8005fbc:	3c01      	subs	r4, #1
 8005fbe:	f101 0814 	add.w	r8, r1, #20
 8005fc2:	f100 0514 	add.w	r5, r0, #20
 8005fc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fe0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fe4:	d331      	bcc.n	800604a <quorem+0x9e>
 8005fe6:	f04f 0e00 	mov.w	lr, #0
 8005fea:	4640      	mov	r0, r8
 8005fec:	46ac      	mov	ip, r5
 8005fee:	46f2      	mov	sl, lr
 8005ff0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ff4:	b293      	uxth	r3, r2
 8005ff6:	fb06 e303 	mla	r3, r6, r3, lr
 8005ffa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	ebaa 0303 	sub.w	r3, sl, r3
 8006004:	f8dc a000 	ldr.w	sl, [ip]
 8006008:	0c12      	lsrs	r2, r2, #16
 800600a:	fa13 f38a 	uxtah	r3, r3, sl
 800600e:	fb06 e202 	mla	r2, r6, r2, lr
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800601a:	b292      	uxth	r2, r2
 800601c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006024:	f8bd 3000 	ldrh.w	r3, [sp]
 8006028:	4581      	cmp	r9, r0
 800602a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800602e:	f84c 3b04 	str.w	r3, [ip], #4
 8006032:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006036:	d2db      	bcs.n	8005ff0 <quorem+0x44>
 8006038:	f855 300b 	ldr.w	r3, [r5, fp]
 800603c:	b92b      	cbnz	r3, 800604a <quorem+0x9e>
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	3b04      	subs	r3, #4
 8006042:	429d      	cmp	r5, r3
 8006044:	461a      	mov	r2, r3
 8006046:	d32e      	bcc.n	80060a6 <quorem+0xfa>
 8006048:	613c      	str	r4, [r7, #16]
 800604a:	4638      	mov	r0, r7
 800604c:	f001 fae6 	bl	800761c <__mcmp>
 8006050:	2800      	cmp	r0, #0
 8006052:	db24      	blt.n	800609e <quorem+0xf2>
 8006054:	3601      	adds	r6, #1
 8006056:	4628      	mov	r0, r5
 8006058:	f04f 0c00 	mov.w	ip, #0
 800605c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006060:	f8d0 e000 	ldr.w	lr, [r0]
 8006064:	b293      	uxth	r3, r2
 8006066:	ebac 0303 	sub.w	r3, ip, r3
 800606a:	0c12      	lsrs	r2, r2, #16
 800606c:	fa13 f38e 	uxtah	r3, r3, lr
 8006070:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006078:	b29b      	uxth	r3, r3
 800607a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800607e:	45c1      	cmp	r9, r8
 8006080:	f840 3b04 	str.w	r3, [r0], #4
 8006084:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006088:	d2e8      	bcs.n	800605c <quorem+0xb0>
 800608a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800608e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006092:	b922      	cbnz	r2, 800609e <quorem+0xf2>
 8006094:	3b04      	subs	r3, #4
 8006096:	429d      	cmp	r5, r3
 8006098:	461a      	mov	r2, r3
 800609a:	d30a      	bcc.n	80060b2 <quorem+0x106>
 800609c:	613c      	str	r4, [r7, #16]
 800609e:	4630      	mov	r0, r6
 80060a0:	b003      	add	sp, #12
 80060a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	3b04      	subs	r3, #4
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	d1cc      	bne.n	8006048 <quorem+0x9c>
 80060ae:	3c01      	subs	r4, #1
 80060b0:	e7c7      	b.n	8006042 <quorem+0x96>
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	3b04      	subs	r3, #4
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	d1f0      	bne.n	800609c <quorem+0xf0>
 80060ba:	3c01      	subs	r4, #1
 80060bc:	e7eb      	b.n	8006096 <quorem+0xea>
 80060be:	2000      	movs	r0, #0
 80060c0:	e7ee      	b.n	80060a0 <quorem+0xf4>
 80060c2:	0000      	movs	r0, r0
 80060c4:	0000      	movs	r0, r0
	...

080060c8 <_dtoa_r>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	ed2d 8b04 	vpush	{d8-d9}
 80060d0:	ec57 6b10 	vmov	r6, r7, d0
 80060d4:	b093      	sub	sp, #76	; 0x4c
 80060d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060dc:	9106      	str	r1, [sp, #24]
 80060de:	ee10 aa10 	vmov	sl, s0
 80060e2:	4604      	mov	r4, r0
 80060e4:	9209      	str	r2, [sp, #36]	; 0x24
 80060e6:	930c      	str	r3, [sp, #48]	; 0x30
 80060e8:	46bb      	mov	fp, r7
 80060ea:	b975      	cbnz	r5, 800610a <_dtoa_r+0x42>
 80060ec:	2010      	movs	r0, #16
 80060ee:	f000 fffd 	bl	80070ec <malloc>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6260      	str	r0, [r4, #36]	; 0x24
 80060f6:	b920      	cbnz	r0, 8006102 <_dtoa_r+0x3a>
 80060f8:	4ba7      	ldr	r3, [pc, #668]	; (8006398 <_dtoa_r+0x2d0>)
 80060fa:	21ea      	movs	r1, #234	; 0xea
 80060fc:	48a7      	ldr	r0, [pc, #668]	; (800639c <_dtoa_r+0x2d4>)
 80060fe:	f001 fe45 	bl	8007d8c <__assert_func>
 8006102:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006106:	6005      	str	r5, [r0, #0]
 8006108:	60c5      	str	r5, [r0, #12]
 800610a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	b151      	cbz	r1, 8006126 <_dtoa_r+0x5e>
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	604a      	str	r2, [r1, #4]
 8006114:	2301      	movs	r3, #1
 8006116:	4093      	lsls	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
 800611a:	4620      	mov	r0, r4
 800611c:	f001 f83c 	bl	8007198 <_Bfree>
 8006120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	1e3b      	subs	r3, r7, #0
 8006128:	bfaa      	itet	ge
 800612a:	2300      	movge	r3, #0
 800612c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006130:	f8c8 3000 	strge.w	r3, [r8]
 8006134:	4b9a      	ldr	r3, [pc, #616]	; (80063a0 <_dtoa_r+0x2d8>)
 8006136:	bfbc      	itt	lt
 8006138:	2201      	movlt	r2, #1
 800613a:	f8c8 2000 	strlt.w	r2, [r8]
 800613e:	ea33 030b 	bics.w	r3, r3, fp
 8006142:	d11b      	bne.n	800617c <_dtoa_r+0xb4>
 8006144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006146:	f242 730f 	movw	r3, #9999	; 0x270f
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006150:	4333      	orrs	r3, r6
 8006152:	f000 8592 	beq.w	8006c7a <_dtoa_r+0xbb2>
 8006156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006158:	b963      	cbnz	r3, 8006174 <_dtoa_r+0xac>
 800615a:	4b92      	ldr	r3, [pc, #584]	; (80063a4 <_dtoa_r+0x2dc>)
 800615c:	e022      	b.n	80061a4 <_dtoa_r+0xdc>
 800615e:	4b92      	ldr	r3, [pc, #584]	; (80063a8 <_dtoa_r+0x2e0>)
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	3308      	adds	r3, #8
 8006164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	9801      	ldr	r0, [sp, #4]
 800616a:	b013      	add	sp, #76	; 0x4c
 800616c:	ecbd 8b04 	vpop	{d8-d9}
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006174:	4b8b      	ldr	r3, [pc, #556]	; (80063a4 <_dtoa_r+0x2dc>)
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	3303      	adds	r3, #3
 800617a:	e7f3      	b.n	8006164 <_dtoa_r+0x9c>
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	4650      	mov	r0, sl
 8006182:	4659      	mov	r1, fp
 8006184:	f7fa fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006188:	ec4b ab19 	vmov	d9, sl, fp
 800618c:	4680      	mov	r8, r0
 800618e:	b158      	cbz	r0, 80061a8 <_dtoa_r+0xe0>
 8006190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006192:	2301      	movs	r3, #1
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 856b 	beq.w	8006c74 <_dtoa_r+0xbac>
 800619e:	4883      	ldr	r0, [pc, #524]	; (80063ac <_dtoa_r+0x2e4>)
 80061a0:	6018      	str	r0, [r3, #0]
 80061a2:	1e43      	subs	r3, r0, #1
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	e7df      	b.n	8006168 <_dtoa_r+0xa0>
 80061a8:	ec4b ab10 	vmov	d0, sl, fp
 80061ac:	aa10      	add	r2, sp, #64	; 0x40
 80061ae:	a911      	add	r1, sp, #68	; 0x44
 80061b0:	4620      	mov	r0, r4
 80061b2:	f001 fad9 	bl	8007768 <__d2b>
 80061b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80061ba:	ee08 0a10 	vmov	s16, r0
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 8084 	beq.w	80062cc <_dtoa_r+0x204>
 80061c4:	ee19 3a90 	vmov	r3, s19
 80061c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061d0:	4656      	mov	r6, sl
 80061d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80061de:	4b74      	ldr	r3, [pc, #464]	; (80063b0 <_dtoa_r+0x2e8>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa f84f 	bl	8000288 <__aeabi_dsub>
 80061ea:	a365      	add	r3, pc, #404	; (adr r3, 8006380 <_dtoa_r+0x2b8>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa fa02 	bl	80005f8 <__aeabi_dmul>
 80061f4:	a364      	add	r3, pc, #400	; (adr r3, 8006388 <_dtoa_r+0x2c0>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa f847 	bl	800028c <__adddf3>
 80061fe:	4606      	mov	r6, r0
 8006200:	4628      	mov	r0, r5
 8006202:	460f      	mov	r7, r1
 8006204:	f7fa f98e 	bl	8000524 <__aeabi_i2d>
 8006208:	a361      	add	r3, pc, #388	; (adr r3, 8006390 <_dtoa_r+0x2c8>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa f9f3 	bl	80005f8 <__aeabi_dmul>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa f837 	bl	800028c <__adddf3>
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	f7fa fc99 	bl	8000b58 <__aeabi_d2iz>
 8006226:	2200      	movs	r2, #0
 8006228:	9000      	str	r0, [sp, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	f7fa fc54 	bl	8000adc <__aeabi_dcmplt>
 8006234:	b150      	cbz	r0, 800624c <_dtoa_r+0x184>
 8006236:	9800      	ldr	r0, [sp, #0]
 8006238:	f7fa f974 	bl	8000524 <__aeabi_i2d>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	f7fa fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006244:	b910      	cbnz	r0, 800624c <_dtoa_r+0x184>
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	2b16      	cmp	r3, #22
 8006250:	d85a      	bhi.n	8006308 <_dtoa_r+0x240>
 8006252:	9a00      	ldr	r2, [sp, #0]
 8006254:	4b57      	ldr	r3, [pc, #348]	; (80063b4 <_dtoa_r+0x2ec>)
 8006256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	ec51 0b19 	vmov	r0, r1, d9
 8006262:	f7fa fc3b 	bl	8000adc <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	d050      	beq.n	800630c <_dtoa_r+0x244>
 800626a:	9b00      	ldr	r3, [sp, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	930b      	str	r3, [sp, #44]	; 0x2c
 8006274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006276:	1b5d      	subs	r5, r3, r5
 8006278:	1e6b      	subs	r3, r5, #1
 800627a:	9305      	str	r3, [sp, #20]
 800627c:	bf45      	ittet	mi
 800627e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006282:	9304      	strmi	r3, [sp, #16]
 8006284:	2300      	movpl	r3, #0
 8006286:	2300      	movmi	r3, #0
 8006288:	bf4c      	ite	mi
 800628a:	9305      	strmi	r3, [sp, #20]
 800628c:	9304      	strpl	r3, [sp, #16]
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	db3d      	blt.n	8006310 <_dtoa_r+0x248>
 8006294:	9b05      	ldr	r3, [sp, #20]
 8006296:	9a00      	ldr	r2, [sp, #0]
 8006298:	920a      	str	r2, [sp, #40]	; 0x28
 800629a:	4413      	add	r3, r2
 800629c:	9305      	str	r3, [sp, #20]
 800629e:	2300      	movs	r3, #0
 80062a0:	9307      	str	r3, [sp, #28]
 80062a2:	9b06      	ldr	r3, [sp, #24]
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	f200 8089 	bhi.w	80063bc <_dtoa_r+0x2f4>
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	bfc4      	itt	gt
 80062ae:	3b04      	subgt	r3, #4
 80062b0:	9306      	strgt	r3, [sp, #24]
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	f1a3 0302 	sub.w	r3, r3, #2
 80062b8:	bfcc      	ite	gt
 80062ba:	2500      	movgt	r5, #0
 80062bc:	2501      	movle	r5, #1
 80062be:	2b03      	cmp	r3, #3
 80062c0:	f200 8087 	bhi.w	80063d2 <_dtoa_r+0x30a>
 80062c4:	e8df f003 	tbb	[pc, r3]
 80062c8:	59383a2d 	.word	0x59383a2d
 80062cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80062d0:	441d      	add	r5, r3
 80062d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	bfc1      	itttt	gt
 80062da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80062e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062ea:	bfda      	itte	le
 80062ec:	f1c3 0320 	rsble	r3, r3, #32
 80062f0:	fa06 f003 	lslle.w	r0, r6, r3
 80062f4:	4318      	orrgt	r0, r3
 80062f6:	f7fa f905 	bl	8000504 <__aeabi_ui2d>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4606      	mov	r6, r0
 80062fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006302:	3d01      	subs	r5, #1
 8006304:	930e      	str	r3, [sp, #56]	; 0x38
 8006306:	e76a      	b.n	80061de <_dtoa_r+0x116>
 8006308:	2301      	movs	r3, #1
 800630a:	e7b2      	b.n	8006272 <_dtoa_r+0x1aa>
 800630c:	900b      	str	r0, [sp, #44]	; 0x2c
 800630e:	e7b1      	b.n	8006274 <_dtoa_r+0x1ac>
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	9a00      	ldr	r2, [sp, #0]
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	9304      	str	r3, [sp, #16]
 8006318:	4253      	negs	r3, r2
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	2300      	movs	r3, #0
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	e7bf      	b.n	80062a2 <_dtoa_r+0x1da>
 8006322:	2300      	movs	r3, #0
 8006324:	9308      	str	r3, [sp, #32]
 8006326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	dc55      	bgt.n	80063d8 <_dtoa_r+0x310>
 800632c:	2301      	movs	r3, #1
 800632e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006332:	461a      	mov	r2, r3
 8006334:	9209      	str	r2, [sp, #36]	; 0x24
 8006336:	e00c      	b.n	8006352 <_dtoa_r+0x28a>
 8006338:	2301      	movs	r3, #1
 800633a:	e7f3      	b.n	8006324 <_dtoa_r+0x25c>
 800633c:	2300      	movs	r3, #0
 800633e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006340:	9308      	str	r3, [sp, #32]
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	4413      	add	r3, r2
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	9303      	str	r3, [sp, #12]
 800634e:	bfb8      	it	lt
 8006350:	2301      	movlt	r3, #1
 8006352:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006354:	2200      	movs	r2, #0
 8006356:	6042      	str	r2, [r0, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	f102 0614 	add.w	r6, r2, #20
 800635e:	429e      	cmp	r6, r3
 8006360:	6841      	ldr	r1, [r0, #4]
 8006362:	d93d      	bls.n	80063e0 <_dtoa_r+0x318>
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fed7 	bl	8007118 <_Balloc>
 800636a:	9001      	str	r0, [sp, #4]
 800636c:	2800      	cmp	r0, #0
 800636e:	d13b      	bne.n	80063e8 <_dtoa_r+0x320>
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <_dtoa_r+0x2f0>)
 8006372:	4602      	mov	r2, r0
 8006374:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006378:	e6c0      	b.n	80060fc <_dtoa_r+0x34>
 800637a:	2301      	movs	r3, #1
 800637c:	e7df      	b.n	800633e <_dtoa_r+0x276>
 800637e:	bf00      	nop
 8006380:	636f4361 	.word	0x636f4361
 8006384:	3fd287a7 	.word	0x3fd287a7
 8006388:	8b60c8b3 	.word	0x8b60c8b3
 800638c:	3fc68a28 	.word	0x3fc68a28
 8006390:	509f79fb 	.word	0x509f79fb
 8006394:	3fd34413 	.word	0x3fd34413
 8006398:	080081ed 	.word	0x080081ed
 800639c:	08008204 	.word	0x08008204
 80063a0:	7ff00000 	.word	0x7ff00000
 80063a4:	080081e9 	.word	0x080081e9
 80063a8:	080081e0 	.word	0x080081e0
 80063ac:	080081bd 	.word	0x080081bd
 80063b0:	3ff80000 	.word	0x3ff80000
 80063b4:	08008358 	.word	0x08008358
 80063b8:	0800825f 	.word	0x0800825f
 80063bc:	2501      	movs	r5, #1
 80063be:	2300      	movs	r3, #0
 80063c0:	9306      	str	r3, [sp, #24]
 80063c2:	9508      	str	r5, [sp, #32]
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2312      	movs	r3, #18
 80063d0:	e7b0      	b.n	8006334 <_dtoa_r+0x26c>
 80063d2:	2301      	movs	r3, #1
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	e7f5      	b.n	80063c4 <_dtoa_r+0x2fc>
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063de:	e7b8      	b.n	8006352 <_dtoa_r+0x28a>
 80063e0:	3101      	adds	r1, #1
 80063e2:	6041      	str	r1, [r0, #4]
 80063e4:	0052      	lsls	r2, r2, #1
 80063e6:	e7b8      	b.n	800635a <_dtoa_r+0x292>
 80063e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ea:	9a01      	ldr	r2, [sp, #4]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	2b0e      	cmp	r3, #14
 80063f2:	f200 809d 	bhi.w	8006530 <_dtoa_r+0x468>
 80063f6:	2d00      	cmp	r5, #0
 80063f8:	f000 809a 	beq.w	8006530 <_dtoa_r+0x468>
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd32      	ble.n	8006468 <_dtoa_r+0x3a0>
 8006402:	4ab7      	ldr	r2, [pc, #732]	; (80066e0 <_dtoa_r+0x618>)
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800640c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006410:	9b00      	ldr	r3, [sp, #0]
 8006412:	05d8      	lsls	r0, r3, #23
 8006414:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006418:	d516      	bpl.n	8006448 <_dtoa_r+0x380>
 800641a:	4bb2      	ldr	r3, [pc, #712]	; (80066e4 <_dtoa_r+0x61c>)
 800641c:	ec51 0b19 	vmov	r0, r1, d9
 8006420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006424:	f7fa fa12 	bl	800084c <__aeabi_ddiv>
 8006428:	f007 070f 	and.w	r7, r7, #15
 800642c:	4682      	mov	sl, r0
 800642e:	468b      	mov	fp, r1
 8006430:	2503      	movs	r5, #3
 8006432:	4eac      	ldr	r6, [pc, #688]	; (80066e4 <_dtoa_r+0x61c>)
 8006434:	b957      	cbnz	r7, 800644c <_dtoa_r+0x384>
 8006436:	4642      	mov	r2, r8
 8006438:	464b      	mov	r3, r9
 800643a:	4650      	mov	r0, sl
 800643c:	4659      	mov	r1, fp
 800643e:	f7fa fa05 	bl	800084c <__aeabi_ddiv>
 8006442:	4682      	mov	sl, r0
 8006444:	468b      	mov	fp, r1
 8006446:	e028      	b.n	800649a <_dtoa_r+0x3d2>
 8006448:	2502      	movs	r5, #2
 800644a:	e7f2      	b.n	8006432 <_dtoa_r+0x36a>
 800644c:	07f9      	lsls	r1, r7, #31
 800644e:	d508      	bpl.n	8006462 <_dtoa_r+0x39a>
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006458:	f7fa f8ce 	bl	80005f8 <__aeabi_dmul>
 800645c:	3501      	adds	r5, #1
 800645e:	4680      	mov	r8, r0
 8006460:	4689      	mov	r9, r1
 8006462:	107f      	asrs	r7, r7, #1
 8006464:	3608      	adds	r6, #8
 8006466:	e7e5      	b.n	8006434 <_dtoa_r+0x36c>
 8006468:	f000 809b 	beq.w	80065a2 <_dtoa_r+0x4da>
 800646c:	9b00      	ldr	r3, [sp, #0]
 800646e:	4f9d      	ldr	r7, [pc, #628]	; (80066e4 <_dtoa_r+0x61c>)
 8006470:	425e      	negs	r6, r3
 8006472:	4b9b      	ldr	r3, [pc, #620]	; (80066e0 <_dtoa_r+0x618>)
 8006474:	f006 020f 	and.w	r2, r6, #15
 8006478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	ec51 0b19 	vmov	r0, r1, d9
 8006484:	f7fa f8b8 	bl	80005f8 <__aeabi_dmul>
 8006488:	1136      	asrs	r6, r6, #4
 800648a:	4682      	mov	sl, r0
 800648c:	468b      	mov	fp, r1
 800648e:	2300      	movs	r3, #0
 8006490:	2502      	movs	r5, #2
 8006492:	2e00      	cmp	r6, #0
 8006494:	d17a      	bne.n	800658c <_dtoa_r+0x4c4>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1d3      	bne.n	8006442 <_dtoa_r+0x37a>
 800649a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8082 	beq.w	80065a6 <_dtoa_r+0x4de>
 80064a2:	4b91      	ldr	r3, [pc, #580]	; (80066e8 <_dtoa_r+0x620>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	4650      	mov	r0, sl
 80064a8:	4659      	mov	r1, fp
 80064aa:	f7fa fb17 	bl	8000adc <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d079      	beq.n	80065a6 <_dtoa_r+0x4de>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d076      	beq.n	80065a6 <_dtoa_r+0x4de>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd36      	ble.n	800652c <_dtoa_r+0x464>
 80064be:	9b00      	ldr	r3, [sp, #0]
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	1e5f      	subs	r7, r3, #1
 80064c6:	2200      	movs	r2, #0
 80064c8:	4b88      	ldr	r3, [pc, #544]	; (80066ec <_dtoa_r+0x624>)
 80064ca:	f7fa f895 	bl	80005f8 <__aeabi_dmul>
 80064ce:	9e02      	ldr	r6, [sp, #8]
 80064d0:	4682      	mov	sl, r0
 80064d2:	468b      	mov	fp, r1
 80064d4:	3501      	adds	r5, #1
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7fa f824 	bl	8000524 <__aeabi_i2d>
 80064dc:	4652      	mov	r2, sl
 80064de:	465b      	mov	r3, fp
 80064e0:	f7fa f88a 	bl	80005f8 <__aeabi_dmul>
 80064e4:	4b82      	ldr	r3, [pc, #520]	; (80066f0 <_dtoa_r+0x628>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	f7f9 fed0 	bl	800028c <__adddf3>
 80064ec:	46d0      	mov	r8, sl
 80064ee:	46d9      	mov	r9, fp
 80064f0:	4682      	mov	sl, r0
 80064f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	d158      	bne.n	80065ac <_dtoa_r+0x4e4>
 80064fa:	4b7e      	ldr	r3, [pc, #504]	; (80066f4 <_dtoa_r+0x62c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7f9 fec1 	bl	8000288 <__aeabi_dsub>
 8006506:	4652      	mov	r2, sl
 8006508:	465b      	mov	r3, fp
 800650a:	4680      	mov	r8, r0
 800650c:	4689      	mov	r9, r1
 800650e:	f7fa fb03 	bl	8000b18 <__aeabi_dcmpgt>
 8006512:	2800      	cmp	r0, #0
 8006514:	f040 8295 	bne.w	8006a42 <_dtoa_r+0x97a>
 8006518:	4652      	mov	r2, sl
 800651a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800651e:	4640      	mov	r0, r8
 8006520:	4649      	mov	r1, r9
 8006522:	f7fa fadb 	bl	8000adc <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8289 	bne.w	8006a3e <_dtoa_r+0x976>
 800652c:	ec5b ab19 	vmov	sl, fp, d9
 8006530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006532:	2b00      	cmp	r3, #0
 8006534:	f2c0 8148 	blt.w	80067c8 <_dtoa_r+0x700>
 8006538:	9a00      	ldr	r2, [sp, #0]
 800653a:	2a0e      	cmp	r2, #14
 800653c:	f300 8144 	bgt.w	80067c8 <_dtoa_r+0x700>
 8006540:	4b67      	ldr	r3, [pc, #412]	; (80066e0 <_dtoa_r+0x618>)
 8006542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006546:	e9d3 8900 	ldrd	r8, r9, [r3]
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	f280 80d5 	bge.w	80066fc <_dtoa_r+0x634>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f300 80d1 	bgt.w	80066fc <_dtoa_r+0x634>
 800655a:	f040 826f 	bne.w	8006a3c <_dtoa_r+0x974>
 800655e:	4b65      	ldr	r3, [pc, #404]	; (80066f4 <_dtoa_r+0x62c>)
 8006560:	2200      	movs	r2, #0
 8006562:	4640      	mov	r0, r8
 8006564:	4649      	mov	r1, r9
 8006566:	f7fa f847 	bl	80005f8 <__aeabi_dmul>
 800656a:	4652      	mov	r2, sl
 800656c:	465b      	mov	r3, fp
 800656e:	f7fa fac9 	bl	8000b04 <__aeabi_dcmpge>
 8006572:	9e03      	ldr	r6, [sp, #12]
 8006574:	4637      	mov	r7, r6
 8006576:	2800      	cmp	r0, #0
 8006578:	f040 8245 	bne.w	8006a06 <_dtoa_r+0x93e>
 800657c:	9d01      	ldr	r5, [sp, #4]
 800657e:	2331      	movs	r3, #49	; 0x31
 8006580:	f805 3b01 	strb.w	r3, [r5], #1
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	3301      	adds	r3, #1
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	e240      	b.n	8006a0e <_dtoa_r+0x946>
 800658c:	07f2      	lsls	r2, r6, #31
 800658e:	d505      	bpl.n	800659c <_dtoa_r+0x4d4>
 8006590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006594:	f7fa f830 	bl	80005f8 <__aeabi_dmul>
 8006598:	3501      	adds	r5, #1
 800659a:	2301      	movs	r3, #1
 800659c:	1076      	asrs	r6, r6, #1
 800659e:	3708      	adds	r7, #8
 80065a0:	e777      	b.n	8006492 <_dtoa_r+0x3ca>
 80065a2:	2502      	movs	r5, #2
 80065a4:	e779      	b.n	800649a <_dtoa_r+0x3d2>
 80065a6:	9f00      	ldr	r7, [sp, #0]
 80065a8:	9e03      	ldr	r6, [sp, #12]
 80065aa:	e794      	b.n	80064d6 <_dtoa_r+0x40e>
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <_dtoa_r+0x618>)
 80065b0:	4431      	add	r1, r6
 80065b2:	910d      	str	r1, [sp, #52]	; 0x34
 80065b4:	9908      	ldr	r1, [sp, #32]
 80065b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065be:	2900      	cmp	r1, #0
 80065c0:	d043      	beq.n	800664a <_dtoa_r+0x582>
 80065c2:	494d      	ldr	r1, [pc, #308]	; (80066f8 <_dtoa_r+0x630>)
 80065c4:	2000      	movs	r0, #0
 80065c6:	f7fa f941 	bl	800084c <__aeabi_ddiv>
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f7f9 fe5b 	bl	8000288 <__aeabi_dsub>
 80065d2:	9d01      	ldr	r5, [sp, #4]
 80065d4:	4682      	mov	sl, r0
 80065d6:	468b      	mov	fp, r1
 80065d8:	4649      	mov	r1, r9
 80065da:	4640      	mov	r0, r8
 80065dc:	f7fa fabc 	bl	8000b58 <__aeabi_d2iz>
 80065e0:	4606      	mov	r6, r0
 80065e2:	f7f9 ff9f 	bl	8000524 <__aeabi_i2d>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7f9 fe4b 	bl	8000288 <__aeabi_dsub>
 80065f2:	3630      	adds	r6, #48	; 0x30
 80065f4:	f805 6b01 	strb.w	r6, [r5], #1
 80065f8:	4652      	mov	r2, sl
 80065fa:	465b      	mov	r3, fp
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	f7fa fa6c 	bl	8000adc <__aeabi_dcmplt>
 8006604:	2800      	cmp	r0, #0
 8006606:	d163      	bne.n	80066d0 <_dtoa_r+0x608>
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	4936      	ldr	r1, [pc, #216]	; (80066e8 <_dtoa_r+0x620>)
 800660e:	2000      	movs	r0, #0
 8006610:	f7f9 fe3a 	bl	8000288 <__aeabi_dsub>
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	f7fa fa60 	bl	8000adc <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 80b5 	bne.w	800678c <_dtoa_r+0x6c4>
 8006622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006624:	429d      	cmp	r5, r3
 8006626:	d081      	beq.n	800652c <_dtoa_r+0x464>
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <_dtoa_r+0x624>)
 800662a:	2200      	movs	r2, #0
 800662c:	4650      	mov	r0, sl
 800662e:	4659      	mov	r1, fp
 8006630:	f7f9 ffe2 	bl	80005f8 <__aeabi_dmul>
 8006634:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <_dtoa_r+0x624>)
 8006636:	4682      	mov	sl, r0
 8006638:	468b      	mov	fp, r1
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	2200      	movs	r2, #0
 8006640:	f7f9 ffda 	bl	80005f8 <__aeabi_dmul>
 8006644:	4680      	mov	r8, r0
 8006646:	4689      	mov	r9, r1
 8006648:	e7c6      	b.n	80065d8 <_dtoa_r+0x510>
 800664a:	4650      	mov	r0, sl
 800664c:	4659      	mov	r1, fp
 800664e:	f7f9 ffd3 	bl	80005f8 <__aeabi_dmul>
 8006652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006654:	9d01      	ldr	r5, [sp, #4]
 8006656:	930f      	str	r3, [sp, #60]	; 0x3c
 8006658:	4682      	mov	sl, r0
 800665a:	468b      	mov	fp, r1
 800665c:	4649      	mov	r1, r9
 800665e:	4640      	mov	r0, r8
 8006660:	f7fa fa7a 	bl	8000b58 <__aeabi_d2iz>
 8006664:	4606      	mov	r6, r0
 8006666:	f7f9 ff5d 	bl	8000524 <__aeabi_i2d>
 800666a:	3630      	adds	r6, #48	; 0x30
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7f9 fe08 	bl	8000288 <__aeabi_dsub>
 8006678:	f805 6b01 	strb.w	r6, [r5], #1
 800667c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800667e:	429d      	cmp	r5, r3
 8006680:	4680      	mov	r8, r0
 8006682:	4689      	mov	r9, r1
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	d124      	bne.n	80066d4 <_dtoa_r+0x60c>
 800668a:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <_dtoa_r+0x630>)
 800668c:	4650      	mov	r0, sl
 800668e:	4659      	mov	r1, fp
 8006690:	f7f9 fdfc 	bl	800028c <__adddf3>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4640      	mov	r0, r8
 800669a:	4649      	mov	r1, r9
 800669c:	f7fa fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d173      	bne.n	800678c <_dtoa_r+0x6c4>
 80066a4:	4652      	mov	r2, sl
 80066a6:	465b      	mov	r3, fp
 80066a8:	4913      	ldr	r1, [pc, #76]	; (80066f8 <_dtoa_r+0x630>)
 80066aa:	2000      	movs	r0, #0
 80066ac:	f7f9 fdec 	bl	8000288 <__aeabi_dsub>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	f7fa fa10 	bl	8000adc <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	f43f af35 	beq.w	800652c <_dtoa_r+0x464>
 80066c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066c4:	1e6b      	subs	r3, r5, #1
 80066c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d0f8      	beq.n	80066c2 <_dtoa_r+0x5fa>
 80066d0:	9700      	str	r7, [sp, #0]
 80066d2:	e049      	b.n	8006768 <_dtoa_r+0x6a0>
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <_dtoa_r+0x624>)
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	4680      	mov	r8, r0
 80066dc:	4689      	mov	r9, r1
 80066de:	e7bd      	b.n	800665c <_dtoa_r+0x594>
 80066e0:	08008358 	.word	0x08008358
 80066e4:	08008330 	.word	0x08008330
 80066e8:	3ff00000 	.word	0x3ff00000
 80066ec:	40240000 	.word	0x40240000
 80066f0:	401c0000 	.word	0x401c0000
 80066f4:	40140000 	.word	0x40140000
 80066f8:	3fe00000 	.word	0x3fe00000
 80066fc:	9d01      	ldr	r5, [sp, #4]
 80066fe:	4656      	mov	r6, sl
 8006700:	465f      	mov	r7, fp
 8006702:	4642      	mov	r2, r8
 8006704:	464b      	mov	r3, r9
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa f89f 	bl	800084c <__aeabi_ddiv>
 800670e:	f7fa fa23 	bl	8000b58 <__aeabi_d2iz>
 8006712:	4682      	mov	sl, r0
 8006714:	f7f9 ff06 	bl	8000524 <__aeabi_i2d>
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	f7f9 ff6c 	bl	80005f8 <__aeabi_dmul>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	f805 6b01 	strb.w	r6, [r5], #1
 8006734:	9e01      	ldr	r6, [sp, #4]
 8006736:	9f03      	ldr	r7, [sp, #12]
 8006738:	1bae      	subs	r6, r5, r6
 800673a:	42b7      	cmp	r7, r6
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	d135      	bne.n	80067ae <_dtoa_r+0x6e6>
 8006742:	f7f9 fda3 	bl	800028c <__adddf3>
 8006746:	4642      	mov	r2, r8
 8006748:	464b      	mov	r3, r9
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	f7fa f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 8006752:	b9d0      	cbnz	r0, 800678a <_dtoa_r+0x6c2>
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006760:	b110      	cbz	r0, 8006768 <_dtoa_r+0x6a0>
 8006762:	f01a 0f01 	tst.w	sl, #1
 8006766:	d110      	bne.n	800678a <_dtoa_r+0x6c2>
 8006768:	4620      	mov	r0, r4
 800676a:	ee18 1a10 	vmov	r1, s16
 800676e:	f000 fd13 	bl	8007198 <_Bfree>
 8006772:	2300      	movs	r3, #0
 8006774:	9800      	ldr	r0, [sp, #0]
 8006776:	702b      	strb	r3, [r5, #0]
 8006778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800677a:	3001      	adds	r0, #1
 800677c:	6018      	str	r0, [r3, #0]
 800677e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006780:	2b00      	cmp	r3, #0
 8006782:	f43f acf1 	beq.w	8006168 <_dtoa_r+0xa0>
 8006786:	601d      	str	r5, [r3, #0]
 8006788:	e4ee      	b.n	8006168 <_dtoa_r+0xa0>
 800678a:	9f00      	ldr	r7, [sp, #0]
 800678c:	462b      	mov	r3, r5
 800678e:	461d      	mov	r5, r3
 8006790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006794:	2a39      	cmp	r2, #57	; 0x39
 8006796:	d106      	bne.n	80067a6 <_dtoa_r+0x6de>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d1f7      	bne.n	800678e <_dtoa_r+0x6c6>
 800679e:	9901      	ldr	r1, [sp, #4]
 80067a0:	2230      	movs	r2, #48	; 0x30
 80067a2:	3701      	adds	r7, #1
 80067a4:	700a      	strb	r2, [r1, #0]
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	3201      	adds	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e790      	b.n	80066d0 <_dtoa_r+0x608>
 80067ae:	4ba6      	ldr	r3, [pc, #664]	; (8006a48 <_dtoa_r+0x980>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	4606      	mov	r6, r0
 80067bc:	460f      	mov	r7, r1
 80067be:	f7fa f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d09d      	beq.n	8006702 <_dtoa_r+0x63a>
 80067c6:	e7cf      	b.n	8006768 <_dtoa_r+0x6a0>
 80067c8:	9a08      	ldr	r2, [sp, #32]
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	f000 80d7 	beq.w	800697e <_dtoa_r+0x8b6>
 80067d0:	9a06      	ldr	r2, [sp, #24]
 80067d2:	2a01      	cmp	r2, #1
 80067d4:	f300 80ba 	bgt.w	800694c <_dtoa_r+0x884>
 80067d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067da:	2a00      	cmp	r2, #0
 80067dc:	f000 80b2 	beq.w	8006944 <_dtoa_r+0x87c>
 80067e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067e4:	9e07      	ldr	r6, [sp, #28]
 80067e6:	9d04      	ldr	r5, [sp, #16]
 80067e8:	9a04      	ldr	r2, [sp, #16]
 80067ea:	441a      	add	r2, r3
 80067ec:	9204      	str	r2, [sp, #16]
 80067ee:	9a05      	ldr	r2, [sp, #20]
 80067f0:	2101      	movs	r1, #1
 80067f2:	441a      	add	r2, r3
 80067f4:	4620      	mov	r0, r4
 80067f6:	9205      	str	r2, [sp, #20]
 80067f8:	f000 fd86 	bl	8007308 <__i2b>
 80067fc:	4607      	mov	r7, r0
 80067fe:	2d00      	cmp	r5, #0
 8006800:	dd0c      	ble.n	800681c <_dtoa_r+0x754>
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dd09      	ble.n	800681c <_dtoa_r+0x754>
 8006808:	42ab      	cmp	r3, r5
 800680a:	9a04      	ldr	r2, [sp, #16]
 800680c:	bfa8      	it	ge
 800680e:	462b      	movge	r3, r5
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	9204      	str	r2, [sp, #16]
 8006814:	9a05      	ldr	r2, [sp, #20]
 8006816:	1aed      	subs	r5, r5, r3
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	b31b      	cbz	r3, 8006868 <_dtoa_r+0x7a0>
 8006820:	9b08      	ldr	r3, [sp, #32]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80af 	beq.w	8006986 <_dtoa_r+0x8be>
 8006828:	2e00      	cmp	r6, #0
 800682a:	dd13      	ble.n	8006854 <_dtoa_r+0x78c>
 800682c:	4639      	mov	r1, r7
 800682e:	4632      	mov	r2, r6
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fe29 	bl	8007488 <__pow5mult>
 8006836:	ee18 2a10 	vmov	r2, s16
 800683a:	4601      	mov	r1, r0
 800683c:	4607      	mov	r7, r0
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fd78 	bl	8007334 <__multiply>
 8006844:	ee18 1a10 	vmov	r1, s16
 8006848:	4680      	mov	r8, r0
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fca4 	bl	8007198 <_Bfree>
 8006850:	ee08 8a10 	vmov	s16, r8
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	1b9a      	subs	r2, r3, r6
 8006858:	d006      	beq.n	8006868 <_dtoa_r+0x7a0>
 800685a:	ee18 1a10 	vmov	r1, s16
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fe12 	bl	8007488 <__pow5mult>
 8006864:	ee08 0a10 	vmov	s16, r0
 8006868:	2101      	movs	r1, #1
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fd4c 	bl	8007308 <__i2b>
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	4606      	mov	r6, r0
 8006876:	f340 8088 	ble.w	800698a <_dtoa_r+0x8c2>
 800687a:	461a      	mov	r2, r3
 800687c:	4601      	mov	r1, r0
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fe02 	bl	8007488 <__pow5mult>
 8006884:	9b06      	ldr	r3, [sp, #24]
 8006886:	2b01      	cmp	r3, #1
 8006888:	4606      	mov	r6, r0
 800688a:	f340 8081 	ble.w	8006990 <_dtoa_r+0x8c8>
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	6933      	ldr	r3, [r6, #16]
 8006894:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	f000 fce5 	bl	8007268 <__hi0bits>
 800689e:	f1c0 0020 	rsb	r0, r0, #32
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	4418      	add	r0, r3
 80068a6:	f010 001f 	ands.w	r0, r0, #31
 80068aa:	f000 8092 	beq.w	80069d2 <_dtoa_r+0x90a>
 80068ae:	f1c0 0320 	rsb	r3, r0, #32
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	f340 808a 	ble.w	80069cc <_dtoa_r+0x904>
 80068b8:	f1c0 001c 	rsb	r0, r0, #28
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	4403      	add	r3, r0
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	9b05      	ldr	r3, [sp, #20]
 80068c4:	4403      	add	r3, r0
 80068c6:	4405      	add	r5, r0
 80068c8:	9305      	str	r3, [sp, #20]
 80068ca:	9b04      	ldr	r3, [sp, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dd07      	ble.n	80068e0 <_dtoa_r+0x818>
 80068d0:	ee18 1a10 	vmov	r1, s16
 80068d4:	461a      	mov	r2, r3
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fe30 	bl	800753c <__lshift>
 80068dc:	ee08 0a10 	vmov	s16, r0
 80068e0:	9b05      	ldr	r3, [sp, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dd05      	ble.n	80068f2 <_dtoa_r+0x82a>
 80068e6:	4631      	mov	r1, r6
 80068e8:	461a      	mov	r2, r3
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fe26 	bl	800753c <__lshift>
 80068f0:	4606      	mov	r6, r0
 80068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d06e      	beq.n	80069d6 <_dtoa_r+0x90e>
 80068f8:	ee18 0a10 	vmov	r0, s16
 80068fc:	4631      	mov	r1, r6
 80068fe:	f000 fe8d 	bl	800761c <__mcmp>
 8006902:	2800      	cmp	r0, #0
 8006904:	da67      	bge.n	80069d6 <_dtoa_r+0x90e>
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	3b01      	subs	r3, #1
 800690a:	ee18 1a10 	vmov	r1, s16
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	220a      	movs	r2, #10
 8006912:	2300      	movs	r3, #0
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fc61 	bl	80071dc <__multadd>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	ee08 0a10 	vmov	s16, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 81b1 	beq.w	8006c88 <_dtoa_r+0xbc0>
 8006926:	2300      	movs	r3, #0
 8006928:	4639      	mov	r1, r7
 800692a:	220a      	movs	r2, #10
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fc55 	bl	80071dc <__multadd>
 8006932:	9b02      	ldr	r3, [sp, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	4607      	mov	r7, r0
 8006938:	f300 808e 	bgt.w	8006a58 <_dtoa_r+0x990>
 800693c:	9b06      	ldr	r3, [sp, #24]
 800693e:	2b02      	cmp	r3, #2
 8006940:	dc51      	bgt.n	80069e6 <_dtoa_r+0x91e>
 8006942:	e089      	b.n	8006a58 <_dtoa_r+0x990>
 8006944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800694a:	e74b      	b.n	80067e4 <_dtoa_r+0x71c>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	1e5e      	subs	r6, r3, #1
 8006950:	9b07      	ldr	r3, [sp, #28]
 8006952:	42b3      	cmp	r3, r6
 8006954:	bfbf      	itttt	lt
 8006956:	9b07      	ldrlt	r3, [sp, #28]
 8006958:	9607      	strlt	r6, [sp, #28]
 800695a:	1af2      	sublt	r2, r6, r3
 800695c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800695e:	bfb6      	itet	lt
 8006960:	189b      	addlt	r3, r3, r2
 8006962:	1b9e      	subge	r6, r3, r6
 8006964:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	bfb8      	it	lt
 800696a:	2600      	movlt	r6, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	bfb7      	itett	lt
 8006970:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006974:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006978:	1a9d      	sublt	r5, r3, r2
 800697a:	2300      	movlt	r3, #0
 800697c:	e734      	b.n	80067e8 <_dtoa_r+0x720>
 800697e:	9e07      	ldr	r6, [sp, #28]
 8006980:	9d04      	ldr	r5, [sp, #16]
 8006982:	9f08      	ldr	r7, [sp, #32]
 8006984:	e73b      	b.n	80067fe <_dtoa_r+0x736>
 8006986:	9a07      	ldr	r2, [sp, #28]
 8006988:	e767      	b.n	800685a <_dtoa_r+0x792>
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	2b01      	cmp	r3, #1
 800698e:	dc18      	bgt.n	80069c2 <_dtoa_r+0x8fa>
 8006990:	f1ba 0f00 	cmp.w	sl, #0
 8006994:	d115      	bne.n	80069c2 <_dtoa_r+0x8fa>
 8006996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800699a:	b993      	cbnz	r3, 80069c2 <_dtoa_r+0x8fa>
 800699c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	051b      	lsls	r3, r3, #20
 80069a4:	b183      	cbz	r3, 80069c8 <_dtoa_r+0x900>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	9b05      	ldr	r3, [sp, #20]
 80069ae:	3301      	adds	r3, #1
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	f04f 0801 	mov.w	r8, #1
 80069b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f af6a 	bne.w	8006892 <_dtoa_r+0x7ca>
 80069be:	2001      	movs	r0, #1
 80069c0:	e76f      	b.n	80068a2 <_dtoa_r+0x7da>
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	e7f6      	b.n	80069b6 <_dtoa_r+0x8ee>
 80069c8:	4698      	mov	r8, r3
 80069ca:	e7f4      	b.n	80069b6 <_dtoa_r+0x8ee>
 80069cc:	f43f af7d 	beq.w	80068ca <_dtoa_r+0x802>
 80069d0:	4618      	mov	r0, r3
 80069d2:	301c      	adds	r0, #28
 80069d4:	e772      	b.n	80068bc <_dtoa_r+0x7f4>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc37      	bgt.n	8006a4c <_dtoa_r+0x984>
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	dd34      	ble.n	8006a4c <_dtoa_r+0x984>
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	9302      	str	r3, [sp, #8]
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	b96b      	cbnz	r3, 8006a06 <_dtoa_r+0x93e>
 80069ea:	4631      	mov	r1, r6
 80069ec:	2205      	movs	r2, #5
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fbf4 	bl	80071dc <__multadd>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4606      	mov	r6, r0
 80069f8:	ee18 0a10 	vmov	r0, s16
 80069fc:	f000 fe0e 	bl	800761c <__mcmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f73f adbb 	bgt.w	800657c <_dtoa_r+0x4b4>
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	9d01      	ldr	r5, [sp, #4]
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	4631      	mov	r1, r6
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 fbbf 	bl	8007198 <_Bfree>
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	f43f aea4 	beq.w	8006768 <_dtoa_r+0x6a0>
 8006a20:	f1b8 0f00 	cmp.w	r8, #0
 8006a24:	d005      	beq.n	8006a32 <_dtoa_r+0x96a>
 8006a26:	45b8      	cmp	r8, r7
 8006a28:	d003      	beq.n	8006a32 <_dtoa_r+0x96a>
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 fbb3 	bl	8007198 <_Bfree>
 8006a32:	4639      	mov	r1, r7
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fbaf 	bl	8007198 <_Bfree>
 8006a3a:	e695      	b.n	8006768 <_dtoa_r+0x6a0>
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	4637      	mov	r7, r6
 8006a40:	e7e1      	b.n	8006a06 <_dtoa_r+0x93e>
 8006a42:	9700      	str	r7, [sp, #0]
 8006a44:	4637      	mov	r7, r6
 8006a46:	e599      	b.n	800657c <_dtoa_r+0x4b4>
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80ca 	beq.w	8006be8 <_dtoa_r+0xb20>
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	9302      	str	r3, [sp, #8]
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	dd05      	ble.n	8006a68 <_dtoa_r+0x9a0>
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	462a      	mov	r2, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fd6b 	bl	800753c <__lshift>
 8006a66:	4607      	mov	r7, r0
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	d05b      	beq.n	8006b26 <_dtoa_r+0xa5e>
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fb51 	bl	8007118 <_Balloc>
 8006a76:	4605      	mov	r5, r0
 8006a78:	b928      	cbnz	r0, 8006a86 <_dtoa_r+0x9be>
 8006a7a:	4b87      	ldr	r3, [pc, #540]	; (8006c98 <_dtoa_r+0xbd0>)
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a82:	f7ff bb3b 	b.w	80060fc <_dtoa_r+0x34>
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	3202      	adds	r2, #2
 8006a8a:	0092      	lsls	r2, r2, #2
 8006a8c:	f107 010c 	add.w	r1, r7, #12
 8006a90:	300c      	adds	r0, #12
 8006a92:	f000 fb33 	bl	80070fc <memcpy>
 8006a96:	2201      	movs	r2, #1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fd4e 	bl	800753c <__lshift>
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	f103 0901 	add.w	r9, r3, #1
 8006aa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	9305      	str	r3, [sp, #20]
 8006aae:	f00a 0301 	and.w	r3, sl, #1
 8006ab2:	46b8      	mov	r8, r7
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	4631      	mov	r1, r6
 8006aba:	ee18 0a10 	vmov	r0, s16
 8006abe:	f7ff fa75 	bl	8005fac <quorem>
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	9002      	str	r0, [sp, #8]
 8006ac6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006aca:	ee18 0a10 	vmov	r0, s16
 8006ace:	f000 fda5 	bl	800761c <__mcmp>
 8006ad2:	463a      	mov	r2, r7
 8006ad4:	9003      	str	r0, [sp, #12]
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fdbb 	bl	8007654 <__mdiff>
 8006ade:	68c2      	ldr	r2, [r0, #12]
 8006ae0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	bb02      	cbnz	r2, 8006b2a <_dtoa_r+0xa62>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	ee18 0a10 	vmov	r0, s16
 8006aee:	f000 fd95 	bl	800761c <__mcmp>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4629      	mov	r1, r5
 8006af6:	4620      	mov	r0, r4
 8006af8:	9207      	str	r2, [sp, #28]
 8006afa:	f000 fb4d 	bl	8007198 <_Bfree>
 8006afe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b02:	ea43 0102 	orr.w	r1, r3, r2
 8006b06:	9b04      	ldr	r3, [sp, #16]
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	464d      	mov	r5, r9
 8006b0c:	d10f      	bne.n	8006b2e <_dtoa_r+0xa66>
 8006b0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b12:	d02a      	beq.n	8006b6a <_dtoa_r+0xaa2>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd02      	ble.n	8006b20 <_dtoa_r+0xa58>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b20:	f88b a000 	strb.w	sl, [fp]
 8006b24:	e775      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b26:	4638      	mov	r0, r7
 8006b28:	e7ba      	b.n	8006aa0 <_dtoa_r+0x9d8>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	e7e2      	b.n	8006af4 <_dtoa_r+0xa2c>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	db04      	blt.n	8006b3e <_dtoa_r+0xa76>
 8006b34:	9906      	ldr	r1, [sp, #24]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	9904      	ldr	r1, [sp, #16]
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	d122      	bne.n	8006b84 <_dtoa_r+0xabc>
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	ddee      	ble.n	8006b20 <_dtoa_r+0xa58>
 8006b42:	ee18 1a10 	vmov	r1, s16
 8006b46:	2201      	movs	r2, #1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fcf7 	bl	800753c <__lshift>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	ee08 0a10 	vmov	s16, r0
 8006b54:	f000 fd62 	bl	800761c <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	dc03      	bgt.n	8006b64 <_dtoa_r+0xa9c>
 8006b5c:	d1e0      	bne.n	8006b20 <_dtoa_r+0xa58>
 8006b5e:	f01a 0f01 	tst.w	sl, #1
 8006b62:	d0dd      	beq.n	8006b20 <_dtoa_r+0xa58>
 8006b64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b68:	d1d7      	bne.n	8006b1a <_dtoa_r+0xa52>
 8006b6a:	2339      	movs	r3, #57	; 0x39
 8006b6c:	f88b 3000 	strb.w	r3, [fp]
 8006b70:	462b      	mov	r3, r5
 8006b72:	461d      	mov	r5, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b7a:	2a39      	cmp	r2, #57	; 0x39
 8006b7c:	d071      	beq.n	8006c62 <_dtoa_r+0xb9a>
 8006b7e:	3201      	adds	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e746      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	dd07      	ble.n	8006b98 <_dtoa_r+0xad0>
 8006b88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b8c:	d0ed      	beq.n	8006b6a <_dtoa_r+0xaa2>
 8006b8e:	f10a 0301 	add.w	r3, sl, #1
 8006b92:	f88b 3000 	strb.w	r3, [fp]
 8006b96:	e73c      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b9e:	4599      	cmp	r9, r3
 8006ba0:	d047      	beq.n	8006c32 <_dtoa_r+0xb6a>
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	220a      	movs	r2, #10
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 fb16 	bl	80071dc <__multadd>
 8006bb0:	45b8      	cmp	r8, r7
 8006bb2:	ee08 0a10 	vmov	s16, r0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f04f 020a 	mov.w	r2, #10
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	d106      	bne.n	8006bd2 <_dtoa_r+0xb0a>
 8006bc4:	f000 fb0a 	bl	80071dc <__multadd>
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4607      	mov	r7, r0
 8006bcc:	f109 0901 	add.w	r9, r9, #1
 8006bd0:	e772      	b.n	8006ab8 <_dtoa_r+0x9f0>
 8006bd2:	f000 fb03 	bl	80071dc <__multadd>
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4680      	mov	r8, r0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	220a      	movs	r2, #10
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 fafc 	bl	80071dc <__multadd>
 8006be4:	4607      	mov	r7, r0
 8006be6:	e7f1      	b.n	8006bcc <_dtoa_r+0xb04>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	9d01      	ldr	r5, [sp, #4]
 8006bee:	ee18 0a10 	vmov	r0, s16
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	f7ff f9da 	bl	8005fac <quorem>
 8006bf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	f805 ab01 	strb.w	sl, [r5], #1
 8006c02:	1aea      	subs	r2, r5, r3
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	4293      	cmp	r3, r2
 8006c08:	dd09      	ble.n	8006c1e <_dtoa_r+0xb56>
 8006c0a:	ee18 1a10 	vmov	r1, s16
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fae2 	bl	80071dc <__multadd>
 8006c18:	ee08 0a10 	vmov	s16, r0
 8006c1c:	e7e7      	b.n	8006bee <_dtoa_r+0xb26>
 8006c1e:	9b02      	ldr	r3, [sp, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfc8      	it	gt
 8006c24:	461d      	movgt	r5, r3
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	bfd8      	it	le
 8006c2a:	2501      	movle	r5, #1
 8006c2c:	441d      	add	r5, r3
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	2201      	movs	r2, #1
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fc7f 	bl	800753c <__lshift>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	ee08 0a10 	vmov	s16, r0
 8006c44:	f000 fcea 	bl	800761c <__mcmp>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	dc91      	bgt.n	8006b70 <_dtoa_r+0xaa8>
 8006c4c:	d102      	bne.n	8006c54 <_dtoa_r+0xb8c>
 8006c4e:	f01a 0f01 	tst.w	sl, #1
 8006c52:	d18d      	bne.n	8006b70 <_dtoa_r+0xaa8>
 8006c54:	462b      	mov	r3, r5
 8006c56:	461d      	mov	r5, r3
 8006c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5c:	2a30      	cmp	r2, #48	; 0x30
 8006c5e:	d0fa      	beq.n	8006c56 <_dtoa_r+0xb8e>
 8006c60:	e6d7      	b.n	8006a12 <_dtoa_r+0x94a>
 8006c62:	9a01      	ldr	r2, [sp, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d184      	bne.n	8006b72 <_dtoa_r+0xaaa>
 8006c68:	9b00      	ldr	r3, [sp, #0]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	2331      	movs	r3, #49	; 0x31
 8006c70:	7013      	strb	r3, [r2, #0]
 8006c72:	e6ce      	b.n	8006a12 <_dtoa_r+0x94a>
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <_dtoa_r+0xbd4>)
 8006c76:	f7ff ba95 	b.w	80061a4 <_dtoa_r+0xdc>
 8006c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f47f aa6e 	bne.w	800615e <_dtoa_r+0x96>
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <_dtoa_r+0xbd8>)
 8006c84:	f7ff ba8e 	b.w	80061a4 <_dtoa_r+0xdc>
 8006c88:	9b02      	ldr	r3, [sp, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dcae      	bgt.n	8006bec <_dtoa_r+0xb24>
 8006c8e:	9b06      	ldr	r3, [sp, #24]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	f73f aea8 	bgt.w	80069e6 <_dtoa_r+0x91e>
 8006c96:	e7a9      	b.n	8006bec <_dtoa_r+0xb24>
 8006c98:	0800825f 	.word	0x0800825f
 8006c9c:	080081bc 	.word	0x080081bc
 8006ca0:	080081e0 	.word	0x080081e0

08006ca4 <__sflush_r>:
 8006ca4:	898a      	ldrh	r2, [r1, #12]
 8006ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006caa:	4605      	mov	r5, r0
 8006cac:	0710      	lsls	r0, r2, #28
 8006cae:	460c      	mov	r4, r1
 8006cb0:	d458      	bmi.n	8006d64 <__sflush_r+0xc0>
 8006cb2:	684b      	ldr	r3, [r1, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc05      	bgt.n	8006cc4 <__sflush_r+0x20>
 8006cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dc02      	bgt.n	8006cc4 <__sflush_r+0x20>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d0f9      	beq.n	8006cbe <__sflush_r+0x1a>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cd0:	682f      	ldr	r7, [r5, #0]
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	d032      	beq.n	8006d3c <__sflush_r+0x98>
 8006cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	075a      	lsls	r2, r3, #29
 8006cdc:	d505      	bpl.n	8006cea <__sflush_r+0x46>
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	1ac0      	subs	r0, r0, r3
 8006ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce4:	b10b      	cbz	r3, 8006cea <__sflush_r+0x46>
 8006ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce8:	1ac0      	subs	r0, r0, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	4602      	mov	r2, r0
 8006cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf0:	6a21      	ldr	r1, [r4, #32]
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b0      	blx	r6
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	d106      	bne.n	8006d0a <__sflush_r+0x66>
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	291d      	cmp	r1, #29
 8006d00:	d82c      	bhi.n	8006d5c <__sflush_r+0xb8>
 8006d02:	4a2a      	ldr	r2, [pc, #168]	; (8006dac <__sflush_r+0x108>)
 8006d04:	40ca      	lsrs	r2, r1
 8006d06:	07d6      	lsls	r6, r2, #31
 8006d08:	d528      	bpl.n	8006d5c <__sflush_r+0xb8>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	04d9      	lsls	r1, r3, #19
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	d504      	bpl.n	8006d20 <__sflush_r+0x7c>
 8006d16:	1c42      	adds	r2, r0, #1
 8006d18:	d101      	bne.n	8006d1e <__sflush_r+0x7a>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b903      	cbnz	r3, 8006d20 <__sflush_r+0x7c>
 8006d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d22:	602f      	str	r7, [r5, #0]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d0ca      	beq.n	8006cbe <__sflush_r+0x1a>
 8006d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <__sflush_r+0x92>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 fd8b 	bl	800784c <_free_r>
 8006d36:	2000      	movs	r0, #0
 8006d38:	6360      	str	r0, [r4, #52]	; 0x34
 8006d3a:	e7c1      	b.n	8006cc0 <__sflush_r+0x1c>
 8006d3c:	6a21      	ldr	r1, [r4, #32]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b0      	blx	r6
 8006d44:	1c41      	adds	r1, r0, #1
 8006d46:	d1c7      	bne.n	8006cd8 <__sflush_r+0x34>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c4      	beq.n	8006cd8 <__sflush_r+0x34>
 8006d4e:	2b1d      	cmp	r3, #29
 8006d50:	d001      	beq.n	8006d56 <__sflush_r+0xb2>
 8006d52:	2b16      	cmp	r3, #22
 8006d54:	d101      	bne.n	8006d5a <__sflush_r+0xb6>
 8006d56:	602f      	str	r7, [r5, #0]
 8006d58:	e7b1      	b.n	8006cbe <__sflush_r+0x1a>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	e7ad      	b.n	8006cc0 <__sflush_r+0x1c>
 8006d64:	690f      	ldr	r7, [r1, #16]
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	d0a9      	beq.n	8006cbe <__sflush_r+0x1a>
 8006d6a:	0793      	lsls	r3, r2, #30
 8006d6c:	680e      	ldr	r6, [r1, #0]
 8006d6e:	bf08      	it	eq
 8006d70:	694b      	ldreq	r3, [r1, #20]
 8006d72:	600f      	str	r7, [r1, #0]
 8006d74:	bf18      	it	ne
 8006d76:	2300      	movne	r3, #0
 8006d78:	eba6 0807 	sub.w	r8, r6, r7
 8006d7c:	608b      	str	r3, [r1, #8]
 8006d7e:	f1b8 0f00 	cmp.w	r8, #0
 8006d82:	dd9c      	ble.n	8006cbe <__sflush_r+0x1a>
 8006d84:	6a21      	ldr	r1, [r4, #32]
 8006d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d88:	4643      	mov	r3, r8
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b0      	blx	r6
 8006d90:	2800      	cmp	r0, #0
 8006d92:	dc06      	bgt.n	8006da2 <__sflush_r+0xfe>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	e78e      	b.n	8006cc0 <__sflush_r+0x1c>
 8006da2:	4407      	add	r7, r0
 8006da4:	eba8 0800 	sub.w	r8, r8, r0
 8006da8:	e7e9      	b.n	8006d7e <__sflush_r+0xda>
 8006daa:	bf00      	nop
 8006dac:	20400001 	.word	0x20400001

08006db0 <_fflush_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	690b      	ldr	r3, [r1, #16]
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	b913      	cbnz	r3, 8006dc0 <_fflush_r+0x10>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	b118      	cbz	r0, 8006dca <_fflush_r+0x1a>
 8006dc2:	6983      	ldr	r3, [r0, #24]
 8006dc4:	b90b      	cbnz	r3, 8006dca <_fflush_r+0x1a>
 8006dc6:	f000 f887 	bl	8006ed8 <__sinit>
 8006dca:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <_fflush_r+0x6c>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	d11b      	bne.n	8006e08 <_fflush_r+0x58>
 8006dd0:	686c      	ldr	r4, [r5, #4]
 8006dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0ef      	beq.n	8006dba <_fflush_r+0xa>
 8006dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ddc:	07d0      	lsls	r0, r2, #31
 8006dde:	d404      	bmi.n	8006dea <_fflush_r+0x3a>
 8006de0:	0599      	lsls	r1, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_fflush_r+0x3a>
 8006de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de6:	f000 f91a 	bl	800701e <__retarget_lock_acquire_recursive>
 8006dea:	4628      	mov	r0, r5
 8006dec:	4621      	mov	r1, r4
 8006dee:	f7ff ff59 	bl	8006ca4 <__sflush_r>
 8006df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df4:	07da      	lsls	r2, r3, #31
 8006df6:	4605      	mov	r5, r0
 8006df8:	d4e0      	bmi.n	8006dbc <_fflush_r+0xc>
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	059b      	lsls	r3, r3, #22
 8006dfe:	d4dd      	bmi.n	8006dbc <_fflush_r+0xc>
 8006e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e02:	f000 f90d 	bl	8007020 <__retarget_lock_release_recursive>
 8006e06:	e7d9      	b.n	8006dbc <_fflush_r+0xc>
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <_fflush_r+0x70>)
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d101      	bne.n	8006e12 <_fflush_r+0x62>
 8006e0e:	68ac      	ldr	r4, [r5, #8]
 8006e10:	e7df      	b.n	8006dd2 <_fflush_r+0x22>
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <_fflush_r+0x74>)
 8006e14:	429c      	cmp	r4, r3
 8006e16:	bf08      	it	eq
 8006e18:	68ec      	ldreq	r4, [r5, #12]
 8006e1a:	e7da      	b.n	8006dd2 <_fflush_r+0x22>
 8006e1c:	08008290 	.word	0x08008290
 8006e20:	080082b0 	.word	0x080082b0
 8006e24:	08008270 	.word	0x08008270

08006e28 <std>:
 8006e28:	2300      	movs	r3, #0
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e36:	6083      	str	r3, [r0, #8]
 8006e38:	8181      	strh	r1, [r0, #12]
 8006e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e3c:	81c2      	strh	r2, [r0, #14]
 8006e3e:	6183      	str	r3, [r0, #24]
 8006e40:	4619      	mov	r1, r3
 8006e42:	2208      	movs	r2, #8
 8006e44:	305c      	adds	r0, #92	; 0x5c
 8006e46:	f7fe faf1 	bl	800542c <memset>
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <std+0x38>)
 8006e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <std+0x3c>)
 8006e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std+0x40>)
 8006e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std+0x44>)
 8006e58:	6224      	str	r4, [r4, #32]
 8006e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	bf00      	nop
 8006e60:	08007ce1 	.word	0x08007ce1
 8006e64:	08007d03 	.word	0x08007d03
 8006e68:	08007d3b 	.word	0x08007d3b
 8006e6c:	08007d5f 	.word	0x08007d5f

08006e70 <_cleanup_r>:
 8006e70:	4901      	ldr	r1, [pc, #4]	; (8006e78 <_cleanup_r+0x8>)
 8006e72:	f000 b8af 	b.w	8006fd4 <_fwalk_reent>
 8006e76:	bf00      	nop
 8006e78:	08006db1 	.word	0x08006db1

08006e7c <__sfmoreglue>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	2268      	movs	r2, #104	; 0x68
 8006e80:	1e4d      	subs	r5, r1, #1
 8006e82:	4355      	muls	r5, r2
 8006e84:	460e      	mov	r6, r1
 8006e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e8a:	f000 fd4b 	bl	8007924 <_malloc_r>
 8006e8e:	4604      	mov	r4, r0
 8006e90:	b140      	cbz	r0, 8006ea4 <__sfmoreglue+0x28>
 8006e92:	2100      	movs	r1, #0
 8006e94:	e9c0 1600 	strd	r1, r6, [r0]
 8006e98:	300c      	adds	r0, #12
 8006e9a:	60a0      	str	r0, [r4, #8]
 8006e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ea0:	f7fe fac4 	bl	800542c <memset>
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}

08006ea8 <__sfp_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__sfp_lock_acquire+0x8>)
 8006eaa:	f000 b8b8 	b.w	800701e <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	200002f5 	.word	0x200002f5

08006eb4 <__sfp_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sfp_lock_release+0x8>)
 8006eb6:	f000 b8b3 	b.w	8007020 <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	200002f5 	.word	0x200002f5

08006ec0 <__sinit_lock_acquire>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__sinit_lock_acquire+0x8>)
 8006ec2:	f000 b8ac 	b.w	800701e <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	200002f6 	.word	0x200002f6

08006ecc <__sinit_lock_release>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sinit_lock_release+0x8>)
 8006ece:	f000 b8a7 	b.w	8007020 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	200002f6 	.word	0x200002f6

08006ed8 <__sinit>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	4604      	mov	r4, r0
 8006edc:	f7ff fff0 	bl	8006ec0 <__sinit_lock_acquire>
 8006ee0:	69a3      	ldr	r3, [r4, #24]
 8006ee2:	b11b      	cbz	r3, 8006eec <__sinit+0x14>
 8006ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee8:	f7ff bff0 	b.w	8006ecc <__sinit_lock_release>
 8006eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ef2:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <__sinit+0x68>)
 8006ef4:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <__sinit+0x6c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	bf04      	itt	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	61a3      	streq	r3, [r4, #24]
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 f820 	bl	8006f48 <__sfp>
 8006f08:	6060      	str	r0, [r4, #4]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f81c 	bl	8006f48 <__sfp>
 8006f10:	60a0      	str	r0, [r4, #8]
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 f818 	bl	8006f48 <__sfp>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	60e0      	str	r0, [r4, #12]
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	6860      	ldr	r0, [r4, #4]
 8006f20:	f7ff ff82 	bl	8006e28 <std>
 8006f24:	68a0      	ldr	r0, [r4, #8]
 8006f26:	2201      	movs	r2, #1
 8006f28:	2109      	movs	r1, #9
 8006f2a:	f7ff ff7d 	bl	8006e28 <std>
 8006f2e:	68e0      	ldr	r0, [r4, #12]
 8006f30:	2202      	movs	r2, #2
 8006f32:	2112      	movs	r1, #18
 8006f34:	f7ff ff78 	bl	8006e28 <std>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	61a3      	str	r3, [r4, #24]
 8006f3c:	e7d2      	b.n	8006ee4 <__sinit+0xc>
 8006f3e:	bf00      	nop
 8006f40:	080081a8 	.word	0x080081a8
 8006f44:	08006e71 	.word	0x08006e71

08006f48 <__sfp>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	f7ff ffac 	bl	8006ea8 <__sfp_lock_acquire>
 8006f50:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <__sfp+0x84>)
 8006f52:	681e      	ldr	r6, [r3, #0]
 8006f54:	69b3      	ldr	r3, [r6, #24]
 8006f56:	b913      	cbnz	r3, 8006f5e <__sfp+0x16>
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f7ff ffbd 	bl	8006ed8 <__sinit>
 8006f5e:	3648      	adds	r6, #72	; 0x48
 8006f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	d503      	bpl.n	8006f70 <__sfp+0x28>
 8006f68:	6833      	ldr	r3, [r6, #0]
 8006f6a:	b30b      	cbz	r3, 8006fb0 <__sfp+0x68>
 8006f6c:	6836      	ldr	r6, [r6, #0]
 8006f6e:	e7f7      	b.n	8006f60 <__sfp+0x18>
 8006f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f74:	b9d5      	cbnz	r5, 8006fac <__sfp+0x64>
 8006f76:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <__sfp+0x88>)
 8006f78:	60e3      	str	r3, [r4, #12]
 8006f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f80:	f000 f84c 	bl	800701c <__retarget_lock_init_recursive>
 8006f84:	f7ff ff96 	bl	8006eb4 <__sfp_lock_release>
 8006f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f90:	6025      	str	r5, [r4, #0]
 8006f92:	61a5      	str	r5, [r4, #24]
 8006f94:	2208      	movs	r2, #8
 8006f96:	4629      	mov	r1, r5
 8006f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f9c:	f7fe fa46 	bl	800542c <memset>
 8006fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fa8:	4620      	mov	r0, r4
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fac:	3468      	adds	r4, #104	; 0x68
 8006fae:	e7d9      	b.n	8006f64 <__sfp+0x1c>
 8006fb0:	2104      	movs	r1, #4
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7ff ff62 	bl	8006e7c <__sfmoreglue>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	6030      	str	r0, [r6, #0]
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d1d5      	bne.n	8006f6c <__sfp+0x24>
 8006fc0:	f7ff ff78 	bl	8006eb4 <__sfp_lock_release>
 8006fc4:	230c      	movs	r3, #12
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	e7ee      	b.n	8006fa8 <__sfp+0x60>
 8006fca:	bf00      	nop
 8006fcc:	080081a8 	.word	0x080081a8
 8006fd0:	ffff0001 	.word	0xffff0001

08006fd4 <_fwalk_reent>:
 8006fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd8:	4606      	mov	r6, r0
 8006fda:	4688      	mov	r8, r1
 8006fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fe0:	2700      	movs	r7, #0
 8006fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8006fea:	d505      	bpl.n	8006ff8 <_fwalk_reent+0x24>
 8006fec:	6824      	ldr	r4, [r4, #0]
 8006fee:	2c00      	cmp	r4, #0
 8006ff0:	d1f7      	bne.n	8006fe2 <_fwalk_reent+0xe>
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff8:	89ab      	ldrh	r3, [r5, #12]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d907      	bls.n	800700e <_fwalk_reent+0x3a>
 8006ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007002:	3301      	adds	r3, #1
 8007004:	d003      	beq.n	800700e <_fwalk_reent+0x3a>
 8007006:	4629      	mov	r1, r5
 8007008:	4630      	mov	r0, r6
 800700a:	47c0      	blx	r8
 800700c:	4307      	orrs	r7, r0
 800700e:	3568      	adds	r5, #104	; 0x68
 8007010:	e7e9      	b.n	8006fe6 <_fwalk_reent+0x12>
	...

08007014 <_localeconv_r>:
 8007014:	4800      	ldr	r0, [pc, #0]	; (8007018 <_localeconv_r+0x4>)
 8007016:	4770      	bx	lr
 8007018:	20000160 	.word	0x20000160

0800701c <__retarget_lock_init_recursive>:
 800701c:	4770      	bx	lr

0800701e <__retarget_lock_acquire_recursive>:
 800701e:	4770      	bx	lr

08007020 <__retarget_lock_release_recursive>:
 8007020:	4770      	bx	lr

08007022 <__swhatbuf_r>:
 8007022:	b570      	push	{r4, r5, r6, lr}
 8007024:	460e      	mov	r6, r1
 8007026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800702a:	2900      	cmp	r1, #0
 800702c:	b096      	sub	sp, #88	; 0x58
 800702e:	4614      	mov	r4, r2
 8007030:	461d      	mov	r5, r3
 8007032:	da08      	bge.n	8007046 <__swhatbuf_r+0x24>
 8007034:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	602a      	str	r2, [r5, #0]
 800703c:	061a      	lsls	r2, r3, #24
 800703e:	d410      	bmi.n	8007062 <__swhatbuf_r+0x40>
 8007040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007044:	e00e      	b.n	8007064 <__swhatbuf_r+0x42>
 8007046:	466a      	mov	r2, sp
 8007048:	f000 fee0 	bl	8007e0c <_fstat_r>
 800704c:	2800      	cmp	r0, #0
 800704e:	dbf1      	blt.n	8007034 <__swhatbuf_r+0x12>
 8007050:	9a01      	ldr	r2, [sp, #4]
 8007052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800705a:	425a      	negs	r2, r3
 800705c:	415a      	adcs	r2, r3
 800705e:	602a      	str	r2, [r5, #0]
 8007060:	e7ee      	b.n	8007040 <__swhatbuf_r+0x1e>
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	2000      	movs	r0, #0
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	b016      	add	sp, #88	; 0x58
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <__smakebuf_r>:
 800706c:	898b      	ldrh	r3, [r1, #12]
 800706e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007070:	079d      	lsls	r5, r3, #30
 8007072:	4606      	mov	r6, r0
 8007074:	460c      	mov	r4, r1
 8007076:	d507      	bpl.n	8007088 <__smakebuf_r+0x1c>
 8007078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	6123      	str	r3, [r4, #16]
 8007080:	2301      	movs	r3, #1
 8007082:	6163      	str	r3, [r4, #20]
 8007084:	b002      	add	sp, #8
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	ab01      	add	r3, sp, #4
 800708a:	466a      	mov	r2, sp
 800708c:	f7ff ffc9 	bl	8007022 <__swhatbuf_r>
 8007090:	9900      	ldr	r1, [sp, #0]
 8007092:	4605      	mov	r5, r0
 8007094:	4630      	mov	r0, r6
 8007096:	f000 fc45 	bl	8007924 <_malloc_r>
 800709a:	b948      	cbnz	r0, 80070b0 <__smakebuf_r+0x44>
 800709c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a0:	059a      	lsls	r2, r3, #22
 80070a2:	d4ef      	bmi.n	8007084 <__smakebuf_r+0x18>
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7e3      	b.n	8007078 <__smakebuf_r+0xc>
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <__smakebuf_r+0x7c>)
 80070b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	6020      	str	r0, [r4, #0]
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	6163      	str	r3, [r4, #20]
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	6120      	str	r0, [r4, #16]
 80070c6:	b15b      	cbz	r3, 80070e0 <__smakebuf_r+0x74>
 80070c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070cc:	4630      	mov	r0, r6
 80070ce:	f000 feaf 	bl	8007e30 <_isatty_r>
 80070d2:	b128      	cbz	r0, 80070e0 <__smakebuf_r+0x74>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	89a0      	ldrh	r0, [r4, #12]
 80070e2:	4305      	orrs	r5, r0
 80070e4:	81a5      	strh	r5, [r4, #12]
 80070e6:	e7cd      	b.n	8007084 <__smakebuf_r+0x18>
 80070e8:	08006e71 	.word	0x08006e71

080070ec <malloc>:
 80070ec:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <malloc+0xc>)
 80070ee:	4601      	mov	r1, r0
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	f000 bc17 	b.w	8007924 <_malloc_r>
 80070f6:	bf00      	nop
 80070f8:	2000000c 	.word	0x2000000c

080070fc <memcpy>:
 80070fc:	440a      	add	r2, r1
 80070fe:	4291      	cmp	r1, r2
 8007100:	f100 33ff 	add.w	r3, r0, #4294967295
 8007104:	d100      	bne.n	8007108 <memcpy+0xc>
 8007106:	4770      	bx	lr
 8007108:	b510      	push	{r4, lr}
 800710a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800710e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007112:	4291      	cmp	r1, r2
 8007114:	d1f9      	bne.n	800710a <memcpy+0xe>
 8007116:	bd10      	pop	{r4, pc}

08007118 <_Balloc>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	b976      	cbnz	r6, 8007140 <_Balloc+0x28>
 8007122:	2010      	movs	r0, #16
 8007124:	f7ff ffe2 	bl	80070ec <malloc>
 8007128:	4602      	mov	r2, r0
 800712a:	6260      	str	r0, [r4, #36]	; 0x24
 800712c:	b920      	cbnz	r0, 8007138 <_Balloc+0x20>
 800712e:	4b18      	ldr	r3, [pc, #96]	; (8007190 <_Balloc+0x78>)
 8007130:	4818      	ldr	r0, [pc, #96]	; (8007194 <_Balloc+0x7c>)
 8007132:	2166      	movs	r1, #102	; 0x66
 8007134:	f000 fe2a 	bl	8007d8c <__assert_func>
 8007138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800713c:	6006      	str	r6, [r0, #0]
 800713e:	60c6      	str	r6, [r0, #12]
 8007140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007142:	68f3      	ldr	r3, [r6, #12]
 8007144:	b183      	cbz	r3, 8007168 <_Balloc+0x50>
 8007146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800714e:	b9b8      	cbnz	r0, 8007180 <_Balloc+0x68>
 8007150:	2101      	movs	r1, #1
 8007152:	fa01 f605 	lsl.w	r6, r1, r5
 8007156:	1d72      	adds	r2, r6, #5
 8007158:	0092      	lsls	r2, r2, #2
 800715a:	4620      	mov	r0, r4
 800715c:	f000 fb60 	bl	8007820 <_calloc_r>
 8007160:	b160      	cbz	r0, 800717c <_Balloc+0x64>
 8007162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007166:	e00e      	b.n	8007186 <_Balloc+0x6e>
 8007168:	2221      	movs	r2, #33	; 0x21
 800716a:	2104      	movs	r1, #4
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fb57 	bl	8007820 <_calloc_r>
 8007172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007174:	60f0      	str	r0, [r6, #12]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e4      	bne.n	8007146 <_Balloc+0x2e>
 800717c:	2000      	movs	r0, #0
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	6802      	ldr	r2, [r0, #0]
 8007182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007186:	2300      	movs	r3, #0
 8007188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800718c:	e7f7      	b.n	800717e <_Balloc+0x66>
 800718e:	bf00      	nop
 8007190:	080081ed 	.word	0x080081ed
 8007194:	080082d0 	.word	0x080082d0

08007198 <_Bfree>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800719c:	4605      	mov	r5, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	b976      	cbnz	r6, 80071c0 <_Bfree+0x28>
 80071a2:	2010      	movs	r0, #16
 80071a4:	f7ff ffa2 	bl	80070ec <malloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6268      	str	r0, [r5, #36]	; 0x24
 80071ac:	b920      	cbnz	r0, 80071b8 <_Bfree+0x20>
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <_Bfree+0x3c>)
 80071b0:	4809      	ldr	r0, [pc, #36]	; (80071d8 <_Bfree+0x40>)
 80071b2:	218a      	movs	r1, #138	; 0x8a
 80071b4:	f000 fdea 	bl	8007d8c <__assert_func>
 80071b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071bc:	6006      	str	r6, [r0, #0]
 80071be:	60c6      	str	r6, [r0, #12]
 80071c0:	b13c      	cbz	r4, 80071d2 <_Bfree+0x3a>
 80071c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071c4:	6862      	ldr	r2, [r4, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071cc:	6021      	str	r1, [r4, #0]
 80071ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	080081ed 	.word	0x080081ed
 80071d8:	080082d0 	.word	0x080082d0

080071dc <__multadd>:
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	690d      	ldr	r5, [r1, #16]
 80071e2:	4607      	mov	r7, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	461e      	mov	r6, r3
 80071e8:	f101 0c14 	add.w	ip, r1, #20
 80071ec:	2000      	movs	r0, #0
 80071ee:	f8dc 3000 	ldr.w	r3, [ip]
 80071f2:	b299      	uxth	r1, r3
 80071f4:	fb02 6101 	mla	r1, r2, r1, r6
 80071f8:	0c1e      	lsrs	r6, r3, #16
 80071fa:	0c0b      	lsrs	r3, r1, #16
 80071fc:	fb02 3306 	mla	r3, r2, r6, r3
 8007200:	b289      	uxth	r1, r1
 8007202:	3001      	adds	r0, #1
 8007204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007208:	4285      	cmp	r5, r0
 800720a:	f84c 1b04 	str.w	r1, [ip], #4
 800720e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007212:	dcec      	bgt.n	80071ee <__multadd+0x12>
 8007214:	b30e      	cbz	r6, 800725a <__multadd+0x7e>
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	42ab      	cmp	r3, r5
 800721a:	dc19      	bgt.n	8007250 <__multadd+0x74>
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	4638      	mov	r0, r7
 8007220:	3101      	adds	r1, #1
 8007222:	f7ff ff79 	bl	8007118 <_Balloc>
 8007226:	4680      	mov	r8, r0
 8007228:	b928      	cbnz	r0, 8007236 <__multadd+0x5a>
 800722a:	4602      	mov	r2, r0
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <__multadd+0x84>)
 800722e:	480d      	ldr	r0, [pc, #52]	; (8007264 <__multadd+0x88>)
 8007230:	21b5      	movs	r1, #181	; 0xb5
 8007232:	f000 fdab 	bl	8007d8c <__assert_func>
 8007236:	6922      	ldr	r2, [r4, #16]
 8007238:	3202      	adds	r2, #2
 800723a:	f104 010c 	add.w	r1, r4, #12
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	300c      	adds	r0, #12
 8007242:	f7ff ff5b 	bl	80070fc <memcpy>
 8007246:	4621      	mov	r1, r4
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff ffa5 	bl	8007198 <_Bfree>
 800724e:	4644      	mov	r4, r8
 8007250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007254:	3501      	adds	r5, #1
 8007256:	615e      	str	r6, [r3, #20]
 8007258:	6125      	str	r5, [r4, #16]
 800725a:	4620      	mov	r0, r4
 800725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007260:	0800825f 	.word	0x0800825f
 8007264:	080082d0 	.word	0x080082d0

08007268 <__hi0bits>:
 8007268:	0c03      	lsrs	r3, r0, #16
 800726a:	041b      	lsls	r3, r3, #16
 800726c:	b9d3      	cbnz	r3, 80072a4 <__hi0bits+0x3c>
 800726e:	0400      	lsls	r0, r0, #16
 8007270:	2310      	movs	r3, #16
 8007272:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007276:	bf04      	itt	eq
 8007278:	0200      	lsleq	r0, r0, #8
 800727a:	3308      	addeq	r3, #8
 800727c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007280:	bf04      	itt	eq
 8007282:	0100      	lsleq	r0, r0, #4
 8007284:	3304      	addeq	r3, #4
 8007286:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800728a:	bf04      	itt	eq
 800728c:	0080      	lsleq	r0, r0, #2
 800728e:	3302      	addeq	r3, #2
 8007290:	2800      	cmp	r0, #0
 8007292:	db05      	blt.n	80072a0 <__hi0bits+0x38>
 8007294:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007298:	f103 0301 	add.w	r3, r3, #1
 800729c:	bf08      	it	eq
 800729e:	2320      	moveq	r3, #32
 80072a0:	4618      	mov	r0, r3
 80072a2:	4770      	bx	lr
 80072a4:	2300      	movs	r3, #0
 80072a6:	e7e4      	b.n	8007272 <__hi0bits+0xa>

080072a8 <__lo0bits>:
 80072a8:	6803      	ldr	r3, [r0, #0]
 80072aa:	f013 0207 	ands.w	r2, r3, #7
 80072ae:	4601      	mov	r1, r0
 80072b0:	d00b      	beq.n	80072ca <__lo0bits+0x22>
 80072b2:	07da      	lsls	r2, r3, #31
 80072b4:	d423      	bmi.n	80072fe <__lo0bits+0x56>
 80072b6:	0798      	lsls	r0, r3, #30
 80072b8:	bf49      	itett	mi
 80072ba:	085b      	lsrmi	r3, r3, #1
 80072bc:	089b      	lsrpl	r3, r3, #2
 80072be:	2001      	movmi	r0, #1
 80072c0:	600b      	strmi	r3, [r1, #0]
 80072c2:	bf5c      	itt	pl
 80072c4:	600b      	strpl	r3, [r1, #0]
 80072c6:	2002      	movpl	r0, #2
 80072c8:	4770      	bx	lr
 80072ca:	b298      	uxth	r0, r3
 80072cc:	b9a8      	cbnz	r0, 80072fa <__lo0bits+0x52>
 80072ce:	0c1b      	lsrs	r3, r3, #16
 80072d0:	2010      	movs	r0, #16
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	b90a      	cbnz	r2, 80072da <__lo0bits+0x32>
 80072d6:	3008      	adds	r0, #8
 80072d8:	0a1b      	lsrs	r3, r3, #8
 80072da:	071a      	lsls	r2, r3, #28
 80072dc:	bf04      	itt	eq
 80072de:	091b      	lsreq	r3, r3, #4
 80072e0:	3004      	addeq	r0, #4
 80072e2:	079a      	lsls	r2, r3, #30
 80072e4:	bf04      	itt	eq
 80072e6:	089b      	lsreq	r3, r3, #2
 80072e8:	3002      	addeq	r0, #2
 80072ea:	07da      	lsls	r2, r3, #31
 80072ec:	d403      	bmi.n	80072f6 <__lo0bits+0x4e>
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	f100 0001 	add.w	r0, r0, #1
 80072f4:	d005      	beq.n	8007302 <__lo0bits+0x5a>
 80072f6:	600b      	str	r3, [r1, #0]
 80072f8:	4770      	bx	lr
 80072fa:	4610      	mov	r0, r2
 80072fc:	e7e9      	b.n	80072d2 <__lo0bits+0x2a>
 80072fe:	2000      	movs	r0, #0
 8007300:	4770      	bx	lr
 8007302:	2020      	movs	r0, #32
 8007304:	4770      	bx	lr
	...

08007308 <__i2b>:
 8007308:	b510      	push	{r4, lr}
 800730a:	460c      	mov	r4, r1
 800730c:	2101      	movs	r1, #1
 800730e:	f7ff ff03 	bl	8007118 <_Balloc>
 8007312:	4602      	mov	r2, r0
 8007314:	b928      	cbnz	r0, 8007322 <__i2b+0x1a>
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <__i2b+0x24>)
 8007318:	4805      	ldr	r0, [pc, #20]	; (8007330 <__i2b+0x28>)
 800731a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800731e:	f000 fd35 	bl	8007d8c <__assert_func>
 8007322:	2301      	movs	r3, #1
 8007324:	6144      	str	r4, [r0, #20]
 8007326:	6103      	str	r3, [r0, #16]
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	0800825f 	.word	0x0800825f
 8007330:	080082d0 	.word	0x080082d0

08007334 <__multiply>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4691      	mov	r9, r2
 800733a:	690a      	ldr	r2, [r1, #16]
 800733c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	bfb8      	it	lt
 8007344:	460b      	movlt	r3, r1
 8007346:	460c      	mov	r4, r1
 8007348:	bfbc      	itt	lt
 800734a:	464c      	movlt	r4, r9
 800734c:	4699      	movlt	r9, r3
 800734e:	6927      	ldr	r7, [r4, #16]
 8007350:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007354:	68a3      	ldr	r3, [r4, #8]
 8007356:	6861      	ldr	r1, [r4, #4]
 8007358:	eb07 060a 	add.w	r6, r7, sl
 800735c:	42b3      	cmp	r3, r6
 800735e:	b085      	sub	sp, #20
 8007360:	bfb8      	it	lt
 8007362:	3101      	addlt	r1, #1
 8007364:	f7ff fed8 	bl	8007118 <_Balloc>
 8007368:	b930      	cbnz	r0, 8007378 <__multiply+0x44>
 800736a:	4602      	mov	r2, r0
 800736c:	4b44      	ldr	r3, [pc, #272]	; (8007480 <__multiply+0x14c>)
 800736e:	4845      	ldr	r0, [pc, #276]	; (8007484 <__multiply+0x150>)
 8007370:	f240 115d 	movw	r1, #349	; 0x15d
 8007374:	f000 fd0a 	bl	8007d8c <__assert_func>
 8007378:	f100 0514 	add.w	r5, r0, #20
 800737c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007380:	462b      	mov	r3, r5
 8007382:	2200      	movs	r2, #0
 8007384:	4543      	cmp	r3, r8
 8007386:	d321      	bcc.n	80073cc <__multiply+0x98>
 8007388:	f104 0314 	add.w	r3, r4, #20
 800738c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007390:	f109 0314 	add.w	r3, r9, #20
 8007394:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007398:	9202      	str	r2, [sp, #8]
 800739a:	1b3a      	subs	r2, r7, r4
 800739c:	3a15      	subs	r2, #21
 800739e:	f022 0203 	bic.w	r2, r2, #3
 80073a2:	3204      	adds	r2, #4
 80073a4:	f104 0115 	add.w	r1, r4, #21
 80073a8:	428f      	cmp	r7, r1
 80073aa:	bf38      	it	cc
 80073ac:	2204      	movcc	r2, #4
 80073ae:	9201      	str	r2, [sp, #4]
 80073b0:	9a02      	ldr	r2, [sp, #8]
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d80c      	bhi.n	80073d2 <__multiply+0x9e>
 80073b8:	2e00      	cmp	r6, #0
 80073ba:	dd03      	ble.n	80073c4 <__multiply+0x90>
 80073bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d05a      	beq.n	800747a <__multiply+0x146>
 80073c4:	6106      	str	r6, [r0, #16]
 80073c6:	b005      	add	sp, #20
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	f843 2b04 	str.w	r2, [r3], #4
 80073d0:	e7d8      	b.n	8007384 <__multiply+0x50>
 80073d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80073d6:	f1ba 0f00 	cmp.w	sl, #0
 80073da:	d024      	beq.n	8007426 <__multiply+0xf2>
 80073dc:	f104 0e14 	add.w	lr, r4, #20
 80073e0:	46a9      	mov	r9, r5
 80073e2:	f04f 0c00 	mov.w	ip, #0
 80073e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073ea:	f8d9 1000 	ldr.w	r1, [r9]
 80073ee:	fa1f fb82 	uxth.w	fp, r2
 80073f2:	b289      	uxth	r1, r1
 80073f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80073f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073fc:	f8d9 2000 	ldr.w	r2, [r9]
 8007400:	4461      	add	r1, ip
 8007402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007406:	fb0a c20b 	mla	r2, sl, fp, ip
 800740a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800740e:	b289      	uxth	r1, r1
 8007410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007414:	4577      	cmp	r7, lr
 8007416:	f849 1b04 	str.w	r1, [r9], #4
 800741a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800741e:	d8e2      	bhi.n	80073e6 <__multiply+0xb2>
 8007420:	9a01      	ldr	r2, [sp, #4]
 8007422:	f845 c002 	str.w	ip, [r5, r2]
 8007426:	9a03      	ldr	r2, [sp, #12]
 8007428:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800742c:	3304      	adds	r3, #4
 800742e:	f1b9 0f00 	cmp.w	r9, #0
 8007432:	d020      	beq.n	8007476 <__multiply+0x142>
 8007434:	6829      	ldr	r1, [r5, #0]
 8007436:	f104 0c14 	add.w	ip, r4, #20
 800743a:	46ae      	mov	lr, r5
 800743c:	f04f 0a00 	mov.w	sl, #0
 8007440:	f8bc b000 	ldrh.w	fp, [ip]
 8007444:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007448:	fb09 220b 	mla	r2, r9, fp, r2
 800744c:	4492      	add	sl, r2
 800744e:	b289      	uxth	r1, r1
 8007450:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007454:	f84e 1b04 	str.w	r1, [lr], #4
 8007458:	f85c 2b04 	ldr.w	r2, [ip], #4
 800745c:	f8be 1000 	ldrh.w	r1, [lr]
 8007460:	0c12      	lsrs	r2, r2, #16
 8007462:	fb09 1102 	mla	r1, r9, r2, r1
 8007466:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800746a:	4567      	cmp	r7, ip
 800746c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007470:	d8e6      	bhi.n	8007440 <__multiply+0x10c>
 8007472:	9a01      	ldr	r2, [sp, #4]
 8007474:	50a9      	str	r1, [r5, r2]
 8007476:	3504      	adds	r5, #4
 8007478:	e79a      	b.n	80073b0 <__multiply+0x7c>
 800747a:	3e01      	subs	r6, #1
 800747c:	e79c      	b.n	80073b8 <__multiply+0x84>
 800747e:	bf00      	nop
 8007480:	0800825f 	.word	0x0800825f
 8007484:	080082d0 	.word	0x080082d0

08007488 <__pow5mult>:
 8007488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800748c:	4615      	mov	r5, r2
 800748e:	f012 0203 	ands.w	r2, r2, #3
 8007492:	4606      	mov	r6, r0
 8007494:	460f      	mov	r7, r1
 8007496:	d007      	beq.n	80074a8 <__pow5mult+0x20>
 8007498:	4c25      	ldr	r4, [pc, #148]	; (8007530 <__pow5mult+0xa8>)
 800749a:	3a01      	subs	r2, #1
 800749c:	2300      	movs	r3, #0
 800749e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074a2:	f7ff fe9b 	bl	80071dc <__multadd>
 80074a6:	4607      	mov	r7, r0
 80074a8:	10ad      	asrs	r5, r5, #2
 80074aa:	d03d      	beq.n	8007528 <__pow5mult+0xa0>
 80074ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074ae:	b97c      	cbnz	r4, 80074d0 <__pow5mult+0x48>
 80074b0:	2010      	movs	r0, #16
 80074b2:	f7ff fe1b 	bl	80070ec <malloc>
 80074b6:	4602      	mov	r2, r0
 80074b8:	6270      	str	r0, [r6, #36]	; 0x24
 80074ba:	b928      	cbnz	r0, 80074c8 <__pow5mult+0x40>
 80074bc:	4b1d      	ldr	r3, [pc, #116]	; (8007534 <__pow5mult+0xac>)
 80074be:	481e      	ldr	r0, [pc, #120]	; (8007538 <__pow5mult+0xb0>)
 80074c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074c4:	f000 fc62 	bl	8007d8c <__assert_func>
 80074c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074cc:	6004      	str	r4, [r0, #0]
 80074ce:	60c4      	str	r4, [r0, #12]
 80074d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074d8:	b94c      	cbnz	r4, 80074ee <__pow5mult+0x66>
 80074da:	f240 2171 	movw	r1, #625	; 0x271
 80074de:	4630      	mov	r0, r6
 80074e0:	f7ff ff12 	bl	8007308 <__i2b>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074ea:	4604      	mov	r4, r0
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	f04f 0900 	mov.w	r9, #0
 80074f2:	07eb      	lsls	r3, r5, #31
 80074f4:	d50a      	bpl.n	800750c <__pow5mult+0x84>
 80074f6:	4639      	mov	r1, r7
 80074f8:	4622      	mov	r2, r4
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7ff ff1a 	bl	8007334 <__multiply>
 8007500:	4639      	mov	r1, r7
 8007502:	4680      	mov	r8, r0
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff fe47 	bl	8007198 <_Bfree>
 800750a:	4647      	mov	r7, r8
 800750c:	106d      	asrs	r5, r5, #1
 800750e:	d00b      	beq.n	8007528 <__pow5mult+0xa0>
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	b938      	cbnz	r0, 8007524 <__pow5mult+0x9c>
 8007514:	4622      	mov	r2, r4
 8007516:	4621      	mov	r1, r4
 8007518:	4630      	mov	r0, r6
 800751a:	f7ff ff0b 	bl	8007334 <__multiply>
 800751e:	6020      	str	r0, [r4, #0]
 8007520:	f8c0 9000 	str.w	r9, [r0]
 8007524:	4604      	mov	r4, r0
 8007526:	e7e4      	b.n	80074f2 <__pow5mult+0x6a>
 8007528:	4638      	mov	r0, r7
 800752a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752e:	bf00      	nop
 8007530:	08008420 	.word	0x08008420
 8007534:	080081ed 	.word	0x080081ed
 8007538:	080082d0 	.word	0x080082d0

0800753c <__lshift>:
 800753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	460c      	mov	r4, r1
 8007542:	6849      	ldr	r1, [r1, #4]
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	4607      	mov	r7, r0
 800754e:	4691      	mov	r9, r2
 8007550:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007554:	f108 0601 	add.w	r6, r8, #1
 8007558:	42b3      	cmp	r3, r6
 800755a:	db0b      	blt.n	8007574 <__lshift+0x38>
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff fddb 	bl	8007118 <_Balloc>
 8007562:	4605      	mov	r5, r0
 8007564:	b948      	cbnz	r0, 800757a <__lshift+0x3e>
 8007566:	4602      	mov	r2, r0
 8007568:	4b2a      	ldr	r3, [pc, #168]	; (8007614 <__lshift+0xd8>)
 800756a:	482b      	ldr	r0, [pc, #172]	; (8007618 <__lshift+0xdc>)
 800756c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007570:	f000 fc0c 	bl	8007d8c <__assert_func>
 8007574:	3101      	adds	r1, #1
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	e7ee      	b.n	8007558 <__lshift+0x1c>
 800757a:	2300      	movs	r3, #0
 800757c:	f100 0114 	add.w	r1, r0, #20
 8007580:	f100 0210 	add.w	r2, r0, #16
 8007584:	4618      	mov	r0, r3
 8007586:	4553      	cmp	r3, sl
 8007588:	db37      	blt.n	80075fa <__lshift+0xbe>
 800758a:	6920      	ldr	r0, [r4, #16]
 800758c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007590:	f104 0314 	add.w	r3, r4, #20
 8007594:	f019 091f 	ands.w	r9, r9, #31
 8007598:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800759c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075a0:	d02f      	beq.n	8007602 <__lshift+0xc6>
 80075a2:	f1c9 0e20 	rsb	lr, r9, #32
 80075a6:	468a      	mov	sl, r1
 80075a8:	f04f 0c00 	mov.w	ip, #0
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	fa02 f209 	lsl.w	r2, r2, r9
 80075b2:	ea42 020c 	orr.w	r2, r2, ip
 80075b6:	f84a 2b04 	str.w	r2, [sl], #4
 80075ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80075be:	4298      	cmp	r0, r3
 80075c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80075c4:	d8f2      	bhi.n	80075ac <__lshift+0x70>
 80075c6:	1b03      	subs	r3, r0, r4
 80075c8:	3b15      	subs	r3, #21
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	3304      	adds	r3, #4
 80075d0:	f104 0215 	add.w	r2, r4, #21
 80075d4:	4290      	cmp	r0, r2
 80075d6:	bf38      	it	cc
 80075d8:	2304      	movcc	r3, #4
 80075da:	f841 c003 	str.w	ip, [r1, r3]
 80075de:	f1bc 0f00 	cmp.w	ip, #0
 80075e2:	d001      	beq.n	80075e8 <__lshift+0xac>
 80075e4:	f108 0602 	add.w	r6, r8, #2
 80075e8:	3e01      	subs	r6, #1
 80075ea:	4638      	mov	r0, r7
 80075ec:	612e      	str	r6, [r5, #16]
 80075ee:	4621      	mov	r1, r4
 80075f0:	f7ff fdd2 	bl	8007198 <_Bfree>
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80075fe:	3301      	adds	r3, #1
 8007600:	e7c1      	b.n	8007586 <__lshift+0x4a>
 8007602:	3904      	subs	r1, #4
 8007604:	f853 2b04 	ldr.w	r2, [r3], #4
 8007608:	f841 2f04 	str.w	r2, [r1, #4]!
 800760c:	4298      	cmp	r0, r3
 800760e:	d8f9      	bhi.n	8007604 <__lshift+0xc8>
 8007610:	e7ea      	b.n	80075e8 <__lshift+0xac>
 8007612:	bf00      	nop
 8007614:	0800825f 	.word	0x0800825f
 8007618:	080082d0 	.word	0x080082d0

0800761c <__mcmp>:
 800761c:	b530      	push	{r4, r5, lr}
 800761e:	6902      	ldr	r2, [r0, #16]
 8007620:	690c      	ldr	r4, [r1, #16]
 8007622:	1b12      	subs	r2, r2, r4
 8007624:	d10e      	bne.n	8007644 <__mcmp+0x28>
 8007626:	f100 0314 	add.w	r3, r0, #20
 800762a:	3114      	adds	r1, #20
 800762c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007630:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007634:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007638:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800763c:	42a5      	cmp	r5, r4
 800763e:	d003      	beq.n	8007648 <__mcmp+0x2c>
 8007640:	d305      	bcc.n	800764e <__mcmp+0x32>
 8007642:	2201      	movs	r2, #1
 8007644:	4610      	mov	r0, r2
 8007646:	bd30      	pop	{r4, r5, pc}
 8007648:	4283      	cmp	r3, r0
 800764a:	d3f3      	bcc.n	8007634 <__mcmp+0x18>
 800764c:	e7fa      	b.n	8007644 <__mcmp+0x28>
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	e7f7      	b.n	8007644 <__mcmp+0x28>

08007654 <__mdiff>:
 8007654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	460c      	mov	r4, r1
 800765a:	4606      	mov	r6, r0
 800765c:	4611      	mov	r1, r2
 800765e:	4620      	mov	r0, r4
 8007660:	4690      	mov	r8, r2
 8007662:	f7ff ffdb 	bl	800761c <__mcmp>
 8007666:	1e05      	subs	r5, r0, #0
 8007668:	d110      	bne.n	800768c <__mdiff+0x38>
 800766a:	4629      	mov	r1, r5
 800766c:	4630      	mov	r0, r6
 800766e:	f7ff fd53 	bl	8007118 <_Balloc>
 8007672:	b930      	cbnz	r0, 8007682 <__mdiff+0x2e>
 8007674:	4b3a      	ldr	r3, [pc, #232]	; (8007760 <__mdiff+0x10c>)
 8007676:	4602      	mov	r2, r0
 8007678:	f240 2132 	movw	r1, #562	; 0x232
 800767c:	4839      	ldr	r0, [pc, #228]	; (8007764 <__mdiff+0x110>)
 800767e:	f000 fb85 	bl	8007d8c <__assert_func>
 8007682:	2301      	movs	r3, #1
 8007684:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	bfa4      	itt	ge
 800768e:	4643      	movge	r3, r8
 8007690:	46a0      	movge	r8, r4
 8007692:	4630      	mov	r0, r6
 8007694:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007698:	bfa6      	itte	ge
 800769a:	461c      	movge	r4, r3
 800769c:	2500      	movge	r5, #0
 800769e:	2501      	movlt	r5, #1
 80076a0:	f7ff fd3a 	bl	8007118 <_Balloc>
 80076a4:	b920      	cbnz	r0, 80076b0 <__mdiff+0x5c>
 80076a6:	4b2e      	ldr	r3, [pc, #184]	; (8007760 <__mdiff+0x10c>)
 80076a8:	4602      	mov	r2, r0
 80076aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076ae:	e7e5      	b.n	800767c <__mdiff+0x28>
 80076b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076b4:	6926      	ldr	r6, [r4, #16]
 80076b6:	60c5      	str	r5, [r0, #12]
 80076b8:	f104 0914 	add.w	r9, r4, #20
 80076bc:	f108 0514 	add.w	r5, r8, #20
 80076c0:	f100 0e14 	add.w	lr, r0, #20
 80076c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076cc:	f108 0210 	add.w	r2, r8, #16
 80076d0:	46f2      	mov	sl, lr
 80076d2:	2100      	movs	r1, #0
 80076d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80076d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076dc:	fa1f f883 	uxth.w	r8, r3
 80076e0:	fa11 f18b 	uxtah	r1, r1, fp
 80076e4:	0c1b      	lsrs	r3, r3, #16
 80076e6:	eba1 0808 	sub.w	r8, r1, r8
 80076ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076f2:	fa1f f888 	uxth.w	r8, r8
 80076f6:	1419      	asrs	r1, r3, #16
 80076f8:	454e      	cmp	r6, r9
 80076fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007702:	d8e7      	bhi.n	80076d4 <__mdiff+0x80>
 8007704:	1b33      	subs	r3, r6, r4
 8007706:	3b15      	subs	r3, #21
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	3304      	adds	r3, #4
 800770e:	3415      	adds	r4, #21
 8007710:	42a6      	cmp	r6, r4
 8007712:	bf38      	it	cc
 8007714:	2304      	movcc	r3, #4
 8007716:	441d      	add	r5, r3
 8007718:	4473      	add	r3, lr
 800771a:	469e      	mov	lr, r3
 800771c:	462e      	mov	r6, r5
 800771e:	4566      	cmp	r6, ip
 8007720:	d30e      	bcc.n	8007740 <__mdiff+0xec>
 8007722:	f10c 0203 	add.w	r2, ip, #3
 8007726:	1b52      	subs	r2, r2, r5
 8007728:	f022 0203 	bic.w	r2, r2, #3
 800772c:	3d03      	subs	r5, #3
 800772e:	45ac      	cmp	ip, r5
 8007730:	bf38      	it	cc
 8007732:	2200      	movcc	r2, #0
 8007734:	441a      	add	r2, r3
 8007736:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800773a:	b17b      	cbz	r3, 800775c <__mdiff+0x108>
 800773c:	6107      	str	r7, [r0, #16]
 800773e:	e7a3      	b.n	8007688 <__mdiff+0x34>
 8007740:	f856 8b04 	ldr.w	r8, [r6], #4
 8007744:	fa11 f288 	uxtah	r2, r1, r8
 8007748:	1414      	asrs	r4, r2, #16
 800774a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800774e:	b292      	uxth	r2, r2
 8007750:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007754:	f84e 2b04 	str.w	r2, [lr], #4
 8007758:	1421      	asrs	r1, r4, #16
 800775a:	e7e0      	b.n	800771e <__mdiff+0xca>
 800775c:	3f01      	subs	r7, #1
 800775e:	e7ea      	b.n	8007736 <__mdiff+0xe2>
 8007760:	0800825f 	.word	0x0800825f
 8007764:	080082d0 	.word	0x080082d0

08007768 <__d2b>:
 8007768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800776c:	4689      	mov	r9, r1
 800776e:	2101      	movs	r1, #1
 8007770:	ec57 6b10 	vmov	r6, r7, d0
 8007774:	4690      	mov	r8, r2
 8007776:	f7ff fccf 	bl	8007118 <_Balloc>
 800777a:	4604      	mov	r4, r0
 800777c:	b930      	cbnz	r0, 800778c <__d2b+0x24>
 800777e:	4602      	mov	r2, r0
 8007780:	4b25      	ldr	r3, [pc, #148]	; (8007818 <__d2b+0xb0>)
 8007782:	4826      	ldr	r0, [pc, #152]	; (800781c <__d2b+0xb4>)
 8007784:	f240 310a 	movw	r1, #778	; 0x30a
 8007788:	f000 fb00 	bl	8007d8c <__assert_func>
 800778c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007794:	bb35      	cbnz	r5, 80077e4 <__d2b+0x7c>
 8007796:	2e00      	cmp	r6, #0
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	d028      	beq.n	80077ee <__d2b+0x86>
 800779c:	4668      	mov	r0, sp
 800779e:	9600      	str	r6, [sp, #0]
 80077a0:	f7ff fd82 	bl	80072a8 <__lo0bits>
 80077a4:	9900      	ldr	r1, [sp, #0]
 80077a6:	b300      	cbz	r0, 80077ea <__d2b+0x82>
 80077a8:	9a01      	ldr	r2, [sp, #4]
 80077aa:	f1c0 0320 	rsb	r3, r0, #32
 80077ae:	fa02 f303 	lsl.w	r3, r2, r3
 80077b2:	430b      	orrs	r3, r1
 80077b4:	40c2      	lsrs	r2, r0
 80077b6:	6163      	str	r3, [r4, #20]
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	61a3      	str	r3, [r4, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf14      	ite	ne
 80077c2:	2202      	movne	r2, #2
 80077c4:	2201      	moveq	r2, #1
 80077c6:	6122      	str	r2, [r4, #16]
 80077c8:	b1d5      	cbz	r5, 8007800 <__d2b+0x98>
 80077ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077ce:	4405      	add	r5, r0
 80077d0:	f8c9 5000 	str.w	r5, [r9]
 80077d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077d8:	f8c8 0000 	str.w	r0, [r8]
 80077dc:	4620      	mov	r0, r4
 80077de:	b003      	add	sp, #12
 80077e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e8:	e7d5      	b.n	8007796 <__d2b+0x2e>
 80077ea:	6161      	str	r1, [r4, #20]
 80077ec:	e7e5      	b.n	80077ba <__d2b+0x52>
 80077ee:	a801      	add	r0, sp, #4
 80077f0:	f7ff fd5a 	bl	80072a8 <__lo0bits>
 80077f4:	9b01      	ldr	r3, [sp, #4]
 80077f6:	6163      	str	r3, [r4, #20]
 80077f8:	2201      	movs	r2, #1
 80077fa:	6122      	str	r2, [r4, #16]
 80077fc:	3020      	adds	r0, #32
 80077fe:	e7e3      	b.n	80077c8 <__d2b+0x60>
 8007800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007804:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007808:	f8c9 0000 	str.w	r0, [r9]
 800780c:	6918      	ldr	r0, [r3, #16]
 800780e:	f7ff fd2b 	bl	8007268 <__hi0bits>
 8007812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007816:	e7df      	b.n	80077d8 <__d2b+0x70>
 8007818:	0800825f 	.word	0x0800825f
 800781c:	080082d0 	.word	0x080082d0

08007820 <_calloc_r>:
 8007820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007822:	fba1 2402 	umull	r2, r4, r1, r2
 8007826:	b94c      	cbnz	r4, 800783c <_calloc_r+0x1c>
 8007828:	4611      	mov	r1, r2
 800782a:	9201      	str	r2, [sp, #4]
 800782c:	f000 f87a 	bl	8007924 <_malloc_r>
 8007830:	9a01      	ldr	r2, [sp, #4]
 8007832:	4605      	mov	r5, r0
 8007834:	b930      	cbnz	r0, 8007844 <_calloc_r+0x24>
 8007836:	4628      	mov	r0, r5
 8007838:	b003      	add	sp, #12
 800783a:	bd30      	pop	{r4, r5, pc}
 800783c:	220c      	movs	r2, #12
 800783e:	6002      	str	r2, [r0, #0]
 8007840:	2500      	movs	r5, #0
 8007842:	e7f8      	b.n	8007836 <_calloc_r+0x16>
 8007844:	4621      	mov	r1, r4
 8007846:	f7fd fdf1 	bl	800542c <memset>
 800784a:	e7f4      	b.n	8007836 <_calloc_r+0x16>

0800784c <_free_r>:
 800784c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800784e:	2900      	cmp	r1, #0
 8007850:	d044      	beq.n	80078dc <_free_r+0x90>
 8007852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007856:	9001      	str	r0, [sp, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f1a1 0404 	sub.w	r4, r1, #4
 800785e:	bfb8      	it	lt
 8007860:	18e4      	addlt	r4, r4, r3
 8007862:	f000 fb19 	bl	8007e98 <__malloc_lock>
 8007866:	4a1e      	ldr	r2, [pc, #120]	; (80078e0 <_free_r+0x94>)
 8007868:	9801      	ldr	r0, [sp, #4]
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	b933      	cbnz	r3, 800787c <_free_r+0x30>
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	6014      	str	r4, [r2, #0]
 8007872:	b003      	add	sp, #12
 8007874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007878:	f000 bb14 	b.w	8007ea4 <__malloc_unlock>
 800787c:	42a3      	cmp	r3, r4
 800787e:	d908      	bls.n	8007892 <_free_r+0x46>
 8007880:	6825      	ldr	r5, [r4, #0]
 8007882:	1961      	adds	r1, r4, r5
 8007884:	428b      	cmp	r3, r1
 8007886:	bf01      	itttt	eq
 8007888:	6819      	ldreq	r1, [r3, #0]
 800788a:	685b      	ldreq	r3, [r3, #4]
 800788c:	1949      	addeq	r1, r1, r5
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	e7ed      	b.n	800786e <_free_r+0x22>
 8007892:	461a      	mov	r2, r3
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	b10b      	cbz	r3, 800789c <_free_r+0x50>
 8007898:	42a3      	cmp	r3, r4
 800789a:	d9fa      	bls.n	8007892 <_free_r+0x46>
 800789c:	6811      	ldr	r1, [r2, #0]
 800789e:	1855      	adds	r5, r2, r1
 80078a0:	42a5      	cmp	r5, r4
 80078a2:	d10b      	bne.n	80078bc <_free_r+0x70>
 80078a4:	6824      	ldr	r4, [r4, #0]
 80078a6:	4421      	add	r1, r4
 80078a8:	1854      	adds	r4, r2, r1
 80078aa:	42a3      	cmp	r3, r4
 80078ac:	6011      	str	r1, [r2, #0]
 80078ae:	d1e0      	bne.n	8007872 <_free_r+0x26>
 80078b0:	681c      	ldr	r4, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	6053      	str	r3, [r2, #4]
 80078b6:	4421      	add	r1, r4
 80078b8:	6011      	str	r1, [r2, #0]
 80078ba:	e7da      	b.n	8007872 <_free_r+0x26>
 80078bc:	d902      	bls.n	80078c4 <_free_r+0x78>
 80078be:	230c      	movs	r3, #12
 80078c0:	6003      	str	r3, [r0, #0]
 80078c2:	e7d6      	b.n	8007872 <_free_r+0x26>
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	1961      	adds	r1, r4, r5
 80078c8:	428b      	cmp	r3, r1
 80078ca:	bf04      	itt	eq
 80078cc:	6819      	ldreq	r1, [r3, #0]
 80078ce:	685b      	ldreq	r3, [r3, #4]
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	bf04      	itt	eq
 80078d4:	1949      	addeq	r1, r1, r5
 80078d6:	6021      	streq	r1, [r4, #0]
 80078d8:	6054      	str	r4, [r2, #4]
 80078da:	e7ca      	b.n	8007872 <_free_r+0x26>
 80078dc:	b003      	add	sp, #12
 80078de:	bd30      	pop	{r4, r5, pc}
 80078e0:	200002f8 	.word	0x200002f8

080078e4 <sbrk_aligned>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4e0e      	ldr	r6, [pc, #56]	; (8007920 <sbrk_aligned+0x3c>)
 80078e8:	460c      	mov	r4, r1
 80078ea:	6831      	ldr	r1, [r6, #0]
 80078ec:	4605      	mov	r5, r0
 80078ee:	b911      	cbnz	r1, 80078f6 <sbrk_aligned+0x12>
 80078f0:	f000 f9e6 	bl	8007cc0 <_sbrk_r>
 80078f4:	6030      	str	r0, [r6, #0]
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 f9e1 	bl	8007cc0 <_sbrk_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d00a      	beq.n	8007918 <sbrk_aligned+0x34>
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d007      	beq.n	800791c <sbrk_aligned+0x38>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4628      	mov	r0, r5
 8007910:	f000 f9d6 	bl	8007cc0 <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d101      	bne.n	800791c <sbrk_aligned+0x38>
 8007918:	f04f 34ff 	mov.w	r4, #4294967295
 800791c:	4620      	mov	r0, r4
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	200002fc 	.word	0x200002fc

08007924 <_malloc_r>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	1ccd      	adds	r5, r1, #3
 800792a:	f025 0503 	bic.w	r5, r5, #3
 800792e:	3508      	adds	r5, #8
 8007930:	2d0c      	cmp	r5, #12
 8007932:	bf38      	it	cc
 8007934:	250c      	movcc	r5, #12
 8007936:	2d00      	cmp	r5, #0
 8007938:	4607      	mov	r7, r0
 800793a:	db01      	blt.n	8007940 <_malloc_r+0x1c>
 800793c:	42a9      	cmp	r1, r5
 800793e:	d905      	bls.n	800794c <_malloc_r+0x28>
 8007940:	230c      	movs	r3, #12
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	2600      	movs	r6, #0
 8007946:	4630      	mov	r0, r6
 8007948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800794c:	4e2e      	ldr	r6, [pc, #184]	; (8007a08 <_malloc_r+0xe4>)
 800794e:	f000 faa3 	bl	8007e98 <__malloc_lock>
 8007952:	6833      	ldr	r3, [r6, #0]
 8007954:	461c      	mov	r4, r3
 8007956:	bb34      	cbnz	r4, 80079a6 <_malloc_r+0x82>
 8007958:	4629      	mov	r1, r5
 800795a:	4638      	mov	r0, r7
 800795c:	f7ff ffc2 	bl	80078e4 <sbrk_aligned>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	4604      	mov	r4, r0
 8007964:	d14d      	bne.n	8007a02 <_malloc_r+0xde>
 8007966:	6834      	ldr	r4, [r6, #0]
 8007968:	4626      	mov	r6, r4
 800796a:	2e00      	cmp	r6, #0
 800796c:	d140      	bne.n	80079f0 <_malloc_r+0xcc>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	4631      	mov	r1, r6
 8007972:	4638      	mov	r0, r7
 8007974:	eb04 0803 	add.w	r8, r4, r3
 8007978:	f000 f9a2 	bl	8007cc0 <_sbrk_r>
 800797c:	4580      	cmp	r8, r0
 800797e:	d13a      	bne.n	80079f6 <_malloc_r+0xd2>
 8007980:	6821      	ldr	r1, [r4, #0]
 8007982:	3503      	adds	r5, #3
 8007984:	1a6d      	subs	r5, r5, r1
 8007986:	f025 0503 	bic.w	r5, r5, #3
 800798a:	3508      	adds	r5, #8
 800798c:	2d0c      	cmp	r5, #12
 800798e:	bf38      	it	cc
 8007990:	250c      	movcc	r5, #12
 8007992:	4629      	mov	r1, r5
 8007994:	4638      	mov	r0, r7
 8007996:	f7ff ffa5 	bl	80078e4 <sbrk_aligned>
 800799a:	3001      	adds	r0, #1
 800799c:	d02b      	beq.n	80079f6 <_malloc_r+0xd2>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	442b      	add	r3, r5
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	e00e      	b.n	80079c4 <_malloc_r+0xa0>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	1b52      	subs	r2, r2, r5
 80079aa:	d41e      	bmi.n	80079ea <_malloc_r+0xc6>
 80079ac:	2a0b      	cmp	r2, #11
 80079ae:	d916      	bls.n	80079de <_malloc_r+0xba>
 80079b0:	1961      	adds	r1, r4, r5
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	6025      	str	r5, [r4, #0]
 80079b6:	bf18      	it	ne
 80079b8:	6059      	strne	r1, [r3, #4]
 80079ba:	6863      	ldr	r3, [r4, #4]
 80079bc:	bf08      	it	eq
 80079be:	6031      	streq	r1, [r6, #0]
 80079c0:	5162      	str	r2, [r4, r5]
 80079c2:	604b      	str	r3, [r1, #4]
 80079c4:	4638      	mov	r0, r7
 80079c6:	f104 060b 	add.w	r6, r4, #11
 80079ca:	f000 fa6b 	bl	8007ea4 <__malloc_unlock>
 80079ce:	f026 0607 	bic.w	r6, r6, #7
 80079d2:	1d23      	adds	r3, r4, #4
 80079d4:	1af2      	subs	r2, r6, r3
 80079d6:	d0b6      	beq.n	8007946 <_malloc_r+0x22>
 80079d8:	1b9b      	subs	r3, r3, r6
 80079da:	50a3      	str	r3, [r4, r2]
 80079dc:	e7b3      	b.n	8007946 <_malloc_r+0x22>
 80079de:	6862      	ldr	r2, [r4, #4]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	bf0c      	ite	eq
 80079e4:	6032      	streq	r2, [r6, #0]
 80079e6:	605a      	strne	r2, [r3, #4]
 80079e8:	e7ec      	b.n	80079c4 <_malloc_r+0xa0>
 80079ea:	4623      	mov	r3, r4
 80079ec:	6864      	ldr	r4, [r4, #4]
 80079ee:	e7b2      	b.n	8007956 <_malloc_r+0x32>
 80079f0:	4634      	mov	r4, r6
 80079f2:	6876      	ldr	r6, [r6, #4]
 80079f4:	e7b9      	b.n	800796a <_malloc_r+0x46>
 80079f6:	230c      	movs	r3, #12
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	4638      	mov	r0, r7
 80079fc:	f000 fa52 	bl	8007ea4 <__malloc_unlock>
 8007a00:	e7a1      	b.n	8007946 <_malloc_r+0x22>
 8007a02:	6025      	str	r5, [r4, #0]
 8007a04:	e7de      	b.n	80079c4 <_malloc_r+0xa0>
 8007a06:	bf00      	nop
 8007a08:	200002f8 	.word	0x200002f8

08007a0c <__sfputc_r>:
 8007a0c:	6893      	ldr	r3, [r2, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	b410      	push	{r4}
 8007a14:	6093      	str	r3, [r2, #8]
 8007a16:	da08      	bge.n	8007a2a <__sfputc_r+0x1e>
 8007a18:	6994      	ldr	r4, [r2, #24]
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	db01      	blt.n	8007a22 <__sfputc_r+0x16>
 8007a1e:	290a      	cmp	r1, #10
 8007a20:	d103      	bne.n	8007a2a <__sfputc_r+0x1e>
 8007a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a26:	f7fe ba01 	b.w	8005e2c <__swbuf_r>
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	1c58      	adds	r0, r3, #1
 8007a2e:	6010      	str	r0, [r2, #0]
 8007a30:	7019      	strb	r1, [r3, #0]
 8007a32:	4608      	mov	r0, r1
 8007a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <__sfputs_r>:
 8007a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	18d5      	adds	r5, r2, r3
 8007a44:	42ac      	cmp	r4, r5
 8007a46:	d101      	bne.n	8007a4c <__sfputs_r+0x12>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e007      	b.n	8007a5c <__sfputs_r+0x22>
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	463a      	mov	r2, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ffda 	bl	8007a0c <__sfputc_r>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d1f3      	bne.n	8007a44 <__sfputs_r+0xa>
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a60 <_vfiprintf_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460d      	mov	r5, r1
 8007a66:	b09d      	sub	sp, #116	; 0x74
 8007a68:	4614      	mov	r4, r2
 8007a6a:	4698      	mov	r8, r3
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	b118      	cbz	r0, 8007a78 <_vfiprintf_r+0x18>
 8007a70:	6983      	ldr	r3, [r0, #24]
 8007a72:	b90b      	cbnz	r3, 8007a78 <_vfiprintf_r+0x18>
 8007a74:	f7ff fa30 	bl	8006ed8 <__sinit>
 8007a78:	4b89      	ldr	r3, [pc, #548]	; (8007ca0 <_vfiprintf_r+0x240>)
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	d11b      	bne.n	8007ab6 <_vfiprintf_r+0x56>
 8007a7e:	6875      	ldr	r5, [r6, #4]
 8007a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d405      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8e:	f7ff fac6 	bl	800701e <__retarget_lock_acquire_recursive>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	071b      	lsls	r3, r3, #28
 8007a96:	d501      	bpl.n	8007a9c <_vfiprintf_r+0x3c>
 8007a98:	692b      	ldr	r3, [r5, #16]
 8007a9a:	b9eb      	cbnz	r3, 8007ad8 <_vfiprintf_r+0x78>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7fe fa16 	bl	8005ed0 <__swsetup_r>
 8007aa4:	b1c0      	cbz	r0, 8007ad8 <_vfiprintf_r+0x78>
 8007aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aa8:	07dc      	lsls	r4, r3, #31
 8007aaa:	d50e      	bpl.n	8007aca <_vfiprintf_r+0x6a>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b01d      	add	sp, #116	; 0x74
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	4b7b      	ldr	r3, [pc, #492]	; (8007ca4 <_vfiprintf_r+0x244>)
 8007ab8:	429d      	cmp	r5, r3
 8007aba:	d101      	bne.n	8007ac0 <_vfiprintf_r+0x60>
 8007abc:	68b5      	ldr	r5, [r6, #8]
 8007abe:	e7df      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007ac0:	4b79      	ldr	r3, [pc, #484]	; (8007ca8 <_vfiprintf_r+0x248>)
 8007ac2:	429d      	cmp	r5, r3
 8007ac4:	bf08      	it	eq
 8007ac6:	68f5      	ldreq	r5, [r6, #12]
 8007ac8:	e7da      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007aca:	89ab      	ldrh	r3, [r5, #12]
 8007acc:	0598      	lsls	r0, r3, #22
 8007ace:	d4ed      	bmi.n	8007aac <_vfiprintf_r+0x4c>
 8007ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad2:	f7ff faa5 	bl	8007020 <__retarget_lock_release_recursive>
 8007ad6:	e7e9      	b.n	8007aac <_vfiprintf_r+0x4c>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	2320      	movs	r3, #32
 8007ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae6:	2330      	movs	r3, #48	; 0x30
 8007ae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cac <_vfiprintf_r+0x24c>
 8007aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af0:	f04f 0901 	mov.w	r9, #1
 8007af4:	4623      	mov	r3, r4
 8007af6:	469a      	mov	sl, r3
 8007af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afc:	b10a      	cbz	r2, 8007b02 <_vfiprintf_r+0xa2>
 8007afe:	2a25      	cmp	r2, #37	; 0x25
 8007b00:	d1f9      	bne.n	8007af6 <_vfiprintf_r+0x96>
 8007b02:	ebba 0b04 	subs.w	fp, sl, r4
 8007b06:	d00b      	beq.n	8007b20 <_vfiprintf_r+0xc0>
 8007b08:	465b      	mov	r3, fp
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7ff ff93 	bl	8007a3a <__sfputs_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	f000 80aa 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b1c:	445a      	add	r2, fp
 8007b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b20:	f89a 3000 	ldrb.w	r3, [sl]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80a2 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b34:	f10a 0a01 	add.w	sl, sl, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b40:	931a      	str	r3, [sp, #104]	; 0x68
 8007b42:	4654      	mov	r4, sl
 8007b44:	2205      	movs	r2, #5
 8007b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4a:	4858      	ldr	r0, [pc, #352]	; (8007cac <_vfiprintf_r+0x24c>)
 8007b4c:	f7f8 fb48 	bl	80001e0 <memchr>
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	b9d8      	cbnz	r0, 8007b8c <_vfiprintf_r+0x12c>
 8007b54:	06d1      	lsls	r1, r2, #27
 8007b56:	bf44      	itt	mi
 8007b58:	2320      	movmi	r3, #32
 8007b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5e:	0713      	lsls	r3, r2, #28
 8007b60:	bf44      	itt	mi
 8007b62:	232b      	movmi	r3, #43	; 0x2b
 8007b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b68:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b6e:	d015      	beq.n	8007b9c <_vfiprintf_r+0x13c>
 8007b70:	9a07      	ldr	r2, [sp, #28]
 8007b72:	4654      	mov	r4, sl
 8007b74:	2000      	movs	r0, #0
 8007b76:	f04f 0c0a 	mov.w	ip, #10
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b80:	3b30      	subs	r3, #48	; 0x30
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d94e      	bls.n	8007c24 <_vfiprintf_r+0x1c4>
 8007b86:	b1b0      	cbz	r0, 8007bb6 <_vfiprintf_r+0x156>
 8007b88:	9207      	str	r2, [sp, #28]
 8007b8a:	e014      	b.n	8007bb6 <_vfiprintf_r+0x156>
 8007b8c:	eba0 0308 	sub.w	r3, r0, r8
 8007b90:	fa09 f303 	lsl.w	r3, r9, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	46a2      	mov	sl, r4
 8007b9a:	e7d2      	b.n	8007b42 <_vfiprintf_r+0xe2>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1d19      	adds	r1, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	9103      	str	r1, [sp, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfbb      	ittet	lt
 8007ba8:	425b      	neglt	r3, r3
 8007baa:	f042 0202 	orrlt.w	r2, r2, #2
 8007bae:	9307      	strge	r3, [sp, #28]
 8007bb0:	9307      	strlt	r3, [sp, #28]
 8007bb2:	bfb8      	it	lt
 8007bb4:	9204      	strlt	r2, [sp, #16]
 8007bb6:	7823      	ldrb	r3, [r4, #0]
 8007bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bba:	d10c      	bne.n	8007bd6 <_vfiprintf_r+0x176>
 8007bbc:	7863      	ldrb	r3, [r4, #1]
 8007bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc0:	d135      	bne.n	8007c2e <_vfiprintf_r+0x1ce>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	1d1a      	adds	r2, r3, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	9203      	str	r2, [sp, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfb8      	it	lt
 8007bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd2:	3402      	adds	r4, #2
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cbc <_vfiprintf_r+0x25c>
 8007bda:	7821      	ldrb	r1, [r4, #0]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	4650      	mov	r0, sl
 8007be0:	f7f8 fafe 	bl	80001e0 <memchr>
 8007be4:	b140      	cbz	r0, 8007bf8 <_vfiprintf_r+0x198>
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	eba0 000a 	sub.w	r0, r0, sl
 8007bec:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	4303      	orrs	r3, r0
 8007bf4:	3401      	adds	r4, #1
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	482c      	ldr	r0, [pc, #176]	; (8007cb0 <_vfiprintf_r+0x250>)
 8007bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c02:	2206      	movs	r2, #6
 8007c04:	f7f8 faec 	bl	80001e0 <memchr>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d03f      	beq.n	8007c8c <_vfiprintf_r+0x22c>
 8007c0c:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <_vfiprintf_r+0x254>)
 8007c0e:	bb1b      	cbnz	r3, 8007c58 <_vfiprintf_r+0x1f8>
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	3307      	adds	r3, #7
 8007c14:	f023 0307 	bic.w	r3, r3, #7
 8007c18:	3308      	adds	r3, #8
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1e:	443b      	add	r3, r7
 8007c20:	9309      	str	r3, [sp, #36]	; 0x24
 8007c22:	e767      	b.n	8007af4 <_vfiprintf_r+0x94>
 8007c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c28:	460c      	mov	r4, r1
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e7a5      	b.n	8007b7a <_vfiprintf_r+0x11a>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	3401      	adds	r4, #1
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	4619      	mov	r1, r3
 8007c36:	f04f 0c0a 	mov.w	ip, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c40:	3a30      	subs	r2, #48	; 0x30
 8007c42:	2a09      	cmp	r2, #9
 8007c44:	d903      	bls.n	8007c4e <_vfiprintf_r+0x1ee>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0c5      	beq.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4a:	9105      	str	r1, [sp, #20]
 8007c4c:	e7c3      	b.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c52:	4604      	mov	r4, r0
 8007c54:	2301      	movs	r3, #1
 8007c56:	e7f0      	b.n	8007c3a <_vfiprintf_r+0x1da>
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7fd fc8a 	bl	800557c <_printf_float>
 8007c68:	4607      	mov	r7, r0
 8007c6a:	1c78      	adds	r0, r7, #1
 8007c6c:	d1d6      	bne.n	8007c1c <_vfiprintf_r+0x1bc>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c70:	07d9      	lsls	r1, r3, #31
 8007c72:	d405      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c74:	89ab      	ldrh	r3, [r5, #12]
 8007c76:	059a      	lsls	r2, r3, #22
 8007c78:	d402      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c7c:	f7ff f9d0 	bl	8007020 <__retarget_lock_release_recursive>
 8007c80:	89ab      	ldrh	r3, [r5, #12]
 8007c82:	065b      	lsls	r3, r3, #25
 8007c84:	f53f af12 	bmi.w	8007aac <_vfiprintf_r+0x4c>
 8007c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c8a:	e711      	b.n	8007ab0 <_vfiprintf_r+0x50>
 8007c8c:	ab03      	add	r3, sp, #12
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c94:	a904      	add	r1, sp, #16
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7fd ff14 	bl	8005ac4 <_printf_i>
 8007c9c:	e7e4      	b.n	8007c68 <_vfiprintf_r+0x208>
 8007c9e:	bf00      	nop
 8007ca0:	08008290 	.word	0x08008290
 8007ca4:	080082b0 	.word	0x080082b0
 8007ca8:	08008270 	.word	0x08008270
 8007cac:	0800842c 	.word	0x0800842c
 8007cb0:	08008436 	.word	0x08008436
 8007cb4:	0800557d 	.word	0x0800557d
 8007cb8:	08007a3b 	.word	0x08007a3b
 8007cbc:	08008432 	.word	0x08008432

08007cc0 <_sbrk_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d06      	ldr	r5, [pc, #24]	; (8007cdc <_sbrk_r+0x1c>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7fb f88e 	bl	8002dec <_sbrk>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_sbrk_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_sbrk_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20000300 	.word	0x20000300

08007ce0 <__sread>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce8:	f000 f8e2 	bl	8007eb0 <_read_r>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	bfab      	itete	ge
 8007cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8007cf4:	181b      	addge	r3, r3, r0
 8007cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cfa:	bfac      	ite	ge
 8007cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cfe:	81a3      	strhlt	r3, [r4, #12]
 8007d00:	bd10      	pop	{r4, pc}

08007d02 <__swrite>:
 8007d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	461f      	mov	r7, r3
 8007d08:	898b      	ldrh	r3, [r1, #12]
 8007d0a:	05db      	lsls	r3, r3, #23
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4616      	mov	r6, r2
 8007d12:	d505      	bpl.n	8007d20 <__swrite+0x1e>
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	2302      	movs	r3, #2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f000 f898 	bl	8007e50 <_lseek_r>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	4628      	mov	r0, r5
 8007d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	f000 b817 	b.w	8007d68 <_write_r>

08007d3a <__sseek>:
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d42:	f000 f885 	bl	8007e50 <_lseek_r>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	bf15      	itete	ne
 8007d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d56:	81a3      	strheq	r3, [r4, #12]
 8007d58:	bf18      	it	ne
 8007d5a:	81a3      	strhne	r3, [r4, #12]
 8007d5c:	bd10      	pop	{r4, pc}

08007d5e <__sclose>:
 8007d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d62:	f000 b831 	b.w	8007dc8 <_close_r>
	...

08007d68 <_write_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_write_r+0x20>)
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4611      	mov	r1, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7fa fbbe 	bl	80024f8 <_write>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_write_r+0x1e>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_write_r+0x1e>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20000300 	.word	0x20000300

08007d8c <__assert_func>:
 8007d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d8e:	4614      	mov	r4, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <__assert_func+0x2c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4605      	mov	r5, r0
 8007d98:	68d8      	ldr	r0, [r3, #12]
 8007d9a:	b14c      	cbz	r4, 8007db0 <__assert_func+0x24>
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <__assert_func+0x30>)
 8007d9e:	9100      	str	r1, [sp, #0]
 8007da0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007da4:	4906      	ldr	r1, [pc, #24]	; (8007dc0 <__assert_func+0x34>)
 8007da6:	462b      	mov	r3, r5
 8007da8:	f000 f81e 	bl	8007de8 <fiprintf>
 8007dac:	f000 f89f 	bl	8007eee <abort>
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <__assert_func+0x38>)
 8007db2:	461c      	mov	r4, r3
 8007db4:	e7f3      	b.n	8007d9e <__assert_func+0x12>
 8007db6:	bf00      	nop
 8007db8:	2000000c 	.word	0x2000000c
 8007dbc:	0800843d 	.word	0x0800843d
 8007dc0:	0800844a 	.word	0x0800844a
 8007dc4:	08008478 	.word	0x08008478

08007dc8 <_close_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	; (8007de4 <_close_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7fa ffd5 	bl	8002d82 <_close>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_close_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_close_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	20000300 	.word	0x20000300

08007de8 <fiprintf>:
 8007de8:	b40e      	push	{r1, r2, r3}
 8007dea:	b503      	push	{r0, r1, lr}
 8007dec:	4601      	mov	r1, r0
 8007dee:	ab03      	add	r3, sp, #12
 8007df0:	4805      	ldr	r0, [pc, #20]	; (8007e08 <fiprintf+0x20>)
 8007df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df6:	6800      	ldr	r0, [r0, #0]
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	f7ff fe31 	bl	8007a60 <_vfiprintf_r>
 8007dfe:	b002      	add	sp, #8
 8007e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e04:	b003      	add	sp, #12
 8007e06:	4770      	bx	lr
 8007e08:	2000000c 	.word	0x2000000c

08007e0c <_fstat_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	; (8007e2c <_fstat_r+0x20>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	f7fa ffbe 	bl	8002d9a <_fstat>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d102      	bne.n	8007e28 <_fstat_r+0x1c>
 8007e22:	682b      	ldr	r3, [r5, #0]
 8007e24:	b103      	cbz	r3, 8007e28 <_fstat_r+0x1c>
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000300 	.word	0x20000300

08007e30 <_isatty_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d06      	ldr	r5, [pc, #24]	; (8007e4c <_isatty_r+0x1c>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	f7fa ffbd 	bl	8002dba <_isatty>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_isatty_r+0x1a>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_isatty_r+0x1a>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000300 	.word	0x20000300

08007e50 <_lseek_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d07      	ldr	r5, [pc, #28]	; (8007e70 <_lseek_r+0x20>)
 8007e54:	4604      	mov	r4, r0
 8007e56:	4608      	mov	r0, r1
 8007e58:	4611      	mov	r1, r2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	602a      	str	r2, [r5, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f7fa ffb6 	bl	8002dd0 <_lseek>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_lseek_r+0x1e>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_lseek_r+0x1e>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	20000300 	.word	0x20000300

08007e74 <__ascii_mbtowc>:
 8007e74:	b082      	sub	sp, #8
 8007e76:	b901      	cbnz	r1, 8007e7a <__ascii_mbtowc+0x6>
 8007e78:	a901      	add	r1, sp, #4
 8007e7a:	b142      	cbz	r2, 8007e8e <__ascii_mbtowc+0x1a>
 8007e7c:	b14b      	cbz	r3, 8007e92 <__ascii_mbtowc+0x1e>
 8007e7e:	7813      	ldrb	r3, [r2, #0]
 8007e80:	600b      	str	r3, [r1, #0]
 8007e82:	7812      	ldrb	r2, [r2, #0]
 8007e84:	1e10      	subs	r0, r2, #0
 8007e86:	bf18      	it	ne
 8007e88:	2001      	movne	r0, #1
 8007e8a:	b002      	add	sp, #8
 8007e8c:	4770      	bx	lr
 8007e8e:	4610      	mov	r0, r2
 8007e90:	e7fb      	b.n	8007e8a <__ascii_mbtowc+0x16>
 8007e92:	f06f 0001 	mvn.w	r0, #1
 8007e96:	e7f8      	b.n	8007e8a <__ascii_mbtowc+0x16>

08007e98 <__malloc_lock>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__malloc_lock+0x8>)
 8007e9a:	f7ff b8c0 	b.w	800701e <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	200002f4 	.word	0x200002f4

08007ea4 <__malloc_unlock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__malloc_unlock+0x8>)
 8007ea6:	f7ff b8bb 	b.w	8007020 <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	200002f4 	.word	0x200002f4

08007eb0 <_read_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d07      	ldr	r5, [pc, #28]	; (8007ed0 <_read_r+0x20>)
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	4608      	mov	r0, r1
 8007eb8:	4611      	mov	r1, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	602a      	str	r2, [r5, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f7fa ff42 	bl	8002d48 <_read>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_read_r+0x1e>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_read_r+0x1e>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	20000300 	.word	0x20000300

08007ed4 <__ascii_wctomb>:
 8007ed4:	b149      	cbz	r1, 8007eea <__ascii_wctomb+0x16>
 8007ed6:	2aff      	cmp	r2, #255	; 0xff
 8007ed8:	bf85      	ittet	hi
 8007eda:	238a      	movhi	r3, #138	; 0x8a
 8007edc:	6003      	strhi	r3, [r0, #0]
 8007ede:	700a      	strbls	r2, [r1, #0]
 8007ee0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ee4:	bf98      	it	ls
 8007ee6:	2001      	movls	r0, #1
 8007ee8:	4770      	bx	lr
 8007eea:	4608      	mov	r0, r1
 8007eec:	4770      	bx	lr

08007eee <abort>:
 8007eee:	b508      	push	{r3, lr}
 8007ef0:	2006      	movs	r0, #6
 8007ef2:	f000 f82b 	bl	8007f4c <raise>
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f7fa ff1c 	bl	8002d34 <_exit>

08007efc <_raise_r>:
 8007efc:	291f      	cmp	r1, #31
 8007efe:	b538      	push	{r3, r4, r5, lr}
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	d904      	bls.n	8007f10 <_raise_r+0x14>
 8007f06:	2316      	movs	r3, #22
 8007f08:	6003      	str	r3, [r0, #0]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f12:	b112      	cbz	r2, 8007f1a <_raise_r+0x1e>
 8007f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f18:	b94b      	cbnz	r3, 8007f2e <_raise_r+0x32>
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 f830 	bl	8007f80 <_getpid_r>
 8007f20:	462a      	mov	r2, r5
 8007f22:	4601      	mov	r1, r0
 8007f24:	4620      	mov	r0, r4
 8007f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f2a:	f000 b817 	b.w	8007f5c <_kill_r>
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d00a      	beq.n	8007f48 <_raise_r+0x4c>
 8007f32:	1c59      	adds	r1, r3, #1
 8007f34:	d103      	bne.n	8007f3e <_raise_r+0x42>
 8007f36:	2316      	movs	r3, #22
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	e7e7      	b.n	8007f0e <_raise_r+0x12>
 8007f3e:	2400      	movs	r4, #0
 8007f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f44:	4628      	mov	r0, r5
 8007f46:	4798      	blx	r3
 8007f48:	2000      	movs	r0, #0
 8007f4a:	e7e0      	b.n	8007f0e <_raise_r+0x12>

08007f4c <raise>:
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <raise+0xc>)
 8007f4e:	4601      	mov	r1, r0
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	f7ff bfd3 	b.w	8007efc <_raise_r>
 8007f56:	bf00      	nop
 8007f58:	2000000c 	.word	0x2000000c

08007f5c <_kill_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d07      	ldr	r5, [pc, #28]	; (8007f7c <_kill_r+0x20>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f7fa fed3 	bl	8002d14 <_kill>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d102      	bne.n	8007f78 <_kill_r+0x1c>
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	b103      	cbz	r3, 8007f78 <_kill_r+0x1c>
 8007f76:	6023      	str	r3, [r4, #0]
 8007f78:	bd38      	pop	{r3, r4, r5, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000300 	.word	0x20000300

08007f80 <_getpid_r>:
 8007f80:	f7fa bec0 	b.w	8002d04 <_getpid>

08007f84 <_init>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr

08007f90 <_fini>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	bf00      	nop
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr
