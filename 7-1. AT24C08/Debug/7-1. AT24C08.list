
7-1. AT24C08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08009408  08009408  00019408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f4  080099f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099fc  080099fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000164  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011186  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c7  00000000  00000000  00031392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00034760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c74  00000000  00000000  000369c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013758  00000000  00000000  0005b63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf71  00000000  00000000  0006ed94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bd05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000599c  00000000  00000000  0013bd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093ec 	.word	0x080093ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080093ec 	.word	0x080093ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f023 0210 	bic.w	r2, r3, #16
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	605a      	str	r2, [r3, #4]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d101      	bne.n	8000f30 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	330c      	adds	r3, #12
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b085      	sub	sp, #20
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	619a      	str	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800

08001014 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800101e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_APB1_GRP1_EnableClock+0x2c>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4013      	ands	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40023800 	.word	0x40023800

08001044 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	; 0x40
 8001048:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f005 fc1e 	bl	8006894 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001068:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800106c:	f7ff ffd2 	bl	8001014 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ffb7 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ffb4 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ffb1 	bl	8000fe4 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001082:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001086:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001088:	2302      	movs	r3, #2
 800108a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001098:	2305      	movs	r3, #5
 800109a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4841      	ldr	r0, [pc, #260]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010a2:	f004 fbd2 	bl	800584a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010ae:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010b4:	2302      	movs	r3, #2
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010c2:	2318      	movs	r3, #24
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4834      	ldr	r0, [pc, #208]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 80010da:	f004 fd86 	bl	8005bea <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010de:	2100      	movs	r1, #0
 80010e0:	4832      	ldr	r0, [pc, #200]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 80010e2:	f7ff fef3 	bl	8000ecc <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010ec:	f7ff ff6a 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f4:	482c      	ldr	r0, [pc, #176]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010f6:	f7ff ff65 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001100:	f7ff ff60 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4822      	ldr	r0, [pc, #136]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001120:	f004 fb93 	bl	800584a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001128:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	481c      	ldr	r0, [pc, #112]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001140:	f004 fb83 	bl	800584a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001160:	f004 fb73 	bl	800584a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001178:	f004 fb67 	bl	800584a <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x168>)
 800117e:	f7ff fe95 	bl	8000eac <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	4808      	ldr	r0, [pc, #32]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001188:	f7ff ff0e 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800118c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001192:	f7ff ff09 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800119c:	f7ff ff04 	bl	8000fa8 <LL_GPIO_SetOutputPin>
}
 80011a0:	bf00      	nop
 80011a2:	3740      	adds	r7, #64	; 0x40
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40003800 	.word	0x40003800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000

080011b8 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011be:	f7ff ff41 	bl	8001044 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011c2:	482e      	ldr	r0, [pc, #184]	; (800127c <BNO080_Initialization+0xc4>)
 80011c4:	f005 ffd8 	bl	8007178 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	482c      	ldr	r0, [pc, #176]	; (8001280 <BNO080_Initialization+0xc8>)
 80011ce:	f7ff feeb 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	482b      	ldr	r0, [pc, #172]	; (8001284 <BNO080_Initialization+0xcc>)
 80011d8:	f7ff fee6 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e0:	4829      	ldr	r0, [pc, #164]	; (8001288 <BNO080_Initialization+0xd0>)
 80011e2:	f7ff feef 	bl	8000fc4 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011e6:	20c8      	movs	r0, #200	; 0xc8
 80011e8:	f002 fb40 	bl	800386c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	4825      	ldr	r0, [pc, #148]	; (8001288 <BNO080_Initialization+0xd0>)
 80011f2:	f7ff fed9 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011f6:	f000 f8d7 	bl	80013a8 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011fa:	f000 f8d5 	bl	80013a8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011fe:	f000 f8f7 	bl	80013f0 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001202:	f000 f8d1 	bl	80013a8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001206:	f000 f8f3 	bl	80013f0 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <BNO080_Initialization+0xd4>)
 800120c:	22f9      	movs	r2, #249	; 0xf9
 800120e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <BNO080_Initialization+0xd4>)
 8001212:	2200      	movs	r2, #0
 8001214:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001216:	2102      	movs	r1, #2
 8001218:	2002      	movs	r0, #2
 800121a:	f000 f959 	bl	80014d0 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800121e:	f000 f8c3 	bl	80013a8 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001222:	f000 f8e5 	bl	80013f0 <BNO080_receivePacket>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d11b      	bne.n	8001264 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <BNO080_Initialization+0xd8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <BNO080_Initialization+0xd8>)
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	461a      	mov	r2, r3
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <BNO080_Initialization+0xd8>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4618      	mov	r0, r3
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <BNO080_Initialization+0xd8>)
 8001240:	78db      	ldrb	r3, [r3, #3]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <BNO080_Initialization+0xdc>)
 8001248:	f005 ff96 	bl	8007178 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <BNO080_Initialization+0xd4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2bf8      	cmp	r3, #248	; 0xf8
 8001252:	d107      	bne.n	8001264 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <BNO080_Initialization+0xd4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <BNO080_Initialization+0xe0>)
 800125c:	f005 ff8c 	bl	8007178 <iprintf>
			return (0);
 8001260:	2300      	movs	r3, #0
 8001262:	e007      	b.n	8001274 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <BNO080_Initialization+0xd4>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	22f8      	movs	r2, #248	; 0xf8
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <BNO080_Initialization+0xe4>)
 800126e:	f005 ff83 	bl	8007178 <iprintf>
	return (1); //Something went wrong
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	08009408 	.word	0x08009408
 8001280:	40020400 	.word	0x40020400
 8001284:	40020000 	.word	0x40020000
 8001288:	40020800 	.word	0x40020800
 800128c:	200001fc 	.word	0x200001fc
 8001290:	200001f8 	.word	0x200001f8
 8001294:	0800941c 	.word	0x0800941c
 8001298:	08009434 	.word	0x08009434
 800129c:	08009454 	.word	0x08009454

080012a0 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012aa:	bf00      	nop
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <SPI2_SendByte+0x40>)
 80012ae:	f7ff fe33 	bl	8000f18 <LL_SPI_IsActiveFlag_TXE>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f9      	beq.n	80012ac <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <SPI2_SendByte+0x40>)
 80012be:	f7ff fe4c 	bl	8000f5a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012c2:	bf00      	nop
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <SPI2_SendByte+0x40>)
 80012c6:	f7ff fe14 	bl	8000ef2 <LL_SPI_IsActiveFlag_RXNE>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f9      	beq.n	80012c4 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <SPI2_SendByte+0x40>)
 80012d2:	f7ff fe34 	bl	8000f3e <LL_SPI_ReceiveData8>
 80012d6:	4603      	mov	r3, r0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40003800 	.word	0x40003800

080012e4 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	2005      	movs	r0, #5
 80012f6:	f000 f805 	bl	8001304 <BNO080_setFeatureCommand>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001314:	22fd      	movs	r2, #253	; 0xfd
 8001316:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001318:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001336:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001340:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800134a:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	0e1b      	lsrs	r3, r3, #24
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001354:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001358:	2200      	movs	r2, #0
 800135a:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800135e:	2200      	movs	r2, #0
 8001360:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001364:	2200      	movs	r2, #0
 8001366:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800136a:	2200      	movs	r2, #0
 800136c:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001374:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 800137e:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001388:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0e1b      	lsrs	r3, r3, #24
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <BNO080_setFeatureCommand+0xa0>)
 8001392:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001394:	2111      	movs	r1, #17
 8001396:	2002      	movs	r0, #2
 8001398:	f000 f89a 	bl	80014d0 <BNO080_sendPacket>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001fc 	.word	0x200001fc

080013a8 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e00c      	b.n	80013ce <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <BNO080_waitForSPI+0x40>)
 80013ba:	f7ff fde0 	bl	8000f7e <LL_GPIO_IsInputPinSet>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00a      	b.n	80013de <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d1ee      	bne.n	80013b4 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <BNO080_waitForSPI+0x44>)
 80013d8:	f005 ff54 	bl	8007284 <puts>
	return (0);
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40020800 	.word	0x40020800
 80013ec:	080094a0 	.word	0x080094a0

080013f0 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fa:	4831      	ldr	r0, [pc, #196]	; (80014c0 <BNO080_receivePacket+0xd0>)
 80013fc:	f7ff fdbf 	bl	8000f7e <LL_GPIO_IsInputPinSet>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001406:	2300      	movs	r3, #0
 8001408:	e056      	b.n	80014b8 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800140a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <BNO080_receivePacket+0xd4>)
 8001410:	f7ff fdd8 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff ff43 	bl	80012a0 <SPI2_SendByte>
 800141a:	4603      	mov	r3, r0
 800141c:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff3e 	bl	80012a0 <SPI2_SendByte>
 8001424:	4603      	mov	r3, r0
 8001426:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ff39 	bl	80012a0 <SPI2_SendByte>
 800142e:	4603      	mov	r3, r0
 8001430:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ff34 	bl	80012a0 <SPI2_SendByte>
 8001438:	4603      	mov	r3, r0
 800143a:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <BNO080_receivePacket+0xd8>)
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <BNO080_receivePacket+0xd8>)
 8001444:	7b3b      	ldrb	r3, [r7, #12]
 8001446:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <BNO080_receivePacket+0xd8>)
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <BNO080_receivePacket+0xd8>)
 8001450:	7abb      	ldrb	r3, [r7, #10]
 8001452:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001454:	7b3b      	ldrb	r3, [r7, #12]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001462:	893b      	ldrh	r3, [r7, #8]
 8001464:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001468:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800146a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001472:	2300      	movs	r3, #0
 8001474:	e020      	b.n	80014b8 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001476:	893b      	ldrh	r3, [r7, #8]
 8001478:	3b04      	subs	r3, #4
 800147a:	b29b      	uxth	r3, r3
 800147c:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800147e:	2300      	movs	r3, #0
 8001480:	81fb      	strh	r3, [r7, #14]
 8001482:	e00e      	b.n	80014a2 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001484:	20ff      	movs	r0, #255	; 0xff
 8001486:	f7ff ff0b 	bl	80012a0 <SPI2_SendByte>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	2b7f      	cmp	r3, #127	; 0x7f
 8001492:	d803      	bhi.n	800149c <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	490d      	ldr	r1, [pc, #52]	; (80014cc <BNO080_receivePacket+0xdc>)
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	3301      	adds	r3, #1
 80014a0:	81fb      	strh	r3, [r7, #14]
 80014a2:	89fa      	ldrh	r2, [r7, #14]
 80014a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbeb      	blt.n	8001484 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <BNO080_receivePacket+0xd4>)
 80014b2:	f7ff fd79 	bl	8000fa8 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	200001f8 	.word	0x200001f8
 80014cc:	200001fc 	.word	0x200001fc

080014d0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3304      	adds	r3, #4
 80014e4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014e6:	f7ff ff5f 	bl	80013a8 <BNO080_waitForSPI>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014f0:	2300      	movs	r3, #0
 80014f2:	e032      	b.n	800155a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f8:	481a      	ldr	r0, [pc, #104]	; (8001564 <BNO080_sendPacket+0x94>)
 80014fa:	f7ff fd63 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fecd 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fec7 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fec3 	bl	80012a0 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4a12      	ldr	r2, [pc, #72]	; (8001568 <BNO080_sendPacket+0x98>)
 800151e:	5cd2      	ldrb	r2, [r2, r3]
 8001520:	1c51      	adds	r1, r2, #1
 8001522:	b2c8      	uxtb	r0, r1
 8001524:	4910      	ldr	r1, [pc, #64]	; (8001568 <BNO080_sendPacket+0x98>)
 8001526:	54c8      	strb	r0, [r1, r3]
 8001528:	4610      	mov	r0, r2
 800152a:	f7ff feb9 	bl	80012a0 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e008      	b.n	8001546 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4a0d      	ldr	r2, [pc, #52]	; (800156c <BNO080_sendPacket+0x9c>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff feb0 	bl	80012a0 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	429a      	cmp	r2, r3
 800154c:	d3f2      	bcc.n	8001534 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800154e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <BNO080_sendPacket+0x94>)
 8001554:	f7ff fd28 	bl	8000fa8 <LL_GPIO_SetOutputPin>

	return (1);
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020400 	.word	0x40020400
 8001568:	2000027c 	.word	0x2000027c
 800156c:	200001fc 	.word	0x200001fc

08001570 <LL_SPI_Enable>:
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_SPI_SetStandard>:
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 0210 	bic.w	r2, r3, #16
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_SPI_IsActiveFlag_RXNE>:
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_SPI_IsActiveFlag_TXE>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d101      	bne.n	80015f4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_SPI_ReceiveData8>:
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	330c      	adds	r3, #12
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_SPI_TransmitData8>:
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	330c      	adds	r3, #12
 800162e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	78fa      	ldrb	r2, [r7, #3]
 8001634:	701a      	strb	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_GPIO_SetOutputPin>:
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_GPIO_ResetOutputPin>:
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	041a      	lsls	r2, r3, #16
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_AHB1_GRP1_EnableClock>:
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40023800 	.word	0x40023800

080016ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40023800 	.word	0x40023800

080016dc <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b090      	sub	sp, #64	; 0x40
 80016e0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80016e2:	f107 0318 	add.w	r3, r7, #24
 80016e6:	2228      	movs	r2, #40	; 0x28
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 f8d2 	bl	8006894 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001700:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001704:	f7ff ffd2 	bl	80016ac <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ffb7 	bl	800167c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800170e:	2004      	movs	r0, #4
 8001710:	f7ff ffb4 	bl	800167c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001714:	23e0      	movs	r3, #224	; 0xe0
 8001716:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001718:	2302      	movs	r3, #2
 800171a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001728:	2305      	movs	r3, #5
 800172a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	463b      	mov	r3, r7
 800172e:	4619      	mov	r1, r3
 8001730:	4825      	ldr	r0, [pc, #148]	; (80017c8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001732:	f004 f88a 	bl	800584a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800173a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800173e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001744:	2302      	movs	r3, #2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001748:	2301      	movs	r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800174c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001752:	2310      	movs	r3, #16
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800175e:	230a      	movs	r3, #10
 8001760:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4619      	mov	r1, r3
 8001768:	4818      	ldr	r0, [pc, #96]	; (80017cc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800176a:	f004 fa3e 	bl	8005bea <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800176e:	2100      	movs	r1, #0
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001772:	f7ff ff0d 	bl	8001590 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001776:	2110      	movs	r1, #16
 8001778:	4815      	ldr	r0, [pc, #84]	; (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800177a:	f7ff ff70 	bl	800165e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800177e:	2310      	movs	r3, #16
 8001780:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	480e      	ldr	r0, [pc, #56]	; (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001798:	f004 f857 	bl	800584a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800179c:	2320      	movs	r3, #32
 800179e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017ae:	f004 f84c 	bl	800584a <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017b4:	f7ff fedc 	bl	8001570 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80017b8:	2110      	movs	r1, #16
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017bc:	f7ff ff41 	bl	8001642 <LL_GPIO_SetOutputPin>
}
 80017c0:	bf00      	nop
 80017c2:	3740      	adds	r7, #64	; 0x40
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40013000 	.word	0x40013000
 80017d0:	40020800 	.word	0x40020800

080017d4 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80017de:	bf00      	nop
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <SPI1_SendByte+0x40>)
 80017e2:	f7ff fefb 	bl	80015dc <LL_SPI_IsActiveFlag_TXE>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f9      	beq.n	80017e0 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <SPI1_SendByte+0x40>)
 80017f2:	f7ff ff14 	bl	800161e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80017f6:	bf00      	nop
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <SPI1_SendByte+0x40>)
 80017fa:	f7ff fedc 	bl	80015b6 <LL_SPI_IsActiveFlag_RXNE>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f9      	beq.n	80017f8 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <SPI1_SendByte+0x40>)
 8001806:	f7ff fefc 	bl	8001602 <LL_SPI_ReceiveData8>
 800180a:	4603      	mov	r3, r0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013000 	.word	0x40013000

08001818 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001822:	2110      	movs	r1, #16
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <ICM20602_Readbyte+0x3c>)
 8001826:	f7ff ff1a 	bl	800165e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffce 	bl	80017d4 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ffcb 	bl	80017d4 <SPI1_SendByte>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001842:	2110      	movs	r1, #16
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <ICM20602_Readbyte+0x3c>)
 8001846:	f7ff fefc 	bl	8001642 <LL_GPIO_SetOutputPin>
	
	return val;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020800 	.word	0x40020800

08001858 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001868:	2110      	movs	r1, #16
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <ICM20602_Writebyte+0x40>)
 800186c:	f7ff fef7 	bl	800165e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ffab 	bl	80017d4 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800187e:	79bb      	ldrb	r3, [r7, #6]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ffa7 	bl	80017d4 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001886:	2110      	movs	r1, #16
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <ICM20602_Writebyte+0x40>)
 800188a:	f7ff feda 	bl	8001642 <LL_GPIO_SetOutputPin>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40020800 	.word	0x40020800

0800189c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80018b8:	f7ff ff10 	bl	80016dc <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80018bc:	4833      	ldr	r0, [pc, #204]	; (800198c <ICM20602_Initialization+0xf0>)
 80018be:	f005 fc5b 	bl	8007178 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80018c2:	2075      	movs	r0, #117	; 0x75
 80018c4:	f7ff ffa8 	bl	8001818 <ICM20602_Readbyte>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d105      	bne.n	80018de <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	4619      	mov	r1, r3
 80018d6:	482e      	ldr	r0, [pc, #184]	; (8001990 <ICM20602_Initialization+0xf4>)
 80018d8:	f005 fc4e 	bl	8007178 <iprintf>
 80018dc:	e012      	b.n	8001904 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b12      	cmp	r3, #18
 80018e2:	d00f      	beq.n	8001904 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80018e4:	2075      	movs	r0, #117	; 0x75
 80018e6:	f7ff ff97 	bl	8001818 <ICM20602_Readbyte>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d007      	beq.n	8001904 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2212      	movs	r2, #18
 80018f8:	4619      	mov	r1, r3
 80018fa:	4826      	ldr	r0, [pc, #152]	; (8001994 <ICM20602_Initialization+0xf8>)
 80018fc:	f005 fc3c 	bl	8007178 <iprintf>
			return 1; //ERROR
 8001900:	2301      	movs	r3, #1
 8001902:	e03f      	b.n	8001984 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	206b      	movs	r0, #107	; 0x6b
 8001908:	f7ff ffa6 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 800190c:	2032      	movs	r0, #50	; 0x32
 800190e:	f001 ffad 	bl	800386c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001912:	2101      	movs	r1, #1
 8001914:	206b      	movs	r0, #107	; 0x6b
 8001916:	f7ff ff9f 	bl	8001858 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800191a:	2032      	movs	r0, #50	; 0x32
 800191c:	f001 ffa6 	bl	800386c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001920:	2138      	movs	r1, #56	; 0x38
 8001922:	206c      	movs	r0, #108	; 0x6c
 8001924:	f7ff ff98 	bl	8001858 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001928:	2032      	movs	r0, #50	; 0x32
 800192a:	f001 ff9f 	bl	800386c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800192e:	2100      	movs	r1, #0
 8001930:	2019      	movs	r0, #25
 8001932:	f7ff ff91 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001936:	2032      	movs	r0, #50	; 0x32
 8001938:	f001 ff98 	bl	800386c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 800193c:	2105      	movs	r1, #5
 800193e:	201a      	movs	r0, #26
 8001940:	f7ff ff8a 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001944:	2032      	movs	r0, #50	; 0x32
 8001946:	f001 ff91 	bl	800386c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800194a:	2118      	movs	r1, #24
 800194c:	201b      	movs	r0, #27
 800194e:	f7ff ff83 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001952:	2032      	movs	r0, #50	; 0x32
 8001954:	f001 ff8a 	bl	800386c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001958:	2118      	movs	r1, #24
 800195a:	201c      	movs	r0, #28
 800195c:	f7ff ff7c 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001960:	2032      	movs	r0, #50	; 0x32
 8001962:	f001 ff83 	bl	800386c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001966:	2103      	movs	r1, #3
 8001968:	201d      	movs	r0, #29
 800196a:	f7ff ff75 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 800196e:	2032      	movs	r0, #50	; 0x32
 8001970:	f001 ff7c 	bl	800386c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001974:	2101      	movs	r1, #1
 8001976:	2038      	movs	r0, #56	; 0x38
 8001978:	f7ff ff6e 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 800197c:	2032      	movs	r0, #50	; 0x32
 800197e:	f001 ff75 	bl	800386c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	080094b4 	.word	0x080094b4
 8001990:	080094cc 	.word	0x080094cc
 8001994:	080094f0 	.word	0x080094f0

08001998 <LL_SPI_Enable>:
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_SPI_SetStandard>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 0210 	bic.w	r2, r3, #16
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	605a      	str	r2, [r3, #4]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_SPI_IsActiveFlag_RXNE>:
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_SPI_IsActiveFlag_TXE>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d101      	bne.n	8001a1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_SPI_ReceiveData8>:
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	330c      	adds	r3, #12
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_SPI_TransmitData8>:
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	330c      	adds	r3, #12
 8001a56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	701a      	strb	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_GPIO_SetOutputPin>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_GPIO_ResetOutputPin>:
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	041a      	lsls	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_AHB1_GRP1_EnableClock>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <LL_APB1_GRP1_EnableClock>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023800 	.word	0x40023800

08001b04 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b090      	sub	sp, #64	; 0x40
 8001b08:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	2228      	movs	r2, #40	; 0x28
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 febe 	bl	8006894 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001b28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b2c:	f7ff ffd2 	bl	8001ad4 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b30:	2002      	movs	r0, #2
 8001b32:	f7ff ffb7 	bl	8001aa4 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001b36:	2338      	movs	r3, #56	; 0x38
 8001b38:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b54:	f003 fe79 	bl	800584a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b5c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b60:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b66:	2302      	movs	r3, #2
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001b74:	2308      	movs	r3, #8
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001b80:	230a      	movs	r3, #10
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001b8c:	f004 f82d 	bl	8005bea <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001b90:	2100      	movs	r1, #0
 8001b92:	4817      	ldr	r0, [pc, #92]	; (8001bf0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001b94:	f7ff ff10 	bl	80019b8 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	4814      	ldr	r0, [pc, #80]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b9c:	f7ff ff73 	bl	8001a86 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bba:	f003 fe46 	bl	800584a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bd0:	f003 fe3b 	bl	800584a <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001bd6:	f7ff fedf 	bl	8001998 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bde:	f7ff ff44 	bl	8001a6a <LL_GPIO_SetOutputPin>
}
 8001be2:	bf00      	nop
 8001be4:	3740      	adds	r7, #64	; 0x40
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40003c00 	.word	0x40003c00

08001bf4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001bfe:	bf00      	nop
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c02:	f7ff feff 	bl	8001a04 <LL_SPI_IsActiveFlag_TXE>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f9      	beq.n	8001c00 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4808      	ldr	r0, [pc, #32]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c12:	f7ff ff18 	bl	8001a46 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001c16:	bf00      	nop
 8001c18:	4806      	ldr	r0, [pc, #24]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c1a:	f7ff fee0 	bl	80019de <LL_SPI_IsActiveFlag_RXNE>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f9      	beq.n	8001c18 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <SPI3_SendByte+0x40>)
 8001c26:	f7ff ff00 	bl	8001a2a <LL_SPI_ReceiveData8>
 8001c2a:	4603      	mov	r3, r0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40003c00 	.word	0x40003c00

08001c38 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <LPS22HH_Readbyte+0x3c>)
 8001c46:	f7ff ff1e 	bl	8001a86 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ffce 	bl	8001bf4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff ffcb 	bl	8001bf4 <SPI3_SendByte>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001c62:	2140      	movs	r1, #64	; 0x40
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <LPS22HH_Readbyte+0x3c>)
 8001c66:	f7ff ff00 	bl	8001a6a <LL_GPIO_SetOutputPin>
	
	return val;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40020400 	.word	0x40020400

08001c78 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460a      	mov	r2, r1
 8001c82:	71fb      	strb	r3, [r7, #7]
 8001c84:	4613      	mov	r3, r2
 8001c86:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001c88:	2140      	movs	r1, #64	; 0x40
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <LPS22HH_Writebyte+0x40>)
 8001c8c:	f7ff fefb 	bl	8001a86 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ffab 	bl	8001bf4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ffa7 	bl	8001bf4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <LPS22HH_Writebyte+0x40>)
 8001caa:	f7ff fede 	bl	8001a6a <LL_GPIO_SetOutputPin>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40020400 	.word	0x40020400

08001cbc <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001cc6:	f7ff ff1d 	bl	8001b04 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001cca:	4841      	ldr	r0, [pc, #260]	; (8001dd0 <LPS22HH_Initialization+0x114>)
 8001ccc:	f005 fa54 	bl	8007178 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001cd0:	200f      	movs	r0, #15
 8001cd2:	f7ff ffb1 	bl	8001c38 <LPS22HH_Readbyte>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2bb3      	cmp	r3, #179	; 0xb3
 8001cde:	d105      	bne.n	8001cec <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	483b      	ldr	r0, [pc, #236]	; (8001dd4 <LPS22HH_Initialization+0x118>)
 8001ce6:	f005 fa47 	bl	8007178 <iprintf>
 8001cea:	e012      	b.n	8001d12 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2bb3      	cmp	r3, #179	; 0xb3
 8001cf0:	d00f      	beq.n	8001d12 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f7ff ffa0 	bl	8001c38 <LPS22HH_Readbyte>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2bb3      	cmp	r3, #179	; 0xb3
 8001d00:	d007      	beq.n	8001d12 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	22b3      	movs	r2, #179	; 0xb3
 8001d06:	4619      	mov	r1, r3
 8001d08:	4833      	ldr	r0, [pc, #204]	; (8001dd8 <LPS22HH_Initialization+0x11c>)
 8001d0a:	f005 fa35 	bl	8007178 <iprintf>
			return 1; //ERROR
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e059      	b.n	8001dc6 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001d12:	2104      	movs	r1, #4
 8001d14:	2011      	movs	r0, #17
 8001d16:	f7ff ffaf 	bl	8001c78 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001d1a:	2011      	movs	r0, #17
 8001d1c:	f7ff ff8c 	bl	8001c38 <LPS22HH_Readbyte>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f7      	bne.n	8001d1a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d2a:	2010      	movs	r0, #16
 8001d2c:	f7ff ff84 	bl	8001c38 <LPS22HH_Readbyte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2010      	movs	r0, #16
 8001d42:	f7ff ff99 	bl	8001c78 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d4a:	2010      	movs	r0, #16
 8001d4c:	f7ff ff74 	bl	8001c38 <LPS22HH_Readbyte>
 8001d50:	4603      	mov	r3, r0
 8001d52:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d54:	2010      	movs	r0, #16
 8001d56:	f7ff ff6f 	bl	8001c38 <LPS22HH_Readbyte>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	f043 030c 	orr.w	r3, r3, #12
 8001d64:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f7ff ff84 	bl	8001c78 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d70:	2010      	movs	r0, #16
 8001d72:	f7ff ff61 	bl	8001c38 <LPS22HH_Readbyte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	4619      	mov	r1, r3
 8001d86:	2010      	movs	r0, #16
 8001d88:	f7ff ff76 	bl	8001c78 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001d8c:	2011      	movs	r0, #17
 8001d8e:	f7ff ff53 	bl	8001c38 <LPS22HH_Readbyte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	4619      	mov	r1, r3
 8001da2:	2011      	movs	r0, #17
 8001da4:	f7ff ff68 	bl	8001c78 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001da8:	2012      	movs	r0, #18
 8001daa:	f7ff ff45 	bl	8001c38 <LPS22HH_Readbyte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	2012      	movs	r0, #18
 8001dc0:	f7ff ff5a 	bl	8001c78 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	0800951c 	.word	0x0800951c
 8001dd4:	08009530 	.word	0x08009530
 8001dd8:	08009554 	.word	0x08009554

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	; (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60da      	str	r2, [r3, #12]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	615a      	str	r2, [r3, #20]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	605a      	str	r2, [r3, #4]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <LL_AHB1_GRP1_EnableClock>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40023800 	.word	0x40023800

08001fb0 <LL_APB1_GRP1_EnableClock>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <M8N_TransmitDATA>:
	0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitDATA(unsigned char* data, unsigned char len) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < len; i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e011      	b.n	8002016 <M8N_TransmitDATA+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8001ff2:	bf00      	nop
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <M8N_TransmitDATA+0x48>)
 8001ff6:	f7ff ffa0 	bl	8001f3a <LL_USART_IsActiveFlag_TXE>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f9      	beq.n	8001ff4 <M8N_TransmitDATA+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <M8N_TransmitDATA+0x48>)
 800200c:	f7ff ffa8 	bl	8001f60 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++) {
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	429a      	cmp	r2, r3
 800201c:	dbe9      	blt.n	8001ff2 <M8N_TransmitDATA+0x12>
	}
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40004c00 	.word	0x40004c00

0800202c <M8N_UART4_Initialzation>:

void M8N_UART4_Initialzation(void){
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	; 0x38
 8002030:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */

	  /* USER CODE END UART4_Init 0 */

	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	615a      	str	r2, [r3, #20]
 8002044:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002056:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800205a:	f7ff ffa9 	bl	8001fb0 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800205e:	2004      	movs	r0, #4
 8002060:	f7ff ff8e 	bl	8001f80 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002064:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002068:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800206a:	2302      	movs	r3, #2
 800206c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800207a:	2308      	movs	r3, #8
 800207c:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	4619      	mov	r1, r3
 8002082:	4819      	ldr	r0, [pc, #100]	; (80020e8 <M8N_UART4_Initialzation+0xbc>)
 8002084:	f003 fbe1 	bl	800584a <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002088:	f7ff fea8 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 800208c:	4603      	mov	r3, r0
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fef8 	bl	8001e88 <NVIC_EncodePriority>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	2034      	movs	r0, #52	; 0x34
 800209e:	f7ff fec9 	bl	8001e34 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 80020a2:	2034      	movs	r0, #52	; 0x34
 80020a4:	f7ff fea8 	bl	8001df8 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 80020a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020ac:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80020ba:	230c      	movs	r3, #12
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80020c2:	2300      	movs	r3, #0
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <M8N_UART4_Initialzation+0xc0>)
 80020ce:	f004 fb37 	bl	8006740 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <M8N_UART4_Initialzation+0xc0>)
 80020d4:	f7ff ff1b 	bl	8001f0e <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <M8N_UART4_Initialzation+0xc0>)
 80020da:	f7ff ff08 	bl	8001eee <LL_USART_Enable>
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */
}
 80020de:	bf00      	nop
 80020e0:	3738      	adds	r7, #56	; 0x38
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40004c00 	.word	0x40004c00

080020f0 <M8N_Initialzation>:

void M8N_Initialzation(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	M8N_UART4_Initialzation();
 80020f4:	f7ff ff9a 	bl	800202c <M8N_UART4_Initialzation>

	M8N_TransmitDATA(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80020f8:	211c      	movs	r1, #28
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <M8N_Initialzation+0x40>)
 80020fc:	f7ff ff70 	bl	8001fe0 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002100:	2064      	movs	r0, #100	; 0x64
 8002102:	f001 fbb3 	bl	800386c <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002106:	2110      	movs	r1, #16
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <M8N_Initialzation+0x44>)
 800210a:	f7ff ff69 	bl	8001fe0 <M8N_TransmitDATA>
	HAL_Delay(100);
 800210e:	2064      	movs	r0, #100	; 0x64
 8002110:	f001 fbac 	bl	800386c <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002114:	210e      	movs	r1, #14
 8002116:	4808      	ldr	r0, [pc, #32]	; (8002138 <M8N_Initialzation+0x48>)
 8002118:	f7ff ff62 	bl	8001fe0 <M8N_TransmitDATA>
	HAL_Delay(100);
 800211c:	2064      	movs	r0, #100	; 0x64
 800211e:	f001 fba5 	bl	800386c <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002122:	2115      	movs	r1, #21
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <M8N_Initialzation+0x4c>)
 8002126:	f7ff ff5b 	bl	8001fe0 <M8N_TransmitDATA>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	0800959c 	.word	0x0800959c
 8002134:	080095b8 	.word	0x080095b8
 8002138:	080095c8 	.word	0x080095c8
 800213c:	080095d8 	.word	0x080095d8

08002140 <LL_GPIO_SetOutputPin>:
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	619a      	str	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_GPIO_ResetOutputPin>:
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <LL_AHB1_GRP1_EnableClock>:
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4313      	orrs	r3, r2
 800218e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40023800 	.word	0x40023800

080021ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	463b      	mov	r3, r7
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80021c2:	2004      	movs	r0, #4
 80021c4:	f7ff ffda 	bl	800217c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80021c8:	2080      	movs	r0, #128	; 0x80
 80021ca:	f7ff ffd7 	bl	800217c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff ffd4 	bl	800217c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff ffd1 	bl	800217c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80021da:	2008      	movs	r0, #8
 80021dc:	f7ff ffce 	bl	800217c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80021e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e4:	482e      	ldr	r0, [pc, #184]	; (80022a0 <MX_GPIO_Init+0xf4>)
 80021e6:	f7ff ffab 	bl	8002140 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80021ea:	f240 2117 	movw	r1, #535	; 0x217
 80021ee:	482c      	ldr	r0, [pc, #176]	; (80022a0 <MX_GPIO_Init+0xf4>)
 80021f0:	f7ff ffb4 	bl	800215c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 80021f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80021f8:	482a      	ldr	r0, [pc, #168]	; (80022a4 <MX_GPIO_Init+0xf8>)
 80021fa:	f7ff ffaf 	bl	800215c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80021fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002202:	4829      	ldr	r0, [pc, #164]	; (80022a8 <MX_GPIO_Init+0xfc>)
 8002204:	f7ff ffaa 	bl	800215c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8002208:	f242 2317 	movw	r3, #8727	; 0x2217
 800220c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800220e:	2301      	movs	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221e:	463b      	mov	r3, r7
 8002220:	4619      	mov	r1, r3
 8002222:	481f      	ldr	r0, [pc, #124]	; (80022a0 <MX_GPIO_Init+0xf4>)
 8002224:	f003 fb11 	bl	800584a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002228:	f44f 7390 	mov.w	r3, #288	; 0x120
 800222c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	463b      	mov	r3, r7
 8002238:	4619      	mov	r1, r3
 800223a:	4819      	ldr	r0, [pc, #100]	; (80022a0 <MX_GPIO_Init+0xf4>)
 800223c:	f003 fb05 	bl	800584a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8002240:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002244:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002246:	2301      	movs	r3, #1
 8002248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	463b      	mov	r3, r7
 8002258:	4619      	mov	r1, r3
 800225a:	4812      	ldr	r0, [pc, #72]	; (80022a4 <MX_GPIO_Init+0xf8>)
 800225c:	f003 faf5 	bl	800584a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002266:	2301      	movs	r3, #1
 8002268:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	463b      	mov	r3, r7
 8002278:	4619      	mov	r1, r3
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <MX_GPIO_Init+0xfc>)
 800227c:	f003 fae5 	bl	800584a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	463b      	mov	r3, r7
 800228e:	4619      	mov	r1, r3
 8002290:	4804      	ldr	r0, [pc, #16]	; (80022a4 <MX_GPIO_Init+0xf8>)
 8002292:	f003 fada 	bl	800584a <LL_GPIO_Init>

}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020000 	.word	0x40020000

080022ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <MX_I2C1_Init+0x50>)
 80022b2:	4a13      	ldr	r2, [pc, #76]	; (8002300 <MX_I2C1_Init+0x54>)
 80022b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_I2C1_Init+0x50>)
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <MX_I2C1_Init+0x58>)
 80022ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_I2C1_Init+0x50>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_I2C1_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_I2C1_Init+0x50>)
 80022ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <MX_I2C1_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_I2C1_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <MX_I2C1_Init+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_I2C1_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_I2C1_Init+0x50>)
 80022ea:	f001 fd65 	bl	8003db8 <HAL_I2C_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022f4:	f000 fa3a 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000284 	.word	0x20000284
 8002300:	40005400 	.word	0x40005400
 8002304:	00061a80 	.word	0x00061a80

08002308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_I2C_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12c      	bne.n	8002384 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234c:	2312      	movs	r3, #18
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002358:	2304      	movs	r3, #4
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <HAL_I2C_MspInit+0x8c>)
 8002364:	f001 fb8c 	bl	8003a80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_I2C_MspInit+0x88>)
 8002372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002376:	6413      	str	r3, [r2, #64]	; 0x40
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_I2C_MspInit+0x88>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002384:	bf00      	nop
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40005400 	.word	0x40005400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400

08002398 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	621a      	str	r2, [r3, #32]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	621a      	str	r2, [r3, #32]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_USART_IsActiveFlag_TXE>:
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	2b80      	cmp	r3, #128	; 0x80
 8002410:	bf0c      	ite	eq
 8002412:	2301      	moveq	r3, #1
 8002414:	2300      	movne	r3, #0
 8002416:	b2db      	uxtb	r3, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_USART_EnableIT_RXNE>:
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	330c      	adds	r3, #12
 8002430:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	60bb      	str	r3, [r7, #8]
   return(result);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	330c      	adds	r3, #12
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	61ba      	str	r2, [r7, #24]
 800244a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244c:	6979      	ldr	r1, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	e841 2300 	strex	r3, r2, [r1]
 8002454:	613b      	str	r3, [r7, #16]
   return(result);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e7      	bne.n	800242c <LL_USART_EnableIT_RXNE+0x8>
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_USART_TransmitData8>:
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_GPIO_SetOutputPin>:
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	619a      	str	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_GPIO_ResetOutputPin>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	041a      	lsls	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <_write>:
#include "FS-iA6B.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e011      	b.n	80024fa <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 80024d6:	bf00      	nop
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <_write+0x48>)
 80024da:	f7ff ff90 	bl	80023fe <LL_USART_IsActiveFlag_TXE>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f9      	beq.n	80024d8 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p + i));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	4807      	ldr	r0, [pc, #28]	; (800250c <_write+0x48>)
 80024f0:	f7ff ffbb 	bl	800246a <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++){
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	dbe9      	blt.n	80024d6 <_write+0x12>
	}
	return len;
 8002502:	687b      	ldr	r3, [r7, #4]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40011400 	.word	0x40011400

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b093      	sub	sp, #76	; 0x4c
 8002514:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	float Q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {0};
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	f107 0318 	add.w	r3, r7, #24
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002526:	4b52      	ldr	r3, [pc, #328]	; (8002670 <main+0x160>)
 8002528:	1d3c      	adds	r4, r7, #4
 800252a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002530:	f001 f92a 	bl	8003788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002534:	f000 f8b0 	bl	8002698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002538:	f7ff fe38 	bl	80021ac <MX_GPIO_Init>
  MX_TIM3_Init();
 800253c:	f000 fdb4 	bl	80030a8 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002540:	f001 f898 	bl	8003674 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002544:	f000 f9c4 	bl	80028d0 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002548:	f000 f970 	bl	800282c <MX_SPI1_Init>
  MX_SPI3_Init();
 800254c:	f000 fa14 	bl	8002978 <MX_SPI3_Init>
  MX_UART4_Init();
 8002550:	f000 ffb6 	bl	80034c0 <MX_UART4_Init>
  MX_UART5_Init();
 8002554:	f001 f816 	bl	8003584 <MX_UART5_Init>
  MX_TIM5_Init();
 8002558:	f000 fe18 	bl	800318c <MX_TIM5_Init>
  MX_I2C1_Init();
 800255c:	f7ff fea6 	bl	80022ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8002560:	4844      	ldr	r0, [pc, #272]	; (8002674 <main+0x164>)
 8002562:	f7ff ff19 	bl	8002398 <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(USART6);
 8002566:	4844      	ldr	r0, [pc, #272]	; (8002678 <main+0x168>)
 8002568:	f7ff ff5c 	bl	8002424 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 800256c:	4843      	ldr	r0, [pc, #268]	; (800267c <main+0x16c>)
 800256e:	f7ff ff59 	bl	8002424 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);
 8002572:	4843      	ldr	r0, [pc, #268]	; (8002680 <main+0x170>)
 8002574:	f7ff ff56 	bl	8002424 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8002578:	f7fe fe1e 	bl	80011b8 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 800257c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002580:	f7fe feb0 	bl	80012e4 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 8002584:	f7ff f98a 	bl	800189c <ICM20602_Initialization>
  LPS22HH_Initialization();
 8002588:	f7ff fb98 	bl	8001cbc <LPS22HH_Initialization>
  M8N_Initialzation();
 800258c:	f7ff fdb0 	bl	80020f0 <M8N_Initialzation>

  LL_TIM_EnableCounter(TIM5);
 8002590:	483c      	ldr	r0, [pc, #240]	; (8002684 <main+0x174>)
 8002592:	f7ff ff01 	bl	8002398 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8002596:	2101      	movs	r1, #1
 8002598:	483a      	ldr	r0, [pc, #232]	; (8002684 <main+0x174>)
 800259a:	f7ff ff0d 	bl	80023b8 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 800259e:	2110      	movs	r1, #16
 80025a0:	4838      	ldr	r0, [pc, #224]	; (8002684 <main+0x174>)
 80025a2:	f7ff ff09 	bl	80023b8 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 80025a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025aa:	4836      	ldr	r0, [pc, #216]	; (8002684 <main+0x174>)
 80025ac:	f7ff ff04 	bl	80023b8 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 80025b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b4:	4833      	ldr	r0, [pc, #204]	; (8002684 <main+0x174>)
 80025b6:	f7ff feff 	bl	80023b8 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
	  HAL_Delay(70);
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
	  HAL_Delay(70);
  }*/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80025ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025be:	4832      	ldr	r0, [pc, #200]	; (8002688 <main+0x178>)
 80025c0:	f7ff ff70 	bl	80024a4 <LL_GPIO_ResetOutputPin>
  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &buf_write[0], 16, 1);
 80025c4:	2301      	movs	r3, #1
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	2310      	movs	r3, #16
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2301      	movs	r3, #1
 80025d2:	2200      	movs	r2, #0
 80025d4:	21a0      	movs	r1, #160	; 0xa0
 80025d6:	482d      	ldr	r0, [pc, #180]	; (800268c <main+0x17c>)
 80025d8:	f001 fd32 	bl	8004040 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80025dc:	2001      	movs	r0, #1
 80025de:	f001 f945 	bl	800386c <HAL_Delay>
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80025e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025e6:	4828      	ldr	r0, [pc, #160]	; (8002688 <main+0x178>)
 80025e8:	f7ff ff4e 	bl	8002488 <LL_GPIO_SetOutputPin>
  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &buf_read[0], 16, 1);
 80025ec:	2301      	movs	r3, #1
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	2310      	movs	r3, #16
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	2200      	movs	r2, #0
 80025fe:	21a0      	movs	r1, #160	; 0xa0
 8002600:	4822      	ldr	r0, [pc, #136]	; (800268c <main+0x17c>)
 8002602:	f001 fe17 	bl	8004234 <HAL_I2C_Mem_Read>

  for(int i =0; i<16; i++)
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
 800260a:	e00b      	b.n	8002624 <main+0x114>
	  printf("%d", buf_read[i]);
 800260c:	f107 0214 	add.w	r2, r7, #20
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	481d      	ldr	r0, [pc, #116]	; (8002690 <main+0x180>)
 800261a:	f004 fdad 	bl	8007178 <iprintf>
  for(int i =0; i<16; i++)
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002620:	3301      	adds	r3, #1
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	2b0f      	cmp	r3, #15
 8002628:	ddf0      	ble.n	800260c <main+0xfc>

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800262a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800262e:	4811      	ldr	r0, [pc, #68]	; (8002674 <main+0x164>)
 8002630:	f7ff fec2 	bl	80023b8 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <main+0x164>)
 8002636:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	f001 f915 	bl	800386c <HAL_Delay>
  TIM3->PSC = 1500;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <main+0x164>)
 8002644:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800264a:	2064      	movs	r0, #100	; 0x64
 800264c:	f001 f90e 	bl	800386c <HAL_Delay>
  TIM3->PSC = 1000;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <main+0x164>)
 8002652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8002658:	2064      	movs	r0, #100	; 0x64
 800265a:	f001 f907 	bl	800386c <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800265e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002662:	4804      	ldr	r0, [pc, #16]	; (8002674 <main+0x164>)
 8002664:	f7ff feb9 	bl	80023da <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 8002668:	480a      	ldr	r0, [pc, #40]	; (8002694 <main+0x184>)
 800266a:	f004 fe0b 	bl	8007284 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800266e:	e7fe      	b.n	800266e <main+0x15e>
 8002670:	0800958c 	.word	0x0800958c
 8002674:	40000400 	.word	0x40000400
 8002678:	40011400 	.word	0x40011400
 800267c:	40004c00 	.word	0x40004c00
 8002680:	40005000 	.word	0x40005000
 8002684:	40000c00 	.word	0x40000c00
 8002688:	40020800 	.word	0x40020800
 800268c:	20000284 	.word	0x20000284
 8002690:	08009580 	.word	0x08009580
 8002694:	08009584 	.word	0x08009584

08002698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b094      	sub	sp, #80	; 0x50
 800269c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269e:	f107 0320 	add.w	r3, r7, #32
 80026a2:	2230      	movs	r2, #48	; 0x30
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 f8f4 	bl	8006894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <SystemClock_Config+0xcc>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <SystemClock_Config+0xcc>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6413      	str	r3, [r2, #64]	; 0x40
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <SystemClock_Config+0xcc>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <SystemClock_Config+0xd0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <SystemClock_Config+0xd0>)
 80026e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <SystemClock_Config+0xd0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026f4:	2301      	movs	r3, #1
 80026f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026fe:	2302      	movs	r3, #2
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002708:	2304      	movs	r3, #4
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800270c:	23a8      	movs	r3, #168	; 0xa8
 800270e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002710:	2302      	movs	r3, #2
 8002712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002714:	2304      	movs	r3, #4
 8002716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002718:	f107 0320 	add.w	r3, r7, #32
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fb0b 	bl	8004d38 <HAL_RCC_OscConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002728:	f000 f820 	bl	800276c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272c:	230f      	movs	r3, #15
 800272e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002730:	2302      	movs	r3, #2
 8002732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800273c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800273e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2105      	movs	r1, #5
 800274a:	4618      	mov	r0, r3
 800274c:	f002 fd6c 	bl	8005228 <HAL_RCC_ClockConfig>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002756:	f000 f809 	bl	800276c <Error_Handler>
  }
}
 800275a:	bf00      	nop
 800275c:	3750      	adds	r7, #80	; 0x50
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002774:	e7fe      	b.n	8002774 <Error_Handler+0x8>

08002776 <LL_SPI_SetStandard>:
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 0210 	bic.w	r2, r3, #16
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	605a      	str	r2, [r3, #4]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_AHB1_GRP1_EnableClock>:
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40023800 	.word	0x40023800

080027cc <LL_APB1_GRP1_EnableClock>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40023800 	.word	0x40023800

080027fc <LL_APB2_GRP1_EnableClock>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <LL_APB2_GRP1_EnableClock+0x2c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40023800 	.word	0x40023800

0800282c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	; 0x40
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002832:	f107 0318 	add.w	r3, r7, #24
 8002836:	2228      	movs	r2, #40	; 0x28
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f004 f82a 	bl	8006894 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	463b      	mov	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002850:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002854:	f7ff ffd2 	bl	80027fc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002858:	2001      	movs	r0, #1
 800285a:	f7ff ff9f 	bl	800279c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800285e:	23e0      	movs	r3, #224	; 0xe0
 8002860:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002862:	2302      	movs	r3, #2
 8002864:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002872:	2305      	movs	r3, #5
 8002874:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	463b      	mov	r3, r7
 8002878:	4619      	mov	r1, r3
 800287a:	4813      	ldr	r0, [pc, #76]	; (80028c8 <MX_SPI1_Init+0x9c>)
 800287c:	f002 ffe5 	bl	800584a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002884:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002888:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800288e:	2302      	movs	r3, #2
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002892:	2301      	movs	r3, #1
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800289c:	2310      	movs	r3, #16
 800289e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028a0:	2300      	movs	r3, #0
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80028a8:	230a      	movs	r3, #10
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4806      	ldr	r0, [pc, #24]	; (80028cc <MX_SPI1_Init+0xa0>)
 80028b4:	f003 f999 	bl	8005bea <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80028b8:	2100      	movs	r1, #0
 80028ba:	4804      	ldr	r0, [pc, #16]	; (80028cc <MX_SPI1_Init+0xa0>)
 80028bc:	f7ff ff5b 	bl	8002776 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	3740      	adds	r7, #64	; 0x40
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40013000 	.word	0x40013000

080028d0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b090      	sub	sp, #64	; 0x40
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80028d6:	f107 0318 	add.w	r3, r7, #24
 80028da:	2228      	movs	r2, #40	; 0x28
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 ffd8 	bl	8006894 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	463b      	mov	r3, r7
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80028f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028f8:	f7ff ff68 	bl	80027cc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028fc:	2002      	movs	r0, #2
 80028fe:	f7ff ff4d 	bl	800279c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002902:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002906:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002908:	2302      	movs	r3, #2
 800290a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002918:	2305      	movs	r3, #5
 800291a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	463b      	mov	r3, r7
 800291e:	4619      	mov	r1, r3
 8002920:	4813      	ldr	r0, [pc, #76]	; (8002970 <MX_SPI2_Init+0xa0>)
 8002922:	f002 ff92 	bl	800584a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800292a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800292e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002934:	2302      	movs	r3, #2
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002938:	2301      	movs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800293c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002942:	2318      	movs	r3, #24
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800294e:	230a      	movs	r3, #10
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002952:	f107 0318 	add.w	r3, r7, #24
 8002956:	4619      	mov	r1, r3
 8002958:	4806      	ldr	r0, [pc, #24]	; (8002974 <MX_SPI2_Init+0xa4>)
 800295a:	f003 f946 	bl	8005bea <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800295e:	2100      	movs	r1, #0
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <MX_SPI2_Init+0xa4>)
 8002962:	f7ff ff08 	bl	8002776 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	3740      	adds	r7, #64	; 0x40
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40020400 	.word	0x40020400
 8002974:	40003800 	.word	0x40003800

08002978 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b090      	sub	sp, #64	; 0x40
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800297e:	f107 0318 	add.w	r3, r7, #24
 8002982:	2228      	movs	r2, #40	; 0x28
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f003 ff84 	bl	8006894 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	463b      	mov	r3, r7
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]
 800299a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800299c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029a0:	f7ff ff14 	bl	80027cc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7ff fef9 	bl	800279c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80029aa:	2338      	movs	r3, #56	; 0x38
 80029ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029ae:	2302      	movs	r3, #2
 80029b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80029be:	2306      	movs	r3, #6
 80029c0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c2:	463b      	mov	r3, r7
 80029c4:	4619      	mov	r1, r3
 80029c6:	4813      	ldr	r0, [pc, #76]	; (8002a14 <MX_SPI3_Init+0x9c>)
 80029c8:	f002 ff3f 	bl	800584a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80029d0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029d4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80029da:	2302      	movs	r3, #2
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80029de:	2301      	movs	r3, #1
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80029e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80029e8:	2308      	movs	r3, #8
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80029ec:	2300      	movs	r3, #0
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80029f4:	230a      	movs	r3, #10
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	4619      	mov	r1, r3
 80029fe:	4806      	ldr	r0, [pc, #24]	; (8002a18 <MX_SPI3_Init+0xa0>)
 8002a00:	f003 f8f3 	bl	8005bea <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002a04:	2100      	movs	r1, #0
 8002a06:	4804      	ldr	r0, [pc, #16]	; (8002a18 <MX_SPI3_Init+0xa0>)
 8002a08:	f7ff feb5 	bl	8002776 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3740      	adds	r7, #64	; 0x40
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40003c00 	.word	0x40003c00

08002a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_MspInit+0x4c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <LL_USART_IsActiveFlag_RXNE>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_USART_ClearFlag_RXNE>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f06f 0220 	mvn.w	r2, #32
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_USART_ReceiveData8>:
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	b2db      	uxtb	r3, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <NMI_Handler+0x4>

08002ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <HardFault_Handler+0x4>

08002ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <MemManage_Handler+0x4>

08002ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ade:	e7fe      	b.n	8002ade <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b14:	f000 fe8a 	bl	800382c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4)){
 8002b20:	4833      	ldr	r0, [pc, #204]	; (8002bf0 <UART4_IRQHandler+0xd4>)
 8002b22:	f7ff ffa3 	bl	8002a6c <LL_USART_IsActiveFlag_RXNE>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05b      	beq.n	8002be4 <UART4_IRQHandler+0xc8>
			LL_USART_ClearFlag_RXNE(UART4);
 8002b2c:	4830      	ldr	r0, [pc, #192]	; (8002bf0 <UART4_IRQHandler+0xd4>)
 8002b2e:	f7ff ffb0 	bl	8002a92 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8002b32:	482f      	ldr	r0, [pc, #188]	; (8002bf0 <UART4_IRQHandler+0xd4>)
 8002b34:	f7ff ffbb 	bl	8002aae <LL_USART_ReceiveData8>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <UART4_IRQHandler+0xd8>)
 8002b3e:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 8002b40:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <UART4_IRQHandler+0xdc>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]

//			LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt){
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b23      	cmp	r3, #35	; 0x23
 8002b4c:	d02e      	beq.n	8002bac <UART4_IRQHandler+0x90>
 8002b4e:	2b23      	cmp	r3, #35	; 0x23
 8002b50:	dc3a      	bgt.n	8002bc8 <UART4_IRQHandler+0xac>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <UART4_IRQHandler+0x40>
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d012      	beq.n	8002b80 <UART4_IRQHandler+0x64>
 8002b5a:	e035      	b.n	8002bc8 <UART4_IRQHandler+0xac>
			case 0:
				if(uart4_rx_data == 0xb5){
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <UART4_IRQHandler+0xd8>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2bb5      	cmp	r3, #181	; 0xb5
 8002b62:	d141      	bne.n	8002be8 <UART4_IRQHandler+0xcc>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <UART4_IRQHandler+0xd8>)
 8002b6c:	7819      	ldrb	r1, [r3, #0]
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <UART4_IRQHandler+0xe4>)
 8002b70:	5499      	strb	r1, [r3, r2]
					cnt++;
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	3301      	adds	r3, #1
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002b7c:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002b7e:	e033      	b.n	8002be8 <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62) {
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <UART4_IRQHandler+0xd8>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b62      	cmp	r3, #98	; 0x62
 8002b86:	d10d      	bne.n	8002ba4 <UART4_IRQHandler+0x88>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <UART4_IRQHandler+0xd8>)
 8002b90:	7819      	ldrb	r1, [r3, #0]
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <UART4_IRQHandler+0xe4>)
 8002b94:	5499      	strb	r1, [r3, r2]
					cnt++;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002ba0:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8002ba2:	e022      	b.n	8002bea <UART4_IRQHandler+0xce>
					cnt = 0;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
				break;
 8002baa:	e01e      	b.n	8002bea <UART4_IRQHandler+0xce>
			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <UART4_IRQHandler+0xd8>)
 8002bb4:	7819      	ldrb	r1, [r3, #0]
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <UART4_IRQHandler+0xe4>)
 8002bb8:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <UART4_IRQHandler+0xe8>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
				break;
 8002bc6:	e010      	b.n	8002bea <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <UART4_IRQHandler+0xd8>)
 8002bd0:	7819      	ldrb	r1, [r3, #0]
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <UART4_IRQHandler+0xe4>)
 8002bd4:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <UART4_IRQHandler+0xe0>)
 8002be0:	701a      	strb	r2, [r3, #0]
				break;
 8002be2:	e002      	b.n	8002bea <UART4_IRQHandler+0xce>
			}
	}
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <UART4_IRQHandler+0xce>
				break;
 8002be8:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40004c00 	.word	0x40004c00
 8002bf4:	200002db 	.word	0x200002db
 8002bf8:	200002da 	.word	0x200002da
 8002bfc:	20000325 	.word	0x20000325
 8002c00:	200002dc 	.word	0x200002dc
 8002c04:	20000300 	.word	0x20000300

08002c08 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5)){
 8002c0c:	4833      	ldr	r0, [pc, #204]	; (8002cdc <UART5_IRQHandler+0xd4>)
 8002c0e:	f7ff ff2d 	bl	8002a6c <LL_USART_IsActiveFlag_RXNE>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <UART5_IRQHandler+0xc8>
		LL_USART_ClearFlag_RXNE(UART5);
 8002c18:	4830      	ldr	r0, [pc, #192]	; (8002cdc <UART5_IRQHandler+0xd4>)
 8002c1a:	f7ff ff3a 	bl	8002a92 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8002c1e:	482f      	ldr	r0, [pc, #188]	; (8002cdc <UART5_IRQHandler+0xd4>)
 8002c20:	f7ff ff45 	bl	8002aae <LL_USART_ReceiveData8>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <UART5_IRQHandler+0xd8>)
 8002c2a:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <UART5_IRQHandler+0xdc>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
		/*while(!LL_USART_IsActiveFlag_TXE(USART6));
		LL_USART_TransmitData8(USART6, uart5_rx_data);*/

		switch(cnt){
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b1f      	cmp	r3, #31
 8002c38:	d02e      	beq.n	8002c98 <UART5_IRQHandler+0x90>
 8002c3a:	2b1f      	cmp	r3, #31
 8002c3c:	dc3a      	bgt.n	8002cb4 <UART5_IRQHandler+0xac>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <UART5_IRQHandler+0x40>
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d012      	beq.n	8002c6c <UART5_IRQHandler+0x64>
 8002c46:	e035      	b.n	8002cb4 <UART5_IRQHandler+0xac>
		case 0:
			if(uart5_rx_data == 0x20){
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <UART5_IRQHandler+0xd8>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d141      	bne.n	8002cd4 <UART5_IRQHandler+0xcc>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <UART5_IRQHandler+0xd8>)
 8002c58:	7819      	ldrb	r1, [r3, #0]
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <UART5_IRQHandler+0xe4>)
 8002c5c:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c68:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c6a:	e033      	b.n	8002cd4 <UART5_IRQHandler+0xcc>

		case 1:
			if(uart5_rx_data == 0x40) {
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <UART5_IRQHandler+0xd8>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d10d      	bne.n	8002c90 <UART5_IRQHandler+0x88>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <UART5_IRQHandler+0xd8>)
 8002c7c:	7819      	ldrb	r1, [r3, #0]
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <UART5_IRQHandler+0xe4>)
 8002c80:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c8c:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8002c8e:	e022      	b.n	8002cd6 <UART5_IRQHandler+0xce>
				cnt = 0;
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
			break;
 8002c96:	e01e      	b.n	8002cd6 <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <UART5_IRQHandler+0xd8>)
 8002ca0:	7819      	ldrb	r1, [r3, #0]
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <UART5_IRQHandler+0xe4>)
 8002ca4:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <UART5_IRQHandler+0xe8>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
			break;
 8002cb2:	e010      	b.n	8002cd6 <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <UART5_IRQHandler+0xd8>)
 8002cbc:	7819      	ldrb	r1, [r3, #0]
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <UART5_IRQHandler+0xe4>)
 8002cc0:	5499      	strb	r1, [r3, r2]
			cnt++;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <UART5_IRQHandler+0xe0>)
 8002ccc:	701a      	strb	r2, [r3, #0]
			break;
 8002cce:	e002      	b.n	8002cd6 <UART5_IRQHandler+0xce>
		}
	}
 8002cd0:	bf00      	nop
 8002cd2:	e000      	b.n	8002cd6 <UART5_IRQHandler+0xce>
			break;
 8002cd4:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40005000 	.word	0x40005000
 8002ce0:	20000302 	.word	0x20000302
 8002ce4:	20000301 	.word	0x20000301
 8002ce8:	20000326 	.word	0x20000326
 8002cec:	20000304 	.word	0x20000304
 8002cf0:	20000324 	.word	0x20000324

08002cf4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)){
 8002cf8:	480a      	ldr	r0, [pc, #40]	; (8002d24 <USART6_IRQHandler+0x30>)
 8002cfa:	f7ff feb7 	bl	8002a6c <LL_USART_IsActiveFlag_RXNE>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8002d04:	4807      	ldr	r0, [pc, #28]	; (8002d24 <USART6_IRQHandler+0x30>)
 8002d06:	f7ff fec4 	bl	8002a92 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002d0a:	4806      	ldr	r0, [pc, #24]	; (8002d24 <USART6_IRQHandler+0x30>)
 8002d0c:	f7ff fecf 	bl	8002aae <LL_USART_ReceiveData8>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <USART6_IRQHandler+0x34>)
 8002d16:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <USART6_IRQHandler+0x38>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40011400 	.word	0x40011400
 8002d28:	200002d9 	.word	0x200002d9
 8002d2c:	200002d8 	.word	0x200002d8

08002d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return 1;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <_kill>:

int _kill(int pid, int sig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d4a:	f003 fd79 	bl	8006840 <__errno>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2216      	movs	r2, #22
 8002d52:	601a      	str	r2, [r3, #0]
  return -1;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_exit>:

void _exit (int status)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffe7 	bl	8002d40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d72:	e7fe      	b.n	8002d72 <_exit+0x12>

08002d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e00a      	b.n	8002d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d86:	f3af 8000 	nop.w
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	60ba      	str	r2, [r7, #8]
 8002d92:	b2ca      	uxtb	r2, r1
 8002d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf0      	blt.n	8002d86 <_read+0x12>
  }

  return len;
 8002da4:	687b      	ldr	r3, [r7, #4]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_close>:
  }
  return len;
}

int _close(int file)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_isatty>:

int _isatty(int file)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <_sbrk+0x5c>)
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <_sbrk+0x60>)
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <_sbrk+0x64>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <_sbrk+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e48:	f003 fcfa 	bl	8006840 <__errno>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	220c      	movs	r2, #12
 8002e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e009      	b.n	8002e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <_sbrk+0x64>)
 8002e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20020000 	.word	0x20020000
 8002e78:	00000400 	.word	0x00000400
 8002e7c:	20000328 	.word	0x20000328
 8002e80:	20000340 	.word	0x20000340

08002e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <SystemInit+0x20>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <SystemInit+0x20>)
 8002e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <LL_TIM_EnableARRPreload>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	601a      	str	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d01c      	beq.n	8002f12 <LL_TIM_OC_EnableFast+0x4a>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d017      	beq.n	8002f0e <LL_TIM_OC_EnableFast+0x46>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d012      	beq.n	8002f0a <LL_TIM_OC_EnableFast+0x42>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d00d      	beq.n	8002f06 <LL_TIM_OC_EnableFast+0x3e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef0:	d007      	beq.n	8002f02 <LL_TIM_OC_EnableFast+0x3a>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d101      	bne.n	8002efe <LL_TIM_OC_EnableFast+0x36>
 8002efa:	2305      	movs	r3, #5
 8002efc:	e00a      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002efe:	2306      	movs	r3, #6
 8002f00:	e008      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f02:	2304      	movs	r3, #4
 8002f04:	e006      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f06:	2303      	movs	r3, #3
 8002f08:	e004      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e002      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3318      	adds	r3, #24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <LL_TIM_OC_EnableFast+0x80>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	440b      	add	r3, r1
 8002f24:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <LL_TIM_OC_EnableFast+0x84>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	4619      	mov	r1, r3
 8002f32:	2304      	movs	r3, #4
 8002f34:	408b      	lsls	r3, r1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	601a      	str	r2, [r3, #0]

}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	08009608 	.word	0x08009608
 8002f4c:	08009610 	.word	0x08009610

08002f50 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d01c      	beq.n	8002f9a <LL_TIM_OC_EnablePreload+0x4a>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d017      	beq.n	8002f96 <LL_TIM_OC_EnablePreload+0x46>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d012      	beq.n	8002f92 <LL_TIM_OC_EnablePreload+0x42>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d00d      	beq.n	8002f8e <LL_TIM_OC_EnablePreload+0x3e>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	d007      	beq.n	8002f8a <LL_TIM_OC_EnablePreload+0x3a>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d101      	bne.n	8002f86 <LL_TIM_OC_EnablePreload+0x36>
 8002f82:	2305      	movs	r3, #5
 8002f84:	e00a      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f86:	2306      	movs	r3, #6
 8002f88:	e008      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <LL_TIM_OC_EnablePreload+0x80>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	440b      	add	r3, r1
 8002fac:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <LL_TIM_OC_EnablePreload+0x84>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	2308      	movs	r3, #8
 8002fbc:	408b      	lsls	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	601a      	str	r2, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	08009608 	.word	0x08009608
 8002fd4:	08009610 	.word	0x08009610

08002fd8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_AHB1_GRP1_EnableClock>:
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003054:	4907      	ldr	r1, [pc, #28]	; (8003074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4313      	orrs	r3, r2
 800305a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40023800 	.word	0x40023800

08003078 <LL_APB1_GRP1_EnableClock>:
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003084:	4907      	ldr	r1, [pc, #28]	; (80030a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4313      	orrs	r3, r2
 800308a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800308e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40023800 	.word	0x40023800

080030a8 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b094      	sub	sp, #80	; 0x50
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80030ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	2220      	movs	r2, #32
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 fbe4 	bl	8006894 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	60da      	str	r2, [r3, #12]
 80030d8:	611a      	str	r2, [r3, #16]
 80030da:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80030dc:	2002      	movs	r0, #2
 80030de:	f7ff ffcb 	bl	8003078 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80030e2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80030e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80030e8:	2300      	movs	r3, #0
 80030ea:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 80030ec:	2314      	movs	r3, #20
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030f0:	2300      	movs	r3, #0
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80030f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030f8:	4619      	mov	r1, r3
 80030fa:	4822      	ldr	r0, [pc, #136]	; (8003184 <MX_TIM3_Init+0xdc>)
 80030fc:	f002 fe3a 	bl	8005d74 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8003100:	4820      	ldr	r0, [pc, #128]	; (8003184 <MX_TIM3_Init+0xdc>)
 8003102:	f7ff fed1 	bl	8002ea8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003106:	2100      	movs	r1, #0
 8003108:	481e      	ldr	r0, [pc, #120]	; (8003184 <MX_TIM3_Init+0xdc>)
 800310a:	f7ff ff65 	bl	8002fd8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800310e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003112:	481c      	ldr	r0, [pc, #112]	; (8003184 <MX_TIM3_Init+0xdc>)
 8003114:	f7ff ff1c 	bl	8002f50 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003118:	2360      	movs	r3, #96	; 0x60
 800311a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8003124:	230a      	movs	r3, #10
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800312c:	f107 031c 	add.w	r3, r7, #28
 8003130:	461a      	mov	r2, r3
 8003132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003136:	4813      	ldr	r0, [pc, #76]	; (8003184 <MX_TIM3_Init+0xdc>)
 8003138:	f002 feb6 	bl	8005ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800313c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003140:	4810      	ldr	r0, [pc, #64]	; (8003184 <MX_TIM3_Init+0xdc>)
 8003142:	f7ff fec1 	bl	8002ec8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003146:	2100      	movs	r1, #0
 8003148:	480e      	ldr	r0, [pc, #56]	; (8003184 <MX_TIM3_Init+0xdc>)
 800314a:	f7ff ff5a 	bl	8003002 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800314e:	480d      	ldr	r0, [pc, #52]	; (8003184 <MX_TIM3_Init+0xdc>)
 8003150:	f7ff ff6a 	bl	8003028 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003154:	2002      	movs	r0, #2
 8003156:	f7ff ff77 	bl	8003048 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800315a:	2302      	movs	r3, #2
 800315c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800315e:	2302      	movs	r3, #2
 8003160:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4804      	ldr	r0, [pc, #16]	; (8003188 <MX_TIM3_Init+0xe0>)
 8003178:	f002 fb67 	bl	800584a <LL_GPIO_Init>

}
 800317c:	bf00      	nop
 800317e:	3750      	adds	r7, #80	; 0x50
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40000400 	.word	0x40000400
 8003188:	40020400 	.word	0x40020400

0800318c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b094      	sub	sp, #80	; 0x50
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	2220      	movs	r2, #32
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fb72 	bl	8006894 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	611a      	str	r2, [r3, #16]
 80031be:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80031c0:	2008      	movs	r0, #8
 80031c2:	f7ff ff59 	bl	8003078 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80031ca:	2300      	movs	r3, #0
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 80031ce:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80031d2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80031d4:	2300      	movs	r3, #0
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80031d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031dc:	4619      	mov	r1, r3
 80031de:	483a      	ldr	r0, [pc, #232]	; (80032c8 <MX_TIM5_Init+0x13c>)
 80031e0:	f002 fdc8 	bl	8005d74 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 80031e4:	4838      	ldr	r0, [pc, #224]	; (80032c8 <MX_TIM5_Init+0x13c>)
 80031e6:	f7ff fe5f 	bl	8002ea8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80031ea:	2100      	movs	r1, #0
 80031ec:	4836      	ldr	r0, [pc, #216]	; (80032c8 <MX_TIM5_Init+0x13c>)
 80031ee:	f7ff fef3 	bl	8002fd8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80031f2:	2101      	movs	r1, #1
 80031f4:	4834      	ldr	r0, [pc, #208]	; (80032c8 <MX_TIM5_Init+0x13c>)
 80031f6:	f7ff feab 	bl	8002f50 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80031fa:	2360      	movs	r3, #96	; 0x60
 80031fc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80031fe:	2300      	movs	r3, #0
 8003200:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800320a:	2300      	movs	r3, #0
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800320e:	f107 031c 	add.w	r3, r7, #28
 8003212:	461a      	mov	r2, r3
 8003214:	2101      	movs	r1, #1
 8003216:	482c      	ldr	r0, [pc, #176]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003218:	f002 fe46 	bl	8005ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800321c:	2101      	movs	r1, #1
 800321e:	482a      	ldr	r0, [pc, #168]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003220:	f7ff fe52 	bl	8002ec8 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8003224:	2110      	movs	r1, #16
 8003226:	4828      	ldr	r0, [pc, #160]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003228:	f7ff fe92 	bl	8002f50 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	461a      	mov	r2, r3
 8003232:	2110      	movs	r1, #16
 8003234:	4824      	ldr	r0, [pc, #144]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003236:	f002 fe37 	bl	8005ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 800323a:	2110      	movs	r1, #16
 800323c:	4822      	ldr	r0, [pc, #136]	; (80032c8 <MX_TIM5_Init+0x13c>)
 800323e:	f7ff fe43 	bl	8002ec8 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8003242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003246:	4820      	ldr	r0, [pc, #128]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003248:	f7ff fe82 	bl	8002f50 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	461a      	mov	r2, r3
 8003252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003256:	481c      	ldr	r0, [pc, #112]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003258:	f002 fe26 	bl	8005ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800325c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003260:	4819      	ldr	r0, [pc, #100]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003262:	f7ff fe31 	bl	8002ec8 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8003266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800326a:	4817      	ldr	r0, [pc, #92]	; (80032c8 <MX_TIM5_Init+0x13c>)
 800326c:	f7ff fe70 	bl	8002f50 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003270:	f107 031c 	add.w	r3, r7, #28
 8003274:	461a      	mov	r2, r3
 8003276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800327a:	4813      	ldr	r0, [pc, #76]	; (80032c8 <MX_TIM5_Init+0x13c>)
 800327c:	f002 fe14 	bl	8005ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8003280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003284:	4810      	ldr	r0, [pc, #64]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003286:	f7ff fe1f 	bl	8002ec8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800328a:	2100      	movs	r1, #0
 800328c:	480e      	ldr	r0, [pc, #56]	; (80032c8 <MX_TIM5_Init+0x13c>)
 800328e:	f7ff feb8 	bl	8003002 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8003292:	480d      	ldr	r0, [pc, #52]	; (80032c8 <MX_TIM5_Init+0x13c>)
 8003294:	f7ff fec8 	bl	8003028 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003298:	2001      	movs	r0, #1
 800329a:	f7ff fed5 	bl	8003048 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800329e:	230f      	movs	r3, #15
 80032a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032a2:	2302      	movs	r3, #2
 80032a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4804      	ldr	r0, [pc, #16]	; (80032cc <MX_TIM5_Init+0x140>)
 80032bc:	f002 fac5 	bl	800584a <LL_GPIO_Init>

}
 80032c0:	bf00      	nop
 80032c2:	3750      	adds	r7, #80	; 0x50
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40020000 	.word	0x40020000

080032d0 <__NVIC_GetPriorityGrouping>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <__NVIC_GetPriorityGrouping+0x18>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f003 0307 	and.w	r3, r3, #7
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_EnableIRQ>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	db0b      	blt.n	8003316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f003 021f 	and.w	r2, r3, #31
 8003304:	4907      	ldr	r1, [pc, #28]	; (8003324 <__NVIC_EnableIRQ+0x38>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2001      	movs	r0, #1
 800330e:	fa00 f202 	lsl.w	r2, r0, r2
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000e100 	.word	0xe000e100

08003328 <__NVIC_SetPriority>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	2b00      	cmp	r3, #0
 800333a:	db0a      	blt.n	8003352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	490c      	ldr	r1, [pc, #48]	; (8003374 <__NVIC_SetPriority+0x4c>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	0112      	lsls	r2, r2, #4
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	440b      	add	r3, r1
 800334c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003350:	e00a      	b.n	8003368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4908      	ldr	r1, [pc, #32]	; (8003378 <__NVIC_SetPriority+0x50>)
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	3b04      	subs	r3, #4
 8003360:	0112      	lsls	r2, r2, #4
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	440b      	add	r3, r1
 8003366:	761a      	strb	r2, [r3, #24]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000e100 	.word	0xe000e100
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <NVIC_EncodePriority>:
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f1c3 0307 	rsb	r3, r3, #7
 8003396:	2b04      	cmp	r3, #4
 8003398:	bf28      	it	cs
 800339a:	2304      	movcs	r3, #4
 800339c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d902      	bls.n	80033ac <NVIC_EncodePriority+0x30>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3b03      	subs	r3, #3
 80033aa:	e000      	b.n	80033ae <NVIC_EncodePriority+0x32>
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43da      	mvns	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	401a      	ands	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c4:	f04f 31ff 	mov.w	r1, #4294967295
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa01 f303 	lsl.w	r3, r1, r3
 80033ce:	43d9      	mvns	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	4313      	orrs	r3, r2
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3724      	adds	r7, #36	; 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_USART_Enable>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_USART_ConfigAsyncMode>:
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	615a      	str	r2, [r3, #20]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <LL_AHB1_GRP1_EnableClock>:
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4313      	orrs	r3, r2
 8003442:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4013      	ands	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40023800 	.word	0x40023800

08003460 <LL_APB1_GRP1_EnableClock>:
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <LL_APB1_GRP1_EnableClock+0x2c>)
 800346a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346c:	4907      	ldr	r1, [pc, #28]	; (800348c <LL_APB1_GRP1_EnableClock+0x2c>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4013      	ands	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40023800 	.word	0x40023800

08003490 <LL_APB2_GRP1_EnableClock>:
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800349a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80034a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4013      	ands	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40023800 	.word	0x40023800

080034c0 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	; 0x38
 80034c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80034c6:	f107 031c 	add.w	r3, r7, #28
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	615a      	str	r2, [r3, #20]
 80034d8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80034ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80034ee:	f7ff ffb7 	bl	8003460 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80034f2:	2004      	movs	r0, #4
 80034f4:	f7ff ff9c 	bl	8003430 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80034f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034fe:	2302      	movs	r3, #2
 8003500:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800350e:	2308      	movs	r3, #8
 8003510:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4819      	ldr	r0, [pc, #100]	; (800357c <MX_UART4_Init+0xbc>)
 8003518:	f002 f997 	bl	800584a <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800351c:	f7ff fed8 	bl	80032d0 <__NVIC_GetPriorityGrouping>
 8003520:	4603      	mov	r3, r0
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff28 	bl	800337c <NVIC_EncodePriority>
 800352c:	4603      	mov	r3, r0
 800352e:	4619      	mov	r1, r3
 8003530:	2034      	movs	r0, #52	; 0x34
 8003532:	f7ff fef9 	bl	8003328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8003536:	2034      	movs	r0, #52	; 0x34
 8003538:	f7ff fed8 	bl	80032ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800353c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003540:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800354a:	2300      	movs	r3, #0
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800354e:	230c      	movs	r3, #12
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003552:	2300      	movs	r3, #0
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003556:	2300      	movs	r3, #0
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800355a:	f107 031c 	add.w	r3, r7, #28
 800355e:	4619      	mov	r1, r3
 8003560:	4807      	ldr	r0, [pc, #28]	; (8003580 <MX_UART4_Init+0xc0>)
 8003562:	f003 f8ed 	bl	8006740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8003566:	4806      	ldr	r0, [pc, #24]	; (8003580 <MX_UART4_Init+0xc0>)
 8003568:	f7ff ff4b 	bl	8003402 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800356c:	4804      	ldr	r0, [pc, #16]	; (8003580 <MX_UART4_Init+0xc0>)
 800356e:	f7ff ff38 	bl	80033e2 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003572:	bf00      	nop
 8003574:	3738      	adds	r7, #56	; 0x38
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40020800 	.word	0x40020800
 8003580:	40004c00 	.word	0x40004c00

08003584 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08e      	sub	sp, #56	; 0x38
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800358a:	f107 031c 	add.w	r3, r7, #28
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	611a      	str	r2, [r3, #16]
 800359a:	615a      	str	r2, [r3, #20]
 800359c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
 80035ac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80035ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80035b2:	f7ff ff55 	bl	8003460 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80035b6:	2004      	movs	r0, #4
 80035b8:	f7ff ff3a 	bl	8003430 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80035bc:	2008      	movs	r0, #8
 80035be:	f7ff ff37 	bl	8003430 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80035c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035c8:	2302      	movs	r3, #2
 80035ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80035cc:	2303      	movs	r3, #3
 80035ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80035d8:	2308      	movs	r3, #8
 80035da:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4821      	ldr	r0, [pc, #132]	; (8003668 <MX_UART5_Init+0xe4>)
 80035e2:	f002 f932 	bl	800584a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80035e6:	2304      	movs	r3, #4
 80035e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035ea:	2302      	movs	r3, #2
 80035ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80035fa:	2308      	movs	r3, #8
 80035fc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	4619      	mov	r1, r3
 8003602:	481a      	ldr	r0, [pc, #104]	; (800366c <MX_UART5_Init+0xe8>)
 8003604:	f002 f921 	bl	800584a <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003608:	f7ff fe62 	bl	80032d0 <__NVIC_GetPriorityGrouping>
 800360c:	4603      	mov	r3, r0
 800360e:	2200      	movs	r2, #0
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff feb2 	bl	800337c <NVIC_EncodePriority>
 8003618:	4603      	mov	r3, r0
 800361a:	4619      	mov	r1, r3
 800361c:	2035      	movs	r0, #53	; 0x35
 800361e:	f7ff fe83 	bl	8003328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8003622:	2035      	movs	r0, #53	; 0x35
 8003624:	f7ff fe62 	bl	80032ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003628:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800362c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003636:	2300      	movs	r3, #0
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800363a:	2304      	movs	r3, #4
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800363e:	2300      	movs	r3, #0
 8003640:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003642:	2300      	movs	r3, #0
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8003646:	f107 031c 	add.w	r3, r7, #28
 800364a:	4619      	mov	r1, r3
 800364c:	4808      	ldr	r0, [pc, #32]	; (8003670 <MX_UART5_Init+0xec>)
 800364e:	f003 f877 	bl	8006740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8003652:	4807      	ldr	r0, [pc, #28]	; (8003670 <MX_UART5_Init+0xec>)
 8003654:	f7ff fed5 	bl	8003402 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8003658:	4805      	ldr	r0, [pc, #20]	; (8003670 <MX_UART5_Init+0xec>)
 800365a:	f7ff fec2 	bl	80033e2 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800365e:	bf00      	nop
 8003660:	3738      	adds	r7, #56	; 0x38
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40020800 	.word	0x40020800
 800366c:	40020c00 	.word	0x40020c00
 8003670:	40005000 	.word	0x40005000

08003674 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	; 0x38
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800367a:	f107 031c 	add.w	r3, r7, #28
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
 800369c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800369e:	2020      	movs	r0, #32
 80036a0:	f7ff fef6 	bl	8003490 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80036a4:	2004      	movs	r0, #4
 80036a6:	f7ff fec3 	bl	8003430 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80036aa:	23c0      	movs	r3, #192	; 0xc0
 80036ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80036ae:	2302      	movs	r3, #2
 80036b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80036be:	2308      	movs	r3, #8
 80036c0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4819      	ldr	r0, [pc, #100]	; (800372c <MX_USART6_UART_Init+0xb8>)
 80036c8:	f002 f8bf 	bl	800584a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80036cc:	f7ff fe00 	bl	80032d0 <__NVIC_GetPriorityGrouping>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2200      	movs	r2, #0
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fe50 	bl	800337c <NVIC_EncodePriority>
 80036dc:	4603      	mov	r3, r0
 80036de:	4619      	mov	r1, r3
 80036e0:	2047      	movs	r0, #71	; 0x47
 80036e2:	f7ff fe21 	bl	8003328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80036e6:	2047      	movs	r0, #71	; 0x47
 80036e8:	f7ff fe00 	bl	80032ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80036ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80036f0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80036fe:	230c      	movs	r3, #12
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003702:	2300      	movs	r3, #0
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4619      	mov	r1, r3
 8003710:	4807      	ldr	r0, [pc, #28]	; (8003730 <MX_USART6_UART_Init+0xbc>)
 8003712:	f003 f815 	bl	8006740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003716:	4806      	ldr	r0, [pc, #24]	; (8003730 <MX_USART6_UART_Init+0xbc>)
 8003718:	f7ff fe73 	bl	8003402 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800371c:	4804      	ldr	r0, [pc, #16]	; (8003730 <MX_USART6_UART_Init+0xbc>)
 800371e:	f7ff fe60 	bl	80033e2 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003722:	bf00      	nop
 8003724:	3738      	adds	r7, #56	; 0x38
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40020800 	.word	0x40020800
 8003730:	40011400 	.word	0x40011400

08003734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800376c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003738:	480d      	ldr	r0, [pc, #52]	; (8003770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800373a:	490e      	ldr	r1, [pc, #56]	; (8003774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800373c:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003740:	e002      	b.n	8003748 <LoopCopyDataInit>

08003742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003746:	3304      	adds	r3, #4

08003748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800374a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800374c:	d3f9      	bcc.n	8003742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003750:	4c0b      	ldr	r4, [pc, #44]	; (8003780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003754:	e001      	b.n	800375a <LoopFillZerobss>

08003756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003758:	3204      	adds	r2, #4

0800375a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800375a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800375c:	d3fb      	bcc.n	8003756 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800375e:	f7ff fb91 	bl	8002e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003762:	f003 f873 	bl	800684c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003766:	f7fe fed3 	bl	8002510 <main>
  bx  lr    
 800376a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800376c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003774:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003778:	08009a04 	.word	0x08009a04
  ldr r2, =_sbss
 800377c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003780:	20000340 	.word	0x20000340

08003784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003784:	e7fe      	b.n	8003784 <ADC_IRQHandler>
	...

08003788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <HAL_Init+0x40>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_Init+0x40>)
 800379e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <HAL_Init+0x40>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 f931 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b6:	200f      	movs	r0, #15
 80037b8:	f000 f808 	bl	80037cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037bc:	f7ff f92e 	bl	8002a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00

080037cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_InitTick+0x54>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_InitTick+0x58>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f93b 	bl	8003a66 <HAL_SYSTICK_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00e      	b.n	8003818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d80a      	bhi.n	8003816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003800:	2200      	movs	r2, #0
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	f000 f911 	bl	8003a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800380c:	4a06      	ldr	r2, [pc, #24]	; (8003828 <HAL_InitTick+0x5c>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000000 	.word	0x20000000
 8003824:	20000008 	.word	0x20000008
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x20>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_IncTick+0x24>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_IncTick+0x24>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000008 	.word	0x20000008
 8003850:	2000032c 	.word	0x2000032c

08003854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_GetTick+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	2000032c 	.word	0x2000032c

0800386c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff ffee 	bl	8003854 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_Delay+0x44>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003892:	bf00      	nop
 8003894:	f7ff ffde 	bl	8003854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
  {
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000008 	.word	0x20000008

080038b4 <__NVIC_SetPriorityGrouping>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d0:	4013      	ands	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e6:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	60d3      	str	r3, [r2, #12]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_GetPriorityGrouping>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <__NVIC_GetPriorityGrouping+0x18>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	f003 0307 	and.w	r3, r3, #7
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_SetPriority>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	4313      	orrs	r3, r2
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	d301      	bcc.n	80039ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00f      	b.n	8003a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <SysTick_Config+0x40>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f2:	210f      	movs	r1, #15
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	f7ff ff8e 	bl	8003918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <SysTick_Config+0x40>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <SysTick_Config+0x40>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff47 	bl	80038b4 <__NVIC_SetPriorityGrouping>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a40:	f7ff ff5c 	bl	80038fc <__NVIC_GetPriorityGrouping>
 8003a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff ff8e 	bl	800396c <NVIC_EncodePriority>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff5d 	bl	8003918 <__NVIC_SetPriority>
}
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ffb0 	bl	80039d4 <SysTick_Config>
 8003a74:	4603      	mov	r3, r0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e16b      	b.n	8003d74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	f040 815a 	bne.w	8003d6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d005      	beq.n	8003ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d130      	bne.n	8003b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 0201 	and.w	r2, r3, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d017      	beq.n	8003b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d123      	bne.n	8003bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	08da      	lsrs	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3208      	adds	r2, #8
 8003bbe:	69b9      	ldr	r1, [r7, #24]
 8003bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0203 	and.w	r2, r3, #3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80b4 	beq.w	8003d6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	4b60      	ldr	r3, [pc, #384]	; (8003d8c <HAL_GPIO_Init+0x30c>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	4a5f      	ldr	r2, [pc, #380]	; (8003d8c <HAL_GPIO_Init+0x30c>)
 8003c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c14:	6453      	str	r3, [r2, #68]	; 0x44
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_GPIO_Init+0x30c>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c22:	4a5b      	ldr	r2, [pc, #364]	; (8003d90 <HAL_GPIO_Init+0x310>)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	220f      	movs	r2, #15
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <HAL_GPIO_Init+0x314>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d02b      	beq.n	8003ca6 <HAL_GPIO_Init+0x226>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a51      	ldr	r2, [pc, #324]	; (8003d98 <HAL_GPIO_Init+0x318>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d025      	beq.n	8003ca2 <HAL_GPIO_Init+0x222>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a50      	ldr	r2, [pc, #320]	; (8003d9c <HAL_GPIO_Init+0x31c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01f      	beq.n	8003c9e <HAL_GPIO_Init+0x21e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4f      	ldr	r2, [pc, #316]	; (8003da0 <HAL_GPIO_Init+0x320>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_GPIO_Init+0x21a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4e      	ldr	r2, [pc, #312]	; (8003da4 <HAL_GPIO_Init+0x324>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_GPIO_Init+0x216>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_GPIO_Init+0x328>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00d      	beq.n	8003c92 <HAL_GPIO_Init+0x212>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4c      	ldr	r2, [pc, #304]	; (8003dac <HAL_GPIO_Init+0x32c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <HAL_GPIO_Init+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4b      	ldr	r2, [pc, #300]	; (8003db0 <HAL_GPIO_Init+0x330>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_GPIO_Init+0x20a>
 8003c86:	2307      	movs	r3, #7
 8003c88:	e00e      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	e00c      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c8e:	2306      	movs	r3, #6
 8003c90:	e00a      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c92:	2305      	movs	r3, #5
 8003c94:	e008      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c96:	2304      	movs	r3, #4
 8003c98:	e006      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e004      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e002      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	f002 0203 	and.w	r2, r2, #3
 8003cae:	0092      	lsls	r2, r2, #2
 8003cb0:	4093      	lsls	r3, r2
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb8:	4935      	ldr	r1, [pc, #212]	; (8003d90 <HAL_GPIO_Init+0x310>)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cea:	4a32      	ldr	r2, [pc, #200]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cf0:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d14:	4a27      	ldr	r2, [pc, #156]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d68:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <HAL_GPIO_Init+0x334>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	f67f ae90 	bls.w	8003a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40013800 	.word	0x40013800
 8003d94:	40020000 	.word	0x40020000
 8003d98:	40020400 	.word	0x40020400
 8003d9c:	40020800 	.word	0x40020800
 8003da0:	40020c00 	.word	0x40020c00
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40021400 	.word	0x40021400
 8003dac:	40021800 	.word	0x40021800
 8003db0:	40021c00 	.word	0x40021c00
 8003db4:	40013c00 	.word	0x40013c00

08003db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e12b      	b.n	8004022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fe fa92 	bl	8002308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f001 fbfc 	bl	8005618 <HAL_RCC_GetPCLK1Freq>
 8003e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4a81      	ldr	r2, [pc, #516]	; (800402c <HAL_I2C_Init+0x274>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d807      	bhi.n	8003e3c <HAL_I2C_Init+0x84>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a80      	ldr	r2, [pc, #512]	; (8004030 <HAL_I2C_Init+0x278>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e006      	b.n	8003e4a <HAL_I2C_Init+0x92>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a7d      	ldr	r2, [pc, #500]	; (8004034 <HAL_I2C_Init+0x27c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bf94      	ite	ls
 8003e44:	2301      	movls	r3, #1
 8003e46:	2300      	movhi	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0e7      	b.n	8004022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a78      	ldr	r2, [pc, #480]	; (8004038 <HAL_I2C_Init+0x280>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0c9b      	lsrs	r3, r3, #18
 8003e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a6a      	ldr	r2, [pc, #424]	; (800402c <HAL_I2C_Init+0x274>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d802      	bhi.n	8003e8c <HAL_I2C_Init+0xd4>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	e009      	b.n	8003ea0 <HAL_I2C_Init+0xe8>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4a69      	ldr	r2, [pc, #420]	; (800403c <HAL_I2C_Init+0x284>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	495c      	ldr	r1, [pc, #368]	; (800402c <HAL_I2C_Init+0x274>)
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	d819      	bhi.n	8003ef4 <HAL_I2C_Init+0x13c>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e59      	subs	r1, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ed4:	400b      	ands	r3, r1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_I2C_Init+0x138>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1e59      	subs	r1, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eee:	e051      	b.n	8003f94 <HAL_I2C_Init+0x1dc>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	e04f      	b.n	8003f94 <HAL_I2C_Init+0x1dc>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d111      	bne.n	8003f20 <HAL_I2C_Init+0x168>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	440b      	add	r3, r1
 8003f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e012      	b.n	8003f46 <HAL_I2C_Init+0x18e>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1e58      	subs	r0, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	0099      	lsls	r1, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Init+0x196>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e022      	b.n	8003f94 <HAL_I2C_Init+0x1dc>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10e      	bne.n	8003f74 <HAL_I2C_Init+0x1bc>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1e58      	subs	r0, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	440b      	add	r3, r1
 8003f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f72:	e00f      	b.n	8003f94 <HAL_I2C_Init+0x1dc>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1e58      	subs	r0, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	0099      	lsls	r1, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	6809      	ldr	r1, [r1, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6911      	ldr	r1, [r2, #16]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68d2      	ldr	r2, [r2, #12]
 8003fce:	4311      	orrs	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	000186a0 	.word	0x000186a0
 8004030:	001e847f 	.word	0x001e847f
 8004034:	003d08ff 	.word	0x003d08ff
 8004038:	431bde83 	.word	0x431bde83
 800403c:	10624dd3 	.word	0x10624dd3

08004040 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	4608      	mov	r0, r1
 800404a:	4611      	mov	r1, r2
 800404c:	461a      	mov	r2, r3
 800404e:	4603      	mov	r3, r0
 8004050:	817b      	strh	r3, [r7, #10]
 8004052:	460b      	mov	r3, r1
 8004054:	813b      	strh	r3, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800405a:	f7ff fbfb 	bl	8003854 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	f040 80d9 	bne.w	8004220 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2319      	movs	r3, #25
 8004074:	2201      	movs	r2, #1
 8004076:	496d      	ldr	r1, [pc, #436]	; (800422c <HAL_I2C_Mem_Write+0x1ec>)
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fc7f 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	e0cc      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_I2C_Mem_Write+0x56>
 8004092:	2302      	movs	r3, #2
 8004094:	e0c5      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d007      	beq.n	80040bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2221      	movs	r2, #33	; 0x21
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a4d      	ldr	r2, [pc, #308]	; (8004230 <HAL_I2C_Mem_Write+0x1f0>)
 80040fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040fe:	88f8      	ldrh	r0, [r7, #6]
 8004100:	893a      	ldrh	r2, [r7, #8]
 8004102:	8979      	ldrh	r1, [r7, #10]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4603      	mov	r3, r0
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fab6 	bl	8004680 <I2C_RequestMemoryWrite>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d052      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e081      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fd00 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b04      	cmp	r3, #4
 8004134:	d107      	bne.n	8004146 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06b      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_I2C_Mem_Write+0x180>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1aa      	bne.n	800411e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fcec 	bl	8004baa <I2C_WaitOnBTFFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00d      	beq.n	80041f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d107      	bne.n	80041f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e016      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000

08004234 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4603      	mov	r3, r0
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	460b      	mov	r3, r1
 8004248:	813b      	strh	r3, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800424e:	f7ff fb01 	bl	8003854 <HAL_GetTick>
 8004252:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b20      	cmp	r3, #32
 800425e:	f040 8208 	bne.w	8004672 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2319      	movs	r3, #25
 8004268:	2201      	movs	r2, #1
 800426a:	497b      	ldr	r1, [pc, #492]	; (8004458 <HAL_I2C_Mem_Read+0x224>)
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fb85 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
 800427a:	e1fb      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_I2C_Mem_Read+0x56>
 8004286:	2302      	movs	r3, #2
 8004288:	e1f4      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d007      	beq.n	80042b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2222      	movs	r2, #34	; 0x22
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2240      	movs	r2, #64	; 0x40
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a5b      	ldr	r2, [pc, #364]	; (800445c <HAL_I2C_Mem_Read+0x228>)
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042f2:	88f8      	ldrh	r0, [r7, #6]
 80042f4:	893a      	ldrh	r2, [r7, #8]
 80042f6:	8979      	ldrh	r1, [r7, #10]
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	4603      	mov	r3, r0
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fa52 	bl	80047ac <I2C_RequestMemoryRead>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1b0      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	623b      	str	r3, [r7, #32]
 800432e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	e184      	b.n	800464c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	2b01      	cmp	r3, #1
 8004348:	d11b      	bne.n	8004382 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004358:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e164      	b.n	800464c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	2b02      	cmp	r3, #2
 8004388:	d11b      	bne.n	80043c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004398:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	e144      	b.n	800464c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043d8:	e138      	b.n	800464c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	2b03      	cmp	r3, #3
 80043e0:	f200 80f1 	bhi.w	80045c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d123      	bne.n	8004434 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fc1b 	bl	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e139      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004432:	e10b      	b.n	800464c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	2b02      	cmp	r3, #2
 800443a:	d14e      	bne.n	80044da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	2200      	movs	r2, #0
 8004444:	4906      	ldr	r1, [pc, #24]	; (8004460 <HAL_I2C_Mem_Read+0x22c>)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fa98 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e10e      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
 8004456:	bf00      	nop
 8004458:	00100002 	.word	0x00100002
 800445c:	ffff0000 	.word	0xffff0000
 8004460:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d8:	e0b8      	b.n	800464c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2200      	movs	r2, #0
 80044e2:	4966      	ldr	r1, [pc, #408]	; (800467c <HAL_I2C_Mem_Read+0x448>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa49 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0bf      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	2200      	movs	r2, #0
 800453e:	494f      	ldr	r1, [pc, #316]	; (800467c <HAL_I2C_Mem_Read+0x448>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fa1b 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e091      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045c4:	e042      	b.n	800464c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fb2e 	bl	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e04c      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d118      	bne.n	800464c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f aec2 	bne.w	80043da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3728      	adds	r7, #40	; 0x28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	00010004 	.word	0x00010004

08004680 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	461a      	mov	r2, r3
 800468e:	4603      	mov	r3, r0
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	460b      	mov	r3, r1
 8004694:	813b      	strh	r3, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f960 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d0:	d103      	bne.n	80046da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e05f      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046de:	897b      	ldrh	r3, [r7, #10]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	492d      	ldr	r1, [pc, #180]	; (80047a8 <I2C_RequestMemoryWrite+0x128>)
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f998 	bl	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e04c      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	6a39      	ldr	r1, [r7, #32]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fa02 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b04      	cmp	r3, #4
 8004730:	d107      	bne.n	8004742 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e02b      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800474c:	893b      	ldrh	r3, [r7, #8]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	e021      	b.n	800479c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b29b      	uxth	r3, r3
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	6a39      	ldr	r1, [r7, #32]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f9dc 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b04      	cmp	r3, #4
 800477c:	d107      	bne.n	800478e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e005      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004792:	893b      	ldrh	r3, [r7, #8]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	00010002 	.word	0x00010002

080047ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	817b      	strh	r3, [r7, #10]
 80047be:	460b      	mov	r3, r1
 80047c0:	813b      	strh	r3, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f8c2 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480c:	d103      	bne.n	8004816 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0aa      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	4952      	ldr	r1, [pc, #328]	; (8004978 <I2C_RequestMemoryRead+0x1cc>)
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f8fa 	bl	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e097      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	6a39      	ldr	r1, [r7, #32]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f964 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b04      	cmp	r3, #4
 800486c:	d107      	bne.n	800487e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e076      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d105      	bne.n	8004894 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	e021      	b.n	80048d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	b29b      	uxth	r3, r3
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	6a39      	ldr	r1, [r7, #32]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f93e 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d107      	bne.n	80048ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e050      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ce:	893b      	ldrh	r3, [r7, #8]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	6a39      	ldr	r1, [r7, #32]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f923 	bl	8004b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d107      	bne.n	8004900 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e035      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004912:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	2200      	movs	r2, #0
 800491c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f82b 	bl	800497c <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493a:	d103      	bne.n	8004944 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e013      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004948:	897b      	ldrh	r3, [r7, #10]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	4906      	ldr	r1, [pc, #24]	; (8004978 <I2C_RequestMemoryRead+0x1cc>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f863 	bl	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	00010002 	.word	0x00010002

0800497c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800498c:	e025      	b.n	80049da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d021      	beq.n	80049da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fe ff5d 	bl	8003854 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0220 	orr.w	r2, r3, #32
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e023      	b.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10d      	bne.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf0c      	ite	eq
 80049f6:	2301      	moveq	r3, #1
 80049f8:	2300      	movne	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	e00c      	b.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d0b6      	beq.n	800498e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a38:	e051      	b.n	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a48:	d123      	bne.n	8004a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e046      	b.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d021      	beq.n	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9a:	f7fe fedb 	bl	8003854 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d116      	bne.n	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e020      	b.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10c      	bne.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	43da      	mvns	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4013      	ands	r3, r2
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e00b      	b.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d18d      	bne.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b34:	e02d      	b.n	8004b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8ce 	bl	8004cd8 <I2C_IsAcknowledgeFailed>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e02d      	b.n	8004ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d021      	beq.n	8004b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fe fe81 	bl	8003854 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d116      	bne.n	8004b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e007      	b.n	8004ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d1ca      	bne.n	8004b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb6:	e02d      	b.n	8004c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f88d 	bl	8004cd8 <I2C_IsAcknowledgeFailed>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e02d      	b.n	8004c24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d021      	beq.n	8004c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fe fe40 	bl	8003854 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d116      	bne.n	8004c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e007      	b.n	8004c24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d1ca      	bne.n	8004bb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c38:	e042      	b.n	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d119      	bne.n	8004c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0210 	mvn.w	r2, #16
 8004c50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e029      	b.n	8004cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7c:	f7fe fdea 	bl	8003854 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e007      	b.n	8004cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d1b5      	bne.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cee:	d11b      	bne.n	8004d28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	f043 0204 	orr.w	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e267      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d075      	beq.n	8004e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d56:	4b88      	ldr	r3, [pc, #544]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d00c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d62:	4b85      	ldr	r3, [pc, #532]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d112      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6e:	4b82      	ldr	r3, [pc, #520]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	d10b      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	4b7e      	ldr	r3, [pc, #504]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05b      	beq.n	8004e40 <HAL_RCC_OscConfig+0x108>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d157      	bne.n	8004e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e242      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x74>
 8004d9e:	4b76      	ldr	r3, [pc, #472]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a75      	ldr	r2, [pc, #468]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e01d      	b.n	8004de8 <HAL_RCC_OscConfig+0xb0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x98>
 8004db6:	4b70      	ldr	r3, [pc, #448]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6f      	ldr	r2, [pc, #444]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b6d      	ldr	r3, [pc, #436]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6c      	ldr	r2, [pc, #432]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0xb0>
 8004dd0:	4b69      	ldr	r3, [pc, #420]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a68      	ldr	r2, [pc, #416]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	4b66      	ldr	r3, [pc, #408]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a65      	ldr	r2, [pc, #404]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fe fd30 	bl	8003854 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fe fd2c 	bl	8003854 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e207      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0xc0>
 8004e16:	e014      	b.n	8004e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fe fd1c 	bl	8003854 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fe fd18 	bl	8003854 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	; 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e1f3      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	4b51      	ldr	r3, [pc, #324]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0xe8>
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d063      	beq.n	8004f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d11c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e66:	4b44      	ldr	r3, [pc, #272]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d116      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e72:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_RCC_OscConfig+0x152>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d001      	beq.n	8004e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e1c7      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4937      	ldr	r1, [pc, #220]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9e:	e03a      	b.n	8004f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea8:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_OscConfig+0x244>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fe fcd1 	bl	8003854 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb6:	f7fe fccd 	bl	8003854 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1a8      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed4:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4925      	ldr	r1, [pc, #148]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	600b      	str	r3, [r1, #0]
 8004ee8:	e015      	b.n	8004f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <HAL_RCC_OscConfig+0x244>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fcb0 	bl	8003854 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef8:	f7fe fcac 	bl	8003854 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e187      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d036      	beq.n	8004f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <HAL_RCC_OscConfig+0x248>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fe fc90 	bl	8003854 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f38:	f7fe fc8c 	bl	8003854 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e167      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x200>
 8004f56:	e01b      	b.n	8004f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCC_OscConfig+0x248>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5e:	f7fe fc79 	bl	8003854 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	e00e      	b.n	8004f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f66:	f7fe fc75 	bl	8003854 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d907      	bls.n	8004f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e150      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	42470000 	.word	0x42470000
 8004f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f84:	4b88      	ldr	r3, [pc, #544]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ea      	bne.n	8004f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8097 	beq.w	80050cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa2:	4b81      	ldr	r3, [pc, #516]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10f      	bne.n	8004fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	4b7d      	ldr	r3, [pc, #500]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	4a7c      	ldr	r2, [pc, #496]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fbe:	4b7a      	ldr	r3, [pc, #488]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fce:	4b77      	ldr	r3, [pc, #476]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d118      	bne.n	800500c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fda:	4b74      	ldr	r3, [pc, #464]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a73      	ldr	r2, [pc, #460]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe6:	f7fe fc35 	bl	8003854 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fe fc31 	bl	8003854 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e10c      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d106      	bne.n	8005022 <HAL_RCC_OscConfig+0x2ea>
 8005014:	4b64      	ldr	r3, [pc, #400]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a63      	ldr	r2, [pc, #396]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
 8005020:	e01c      	b.n	800505c <HAL_RCC_OscConfig+0x324>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b05      	cmp	r3, #5
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x30c>
 800502a:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	4a5e      	ldr	r2, [pc, #376]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	6713      	str	r3, [r2, #112]	; 0x70
 8005036:	4b5c      	ldr	r3, [pc, #368]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	4a5b      	ldr	r2, [pc, #364]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6713      	str	r3, [r2, #112]	; 0x70
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0x324>
 8005044:	4b58      	ldr	r3, [pc, #352]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	4a57      	ldr	r2, [pc, #348]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	; 0x70
 8005050:	4b55      	ldr	r3, [pc, #340]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	4a54      	ldr	r2, [pc, #336]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005056:	f023 0304 	bic.w	r3, r3, #4
 800505a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d015      	beq.n	8005090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fe fbf6 	bl	8003854 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fe fbf2 	bl	8003854 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0cb      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005082:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ee      	beq.n	800506c <HAL_RCC_OscConfig+0x334>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005090:	f7fe fbe0 	bl	8003854 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fe fbdc 	bl	8003854 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0b5      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ae:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1ee      	bne.n	8005098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c0:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	4a38      	ldr	r2, [pc, #224]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80a1 	beq.w	8005218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050d6:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d05c      	beq.n	800519c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d141      	bne.n	800516e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_RCC_OscConfig+0x478>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fe fbb0 	bl	8003854 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fe fbac 	bl	8003854 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e087      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69da      	ldr	r2, [r3, #28]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	019b      	lsls	r3, r3, #6
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	3b01      	subs	r3, #1
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	061b      	lsls	r3, r3, #24
 800513a:	491b      	ldr	r1, [pc, #108]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800513c:	4313      	orrs	r3, r2
 800513e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_RCC_OscConfig+0x478>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005146:	f7fe fb85 	bl	8003854 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514e:	f7fe fb81 	bl	8003854 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e05c      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x416>
 800516c:	e054      	b.n	8005218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <HAL_RCC_OscConfig+0x478>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fe fb6e 	bl	8003854 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517c:	f7fe fb6a 	bl	8003854 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e045      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x444>
 800519a:	e03d      	b.n	8005218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e038      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40007000 	.word	0x40007000
 80051b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x4ec>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d028      	beq.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d121      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d11a      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d111      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	3b01      	subs	r3, #1
 80051fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800

08005228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0cc      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b68      	ldr	r3, [pc, #416]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d90c      	bls.n	8005264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b65      	ldr	r3, [pc, #404]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0b8      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800527c:	4b59      	ldr	r3, [pc, #356]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a58      	ldr	r2, [pc, #352]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005294:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4a52      	ldr	r2, [pc, #328]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800529e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a0:	4b50      	ldr	r3, [pc, #320]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	494d      	ldr	r1, [pc, #308]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d044      	beq.n	8005348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d107      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c6:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d119      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e07f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d003      	beq.n	80052e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	4b3f      	ldr	r3, [pc, #252]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e06f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f6:	4b3b      	ldr	r3, [pc, #236]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e067      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f023 0203 	bic.w	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4934      	ldr	r1, [pc, #208]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005318:	f7fe fa9c 	bl	8003854 <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531e:	e00a      	b.n	8005336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005320:	f7fe fa98 	bl	8003854 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e04f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 020c 	and.w	r2, r3, #12
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	429a      	cmp	r2, r3
 8005346:	d1eb      	bne.n	8005320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d20c      	bcs.n	8005370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535e:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e032      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4916      	ldr	r1, [pc, #88]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	490e      	ldr	r1, [pc, #56]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ae:	f000 f821 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80053b2:	4602      	mov	r2, r0
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	490a      	ldr	r1, [pc, #40]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 80053c0:	5ccb      	ldrb	r3, [r1, r3]
 80053c2:	fa22 f303 	lsr.w	r3, r2, r3
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_ClockConfig+0x1c8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe f9fc 	bl	80037cc <HAL_InitTick>

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023c00 	.word	0x40023c00
 80053e4:	40023800 	.word	0x40023800
 80053e8:	080095f0 	.word	0x080095f0
 80053ec:	20000000 	.word	0x20000000
 80053f0:	20000004 	.word	0x20000004

080053f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f8:	b094      	sub	sp, #80	; 0x50
 80053fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005400:	2300      	movs	r3, #0
 8005402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005404:	2300      	movs	r3, #0
 8005406:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800540c:	4b79      	ldr	r3, [pc, #484]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 030c 	and.w	r3, r3, #12
 8005414:	2b08      	cmp	r3, #8
 8005416:	d00d      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x40>
 8005418:	2b08      	cmp	r3, #8
 800541a:	f200 80e1 	bhi.w	80055e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x34>
 8005422:	2b04      	cmp	r3, #4
 8005424:	d003      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x3a>
 8005426:	e0db      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b73      	ldr	r3, [pc, #460]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800542a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800542c:	e0db      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800542e:	4b73      	ldr	r3, [pc, #460]	; (80055fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005432:	e0d8      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005434:	4b6f      	ldr	r3, [pc, #444]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800543c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543e:	4b6d      	ldr	r3, [pc, #436]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d063      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544a:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	099b      	lsrs	r3, r3, #6
 8005450:	2200      	movs	r2, #0
 8005452:	63bb      	str	r3, [r7, #56]	; 0x38
 8005454:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545c:	633b      	str	r3, [r7, #48]	; 0x30
 800545e:	2300      	movs	r3, #0
 8005460:	637b      	str	r3, [r7, #52]	; 0x34
 8005462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005466:	4622      	mov	r2, r4
 8005468:	462b      	mov	r3, r5
 800546a:	f04f 0000 	mov.w	r0, #0
 800546e:	f04f 0100 	mov.w	r1, #0
 8005472:	0159      	lsls	r1, r3, #5
 8005474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005478:	0150      	lsls	r0, r2, #5
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4621      	mov	r1, r4
 8005480:	1a51      	subs	r1, r2, r1
 8005482:	6139      	str	r1, [r7, #16]
 8005484:	4629      	mov	r1, r5
 8005486:	eb63 0301 	sbc.w	r3, r3, r1
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005498:	4659      	mov	r1, fp
 800549a:	018b      	lsls	r3, r1, #6
 800549c:	4651      	mov	r1, sl
 800549e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054a2:	4651      	mov	r1, sl
 80054a4:	018a      	lsls	r2, r1, #6
 80054a6:	4651      	mov	r1, sl
 80054a8:	ebb2 0801 	subs.w	r8, r2, r1
 80054ac:	4659      	mov	r1, fp
 80054ae:	eb63 0901 	sbc.w	r9, r3, r1
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054c6:	4690      	mov	r8, r2
 80054c8:	4699      	mov	r9, r3
 80054ca:	4623      	mov	r3, r4
 80054cc:	eb18 0303 	adds.w	r3, r8, r3
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	462b      	mov	r3, r5
 80054d4:	eb49 0303 	adc.w	r3, r9, r3
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054e6:	4629      	mov	r1, r5
 80054e8:	024b      	lsls	r3, r1, #9
 80054ea:	4621      	mov	r1, r4
 80054ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054f0:	4621      	mov	r1, r4
 80054f2:	024a      	lsls	r2, r1, #9
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fa:	2200      	movs	r2, #0
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005504:	f7fb fb50 	bl	8000ba8 <__aeabi_uldivmod>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4613      	mov	r3, r2
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005510:	e058      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005512:	4b38      	ldr	r3, [pc, #224]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	099b      	lsrs	r3, r3, #6
 8005518:	2200      	movs	r2, #0
 800551a:	4618      	mov	r0, r3
 800551c:	4611      	mov	r1, r2
 800551e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005522:	623b      	str	r3, [r7, #32]
 8005524:	2300      	movs	r3, #0
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
 8005528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	f04f 0000 	mov.w	r0, #0
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	0159      	lsls	r1, r3, #5
 800553a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800553e:	0150      	lsls	r0, r2, #5
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4641      	mov	r1, r8
 8005546:	ebb2 0a01 	subs.w	sl, r2, r1
 800554a:	4649      	mov	r1, r9
 800554c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800555c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005564:	ebb2 040a 	subs.w	r4, r2, sl
 8005568:	eb63 050b 	sbc.w	r5, r3, fp
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	00eb      	lsls	r3, r5, #3
 8005576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800557a:	00e2      	lsls	r2, r4, #3
 800557c:	4614      	mov	r4, r2
 800557e:	461d      	mov	r5, r3
 8005580:	4643      	mov	r3, r8
 8005582:	18e3      	adds	r3, r4, r3
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	464b      	mov	r3, r9
 8005588:	eb45 0303 	adc.w	r3, r5, r3
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800559a:	4629      	mov	r1, r5
 800559c:	028b      	lsls	r3, r1, #10
 800559e:	4621      	mov	r1, r4
 80055a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055a4:	4621      	mov	r1, r4
 80055a6:	028a      	lsls	r2, r1, #10
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ae:	2200      	movs	r2, #0
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	61fa      	str	r2, [r7, #28]
 80055b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b8:	f7fb faf6 	bl	8000ba8 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055c4:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	3301      	adds	r3, #1
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055de:	e002      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3750      	adds	r7, #80	; 0x50
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	00f42400 	.word	0x00f42400
 80055fc:	007a1200 	.word	0x007a1200

08005600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HAL_RCC_GetHCLKFreq+0x14>)
 8005606:	681b      	ldr	r3, [r3, #0]
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000000 	.word	0x20000000

08005618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800561c:	f7ff fff0 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0a9b      	lsrs	r3, r3, #10
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	4903      	ldr	r1, [pc, #12]	; (800563c <HAL_RCC_GetPCLK1Freq+0x24>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40023800 	.word	0x40023800
 800563c:	08009600 	.word	0x08009600

08005640 <LL_GPIO_SetPinMode>:
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	fa93 f3a3 	rbit	r3, r3
 800565a:	613b      	str	r3, [r7, #16]
  return result;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2103      	movs	r1, #3
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	401a      	ands	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	fa93 f3a3 	rbit	r3, r3
 800567a:	61bb      	str	r3, [r7, #24]
  return result;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	fab3 f383 	clz	r3, r3
 8005682:	b2db      	uxtb	r3, r3
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	3724      	adds	r7, #36	; 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <LL_GPIO_SetPinOutputType>:
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <LL_GPIO_SetPinSpeed>:
{
 80056ce:	b480      	push	{r7}
 80056d0:	b089      	sub	sp, #36	; 0x24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	fa93 f3a3 	rbit	r3, r3
 80056e8:	613b      	str	r3, [r7, #16]
  return result;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	fab3 f383 	clz	r3, r3
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	2103      	movs	r1, #3
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	401a      	ands	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa93 f3a3 	rbit	r3, r3
 8005708:	61bb      	str	r3, [r7, #24]
  return result;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	fab3 f383 	clz	r3, r3
 8005710:	b2db      	uxtb	r3, r3
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	431a      	orrs	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	609a      	str	r2, [r3, #8]
}
 8005720:	bf00      	nop
 8005722:	3724      	adds	r7, #36	; 0x24
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <LL_GPIO_SetPinPull>:
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	fa93 f3a3 	rbit	r3, r3
 8005746:	613b      	str	r3, [r7, #16]
  return result;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	fab3 f383 	clz	r3, r3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	2103      	movs	r1, #3
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	43db      	mvns	r3, r3
 800575a:	401a      	ands	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	61bb      	str	r3, [r7, #24]
  return result;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	60da      	str	r2, [r3, #12]
}
 800577e:	bf00      	nop
 8005780:	3724      	adds	r7, #36	; 0x24
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_GPIO_SetAFPin_0_7>:
{
 800578a:	b480      	push	{r7}
 800578c:	b089      	sub	sp, #36	; 0x24
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	613b      	str	r3, [r7, #16]
  return result;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	fab3 f383 	clz	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	210f      	movs	r1, #15
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	401a      	ands	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	fa93 f3a3 	rbit	r3, r3
 80057c4:	61bb      	str	r3, [r7, #24]
  return result;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	fab3 f383 	clz	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	431a      	orrs	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	621a      	str	r2, [r3, #32]
}
 80057dc:	bf00      	nop
 80057de:	3724      	adds	r7, #36	; 0x24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <LL_GPIO_SetAFPin_8_15>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	; 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	fa93 f3a3 	rbit	r3, r3
 8005804:	613b      	str	r3, [r7, #16]
  return result;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	b2db      	uxtb	r3, r3
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	210f      	movs	r1, #15
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	401a      	ands	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	fa93 f3a3 	rbit	r3, r3
 8005826:	61bb      	str	r3, [r7, #24]
  return result;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	fab3 f383 	clz	r3, r3
 800582e:	b2db      	uxtb	r3, r3
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800583e:	bf00      	nop
 8005840:	3724      	adds	r7, #36	; 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b088      	sub	sp, #32
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005858:	2300      	movs	r3, #0
 800585a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	fa93 f3a3 	rbit	r3, r3
 8005868:	613b      	str	r3, [r7, #16]
  return result;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	fab3 f383 	clz	r3, r3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005874:	e050      	b.n	8005918 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	2101      	movs	r1, #1
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	fa01 f303 	lsl.w	r3, r1, r3
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d042      	beq.n	8005912 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d003      	beq.n	800589c <LL_GPIO_Init+0x52>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d10d      	bne.n	80058b8 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	461a      	mov	r2, r3
 80058a2:	69b9      	ldr	r1, [r7, #24]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff ff12 	bl	80056ce <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	69b9      	ldr	r1, [r7, #24]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fef3 	bl	800569e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	461a      	mov	r2, r3
 80058be:	69b9      	ldr	r1, [r7, #24]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ff33 	bl	800572c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d11a      	bne.n	8005904 <LL_GPIO_Init+0xba>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	fa93 f3a3 	rbit	r3, r3
 80058d8:	60bb      	str	r3, [r7, #8]
  return result;
 80058da:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80058dc:	fab3 f383 	clz	r3, r3
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	d807      	bhi.n	80058f6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	461a      	mov	r2, r3
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff ff4b 	bl	800578a <LL_GPIO_SetAFPin_0_7>
 80058f4:	e006      	b.n	8005904 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	461a      	mov	r2, r3
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ff72 	bl	80057e8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	461a      	mov	r2, r3
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff fe97 	bl	8005640 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1a7      	bne.n	8005876 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <LL_RCC_GetSysClkSource+0x18>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 030c 	and.w	r3, r3, #12
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800

0800594c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005950:	4b04      	ldr	r3, [pc, #16]	; (8005964 <LL_RCC_GetAHBPrescaler+0x18>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005958:	4618      	mov	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800

08005968 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <LL_RCC_GetAPB1Prescaler+0x18>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800

08005984 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005988:	4b04      	ldr	r3, [pc, #16]	; (800599c <LL_RCC_GetAPB2Prescaler+0x18>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005990:	4618      	mov	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800

080059a0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <LL_RCC_PLL_GetMainSource+0x18>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40023800 	.word	0x40023800

080059bc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80059c0:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <LL_RCC_PLL_GetN+0x18>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40023800 	.word	0x40023800

080059d8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <LL_RCC_PLL_GetP+0x18>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800

080059f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <LL_RCC_PLL_GetDivider+0x18>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800

08005a10 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005a18:	f000 f820 	bl	8005a5c <RCC_GetSystemClockFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f840 	bl	8005aac <RCC_GetHCLKClockFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f84e 	bl	8005ad8 <RCC_GetPCLK1ClockFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f85a 	bl	8005b00 <RCC_GetPCLK2ClockFreq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
}
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005a66:	f7ff ff63 	bl	8005930 <LL_RCC_GetSysClkSource>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d00c      	beq.n	8005a8a <RCC_GetSystemClockFreq+0x2e>
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d80f      	bhi.n	8005a94 <RCC_GetSystemClockFreq+0x38>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <RCC_GetSystemClockFreq+0x22>
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d003      	beq.n	8005a84 <RCC_GetSystemClockFreq+0x28>
 8005a7c:	e00a      	b.n	8005a94 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <RCC_GetSystemClockFreq+0x48>)
 8005a80:	607b      	str	r3, [r7, #4]
      break;
 8005a82:	e00a      	b.n	8005a9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005a84:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <RCC_GetSystemClockFreq+0x4c>)
 8005a86:	607b      	str	r3, [r7, #4]
      break;
 8005a88:	e007      	b.n	8005a9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005a8a:	2008      	movs	r0, #8
 8005a8c:	f000 f84c 	bl	8005b28 <RCC_PLL_GetFreqDomain_SYS>
 8005a90:	6078      	str	r0, [r7, #4]
      break;
 8005a92:	e002      	b.n	8005a9a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <RCC_GetSystemClockFreq+0x48>)
 8005a96:	607b      	str	r3, [r7, #4]
      break;
 8005a98:	bf00      	nop
  }

  return frequency;
 8005a9a:	687b      	ldr	r3, [r7, #4]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	007a1200 	.word	0x007a1200

08005aac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005ab4:	f7ff ff4a 	bl	800594c <LL_RCC_GetAHBPrescaler>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <RCC_GetHCLKClockFreq+0x28>)
 8005ac2:	5cd3      	ldrb	r3, [r2, r3]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	40d3      	lsrs	r3, r2
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	080095f0 	.word	0x080095f0

08005ad8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005ae0:	f7ff ff42 	bl	8005968 <LL_RCC_GetAPB1Prescaler>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	0a9b      	lsrs	r3, r3, #10
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <RCC_GetPCLK1ClockFreq+0x24>)
 8005aea:	5cd3      	ldrb	r3, [r2, r3]
 8005aec:	461a      	mov	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	40d3      	lsrs	r3, r2
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	08009600 	.word	0x08009600

08005b00 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005b08:	f7ff ff3c 	bl	8005984 <LL_RCC_GetAPB2Prescaler>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	0b5b      	lsrs	r3, r3, #13
 8005b10:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <RCC_GetPCLK2ClockFreq+0x24>)
 8005b12:	5cd3      	ldrb	r3, [r2, r3]
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	40d3      	lsrs	r3, r2
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	08009600 	.word	0x08009600

08005b28 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005b3c:	f7ff ff30 	bl	80059a0 <LL_RCC_PLL_GetMainSource>
 8005b40:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b4e:	d003      	beq.n	8005b58 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005b50:	e005      	b.n	8005b5e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005b54:	617b      	str	r3, [r7, #20]
      break;
 8005b56:	e005      	b.n	8005b64 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005b5a:	617b      	str	r3, [r7, #20]
      break;
 8005b5c:	e002      	b.n	8005b64 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005b60:	617b      	str	r3, [r7, #20]
      break;
 8005b62:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d113      	bne.n	8005b92 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005b6a:	f7ff ff43 	bl	80059f4 <LL_RCC_PLL_GetDivider>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	fbb3 f4f2 	udiv	r4, r3, r2
 8005b76:	f7ff ff21 	bl	80059bc <LL_RCC_PLL_GetN>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	fb03 f404 	mul.w	r4, r3, r4
 8005b80:	f7ff ff2a 	bl	80059d8 <LL_RCC_PLL_GetP>
 8005b84:	4603      	mov	r3, r0
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	3301      	adds	r3, #1
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	fbb4 f3f3 	udiv	r3, r4, r3
 8005b90:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005b92:	693b      	ldr	r3, [r7, #16]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd90      	pop	{r4, r7, pc}
 8005b9c:	00f42400 	.word	0x00f42400
 8005ba0:	007a1200 	.word	0x007a1200

08005ba4 <LL_SPI_IsEnabled>:
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d101      	bne.n	8005bbc <LL_SPI_IsEnabled+0x18>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <LL_SPI_IsEnabled+0x1a>
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <LL_SPI_SetCRCPolynomial>:
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	611a      	str	r2, [r3, #16]
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ffd3 	bl	8005ba4 <LL_SPI_IsEnabled>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d139      	bne.n	8005c78 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c0c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	6811      	ldr	r1, [r2, #0]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	6852      	ldr	r2, [r2, #4]
 8005c18:	4311      	orrs	r1, r2
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	6892      	ldr	r2, [r2, #8]
 8005c1e:	4311      	orrs	r1, r2
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	68d2      	ldr	r2, [r2, #12]
 8005c24:	4311      	orrs	r1, r2
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	6912      	ldr	r2, [r2, #16]
 8005c2a:	4311      	orrs	r1, r2
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	6952      	ldr	r2, [r2, #20]
 8005c30:	4311      	orrs	r1, r2
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	6992      	ldr	r2, [r2, #24]
 8005c36:	4311      	orrs	r1, r2
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	69d2      	ldr	r2, [r2, #28]
 8005c3c:	4311      	orrs	r1, r2
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	6a12      	ldr	r2, [r2, #32]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f023 0204 	bic.w	r2, r3, #4
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	d105      	bne.n	8005c74 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff ffab 	bl	8005bca <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	61da      	str	r2, [r3, #28]
  return status;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <LL_TIM_SetPrescaler>:
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_TIM_SetAutoReload>:
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <LL_TIM_SetRepetitionCounter>:
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <LL_TIM_OC_SetCompareCH1>:
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <LL_TIM_OC_SetCompareCH2>:
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <LL_TIM_OC_SetCompareCH3>:
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <LL_TIM_OC_SetCompareCH4>:
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3d      	ldr	r2, [pc, #244]	; (8005e7c <LL_TIM_Init+0x108>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <LL_TIM_Init+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d00f      	beq.n	8005db4 <LL_TIM_Init+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3a      	ldr	r2, [pc, #232]	; (8005e80 <LL_TIM_Init+0x10c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <LL_TIM_Init+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a39      	ldr	r2, [pc, #228]	; (8005e84 <LL_TIM_Init+0x110>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <LL_TIM_Init+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a38      	ldr	r2, [pc, #224]	; (8005e88 <LL_TIM_Init+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <LL_TIM_Init+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a37      	ldr	r2, [pc, #220]	; (8005e8c <LL_TIM_Init+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d106      	bne.n	8005dc2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2d      	ldr	r2, [pc, #180]	; (8005e7c <LL_TIM_Init+0x108>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d02b      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d027      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <LL_TIM_Init+0x10c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d023      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <LL_TIM_Init+0x110>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01f      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a28      	ldr	r2, [pc, #160]	; (8005e88 <LL_TIM_Init+0x114>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01b      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a27      	ldr	r2, [pc, #156]	; (8005e8c <LL_TIM_Init+0x118>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d017      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <LL_TIM_Init+0x11c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <LL_TIM_Init+0x120>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a24      	ldr	r2, [pc, #144]	; (8005e98 <LL_TIM_Init+0x124>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a23      	ldr	r2, [pc, #140]	; (8005e9c <LL_TIM_Init+0x128>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <LL_TIM_Init+0x12c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <LL_TIM_Init+0xae>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <LL_TIM_Init+0x130>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d106      	bne.n	8005e30 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff34 	bl	8005caa <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff20 	bl	8005c8e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <LL_TIM_Init+0x108>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <LL_TIM_Init+0xea>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <LL_TIM_Init+0x118>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d105      	bne.n	8005e6a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff ff2e 	bl	8005cc6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff ff71 	bl	8005d52 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800
 8005e9c:	40001800 	.word	0x40001800
 8005ea0:	40001c00 	.word	0x40001c00
 8005ea4:	40002000 	.word	0x40002000

08005ea8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d027      	beq.n	8005f10 <LL_TIM_OC_Init+0x68>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec6:	d82a      	bhi.n	8005f1e <LL_TIM_OC_Init+0x76>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d018      	beq.n	8005f02 <LL_TIM_OC_Init+0x5a>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d822      	bhi.n	8005f1e <LL_TIM_OC_Init+0x76>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d003      	beq.n	8005ee6 <LL_TIM_OC_Init+0x3e>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b10      	cmp	r3, #16
 8005ee2:	d007      	beq.n	8005ef4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005ee4:	e01b      	b.n	8005f1e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f81f 	bl	8005f2c <OC1Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef2:	e015      	b.n	8005f20 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f884 	bl	8006004 <OC2Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]
      break;
 8005f00:	e00e      	b.n	8005f20 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f8ed 	bl	80060e4 <OC3Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0e:	e007      	b.n	8005f20 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f956 	bl	80061c4 <OC4Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1c:	e000      	b.n	8005f20 <LL_TIM_OC_Init+0x78>
      break;
 8005f1e:	bf00      	nop
  }

  return result;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f023 0202 	bic.w	r2, r3, #2
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a1c      	ldr	r2, [pc, #112]	; (8005ffc <OC1Config+0xd0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <OC1Config+0x6a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <OC1Config+0xd4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d11e      	bne.n	8005fd4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 0208 	bic.w	r2, r3, #8
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0204 	bic.w	r2, r3, #4
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fe7b 	bl	8005ce2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40010400 	.word	0x40010400

08006004 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f023 0210 	bic.w	r2, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	021b      	lsls	r3, r3, #8
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0220 	bic.w	r2, r3, #32
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <OC2Config+0xd8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <OC2Config+0x70>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a1c      	ldr	r2, [pc, #112]	; (80060e0 <OC2Config+0xdc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d11f      	bne.n	80060b4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	019b      	lsls	r3, r3, #6
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	019b      	lsls	r3, r3, #6
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fe19 	bl	8005cfe <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40010400 	.word	0x40010400

080060e4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <OC3Config+0xd8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <OC3Config+0x6e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <OC3Config+0xdc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d11f      	bne.n	8006192 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	015b      	lsls	r3, r3, #5
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fdb8 	bl	8005d1a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400

080061c4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	031b      	lsls	r3, r3, #12
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	031b      	lsls	r3, r3, #12
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a11      	ldr	r2, [pc, #68]	; (800626c <OC4Config+0xa8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <OC4Config+0x70>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a10      	ldr	r2, [pc, #64]	; (8006270 <OC4Config+0xac>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d107      	bne.n	8006244 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	019b      	lsls	r3, r3, #6
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fd6d 	bl	8005d36 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40010000 	.word	0x40010000
 8006270:	40010400 	.word	0x40010400

08006274 <LL_USART_IsEnabled>:
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <LL_USART_SetStopBitsLength>:
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	611a      	str	r2, [r3, #16]
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <LL_USART_SetHWFlowCtrl>:
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	615a      	str	r2, [r3, #20]
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <LL_USART_SetBaudRate>:
{
 80062e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062ec:	b0c0      	sub	sp, #256	; 0x100
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062f4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80062f8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80062fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006308:	f040 810c 	bne.w	8006524 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800630c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006310:	2200      	movs	r2, #0
 8006312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006316:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800631a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800631e:	4622      	mov	r2, r4
 8006320:	462b      	mov	r3, r5
 8006322:	1891      	adds	r1, r2, r2
 8006324:	6639      	str	r1, [r7, #96]	; 0x60
 8006326:	415b      	adcs	r3, r3
 8006328:	667b      	str	r3, [r7, #100]	; 0x64
 800632a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800632e:	4621      	mov	r1, r4
 8006330:	eb12 0801 	adds.w	r8, r2, r1
 8006334:	4629      	mov	r1, r5
 8006336:	eb43 0901 	adc.w	r9, r3, r1
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800634a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800634e:	4690      	mov	r8, r2
 8006350:	4699      	mov	r9, r3
 8006352:	4623      	mov	r3, r4
 8006354:	eb18 0303 	adds.w	r3, r8, r3
 8006358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800635c:	462b      	mov	r3, r5
 800635e:	eb49 0303 	adc.w	r3, r9, r3
 8006362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006366:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800636a:	2200      	movs	r2, #0
 800636c:	469a      	mov	sl, r3
 800636e:	4693      	mov	fp, r2
 8006370:	eb1a 030a 	adds.w	r3, sl, sl
 8006374:	65bb      	str	r3, [r7, #88]	; 0x58
 8006376:	eb4b 030b 	adc.w	r3, fp, fp
 800637a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800637c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006384:	f7fa fc10 	bl	8000ba8 <__aeabi_uldivmod>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4b64      	ldr	r3, [pc, #400]	; (8006520 <LL_USART_SetBaudRate+0x238>)
 800638e:	fba3 2302 	umull	r2, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	b29b      	uxth	r3, r3
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	b29c      	uxth	r4, r3
 800639a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063a4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063a8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	1891      	adds	r1, r2, r2
 80063b2:	6539      	str	r1, [r7, #80]	; 0x50
 80063b4:	415b      	adcs	r3, r3
 80063b6:	657b      	str	r3, [r7, #84]	; 0x54
 80063b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063bc:	4641      	mov	r1, r8
 80063be:	1851      	adds	r1, r2, r1
 80063c0:	64b9      	str	r1, [r7, #72]	; 0x48
 80063c2:	4649      	mov	r1, r9
 80063c4:	414b      	adcs	r3, r1
 80063c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80063d4:	4659      	mov	r1, fp
 80063d6:	00cb      	lsls	r3, r1, #3
 80063d8:	4651      	mov	r1, sl
 80063da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063de:	4651      	mov	r1, sl
 80063e0:	00ca      	lsls	r2, r1, #3
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	4642      	mov	r2, r8
 80063ea:	189b      	adds	r3, r3, r2
 80063ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063f0:	464b      	mov	r3, r9
 80063f2:	460a      	mov	r2, r1
 80063f4:	eb42 0303 	adc.w	r3, r2, r3
 80063f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006400:	2200      	movs	r2, #0
 8006402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006406:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800640a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800640e:	460b      	mov	r3, r1
 8006410:	18db      	adds	r3, r3, r3
 8006412:	643b      	str	r3, [r7, #64]	; 0x40
 8006414:	4613      	mov	r3, r2
 8006416:	eb42 0303 	adc.w	r3, r2, r3
 800641a:	647b      	str	r3, [r7, #68]	; 0x44
 800641c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006420:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006424:	f7fa fbc0 	bl	8000ba8 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4611      	mov	r1, r2
 800642e:	4b3c      	ldr	r3, [pc, #240]	; (8006520 <LL_USART_SetBaudRate+0x238>)
 8006430:	fba3 2301 	umull	r2, r3, r3, r1
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	2264      	movs	r2, #100	; 0x64
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	1acb      	subs	r3, r1, r3
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006444:	4b36      	ldr	r3, [pc, #216]	; (8006520 <LL_USART_SetBaudRate+0x238>)
 8006446:	fba3 2302 	umull	r2, r3, r3, r2
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	b29b      	uxth	r3, r3
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	b29b      	uxth	r3, r3
 8006452:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006456:	b29b      	uxth	r3, r3
 8006458:	4423      	add	r3, r4
 800645a:	b29c      	uxth	r4, r3
 800645c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006460:	2200      	movs	r2, #0
 8006462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006466:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800646a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800646e:	4642      	mov	r2, r8
 8006470:	464b      	mov	r3, r9
 8006472:	1891      	adds	r1, r2, r2
 8006474:	63b9      	str	r1, [r7, #56]	; 0x38
 8006476:	415b      	adcs	r3, r3
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800647e:	4641      	mov	r1, r8
 8006480:	1851      	adds	r1, r2, r1
 8006482:	6339      	str	r1, [r7, #48]	; 0x30
 8006484:	4649      	mov	r1, r9
 8006486:	414b      	adcs	r3, r1
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006496:	4659      	mov	r1, fp
 8006498:	00cb      	lsls	r3, r1, #3
 800649a:	4651      	mov	r1, sl
 800649c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a0:	4651      	mov	r1, sl
 80064a2:	00ca      	lsls	r2, r1, #3
 80064a4:	4610      	mov	r0, r2
 80064a6:	4619      	mov	r1, r3
 80064a8:	4603      	mov	r3, r0
 80064aa:	4642      	mov	r2, r8
 80064ac:	189b      	adds	r3, r3, r2
 80064ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064b2:	464b      	mov	r3, r9
 80064b4:	460a      	mov	r2, r1
 80064b6:	eb42 0303 	adc.w	r3, r2, r3
 80064ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80064cc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80064d0:	460b      	mov	r3, r1
 80064d2:	18db      	adds	r3, r3, r3
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d6:	4613      	mov	r3, r2
 80064d8:	eb42 0303 	adc.w	r3, r2, r3
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064e2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80064e6:	f7fa fb5f 	bl	8000ba8 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <LL_USART_SetBaudRate+0x238>)
 80064f0:	fba3 1302 	umull	r1, r3, r3, r2
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	2164      	movs	r1, #100	; 0x64
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	3332      	adds	r3, #50	; 0x32
 8006502:	4a07      	ldr	r2, [pc, #28]	; (8006520 <LL_USART_SetBaudRate+0x238>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	b29b      	uxth	r3, r3
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	b29b      	uxth	r3, r3
 8006512:	4423      	add	r3, r4
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651c:	609a      	str	r2, [r3, #8]
}
 800651e:	e107      	b.n	8006730 <LL_USART_SetBaudRate+0x448>
 8006520:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006524:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006528:	2200      	movs	r2, #0
 800652a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800652e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006532:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8006536:	4642      	mov	r2, r8
 8006538:	464b      	mov	r3, r9
 800653a:	1891      	adds	r1, r2, r2
 800653c:	6239      	str	r1, [r7, #32]
 800653e:	415b      	adcs	r3, r3
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006546:	4641      	mov	r1, r8
 8006548:	1854      	adds	r4, r2, r1
 800654a:	4649      	mov	r1, r9
 800654c:	eb43 0501 	adc.w	r5, r3, r1
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	00eb      	lsls	r3, r5, #3
 800655a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800655e:	00e2      	lsls	r2, r4, #3
 8006560:	4614      	mov	r4, r2
 8006562:	461d      	mov	r5, r3
 8006564:	4643      	mov	r3, r8
 8006566:	18e3      	adds	r3, r4, r3
 8006568:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800656c:	464b      	mov	r3, r9
 800656e:	eb45 0303 	adc.w	r3, r5, r3
 8006572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006576:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800657a:	2200      	movs	r2, #0
 800657c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006580:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006590:	4629      	mov	r1, r5
 8006592:	008b      	lsls	r3, r1, #2
 8006594:	4621      	mov	r1, r4
 8006596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800659a:	4621      	mov	r1, r4
 800659c:	008a      	lsls	r2, r1, #2
 800659e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80065a2:	f7fa fb01 	bl	8000ba8 <__aeabi_uldivmod>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4b64      	ldr	r3, [pc, #400]	; (800673c <LL_USART_SetBaudRate+0x454>)
 80065ac:	fba3 2302 	umull	r2, r3, r3, r2
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	b29c      	uxth	r4, r3
 80065b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065c6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80065ca:	4642      	mov	r2, r8
 80065cc:	464b      	mov	r3, r9
 80065ce:	1891      	adds	r1, r2, r2
 80065d0:	61b9      	str	r1, [r7, #24]
 80065d2:	415b      	adcs	r3, r3
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065da:	4641      	mov	r1, r8
 80065dc:	1851      	adds	r1, r2, r1
 80065de:	6139      	str	r1, [r7, #16]
 80065e0:	4649      	mov	r1, r9
 80065e2:	414b      	adcs	r3, r1
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065f2:	4659      	mov	r1, fp
 80065f4:	00cb      	lsls	r3, r1, #3
 80065f6:	4651      	mov	r1, sl
 80065f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065fc:	4651      	mov	r1, sl
 80065fe:	00ca      	lsls	r2, r1, #3
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	4603      	mov	r3, r0
 8006606:	4642      	mov	r2, r8
 8006608:	189b      	adds	r3, r3, r2
 800660a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800660e:	464b      	mov	r3, r9
 8006610:	460a      	mov	r2, r1
 8006612:	eb42 0303 	adc.w	r3, r2, r3
 8006616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800661a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800661e:	2200      	movs	r2, #0
 8006620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006624:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8006634:	4649      	mov	r1, r9
 8006636:	008b      	lsls	r3, r1, #2
 8006638:	4641      	mov	r1, r8
 800663a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663e:	4641      	mov	r1, r8
 8006640:	008a      	lsls	r2, r1, #2
 8006642:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006646:	f7fa faaf 	bl	8000ba8 <__aeabi_uldivmod>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4b3b      	ldr	r3, [pc, #236]	; (800673c <LL_USART_SetBaudRate+0x454>)
 8006650:	fba3 1302 	umull	r1, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	2164      	movs	r1, #100	; 0x64
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	3332      	adds	r3, #50	; 0x32
 8006662:	4a36      	ldr	r2, [pc, #216]	; (800673c <LL_USART_SetBaudRate+0x454>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	095b      	lsrs	r3, r3, #5
 800666a:	b29b      	uxth	r3, r3
 800666c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006670:	b29b      	uxth	r3, r3
 8006672:	4423      	add	r3, r4
 8006674:	b29c      	uxth	r4, r3
 8006676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800667a:	2200      	movs	r2, #0
 800667c:	67bb      	str	r3, [r7, #120]	; 0x78
 800667e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	1891      	adds	r1, r2, r2
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	415b      	adcs	r3, r3
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006694:	4641      	mov	r1, r8
 8006696:	1851      	adds	r1, r2, r1
 8006698:	6039      	str	r1, [r7, #0]
 800669a:	4649      	mov	r1, r9
 800669c:	414b      	adcs	r3, r1
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066ac:	4659      	mov	r1, fp
 80066ae:	00cb      	lsls	r3, r1, #3
 80066b0:	4651      	mov	r1, sl
 80066b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b6:	4651      	mov	r1, sl
 80066b8:	00ca      	lsls	r2, r1, #3
 80066ba:	4610      	mov	r0, r2
 80066bc:	4619      	mov	r1, r3
 80066be:	4603      	mov	r3, r0
 80066c0:	4642      	mov	r2, r8
 80066c2:	189b      	adds	r3, r3, r2
 80066c4:	673b      	str	r3, [r7, #112]	; 0x70
 80066c6:	464b      	mov	r3, r9
 80066c8:	460a      	mov	r2, r1
 80066ca:	eb42 0303 	adc.w	r3, r2, r3
 80066ce:	677b      	str	r3, [r7, #116]	; 0x74
 80066d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066d4:	2200      	movs	r2, #0
 80066d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80066e6:	4649      	mov	r1, r9
 80066e8:	008b      	lsls	r3, r1, #2
 80066ea:	4641      	mov	r1, r8
 80066ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f0:	4641      	mov	r1, r8
 80066f2:	008a      	lsls	r2, r1, #2
 80066f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80066f8:	f7fa fa56 	bl	8000ba8 <__aeabi_uldivmod>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4b0e      	ldr	r3, [pc, #56]	; (800673c <LL_USART_SetBaudRate+0x454>)
 8006702:	fba3 1302 	umull	r1, r3, r3, r2
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	2164      	movs	r1, #100	; 0x64
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	3332      	adds	r3, #50	; 0x32
 8006714:	4a09      	ldr	r2, [pc, #36]	; (800673c <LL_USART_SetBaudRate+0x454>)
 8006716:	fba2 2303 	umull	r2, r3, r2, r3
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	b29b      	uxth	r3, r3
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	b29b      	uxth	r3, r3
 8006724:	4423      	add	r3, r4
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800672e:	609a      	str	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006736:	46bd      	mov	sp, r7
 8006738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800673c:	51eb851f 	.word	0x51eb851f

08006740 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fd8e 	bl	8006274 <LL_USART_IsEnabled>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d15e      	bne.n	800681c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006766:	f023 030c 	bic.w	r3, r3, #12
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	6851      	ldr	r1, [r2, #4]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	68d2      	ldr	r2, [r2, #12]
 8006772:	4311      	orrs	r1, r2
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	6912      	ldr	r2, [r2, #16]
 8006778:	4311      	orrs	r1, r2
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	6992      	ldr	r2, [r2, #24]
 800677e:	430a      	orrs	r2, r1
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff fd85 	bl	800629c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fd92 	bl	80062c2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff f934 	bl	8005a10 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <LL_USART_Init+0xe8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d102      	bne.n	80067b6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	e021      	b.n	80067fa <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <LL_USART_Init+0xec>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d102      	bne.n	80067c4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e01a      	b.n	80067fa <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <LL_USART_Init+0xf0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d102      	bne.n	80067d2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	e013      	b.n	80067fa <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a17      	ldr	r2, [pc, #92]	; (8006834 <LL_USART_Init+0xf4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d102      	bne.n	80067e0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e00c      	b.n	80067fa <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <LL_USART_Init+0xf8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d102      	bne.n	80067ee <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	e005      	b.n	80067fa <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a12      	ldr	r2, [pc, #72]	; (800683c <LL_USART_Init+0xfc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d101      	bne.n	80067fa <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00d      	beq.n	800681c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006808:	2300      	movs	r3, #0
 800680a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69b9      	ldr	r1, [r7, #24]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fd66 	bl	80062e8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800681c:	7ffb      	ldrb	r3, [r7, #31]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40011000 	.word	0x40011000
 800682c:	40004400 	.word	0x40004400
 8006830:	40004800 	.word	0x40004800
 8006834:	40011400 	.word	0x40011400
 8006838:	40004c00 	.word	0x40004c00
 800683c:	40005000 	.word	0x40005000

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	; (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	2000000c 	.word	0x2000000c

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4d0d      	ldr	r5, [pc, #52]	; (8006884 <__libc_init_array+0x38>)
 8006850:	4c0d      	ldr	r4, [pc, #52]	; (8006888 <__libc_init_array+0x3c>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	2600      	movs	r6, #0
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	4d0b      	ldr	r5, [pc, #44]	; (800688c <__libc_init_array+0x40>)
 800685e:	4c0c      	ldr	r4, [pc, #48]	; (8006890 <__libc_init_array+0x44>)
 8006860:	f002 fdc4 	bl	80093ec <_init>
 8006864:	1b64      	subs	r4, r4, r5
 8006866:	10a4      	asrs	r4, r4, #2
 8006868:	2600      	movs	r6, #0
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	f855 3b04 	ldr.w	r3, [r5], #4
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	f855 3b04 	ldr.w	r3, [r5], #4
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	080099fc 	.word	0x080099fc
 8006888:	080099fc 	.word	0x080099fc
 800688c:	080099fc 	.word	0x080099fc
 8006890:	08009a00 	.word	0x08009a00

08006894 <memset>:
 8006894:	4402      	add	r2, r0
 8006896:	4603      	mov	r3, r0
 8006898:	4293      	cmp	r3, r2
 800689a:	d100      	bne.n	800689e <memset+0xa>
 800689c:	4770      	bx	lr
 800689e:	f803 1b01 	strb.w	r1, [r3], #1
 80068a2:	e7f9      	b.n	8006898 <memset+0x4>

080068a4 <__cvt>:
 80068a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	ec55 4b10 	vmov	r4, r5, d0
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	460e      	mov	r6, r1
 80068b0:	4619      	mov	r1, r3
 80068b2:	462b      	mov	r3, r5
 80068b4:	bfbb      	ittet	lt
 80068b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068ba:	461d      	movlt	r5, r3
 80068bc:	2300      	movge	r3, #0
 80068be:	232d      	movlt	r3, #45	; 0x2d
 80068c0:	700b      	strb	r3, [r1, #0]
 80068c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068c8:	4691      	mov	r9, r2
 80068ca:	f023 0820 	bic.w	r8, r3, #32
 80068ce:	bfbc      	itt	lt
 80068d0:	4622      	movlt	r2, r4
 80068d2:	4614      	movlt	r4, r2
 80068d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068d8:	d005      	beq.n	80068e6 <__cvt+0x42>
 80068da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068de:	d100      	bne.n	80068e2 <__cvt+0x3e>
 80068e0:	3601      	adds	r6, #1
 80068e2:	2102      	movs	r1, #2
 80068e4:	e000      	b.n	80068e8 <__cvt+0x44>
 80068e6:	2103      	movs	r1, #3
 80068e8:	ab03      	add	r3, sp, #12
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	ab02      	add	r3, sp, #8
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	ec45 4b10 	vmov	d0, r4, r5
 80068f4:	4653      	mov	r3, sl
 80068f6:	4632      	mov	r2, r6
 80068f8:	f000 fe1a 	bl	8007530 <_dtoa_r>
 80068fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006900:	4607      	mov	r7, r0
 8006902:	d102      	bne.n	800690a <__cvt+0x66>
 8006904:	f019 0f01 	tst.w	r9, #1
 8006908:	d022      	beq.n	8006950 <__cvt+0xac>
 800690a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800690e:	eb07 0906 	add.w	r9, r7, r6
 8006912:	d110      	bne.n	8006936 <__cvt+0x92>
 8006914:	783b      	ldrb	r3, [r7, #0]
 8006916:	2b30      	cmp	r3, #48	; 0x30
 8006918:	d10a      	bne.n	8006930 <__cvt+0x8c>
 800691a:	2200      	movs	r2, #0
 800691c:	2300      	movs	r3, #0
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7fa f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006926:	b918      	cbnz	r0, 8006930 <__cvt+0x8c>
 8006928:	f1c6 0601 	rsb	r6, r6, #1
 800692c:	f8ca 6000 	str.w	r6, [sl]
 8006930:	f8da 3000 	ldr.w	r3, [sl]
 8006934:	4499      	add	r9, r3
 8006936:	2200      	movs	r2, #0
 8006938:	2300      	movs	r3, #0
 800693a:	4620      	mov	r0, r4
 800693c:	4629      	mov	r1, r5
 800693e:	f7fa f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006942:	b108      	cbz	r0, 8006948 <__cvt+0xa4>
 8006944:	f8cd 900c 	str.w	r9, [sp, #12]
 8006948:	2230      	movs	r2, #48	; 0x30
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	454b      	cmp	r3, r9
 800694e:	d307      	bcc.n	8006960 <__cvt+0xbc>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006954:	1bdb      	subs	r3, r3, r7
 8006956:	4638      	mov	r0, r7
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	b004      	add	sp, #16
 800695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006960:	1c59      	adds	r1, r3, #1
 8006962:	9103      	str	r1, [sp, #12]
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e7f0      	b.n	800694a <__cvt+0xa6>

08006968 <__exponent>:
 8006968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800696a:	4603      	mov	r3, r0
 800696c:	2900      	cmp	r1, #0
 800696e:	bfb8      	it	lt
 8006970:	4249      	neglt	r1, r1
 8006972:	f803 2b02 	strb.w	r2, [r3], #2
 8006976:	bfb4      	ite	lt
 8006978:	222d      	movlt	r2, #45	; 0x2d
 800697a:	222b      	movge	r2, #43	; 0x2b
 800697c:	2909      	cmp	r1, #9
 800697e:	7042      	strb	r2, [r0, #1]
 8006980:	dd2a      	ble.n	80069d8 <__exponent+0x70>
 8006982:	f10d 0407 	add.w	r4, sp, #7
 8006986:	46a4      	mov	ip, r4
 8006988:	270a      	movs	r7, #10
 800698a:	46a6      	mov	lr, r4
 800698c:	460a      	mov	r2, r1
 800698e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006992:	fb07 1516 	mls	r5, r7, r6, r1
 8006996:	3530      	adds	r5, #48	; 0x30
 8006998:	2a63      	cmp	r2, #99	; 0x63
 800699a:	f104 34ff 	add.w	r4, r4, #4294967295
 800699e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069a2:	4631      	mov	r1, r6
 80069a4:	dcf1      	bgt.n	800698a <__exponent+0x22>
 80069a6:	3130      	adds	r1, #48	; 0x30
 80069a8:	f1ae 0502 	sub.w	r5, lr, #2
 80069ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069b0:	1c44      	adds	r4, r0, #1
 80069b2:	4629      	mov	r1, r5
 80069b4:	4561      	cmp	r1, ip
 80069b6:	d30a      	bcc.n	80069ce <__exponent+0x66>
 80069b8:	f10d 0209 	add.w	r2, sp, #9
 80069bc:	eba2 020e 	sub.w	r2, r2, lr
 80069c0:	4565      	cmp	r5, ip
 80069c2:	bf88      	it	hi
 80069c4:	2200      	movhi	r2, #0
 80069c6:	4413      	add	r3, r2
 80069c8:	1a18      	subs	r0, r3, r0
 80069ca:	b003      	add	sp, #12
 80069cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069d6:	e7ed      	b.n	80069b4 <__exponent+0x4c>
 80069d8:	2330      	movs	r3, #48	; 0x30
 80069da:	3130      	adds	r1, #48	; 0x30
 80069dc:	7083      	strb	r3, [r0, #2]
 80069de:	70c1      	strb	r1, [r0, #3]
 80069e0:	1d03      	adds	r3, r0, #4
 80069e2:	e7f1      	b.n	80069c8 <__exponent+0x60>

080069e4 <_printf_float>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	ed2d 8b02 	vpush	{d8}
 80069ec:	b08d      	sub	sp, #52	; 0x34
 80069ee:	460c      	mov	r4, r1
 80069f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069f4:	4616      	mov	r6, r2
 80069f6:	461f      	mov	r7, r3
 80069f8:	4605      	mov	r5, r0
 80069fa:	f001 fd3f 	bl	800847c <_localeconv_r>
 80069fe:	f8d0 a000 	ldr.w	sl, [r0]
 8006a02:	4650      	mov	r0, sl
 8006a04:	f7f9 fbe4 	bl	80001d0 <strlen>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	f8d8 3000 	ldr.w	r3, [r8]
 8006a14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a18:	3307      	adds	r3, #7
 8006a1a:	f023 0307 	bic.w	r3, r3, #7
 8006a1e:	f103 0208 	add.w	r2, r3, #8
 8006a22:	f8c8 2000 	str.w	r2, [r8]
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a3c:	ee08 0a10 	vmov	s16, r0
 8006a40:	4b9f      	ldr	r3, [pc, #636]	; (8006cc0 <_printf_float+0x2dc>)
 8006a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a46:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4a:	f7fa f86f 	bl	8000b2c <__aeabi_dcmpun>
 8006a4e:	bb88      	cbnz	r0, 8006ab4 <_printf_float+0xd0>
 8006a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a54:	4b9a      	ldr	r3, [pc, #616]	; (8006cc0 <_printf_float+0x2dc>)
 8006a56:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5a:	f7fa f849 	bl	8000af0 <__aeabi_dcmple>
 8006a5e:	bb48      	cbnz	r0, 8006ab4 <_printf_float+0xd0>
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	4640      	mov	r0, r8
 8006a66:	4649      	mov	r1, r9
 8006a68:	f7fa f838 	bl	8000adc <__aeabi_dcmplt>
 8006a6c:	b110      	cbz	r0, 8006a74 <_printf_float+0x90>
 8006a6e:	232d      	movs	r3, #45	; 0x2d
 8006a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a74:	4b93      	ldr	r3, [pc, #588]	; (8006cc4 <_printf_float+0x2e0>)
 8006a76:	4894      	ldr	r0, [pc, #592]	; (8006cc8 <_printf_float+0x2e4>)
 8006a78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a7c:	bf94      	ite	ls
 8006a7e:	4698      	movls	r8, r3
 8006a80:	4680      	movhi	r8, r0
 8006a82:	2303      	movs	r3, #3
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	9b05      	ldr	r3, [sp, #20]
 8006a88:	f023 0204 	bic.w	r2, r3, #4
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	f04f 0900 	mov.w	r9, #0
 8006a92:	9700      	str	r7, [sp, #0]
 8006a94:	4633      	mov	r3, r6
 8006a96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 f9d8 	bl	8006e50 <_printf_common>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f040 8090 	bne.w	8006bc6 <_printf_float+0x1e2>
 8006aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aaa:	b00d      	add	sp, #52	; 0x34
 8006aac:	ecbd 8b02 	vpop	{d8}
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7fa f836 	bl	8000b2c <__aeabi_dcmpun>
 8006ac0:	b140      	cbz	r0, 8006ad4 <_printf_float+0xf0>
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bfbc      	itt	lt
 8006ac8:	232d      	movlt	r3, #45	; 0x2d
 8006aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ace:	487f      	ldr	r0, [pc, #508]	; (8006ccc <_printf_float+0x2e8>)
 8006ad0:	4b7f      	ldr	r3, [pc, #508]	; (8006cd0 <_printf_float+0x2ec>)
 8006ad2:	e7d1      	b.n	8006a78 <_printf_float+0x94>
 8006ad4:	6863      	ldr	r3, [r4, #4]
 8006ad6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ada:	9206      	str	r2, [sp, #24]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	d13f      	bne.n	8006b60 <_printf_float+0x17c>
 8006ae0:	2306      	movs	r3, #6
 8006ae2:	6063      	str	r3, [r4, #4]
 8006ae4:	9b05      	ldr	r3, [sp, #20]
 8006ae6:	6861      	ldr	r1, [r4, #4]
 8006ae8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006aec:	2300      	movs	r3, #0
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	ab0a      	add	r3, sp, #40	; 0x28
 8006af2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006af6:	ab09      	add	r3, sp, #36	; 0x24
 8006af8:	ec49 8b10 	vmov	d0, r8, r9
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b04:	4628      	mov	r0, r5
 8006b06:	f7ff fecd 	bl	80068a4 <__cvt>
 8006b0a:	9b06      	ldr	r3, [sp, #24]
 8006b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0e:	2b47      	cmp	r3, #71	; 0x47
 8006b10:	4680      	mov	r8, r0
 8006b12:	d108      	bne.n	8006b26 <_printf_float+0x142>
 8006b14:	1cc8      	adds	r0, r1, #3
 8006b16:	db02      	blt.n	8006b1e <_printf_float+0x13a>
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	dd41      	ble.n	8006ba2 <_printf_float+0x1be>
 8006b1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b22:	fa5f fb8b 	uxtb.w	fp, fp
 8006b26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b2a:	d820      	bhi.n	8006b6e <_printf_float+0x18a>
 8006b2c:	3901      	subs	r1, #1
 8006b2e:	465a      	mov	r2, fp
 8006b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b34:	9109      	str	r1, [sp, #36]	; 0x24
 8006b36:	f7ff ff17 	bl	8006968 <__exponent>
 8006b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b3c:	1813      	adds	r3, r2, r0
 8006b3e:	2a01      	cmp	r2, #1
 8006b40:	4681      	mov	r9, r0
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	dc02      	bgt.n	8006b4c <_printf_float+0x168>
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	07d2      	lsls	r2, r2, #31
 8006b4a:	d501      	bpl.n	8006b50 <_printf_float+0x16c>
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	6123      	str	r3, [r4, #16]
 8006b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d09c      	beq.n	8006a92 <_printf_float+0xae>
 8006b58:	232d      	movs	r3, #45	; 0x2d
 8006b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b5e:	e798      	b.n	8006a92 <_printf_float+0xae>
 8006b60:	9a06      	ldr	r2, [sp, #24]
 8006b62:	2a47      	cmp	r2, #71	; 0x47
 8006b64:	d1be      	bne.n	8006ae4 <_printf_float+0x100>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1bc      	bne.n	8006ae4 <_printf_float+0x100>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e7b9      	b.n	8006ae2 <_printf_float+0xfe>
 8006b6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b72:	d118      	bne.n	8006ba6 <_printf_float+0x1c2>
 8006b74:	2900      	cmp	r1, #0
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	dd0b      	ble.n	8006b92 <_printf_float+0x1ae>
 8006b7a:	6121      	str	r1, [r4, #16]
 8006b7c:	b913      	cbnz	r3, 8006b84 <_printf_float+0x1a0>
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	07d0      	lsls	r0, r2, #31
 8006b82:	d502      	bpl.n	8006b8a <_printf_float+0x1a6>
 8006b84:	3301      	adds	r3, #1
 8006b86:	440b      	add	r3, r1
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b8c:	f04f 0900 	mov.w	r9, #0
 8006b90:	e7de      	b.n	8006b50 <_printf_float+0x16c>
 8006b92:	b913      	cbnz	r3, 8006b9a <_printf_float+0x1b6>
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	07d2      	lsls	r2, r2, #31
 8006b98:	d501      	bpl.n	8006b9e <_printf_float+0x1ba>
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	e7f4      	b.n	8006b88 <_printf_float+0x1a4>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e7f2      	b.n	8006b88 <_printf_float+0x1a4>
 8006ba2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	db05      	blt.n	8006bb8 <_printf_float+0x1d4>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	6121      	str	r1, [r4, #16]
 8006bb0:	07d8      	lsls	r0, r3, #31
 8006bb2:	d5ea      	bpl.n	8006b8a <_printf_float+0x1a6>
 8006bb4:	1c4b      	adds	r3, r1, #1
 8006bb6:	e7e7      	b.n	8006b88 <_printf_float+0x1a4>
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	bfd4      	ite	le
 8006bbc:	f1c1 0202 	rsble	r2, r1, #2
 8006bc0:	2201      	movgt	r2, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	e7e0      	b.n	8006b88 <_printf_float+0x1a4>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	055a      	lsls	r2, r3, #21
 8006bca:	d407      	bmi.n	8006bdc <_printf_float+0x1f8>
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	4642      	mov	r2, r8
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	d12c      	bne.n	8006c34 <_printf_float+0x250>
 8006bda:	e764      	b.n	8006aa6 <_printf_float+0xc2>
 8006bdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006be0:	f240 80e0 	bls.w	8006da4 <_printf_float+0x3c0>
 8006be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006be8:	2200      	movs	r2, #0
 8006bea:	2300      	movs	r3, #0
 8006bec:	f7f9 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d034      	beq.n	8006c5e <_printf_float+0x27a>
 8006bf4:	4a37      	ldr	r2, [pc, #220]	; (8006cd4 <_printf_float+0x2f0>)
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	47b8      	blx	r7
 8006bfe:	3001      	adds	r0, #1
 8006c00:	f43f af51 	beq.w	8006aa6 <_printf_float+0xc2>
 8006c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	db02      	blt.n	8006c12 <_printf_float+0x22e>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	07d8      	lsls	r0, r3, #31
 8006c10:	d510      	bpl.n	8006c34 <_printf_float+0x250>
 8006c12:	ee18 3a10 	vmov	r3, s16
 8006c16:	4652      	mov	r2, sl
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f af41 	beq.w	8006aa6 <_printf_float+0xc2>
 8006c24:	f04f 0800 	mov.w	r8, #0
 8006c28:	f104 091a 	add.w	r9, r4, #26
 8006c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	4543      	cmp	r3, r8
 8006c32:	dc09      	bgt.n	8006c48 <_printf_float+0x264>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	079b      	lsls	r3, r3, #30
 8006c38:	f100 8105 	bmi.w	8006e46 <_printf_float+0x462>
 8006c3c:	68e0      	ldr	r0, [r4, #12]
 8006c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c40:	4298      	cmp	r0, r3
 8006c42:	bfb8      	it	lt
 8006c44:	4618      	movlt	r0, r3
 8006c46:	e730      	b.n	8006aaa <_printf_float+0xc6>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	464a      	mov	r2, r9
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f af27 	beq.w	8006aa6 <_printf_float+0xc2>
 8006c58:	f108 0801 	add.w	r8, r8, #1
 8006c5c:	e7e6      	b.n	8006c2c <_printf_float+0x248>
 8006c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dc39      	bgt.n	8006cd8 <_printf_float+0x2f4>
 8006c64:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <_printf_float+0x2f0>)
 8006c66:	2301      	movs	r3, #1
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	47b8      	blx	r7
 8006c6e:	3001      	adds	r0, #1
 8006c70:	f43f af19 	beq.w	8006aa6 <_printf_float+0xc2>
 8006c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d102      	bne.n	8006c82 <_printf_float+0x29e>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	07d9      	lsls	r1, r3, #31
 8006c80:	d5d8      	bpl.n	8006c34 <_printf_float+0x250>
 8006c82:	ee18 3a10 	vmov	r3, s16
 8006c86:	4652      	mov	r2, sl
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	47b8      	blx	r7
 8006c8e:	3001      	adds	r0, #1
 8006c90:	f43f af09 	beq.w	8006aa6 <_printf_float+0xc2>
 8006c94:	f04f 0900 	mov.w	r9, #0
 8006c98:	f104 0a1a 	add.w	sl, r4, #26
 8006c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9e:	425b      	negs	r3, r3
 8006ca0:	454b      	cmp	r3, r9
 8006ca2:	dc01      	bgt.n	8006ca8 <_printf_float+0x2c4>
 8006ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca6:	e792      	b.n	8006bce <_printf_float+0x1ea>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4652      	mov	r2, sl
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f43f aef7 	beq.w	8006aa6 <_printf_float+0xc2>
 8006cb8:	f109 0901 	add.w	r9, r9, #1
 8006cbc:	e7ee      	b.n	8006c9c <_printf_float+0x2b8>
 8006cbe:	bf00      	nop
 8006cc0:	7fefffff 	.word	0x7fefffff
 8006cc4:	0800961c 	.word	0x0800961c
 8006cc8:	08009620 	.word	0x08009620
 8006ccc:	08009628 	.word	0x08009628
 8006cd0:	08009624 	.word	0x08009624
 8006cd4:	0800962c 	.word	0x0800962c
 8006cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	bfa8      	it	ge
 8006ce0:	461a      	movge	r2, r3
 8006ce2:	2a00      	cmp	r2, #0
 8006ce4:	4691      	mov	r9, r2
 8006ce6:	dc37      	bgt.n	8006d58 <_printf_float+0x374>
 8006ce8:	f04f 0b00 	mov.w	fp, #0
 8006cec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cf0:	f104 021a 	add.w	r2, r4, #26
 8006cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	eba3 0309 	sub.w	r3, r3, r9
 8006cfc:	455b      	cmp	r3, fp
 8006cfe:	dc33      	bgt.n	8006d68 <_printf_float+0x384>
 8006d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d04:	429a      	cmp	r2, r3
 8006d06:	db3b      	blt.n	8006d80 <_printf_float+0x39c>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	07da      	lsls	r2, r3, #31
 8006d0c:	d438      	bmi.n	8006d80 <_printf_float+0x39c>
 8006d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d10:	9a05      	ldr	r2, [sp, #20]
 8006d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d14:	1a9a      	subs	r2, r3, r2
 8006d16:	eba3 0901 	sub.w	r9, r3, r1
 8006d1a:	4591      	cmp	r9, r2
 8006d1c:	bfa8      	it	ge
 8006d1e:	4691      	movge	r9, r2
 8006d20:	f1b9 0f00 	cmp.w	r9, #0
 8006d24:	dc35      	bgt.n	8006d92 <_printf_float+0x3ae>
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d2e:	f104 0a1a 	add.w	sl, r4, #26
 8006d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	eba3 0309 	sub.w	r3, r3, r9
 8006d3c:	4543      	cmp	r3, r8
 8006d3e:	f77f af79 	ble.w	8006c34 <_printf_float+0x250>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4652      	mov	r2, sl
 8006d46:	4631      	mov	r1, r6
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f43f aeaa 	beq.w	8006aa6 <_printf_float+0xc2>
 8006d52:	f108 0801 	add.w	r8, r8, #1
 8006d56:	e7ec      	b.n	8006d32 <_printf_float+0x34e>
 8006d58:	4613      	mov	r3, r2
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	d1c0      	bne.n	8006ce8 <_printf_float+0x304>
 8006d66:	e69e      	b.n	8006aa6 <_printf_float+0xc2>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	9205      	str	r2, [sp, #20]
 8006d70:	47b8      	blx	r7
 8006d72:	3001      	adds	r0, #1
 8006d74:	f43f ae97 	beq.w	8006aa6 <_printf_float+0xc2>
 8006d78:	9a05      	ldr	r2, [sp, #20]
 8006d7a:	f10b 0b01 	add.w	fp, fp, #1
 8006d7e:	e7b9      	b.n	8006cf4 <_printf_float+0x310>
 8006d80:	ee18 3a10 	vmov	r3, s16
 8006d84:	4652      	mov	r2, sl
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d1be      	bne.n	8006d0e <_printf_float+0x32a>
 8006d90:	e689      	b.n	8006aa6 <_printf_float+0xc2>
 8006d92:	9a05      	ldr	r2, [sp, #20]
 8006d94:	464b      	mov	r3, r9
 8006d96:	4442      	add	r2, r8
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d1c1      	bne.n	8006d26 <_printf_float+0x342>
 8006da2:	e680      	b.n	8006aa6 <_printf_float+0xc2>
 8006da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da6:	2a01      	cmp	r2, #1
 8006da8:	dc01      	bgt.n	8006dae <_printf_float+0x3ca>
 8006daa:	07db      	lsls	r3, r3, #31
 8006dac:	d538      	bpl.n	8006e20 <_printf_float+0x43c>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4642      	mov	r2, r8
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	f43f ae74 	beq.w	8006aa6 <_printf_float+0xc2>
 8006dbe:	ee18 3a10 	vmov	r3, s16
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f43f ae6b 	beq.w	8006aa6 <_printf_float+0xc2>
 8006dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f7f9 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ddc:	b9d8      	cbnz	r0, 8006e16 <_printf_float+0x432>
 8006dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de0:	f108 0201 	add.w	r2, r8, #1
 8006de4:	3b01      	subs	r3, #1
 8006de6:	4631      	mov	r1, r6
 8006de8:	4628      	mov	r0, r5
 8006dea:	47b8      	blx	r7
 8006dec:	3001      	adds	r0, #1
 8006dee:	d10e      	bne.n	8006e0e <_printf_float+0x42a>
 8006df0:	e659      	b.n	8006aa6 <_printf_float+0xc2>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4652      	mov	r2, sl
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f ae52 	beq.w	8006aa6 <_printf_float+0xc2>
 8006e02:	f108 0801 	add.w	r8, r8, #1
 8006e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	4543      	cmp	r3, r8
 8006e0c:	dcf1      	bgt.n	8006df2 <_printf_float+0x40e>
 8006e0e:	464b      	mov	r3, r9
 8006e10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e14:	e6dc      	b.n	8006bd0 <_printf_float+0x1ec>
 8006e16:	f04f 0800 	mov.w	r8, #0
 8006e1a:	f104 0a1a 	add.w	sl, r4, #26
 8006e1e:	e7f2      	b.n	8006e06 <_printf_float+0x422>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4642      	mov	r2, r8
 8006e24:	e7df      	b.n	8006de6 <_printf_float+0x402>
 8006e26:	2301      	movs	r3, #1
 8006e28:	464a      	mov	r2, r9
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f ae38 	beq.w	8006aa6 <_printf_float+0xc2>
 8006e36:	f108 0801 	add.w	r8, r8, #1
 8006e3a:	68e3      	ldr	r3, [r4, #12]
 8006e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e3e:	1a5b      	subs	r3, r3, r1
 8006e40:	4543      	cmp	r3, r8
 8006e42:	dcf0      	bgt.n	8006e26 <_printf_float+0x442>
 8006e44:	e6fa      	b.n	8006c3c <_printf_float+0x258>
 8006e46:	f04f 0800 	mov.w	r8, #0
 8006e4a:	f104 0919 	add.w	r9, r4, #25
 8006e4e:	e7f4      	b.n	8006e3a <_printf_float+0x456>

08006e50 <_printf_common>:
 8006e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e54:	4616      	mov	r6, r2
 8006e56:	4699      	mov	r9, r3
 8006e58:	688a      	ldr	r2, [r1, #8]
 8006e5a:	690b      	ldr	r3, [r1, #16]
 8006e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e60:	4293      	cmp	r3, r2
 8006e62:	bfb8      	it	lt
 8006e64:	4613      	movlt	r3, r2
 8006e66:	6033      	str	r3, [r6, #0]
 8006e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	b10a      	cbz	r2, 8006e76 <_printf_common+0x26>
 8006e72:	3301      	adds	r3, #1
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	0699      	lsls	r1, r3, #26
 8006e7a:	bf42      	ittt	mi
 8006e7c:	6833      	ldrmi	r3, [r6, #0]
 8006e7e:	3302      	addmi	r3, #2
 8006e80:	6033      	strmi	r3, [r6, #0]
 8006e82:	6825      	ldr	r5, [r4, #0]
 8006e84:	f015 0506 	ands.w	r5, r5, #6
 8006e88:	d106      	bne.n	8006e98 <_printf_common+0x48>
 8006e8a:	f104 0a19 	add.w	sl, r4, #25
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	6832      	ldr	r2, [r6, #0]
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dc26      	bgt.n	8006ee6 <_printf_common+0x96>
 8006e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e9c:	1e13      	subs	r3, r2, #0
 8006e9e:	6822      	ldr	r2, [r4, #0]
 8006ea0:	bf18      	it	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	0692      	lsls	r2, r2, #26
 8006ea6:	d42b      	bmi.n	8006f00 <_printf_common+0xb0>
 8006ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eac:	4649      	mov	r1, r9
 8006eae:	4638      	mov	r0, r7
 8006eb0:	47c0      	blx	r8
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d01e      	beq.n	8006ef4 <_printf_common+0xa4>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	68e5      	ldr	r5, [r4, #12]
 8006eba:	6832      	ldr	r2, [r6, #0]
 8006ebc:	f003 0306 	and.w	r3, r3, #6
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	bf08      	it	eq
 8006ec4:	1aad      	subeq	r5, r5, r2
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	6922      	ldr	r2, [r4, #16]
 8006eca:	bf0c      	ite	eq
 8006ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed0:	2500      	movne	r5, #0
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	bfc4      	itt	gt
 8006ed6:	1a9b      	subgt	r3, r3, r2
 8006ed8:	18ed      	addgt	r5, r5, r3
 8006eda:	2600      	movs	r6, #0
 8006edc:	341a      	adds	r4, #26
 8006ede:	42b5      	cmp	r5, r6
 8006ee0:	d11a      	bne.n	8006f18 <_printf_common+0xc8>
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	e008      	b.n	8006ef8 <_printf_common+0xa8>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4652      	mov	r2, sl
 8006eea:	4649      	mov	r1, r9
 8006eec:	4638      	mov	r0, r7
 8006eee:	47c0      	blx	r8
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d103      	bne.n	8006efc <_printf_common+0xac>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efc:	3501      	adds	r5, #1
 8006efe:	e7c6      	b.n	8006e8e <_printf_common+0x3e>
 8006f00:	18e1      	adds	r1, r4, r3
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	2030      	movs	r0, #48	; 0x30
 8006f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f0a:	4422      	add	r2, r4
 8006f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f14:	3302      	adds	r3, #2
 8006f16:	e7c7      	b.n	8006ea8 <_printf_common+0x58>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	4638      	mov	r0, r7
 8006f20:	47c0      	blx	r8
 8006f22:	3001      	adds	r0, #1
 8006f24:	d0e6      	beq.n	8006ef4 <_printf_common+0xa4>
 8006f26:	3601      	adds	r6, #1
 8006f28:	e7d9      	b.n	8006ede <_printf_common+0x8e>
	...

08006f2c <_printf_i>:
 8006f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	7e0f      	ldrb	r7, [r1, #24]
 8006f32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f34:	2f78      	cmp	r7, #120	; 0x78
 8006f36:	4691      	mov	r9, r2
 8006f38:	4680      	mov	r8, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	469a      	mov	sl, r3
 8006f3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f42:	d807      	bhi.n	8006f54 <_printf_i+0x28>
 8006f44:	2f62      	cmp	r7, #98	; 0x62
 8006f46:	d80a      	bhi.n	8006f5e <_printf_i+0x32>
 8006f48:	2f00      	cmp	r7, #0
 8006f4a:	f000 80d8 	beq.w	80070fe <_printf_i+0x1d2>
 8006f4e:	2f58      	cmp	r7, #88	; 0x58
 8006f50:	f000 80a3 	beq.w	800709a <_printf_i+0x16e>
 8006f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f5c:	e03a      	b.n	8006fd4 <_printf_i+0xa8>
 8006f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f62:	2b15      	cmp	r3, #21
 8006f64:	d8f6      	bhi.n	8006f54 <_printf_i+0x28>
 8006f66:	a101      	add	r1, pc, #4	; (adr r1, 8006f6c <_printf_i+0x40>)
 8006f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f6c:	08006fc5 	.word	0x08006fc5
 8006f70:	08006fd9 	.word	0x08006fd9
 8006f74:	08006f55 	.word	0x08006f55
 8006f78:	08006f55 	.word	0x08006f55
 8006f7c:	08006f55 	.word	0x08006f55
 8006f80:	08006f55 	.word	0x08006f55
 8006f84:	08006fd9 	.word	0x08006fd9
 8006f88:	08006f55 	.word	0x08006f55
 8006f8c:	08006f55 	.word	0x08006f55
 8006f90:	08006f55 	.word	0x08006f55
 8006f94:	08006f55 	.word	0x08006f55
 8006f98:	080070e5 	.word	0x080070e5
 8006f9c:	08007009 	.word	0x08007009
 8006fa0:	080070c7 	.word	0x080070c7
 8006fa4:	08006f55 	.word	0x08006f55
 8006fa8:	08006f55 	.word	0x08006f55
 8006fac:	08007107 	.word	0x08007107
 8006fb0:	08006f55 	.word	0x08006f55
 8006fb4:	08007009 	.word	0x08007009
 8006fb8:	08006f55 	.word	0x08006f55
 8006fbc:	08006f55 	.word	0x08006f55
 8006fc0:	080070cf 	.word	0x080070cf
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	1d1a      	adds	r2, r3, #4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	602a      	str	r2, [r5, #0]
 8006fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0a3      	b.n	8007120 <_printf_i+0x1f4>
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	6829      	ldr	r1, [r5, #0]
 8006fdc:	0606      	lsls	r6, r0, #24
 8006fde:	f101 0304 	add.w	r3, r1, #4
 8006fe2:	d50a      	bpl.n	8006ffa <_printf_i+0xce>
 8006fe4:	680e      	ldr	r6, [r1, #0]
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	da03      	bge.n	8006ff4 <_printf_i+0xc8>
 8006fec:	232d      	movs	r3, #45	; 0x2d
 8006fee:	4276      	negs	r6, r6
 8006ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff4:	485e      	ldr	r0, [pc, #376]	; (8007170 <_printf_i+0x244>)
 8006ff6:	230a      	movs	r3, #10
 8006ff8:	e019      	b.n	800702e <_printf_i+0x102>
 8006ffa:	680e      	ldr	r6, [r1, #0]
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007002:	bf18      	it	ne
 8007004:	b236      	sxthne	r6, r6
 8007006:	e7ef      	b.n	8006fe8 <_printf_i+0xbc>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	1d19      	adds	r1, r3, #4
 800700e:	6029      	str	r1, [r5, #0]
 8007010:	0601      	lsls	r1, r0, #24
 8007012:	d501      	bpl.n	8007018 <_printf_i+0xec>
 8007014:	681e      	ldr	r6, [r3, #0]
 8007016:	e002      	b.n	800701e <_printf_i+0xf2>
 8007018:	0646      	lsls	r6, r0, #25
 800701a:	d5fb      	bpl.n	8007014 <_printf_i+0xe8>
 800701c:	881e      	ldrh	r6, [r3, #0]
 800701e:	4854      	ldr	r0, [pc, #336]	; (8007170 <_printf_i+0x244>)
 8007020:	2f6f      	cmp	r7, #111	; 0x6f
 8007022:	bf0c      	ite	eq
 8007024:	2308      	moveq	r3, #8
 8007026:	230a      	movne	r3, #10
 8007028:	2100      	movs	r1, #0
 800702a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800702e:	6865      	ldr	r5, [r4, #4]
 8007030:	60a5      	str	r5, [r4, #8]
 8007032:	2d00      	cmp	r5, #0
 8007034:	bfa2      	ittt	ge
 8007036:	6821      	ldrge	r1, [r4, #0]
 8007038:	f021 0104 	bicge.w	r1, r1, #4
 800703c:	6021      	strge	r1, [r4, #0]
 800703e:	b90e      	cbnz	r6, 8007044 <_printf_i+0x118>
 8007040:	2d00      	cmp	r5, #0
 8007042:	d04d      	beq.n	80070e0 <_printf_i+0x1b4>
 8007044:	4615      	mov	r5, r2
 8007046:	fbb6 f1f3 	udiv	r1, r6, r3
 800704a:	fb03 6711 	mls	r7, r3, r1, r6
 800704e:	5dc7      	ldrb	r7, [r0, r7]
 8007050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007054:	4637      	mov	r7, r6
 8007056:	42bb      	cmp	r3, r7
 8007058:	460e      	mov	r6, r1
 800705a:	d9f4      	bls.n	8007046 <_printf_i+0x11a>
 800705c:	2b08      	cmp	r3, #8
 800705e:	d10b      	bne.n	8007078 <_printf_i+0x14c>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	07de      	lsls	r6, r3, #31
 8007064:	d508      	bpl.n	8007078 <_printf_i+0x14c>
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	6861      	ldr	r1, [r4, #4]
 800706a:	4299      	cmp	r1, r3
 800706c:	bfde      	ittt	le
 800706e:	2330      	movle	r3, #48	; 0x30
 8007070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007078:	1b52      	subs	r2, r2, r5
 800707a:	6122      	str	r2, [r4, #16]
 800707c:	f8cd a000 	str.w	sl, [sp]
 8007080:	464b      	mov	r3, r9
 8007082:	aa03      	add	r2, sp, #12
 8007084:	4621      	mov	r1, r4
 8007086:	4640      	mov	r0, r8
 8007088:	f7ff fee2 	bl	8006e50 <_printf_common>
 800708c:	3001      	adds	r0, #1
 800708e:	d14c      	bne.n	800712a <_printf_i+0x1fe>
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	b004      	add	sp, #16
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	4835      	ldr	r0, [pc, #212]	; (8007170 <_printf_i+0x244>)
 800709c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070a0:	6829      	ldr	r1, [r5, #0]
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80070a8:	6029      	str	r1, [r5, #0]
 80070aa:	061d      	lsls	r5, r3, #24
 80070ac:	d514      	bpl.n	80070d8 <_printf_i+0x1ac>
 80070ae:	07df      	lsls	r7, r3, #31
 80070b0:	bf44      	itt	mi
 80070b2:	f043 0320 	orrmi.w	r3, r3, #32
 80070b6:	6023      	strmi	r3, [r4, #0]
 80070b8:	b91e      	cbnz	r6, 80070c2 <_printf_i+0x196>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	f023 0320 	bic.w	r3, r3, #32
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	2310      	movs	r3, #16
 80070c4:	e7b0      	b.n	8007028 <_printf_i+0xfc>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	f043 0320 	orr.w	r3, r3, #32
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	2378      	movs	r3, #120	; 0x78
 80070d0:	4828      	ldr	r0, [pc, #160]	; (8007174 <_printf_i+0x248>)
 80070d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070d6:	e7e3      	b.n	80070a0 <_printf_i+0x174>
 80070d8:	0659      	lsls	r1, r3, #25
 80070da:	bf48      	it	mi
 80070dc:	b2b6      	uxthmi	r6, r6
 80070de:	e7e6      	b.n	80070ae <_printf_i+0x182>
 80070e0:	4615      	mov	r5, r2
 80070e2:	e7bb      	b.n	800705c <_printf_i+0x130>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	6826      	ldr	r6, [r4, #0]
 80070e8:	6961      	ldr	r1, [r4, #20]
 80070ea:	1d18      	adds	r0, r3, #4
 80070ec:	6028      	str	r0, [r5, #0]
 80070ee:	0635      	lsls	r5, r6, #24
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	d501      	bpl.n	80070f8 <_printf_i+0x1cc>
 80070f4:	6019      	str	r1, [r3, #0]
 80070f6:	e002      	b.n	80070fe <_printf_i+0x1d2>
 80070f8:	0670      	lsls	r0, r6, #25
 80070fa:	d5fb      	bpl.n	80070f4 <_printf_i+0x1c8>
 80070fc:	8019      	strh	r1, [r3, #0]
 80070fe:	2300      	movs	r3, #0
 8007100:	6123      	str	r3, [r4, #16]
 8007102:	4615      	mov	r5, r2
 8007104:	e7ba      	b.n	800707c <_printf_i+0x150>
 8007106:	682b      	ldr	r3, [r5, #0]
 8007108:	1d1a      	adds	r2, r3, #4
 800710a:	602a      	str	r2, [r5, #0]
 800710c:	681d      	ldr	r5, [r3, #0]
 800710e:	6862      	ldr	r2, [r4, #4]
 8007110:	2100      	movs	r1, #0
 8007112:	4628      	mov	r0, r5
 8007114:	f7f9 f864 	bl	80001e0 <memchr>
 8007118:	b108      	cbz	r0, 800711e <_printf_i+0x1f2>
 800711a:	1b40      	subs	r0, r0, r5
 800711c:	6060      	str	r0, [r4, #4]
 800711e:	6863      	ldr	r3, [r4, #4]
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	2300      	movs	r3, #0
 8007124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007128:	e7a8      	b.n	800707c <_printf_i+0x150>
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	462a      	mov	r2, r5
 800712e:	4649      	mov	r1, r9
 8007130:	4640      	mov	r0, r8
 8007132:	47d0      	blx	sl
 8007134:	3001      	adds	r0, #1
 8007136:	d0ab      	beq.n	8007090 <_printf_i+0x164>
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	079b      	lsls	r3, r3, #30
 800713c:	d413      	bmi.n	8007166 <_printf_i+0x23a>
 800713e:	68e0      	ldr	r0, [r4, #12]
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	4298      	cmp	r0, r3
 8007144:	bfb8      	it	lt
 8007146:	4618      	movlt	r0, r3
 8007148:	e7a4      	b.n	8007094 <_printf_i+0x168>
 800714a:	2301      	movs	r3, #1
 800714c:	4632      	mov	r2, r6
 800714e:	4649      	mov	r1, r9
 8007150:	4640      	mov	r0, r8
 8007152:	47d0      	blx	sl
 8007154:	3001      	adds	r0, #1
 8007156:	d09b      	beq.n	8007090 <_printf_i+0x164>
 8007158:	3501      	adds	r5, #1
 800715a:	68e3      	ldr	r3, [r4, #12]
 800715c:	9903      	ldr	r1, [sp, #12]
 800715e:	1a5b      	subs	r3, r3, r1
 8007160:	42ab      	cmp	r3, r5
 8007162:	dcf2      	bgt.n	800714a <_printf_i+0x21e>
 8007164:	e7eb      	b.n	800713e <_printf_i+0x212>
 8007166:	2500      	movs	r5, #0
 8007168:	f104 0619 	add.w	r6, r4, #25
 800716c:	e7f5      	b.n	800715a <_printf_i+0x22e>
 800716e:	bf00      	nop
 8007170:	0800962e 	.word	0x0800962e
 8007174:	0800963f 	.word	0x0800963f

08007178 <iprintf>:
 8007178:	b40f      	push	{r0, r1, r2, r3}
 800717a:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <iprintf+0x2c>)
 800717c:	b513      	push	{r0, r1, r4, lr}
 800717e:	681c      	ldr	r4, [r3, #0]
 8007180:	b124      	cbz	r4, 800718c <iprintf+0x14>
 8007182:	69a3      	ldr	r3, [r4, #24]
 8007184:	b913      	cbnz	r3, 800718c <iprintf+0x14>
 8007186:	4620      	mov	r0, r4
 8007188:	f001 f8da 	bl	8008340 <__sinit>
 800718c:	ab05      	add	r3, sp, #20
 800718e:	9a04      	ldr	r2, [sp, #16]
 8007190:	68a1      	ldr	r1, [r4, #8]
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	4620      	mov	r0, r4
 8007196:	f001 fe97 	bl	8008ec8 <_vfiprintf_r>
 800719a:	b002      	add	sp, #8
 800719c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a0:	b004      	add	sp, #16
 80071a2:	4770      	bx	lr
 80071a4:	2000000c 	.word	0x2000000c

080071a8 <_puts_r>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	460e      	mov	r6, r1
 80071ac:	4605      	mov	r5, r0
 80071ae:	b118      	cbz	r0, 80071b8 <_puts_r+0x10>
 80071b0:	6983      	ldr	r3, [r0, #24]
 80071b2:	b90b      	cbnz	r3, 80071b8 <_puts_r+0x10>
 80071b4:	f001 f8c4 	bl	8008340 <__sinit>
 80071b8:	69ab      	ldr	r3, [r5, #24]
 80071ba:	68ac      	ldr	r4, [r5, #8]
 80071bc:	b913      	cbnz	r3, 80071c4 <_puts_r+0x1c>
 80071be:	4628      	mov	r0, r5
 80071c0:	f001 f8be 	bl	8008340 <__sinit>
 80071c4:	4b2c      	ldr	r3, [pc, #176]	; (8007278 <_puts_r+0xd0>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d120      	bne.n	800720c <_puts_r+0x64>
 80071ca:	686c      	ldr	r4, [r5, #4]
 80071cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ce:	07db      	lsls	r3, r3, #31
 80071d0:	d405      	bmi.n	80071de <_puts_r+0x36>
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	0598      	lsls	r0, r3, #22
 80071d6:	d402      	bmi.n	80071de <_puts_r+0x36>
 80071d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071da:	f001 f954 	bl	8008486 <__retarget_lock_acquire_recursive>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	0719      	lsls	r1, r3, #28
 80071e2:	d51d      	bpl.n	8007220 <_puts_r+0x78>
 80071e4:	6923      	ldr	r3, [r4, #16]
 80071e6:	b1db      	cbz	r3, 8007220 <_puts_r+0x78>
 80071e8:	3e01      	subs	r6, #1
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071f0:	3b01      	subs	r3, #1
 80071f2:	60a3      	str	r3, [r4, #8]
 80071f4:	bb39      	cbnz	r1, 8007246 <_puts_r+0x9e>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da38      	bge.n	800726c <_puts_r+0xc4>
 80071fa:	4622      	mov	r2, r4
 80071fc:	210a      	movs	r1, #10
 80071fe:	4628      	mov	r0, r5
 8007200:	f000 f848 	bl	8007294 <__swbuf_r>
 8007204:	3001      	adds	r0, #1
 8007206:	d011      	beq.n	800722c <_puts_r+0x84>
 8007208:	250a      	movs	r5, #10
 800720a:	e011      	b.n	8007230 <_puts_r+0x88>
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <_puts_r+0xd4>)
 800720e:	429c      	cmp	r4, r3
 8007210:	d101      	bne.n	8007216 <_puts_r+0x6e>
 8007212:	68ac      	ldr	r4, [r5, #8]
 8007214:	e7da      	b.n	80071cc <_puts_r+0x24>
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <_puts_r+0xd8>)
 8007218:	429c      	cmp	r4, r3
 800721a:	bf08      	it	eq
 800721c:	68ec      	ldreq	r4, [r5, #12]
 800721e:	e7d5      	b.n	80071cc <_puts_r+0x24>
 8007220:	4621      	mov	r1, r4
 8007222:	4628      	mov	r0, r5
 8007224:	f000 f888 	bl	8007338 <__swsetup_r>
 8007228:	2800      	cmp	r0, #0
 800722a:	d0dd      	beq.n	80071e8 <_puts_r+0x40>
 800722c:	f04f 35ff 	mov.w	r5, #4294967295
 8007230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007232:	07da      	lsls	r2, r3, #31
 8007234:	d405      	bmi.n	8007242 <_puts_r+0x9a>
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	059b      	lsls	r3, r3, #22
 800723a:	d402      	bmi.n	8007242 <_puts_r+0x9a>
 800723c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800723e:	f001 f923 	bl	8008488 <__retarget_lock_release_recursive>
 8007242:	4628      	mov	r0, r5
 8007244:	bd70      	pop	{r4, r5, r6, pc}
 8007246:	2b00      	cmp	r3, #0
 8007248:	da04      	bge.n	8007254 <_puts_r+0xac>
 800724a:	69a2      	ldr	r2, [r4, #24]
 800724c:	429a      	cmp	r2, r3
 800724e:	dc06      	bgt.n	800725e <_puts_r+0xb6>
 8007250:	290a      	cmp	r1, #10
 8007252:	d004      	beq.n	800725e <_puts_r+0xb6>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6022      	str	r2, [r4, #0]
 800725a:	7019      	strb	r1, [r3, #0]
 800725c:	e7c5      	b.n	80071ea <_puts_r+0x42>
 800725e:	4622      	mov	r2, r4
 8007260:	4628      	mov	r0, r5
 8007262:	f000 f817 	bl	8007294 <__swbuf_r>
 8007266:	3001      	adds	r0, #1
 8007268:	d1bf      	bne.n	80071ea <_puts_r+0x42>
 800726a:	e7df      	b.n	800722c <_puts_r+0x84>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	250a      	movs	r5, #10
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	701d      	strb	r5, [r3, #0]
 8007276:	e7db      	b.n	8007230 <_puts_r+0x88>
 8007278:	08009700 	.word	0x08009700
 800727c:	08009720 	.word	0x08009720
 8007280:	080096e0 	.word	0x080096e0

08007284 <puts>:
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <puts+0xc>)
 8007286:	4601      	mov	r1, r0
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f7ff bf8d 	b.w	80071a8 <_puts_r>
 800728e:	bf00      	nop
 8007290:	2000000c 	.word	0x2000000c

08007294 <__swbuf_r>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	460e      	mov	r6, r1
 8007298:	4614      	mov	r4, r2
 800729a:	4605      	mov	r5, r0
 800729c:	b118      	cbz	r0, 80072a6 <__swbuf_r+0x12>
 800729e:	6983      	ldr	r3, [r0, #24]
 80072a0:	b90b      	cbnz	r3, 80072a6 <__swbuf_r+0x12>
 80072a2:	f001 f84d 	bl	8008340 <__sinit>
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <__swbuf_r+0x98>)
 80072a8:	429c      	cmp	r4, r3
 80072aa:	d12b      	bne.n	8007304 <__swbuf_r+0x70>
 80072ac:	686c      	ldr	r4, [r5, #4]
 80072ae:	69a3      	ldr	r3, [r4, #24]
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	071a      	lsls	r2, r3, #28
 80072b6:	d52f      	bpl.n	8007318 <__swbuf_r+0x84>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	b36b      	cbz	r3, 8007318 <__swbuf_r+0x84>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	b2f6      	uxtb	r6, r6
 80072c6:	4283      	cmp	r3, r0
 80072c8:	4637      	mov	r7, r6
 80072ca:	dc04      	bgt.n	80072d6 <__swbuf_r+0x42>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 ffa2 	bl	8008218 <_fflush_r>
 80072d4:	bb30      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	3b01      	subs	r3, #1
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	701e      	strb	r6, [r3, #0]
 80072e4:	6963      	ldr	r3, [r4, #20]
 80072e6:	3001      	adds	r0, #1
 80072e8:	4283      	cmp	r3, r0
 80072ea:	d004      	beq.n	80072f6 <__swbuf_r+0x62>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d506      	bpl.n	8007300 <__swbuf_r+0x6c>
 80072f2:	2e0a      	cmp	r6, #10
 80072f4:	d104      	bne.n	8007300 <__swbuf_r+0x6c>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 ff8d 	bl	8008218 <_fflush_r>
 80072fe:	b988      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 8007300:	4638      	mov	r0, r7
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <__swbuf_r+0x9c>)
 8007306:	429c      	cmp	r4, r3
 8007308:	d101      	bne.n	800730e <__swbuf_r+0x7a>
 800730a:	68ac      	ldr	r4, [r5, #8]
 800730c:	e7cf      	b.n	80072ae <__swbuf_r+0x1a>
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <__swbuf_r+0xa0>)
 8007310:	429c      	cmp	r4, r3
 8007312:	bf08      	it	eq
 8007314:	68ec      	ldreq	r4, [r5, #12]
 8007316:	e7ca      	b.n	80072ae <__swbuf_r+0x1a>
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f80c 	bl	8007338 <__swsetup_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	d0cb      	beq.n	80072bc <__swbuf_r+0x28>
 8007324:	f04f 37ff 	mov.w	r7, #4294967295
 8007328:	e7ea      	b.n	8007300 <__swbuf_r+0x6c>
 800732a:	bf00      	nop
 800732c:	08009700 	.word	0x08009700
 8007330:	08009720 	.word	0x08009720
 8007334:	080096e0 	.word	0x080096e0

08007338 <__swsetup_r>:
 8007338:	4b32      	ldr	r3, [pc, #200]	; (8007404 <__swsetup_r+0xcc>)
 800733a:	b570      	push	{r4, r5, r6, lr}
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	4606      	mov	r6, r0
 8007340:	460c      	mov	r4, r1
 8007342:	b125      	cbz	r5, 800734e <__swsetup_r+0x16>
 8007344:	69ab      	ldr	r3, [r5, #24]
 8007346:	b913      	cbnz	r3, 800734e <__swsetup_r+0x16>
 8007348:	4628      	mov	r0, r5
 800734a:	f000 fff9 	bl	8008340 <__sinit>
 800734e:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <__swsetup_r+0xd0>)
 8007350:	429c      	cmp	r4, r3
 8007352:	d10f      	bne.n	8007374 <__swsetup_r+0x3c>
 8007354:	686c      	ldr	r4, [r5, #4]
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800735c:	0719      	lsls	r1, r3, #28
 800735e:	d42c      	bmi.n	80073ba <__swsetup_r+0x82>
 8007360:	06dd      	lsls	r5, r3, #27
 8007362:	d411      	bmi.n	8007388 <__swsetup_r+0x50>
 8007364:	2309      	movs	r3, #9
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	e03e      	b.n	80073f2 <__swsetup_r+0xba>
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <__swsetup_r+0xd4>)
 8007376:	429c      	cmp	r4, r3
 8007378:	d101      	bne.n	800737e <__swsetup_r+0x46>
 800737a:	68ac      	ldr	r4, [r5, #8]
 800737c:	e7eb      	b.n	8007356 <__swsetup_r+0x1e>
 800737e:	4b24      	ldr	r3, [pc, #144]	; (8007410 <__swsetup_r+0xd8>)
 8007380:	429c      	cmp	r4, r3
 8007382:	bf08      	it	eq
 8007384:	68ec      	ldreq	r4, [r5, #12]
 8007386:	e7e6      	b.n	8007356 <__swsetup_r+0x1e>
 8007388:	0758      	lsls	r0, r3, #29
 800738a:	d512      	bpl.n	80073b2 <__swsetup_r+0x7a>
 800738c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738e:	b141      	cbz	r1, 80073a2 <__swsetup_r+0x6a>
 8007390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <__swsetup_r+0x66>
 8007398:	4630      	mov	r0, r6
 800739a:	f001 fc8b 	bl	8008cb4 <_free_r>
 800739e:	2300      	movs	r3, #0
 80073a0:	6363      	str	r3, [r4, #52]	; 0x34
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f043 0308 	orr.w	r3, r3, #8
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	b94b      	cbnz	r3, 80073d2 <__swsetup_r+0x9a>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c8:	d003      	beq.n	80073d2 <__swsetup_r+0x9a>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4630      	mov	r0, r6
 80073ce:	f001 f881 	bl	80084d4 <__smakebuf_r>
 80073d2:	89a0      	ldrh	r0, [r4, #12]
 80073d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d8:	f010 0301 	ands.w	r3, r0, #1
 80073dc:	d00a      	beq.n	80073f4 <__swsetup_r+0xbc>
 80073de:	2300      	movs	r3, #0
 80073e0:	60a3      	str	r3, [r4, #8]
 80073e2:	6963      	ldr	r3, [r4, #20]
 80073e4:	425b      	negs	r3, r3
 80073e6:	61a3      	str	r3, [r4, #24]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	b943      	cbnz	r3, 80073fe <__swsetup_r+0xc6>
 80073ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073f0:	d1ba      	bne.n	8007368 <__swsetup_r+0x30>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	0781      	lsls	r1, r0, #30
 80073f6:	bf58      	it	pl
 80073f8:	6963      	ldrpl	r3, [r4, #20]
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	e7f4      	b.n	80073e8 <__swsetup_r+0xb0>
 80073fe:	2000      	movs	r0, #0
 8007400:	e7f7      	b.n	80073f2 <__swsetup_r+0xba>
 8007402:	bf00      	nop
 8007404:	2000000c 	.word	0x2000000c
 8007408:	08009700 	.word	0x08009700
 800740c:	08009720 	.word	0x08009720
 8007410:	080096e0 	.word	0x080096e0

08007414 <quorem>:
 8007414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	6903      	ldr	r3, [r0, #16]
 800741a:	690c      	ldr	r4, [r1, #16]
 800741c:	42a3      	cmp	r3, r4
 800741e:	4607      	mov	r7, r0
 8007420:	f2c0 8081 	blt.w	8007526 <quorem+0x112>
 8007424:	3c01      	subs	r4, #1
 8007426:	f101 0814 	add.w	r8, r1, #20
 800742a:	f100 0514 	add.w	r5, r0, #20
 800742e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800743c:	3301      	adds	r3, #1
 800743e:	429a      	cmp	r2, r3
 8007440:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007448:	fbb2 f6f3 	udiv	r6, r2, r3
 800744c:	d331      	bcc.n	80074b2 <quorem+0x9e>
 800744e:	f04f 0e00 	mov.w	lr, #0
 8007452:	4640      	mov	r0, r8
 8007454:	46ac      	mov	ip, r5
 8007456:	46f2      	mov	sl, lr
 8007458:	f850 2b04 	ldr.w	r2, [r0], #4
 800745c:	b293      	uxth	r3, r2
 800745e:	fb06 e303 	mla	r3, r6, r3, lr
 8007462:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007466:	b29b      	uxth	r3, r3
 8007468:	ebaa 0303 	sub.w	r3, sl, r3
 800746c:	f8dc a000 	ldr.w	sl, [ip]
 8007470:	0c12      	lsrs	r2, r2, #16
 8007472:	fa13 f38a 	uxtah	r3, r3, sl
 8007476:	fb06 e202 	mla	r2, r6, r2, lr
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007482:	b292      	uxth	r2, r2
 8007484:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800748c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007490:	4581      	cmp	r9, r0
 8007492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007496:	f84c 3b04 	str.w	r3, [ip], #4
 800749a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800749e:	d2db      	bcs.n	8007458 <quorem+0x44>
 80074a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80074a4:	b92b      	cbnz	r3, 80074b2 <quorem+0x9e>
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	3b04      	subs	r3, #4
 80074aa:	429d      	cmp	r5, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	d32e      	bcc.n	800750e <quorem+0xfa>
 80074b0:	613c      	str	r4, [r7, #16]
 80074b2:	4638      	mov	r0, r7
 80074b4:	f001 fae6 	bl	8008a84 <__mcmp>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	db24      	blt.n	8007506 <quorem+0xf2>
 80074bc:	3601      	adds	r6, #1
 80074be:	4628      	mov	r0, r5
 80074c0:	f04f 0c00 	mov.w	ip, #0
 80074c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80074c8:	f8d0 e000 	ldr.w	lr, [r0]
 80074cc:	b293      	uxth	r3, r2
 80074ce:	ebac 0303 	sub.w	r3, ip, r3
 80074d2:	0c12      	lsrs	r2, r2, #16
 80074d4:	fa13 f38e 	uxtah	r3, r3, lr
 80074d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074e6:	45c1      	cmp	r9, r8
 80074e8:	f840 3b04 	str.w	r3, [r0], #4
 80074ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074f0:	d2e8      	bcs.n	80074c4 <quorem+0xb0>
 80074f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074fa:	b922      	cbnz	r2, 8007506 <quorem+0xf2>
 80074fc:	3b04      	subs	r3, #4
 80074fe:	429d      	cmp	r5, r3
 8007500:	461a      	mov	r2, r3
 8007502:	d30a      	bcc.n	800751a <quorem+0x106>
 8007504:	613c      	str	r4, [r7, #16]
 8007506:	4630      	mov	r0, r6
 8007508:	b003      	add	sp, #12
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	3b04      	subs	r3, #4
 8007512:	2a00      	cmp	r2, #0
 8007514:	d1cc      	bne.n	80074b0 <quorem+0x9c>
 8007516:	3c01      	subs	r4, #1
 8007518:	e7c7      	b.n	80074aa <quorem+0x96>
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	3b04      	subs	r3, #4
 800751e:	2a00      	cmp	r2, #0
 8007520:	d1f0      	bne.n	8007504 <quorem+0xf0>
 8007522:	3c01      	subs	r4, #1
 8007524:	e7eb      	b.n	80074fe <quorem+0xea>
 8007526:	2000      	movs	r0, #0
 8007528:	e7ee      	b.n	8007508 <quorem+0xf4>
 800752a:	0000      	movs	r0, r0
 800752c:	0000      	movs	r0, r0
	...

08007530 <_dtoa_r>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	ed2d 8b04 	vpush	{d8-d9}
 8007538:	ec57 6b10 	vmov	r6, r7, d0
 800753c:	b093      	sub	sp, #76	; 0x4c
 800753e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007540:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007544:	9106      	str	r1, [sp, #24]
 8007546:	ee10 aa10 	vmov	sl, s0
 800754a:	4604      	mov	r4, r0
 800754c:	9209      	str	r2, [sp, #36]	; 0x24
 800754e:	930c      	str	r3, [sp, #48]	; 0x30
 8007550:	46bb      	mov	fp, r7
 8007552:	b975      	cbnz	r5, 8007572 <_dtoa_r+0x42>
 8007554:	2010      	movs	r0, #16
 8007556:	f000 fffd 	bl	8008554 <malloc>
 800755a:	4602      	mov	r2, r0
 800755c:	6260      	str	r0, [r4, #36]	; 0x24
 800755e:	b920      	cbnz	r0, 800756a <_dtoa_r+0x3a>
 8007560:	4ba7      	ldr	r3, [pc, #668]	; (8007800 <_dtoa_r+0x2d0>)
 8007562:	21ea      	movs	r1, #234	; 0xea
 8007564:	48a7      	ldr	r0, [pc, #668]	; (8007804 <_dtoa_r+0x2d4>)
 8007566:	f001 fe45 	bl	80091f4 <__assert_func>
 800756a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800756e:	6005      	str	r5, [r0, #0]
 8007570:	60c5      	str	r5, [r0, #12]
 8007572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007574:	6819      	ldr	r1, [r3, #0]
 8007576:	b151      	cbz	r1, 800758e <_dtoa_r+0x5e>
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	604a      	str	r2, [r1, #4]
 800757c:	2301      	movs	r3, #1
 800757e:	4093      	lsls	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
 8007582:	4620      	mov	r0, r4
 8007584:	f001 f83c 	bl	8008600 <_Bfree>
 8007588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	1e3b      	subs	r3, r7, #0
 8007590:	bfaa      	itet	ge
 8007592:	2300      	movge	r3, #0
 8007594:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007598:	f8c8 3000 	strge.w	r3, [r8]
 800759c:	4b9a      	ldr	r3, [pc, #616]	; (8007808 <_dtoa_r+0x2d8>)
 800759e:	bfbc      	itt	lt
 80075a0:	2201      	movlt	r2, #1
 80075a2:	f8c8 2000 	strlt.w	r2, [r8]
 80075a6:	ea33 030b 	bics.w	r3, r3, fp
 80075aa:	d11b      	bne.n	80075e4 <_dtoa_r+0xb4>
 80075ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075b8:	4333      	orrs	r3, r6
 80075ba:	f000 8592 	beq.w	80080e2 <_dtoa_r+0xbb2>
 80075be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075c0:	b963      	cbnz	r3, 80075dc <_dtoa_r+0xac>
 80075c2:	4b92      	ldr	r3, [pc, #584]	; (800780c <_dtoa_r+0x2dc>)
 80075c4:	e022      	b.n	800760c <_dtoa_r+0xdc>
 80075c6:	4b92      	ldr	r3, [pc, #584]	; (8007810 <_dtoa_r+0x2e0>)
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	3308      	adds	r3, #8
 80075cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	9801      	ldr	r0, [sp, #4]
 80075d2:	b013      	add	sp, #76	; 0x4c
 80075d4:	ecbd 8b04 	vpop	{d8-d9}
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	4b8b      	ldr	r3, [pc, #556]	; (800780c <_dtoa_r+0x2dc>)
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	3303      	adds	r3, #3
 80075e2:	e7f3      	b.n	80075cc <_dtoa_r+0x9c>
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4650      	mov	r0, sl
 80075ea:	4659      	mov	r1, fp
 80075ec:	f7f9 fa6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80075f0:	ec4b ab19 	vmov	d9, sl, fp
 80075f4:	4680      	mov	r8, r0
 80075f6:	b158      	cbz	r0, 8007610 <_dtoa_r+0xe0>
 80075f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075fa:	2301      	movs	r3, #1
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 856b 	beq.w	80080dc <_dtoa_r+0xbac>
 8007606:	4883      	ldr	r0, [pc, #524]	; (8007814 <_dtoa_r+0x2e4>)
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	1e43      	subs	r3, r0, #1
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	e7df      	b.n	80075d0 <_dtoa_r+0xa0>
 8007610:	ec4b ab10 	vmov	d0, sl, fp
 8007614:	aa10      	add	r2, sp, #64	; 0x40
 8007616:	a911      	add	r1, sp, #68	; 0x44
 8007618:	4620      	mov	r0, r4
 800761a:	f001 fad9 	bl	8008bd0 <__d2b>
 800761e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007622:	ee08 0a10 	vmov	s16, r0
 8007626:	2d00      	cmp	r5, #0
 8007628:	f000 8084 	beq.w	8007734 <_dtoa_r+0x204>
 800762c:	ee19 3a90 	vmov	r3, s19
 8007630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007634:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007638:	4656      	mov	r6, sl
 800763a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800763e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007642:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007646:	4b74      	ldr	r3, [pc, #464]	; (8007818 <_dtoa_r+0x2e8>)
 8007648:	2200      	movs	r2, #0
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	f7f8 fe1b 	bl	8000288 <__aeabi_dsub>
 8007652:	a365      	add	r3, pc, #404	; (adr r3, 80077e8 <_dtoa_r+0x2b8>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f7f8 ffce 	bl	80005f8 <__aeabi_dmul>
 800765c:	a364      	add	r3, pc, #400	; (adr r3, 80077f0 <_dtoa_r+0x2c0>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f7f8 fe13 	bl	800028c <__adddf3>
 8007666:	4606      	mov	r6, r0
 8007668:	4628      	mov	r0, r5
 800766a:	460f      	mov	r7, r1
 800766c:	f7f8 ff5a 	bl	8000524 <__aeabi_i2d>
 8007670:	a361      	add	r3, pc, #388	; (adr r3, 80077f8 <_dtoa_r+0x2c8>)
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f7f8 ffbf 	bl	80005f8 <__aeabi_dmul>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4630      	mov	r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	f7f8 fe03 	bl	800028c <__adddf3>
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	f7f9 fa65 	bl	8000b58 <__aeabi_d2iz>
 800768e:	2200      	movs	r2, #0
 8007690:	9000      	str	r0, [sp, #0]
 8007692:	2300      	movs	r3, #0
 8007694:	4630      	mov	r0, r6
 8007696:	4639      	mov	r1, r7
 8007698:	f7f9 fa20 	bl	8000adc <__aeabi_dcmplt>
 800769c:	b150      	cbz	r0, 80076b4 <_dtoa_r+0x184>
 800769e:	9800      	ldr	r0, [sp, #0]
 80076a0:	f7f8 ff40 	bl	8000524 <__aeabi_i2d>
 80076a4:	4632      	mov	r2, r6
 80076a6:	463b      	mov	r3, r7
 80076a8:	f7f9 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ac:	b910      	cbnz	r0, 80076b4 <_dtoa_r+0x184>
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	2b16      	cmp	r3, #22
 80076b8:	d85a      	bhi.n	8007770 <_dtoa_r+0x240>
 80076ba:	9a00      	ldr	r2, [sp, #0]
 80076bc:	4b57      	ldr	r3, [pc, #348]	; (800781c <_dtoa_r+0x2ec>)
 80076be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	ec51 0b19 	vmov	r0, r1, d9
 80076ca:	f7f9 fa07 	bl	8000adc <__aeabi_dcmplt>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d050      	beq.n	8007774 <_dtoa_r+0x244>
 80076d2:	9b00      	ldr	r3, [sp, #0]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	2300      	movs	r3, #0
 80076da:	930b      	str	r3, [sp, #44]	; 0x2c
 80076dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076de:	1b5d      	subs	r5, r3, r5
 80076e0:	1e6b      	subs	r3, r5, #1
 80076e2:	9305      	str	r3, [sp, #20]
 80076e4:	bf45      	ittet	mi
 80076e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80076ea:	9304      	strmi	r3, [sp, #16]
 80076ec:	2300      	movpl	r3, #0
 80076ee:	2300      	movmi	r3, #0
 80076f0:	bf4c      	ite	mi
 80076f2:	9305      	strmi	r3, [sp, #20]
 80076f4:	9304      	strpl	r3, [sp, #16]
 80076f6:	9b00      	ldr	r3, [sp, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	db3d      	blt.n	8007778 <_dtoa_r+0x248>
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	9a00      	ldr	r2, [sp, #0]
 8007700:	920a      	str	r2, [sp, #40]	; 0x28
 8007702:	4413      	add	r3, r2
 8007704:	9305      	str	r3, [sp, #20]
 8007706:	2300      	movs	r3, #0
 8007708:	9307      	str	r3, [sp, #28]
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	2b09      	cmp	r3, #9
 800770e:	f200 8089 	bhi.w	8007824 <_dtoa_r+0x2f4>
 8007712:	2b05      	cmp	r3, #5
 8007714:	bfc4      	itt	gt
 8007716:	3b04      	subgt	r3, #4
 8007718:	9306      	strgt	r3, [sp, #24]
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	f1a3 0302 	sub.w	r3, r3, #2
 8007720:	bfcc      	ite	gt
 8007722:	2500      	movgt	r5, #0
 8007724:	2501      	movle	r5, #1
 8007726:	2b03      	cmp	r3, #3
 8007728:	f200 8087 	bhi.w	800783a <_dtoa_r+0x30a>
 800772c:	e8df f003 	tbb	[pc, r3]
 8007730:	59383a2d 	.word	0x59383a2d
 8007734:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007738:	441d      	add	r5, r3
 800773a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800773e:	2b20      	cmp	r3, #32
 8007740:	bfc1      	itttt	gt
 8007742:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007746:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800774a:	fa0b f303 	lslgt.w	r3, fp, r3
 800774e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007752:	bfda      	itte	le
 8007754:	f1c3 0320 	rsble	r3, r3, #32
 8007758:	fa06 f003 	lslle.w	r0, r6, r3
 800775c:	4318      	orrgt	r0, r3
 800775e:	f7f8 fed1 	bl	8000504 <__aeabi_ui2d>
 8007762:	2301      	movs	r3, #1
 8007764:	4606      	mov	r6, r0
 8007766:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800776a:	3d01      	subs	r5, #1
 800776c:	930e      	str	r3, [sp, #56]	; 0x38
 800776e:	e76a      	b.n	8007646 <_dtoa_r+0x116>
 8007770:	2301      	movs	r3, #1
 8007772:	e7b2      	b.n	80076da <_dtoa_r+0x1aa>
 8007774:	900b      	str	r0, [sp, #44]	; 0x2c
 8007776:	e7b1      	b.n	80076dc <_dtoa_r+0x1ac>
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	9a00      	ldr	r2, [sp, #0]
 800777c:	1a9b      	subs	r3, r3, r2
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	4253      	negs	r3, r2
 8007782:	9307      	str	r3, [sp, #28]
 8007784:	2300      	movs	r3, #0
 8007786:	930a      	str	r3, [sp, #40]	; 0x28
 8007788:	e7bf      	b.n	800770a <_dtoa_r+0x1da>
 800778a:	2300      	movs	r3, #0
 800778c:	9308      	str	r3, [sp, #32]
 800778e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	dc55      	bgt.n	8007840 <_dtoa_r+0x310>
 8007794:	2301      	movs	r3, #1
 8007796:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800779a:	461a      	mov	r2, r3
 800779c:	9209      	str	r2, [sp, #36]	; 0x24
 800779e:	e00c      	b.n	80077ba <_dtoa_r+0x28a>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7f3      	b.n	800778c <_dtoa_r+0x25c>
 80077a4:	2300      	movs	r3, #0
 80077a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a8:	9308      	str	r3, [sp, #32]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	4413      	add	r3, r2
 80077ae:	9302      	str	r3, [sp, #8]
 80077b0:	3301      	adds	r3, #1
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	bfb8      	it	lt
 80077b8:	2301      	movlt	r3, #1
 80077ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077bc:	2200      	movs	r2, #0
 80077be:	6042      	str	r2, [r0, #4]
 80077c0:	2204      	movs	r2, #4
 80077c2:	f102 0614 	add.w	r6, r2, #20
 80077c6:	429e      	cmp	r6, r3
 80077c8:	6841      	ldr	r1, [r0, #4]
 80077ca:	d93d      	bls.n	8007848 <_dtoa_r+0x318>
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fed7 	bl	8008580 <_Balloc>
 80077d2:	9001      	str	r0, [sp, #4]
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d13b      	bne.n	8007850 <_dtoa_r+0x320>
 80077d8:	4b11      	ldr	r3, [pc, #68]	; (8007820 <_dtoa_r+0x2f0>)
 80077da:	4602      	mov	r2, r0
 80077dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077e0:	e6c0      	b.n	8007564 <_dtoa_r+0x34>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7df      	b.n	80077a6 <_dtoa_r+0x276>
 80077e6:	bf00      	nop
 80077e8:	636f4361 	.word	0x636f4361
 80077ec:	3fd287a7 	.word	0x3fd287a7
 80077f0:	8b60c8b3 	.word	0x8b60c8b3
 80077f4:	3fc68a28 	.word	0x3fc68a28
 80077f8:	509f79fb 	.word	0x509f79fb
 80077fc:	3fd34413 	.word	0x3fd34413
 8007800:	0800965d 	.word	0x0800965d
 8007804:	08009674 	.word	0x08009674
 8007808:	7ff00000 	.word	0x7ff00000
 800780c:	08009659 	.word	0x08009659
 8007810:	08009650 	.word	0x08009650
 8007814:	0800962d 	.word	0x0800962d
 8007818:	3ff80000 	.word	0x3ff80000
 800781c:	080097c8 	.word	0x080097c8
 8007820:	080096cf 	.word	0x080096cf
 8007824:	2501      	movs	r5, #1
 8007826:	2300      	movs	r3, #0
 8007828:	9306      	str	r3, [sp, #24]
 800782a:	9508      	str	r5, [sp, #32]
 800782c:	f04f 33ff 	mov.w	r3, #4294967295
 8007830:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	2312      	movs	r3, #18
 8007838:	e7b0      	b.n	800779c <_dtoa_r+0x26c>
 800783a:	2301      	movs	r3, #1
 800783c:	9308      	str	r3, [sp, #32]
 800783e:	e7f5      	b.n	800782c <_dtoa_r+0x2fc>
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007846:	e7b8      	b.n	80077ba <_dtoa_r+0x28a>
 8007848:	3101      	adds	r1, #1
 800784a:	6041      	str	r1, [r0, #4]
 800784c:	0052      	lsls	r2, r2, #1
 800784e:	e7b8      	b.n	80077c2 <_dtoa_r+0x292>
 8007850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	2b0e      	cmp	r3, #14
 800785a:	f200 809d 	bhi.w	8007998 <_dtoa_r+0x468>
 800785e:	2d00      	cmp	r5, #0
 8007860:	f000 809a 	beq.w	8007998 <_dtoa_r+0x468>
 8007864:	9b00      	ldr	r3, [sp, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	dd32      	ble.n	80078d0 <_dtoa_r+0x3a0>
 800786a:	4ab7      	ldr	r2, [pc, #732]	; (8007b48 <_dtoa_r+0x618>)
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007878:	9b00      	ldr	r3, [sp, #0]
 800787a:	05d8      	lsls	r0, r3, #23
 800787c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007880:	d516      	bpl.n	80078b0 <_dtoa_r+0x380>
 8007882:	4bb2      	ldr	r3, [pc, #712]	; (8007b4c <_dtoa_r+0x61c>)
 8007884:	ec51 0b19 	vmov	r0, r1, d9
 8007888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800788c:	f7f8 ffde 	bl	800084c <__aeabi_ddiv>
 8007890:	f007 070f 	and.w	r7, r7, #15
 8007894:	4682      	mov	sl, r0
 8007896:	468b      	mov	fp, r1
 8007898:	2503      	movs	r5, #3
 800789a:	4eac      	ldr	r6, [pc, #688]	; (8007b4c <_dtoa_r+0x61c>)
 800789c:	b957      	cbnz	r7, 80078b4 <_dtoa_r+0x384>
 800789e:	4642      	mov	r2, r8
 80078a0:	464b      	mov	r3, r9
 80078a2:	4650      	mov	r0, sl
 80078a4:	4659      	mov	r1, fp
 80078a6:	f7f8 ffd1 	bl	800084c <__aeabi_ddiv>
 80078aa:	4682      	mov	sl, r0
 80078ac:	468b      	mov	fp, r1
 80078ae:	e028      	b.n	8007902 <_dtoa_r+0x3d2>
 80078b0:	2502      	movs	r5, #2
 80078b2:	e7f2      	b.n	800789a <_dtoa_r+0x36a>
 80078b4:	07f9      	lsls	r1, r7, #31
 80078b6:	d508      	bpl.n	80078ca <_dtoa_r+0x39a>
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078c0:	f7f8 fe9a 	bl	80005f8 <__aeabi_dmul>
 80078c4:	3501      	adds	r5, #1
 80078c6:	4680      	mov	r8, r0
 80078c8:	4689      	mov	r9, r1
 80078ca:	107f      	asrs	r7, r7, #1
 80078cc:	3608      	adds	r6, #8
 80078ce:	e7e5      	b.n	800789c <_dtoa_r+0x36c>
 80078d0:	f000 809b 	beq.w	8007a0a <_dtoa_r+0x4da>
 80078d4:	9b00      	ldr	r3, [sp, #0]
 80078d6:	4f9d      	ldr	r7, [pc, #628]	; (8007b4c <_dtoa_r+0x61c>)
 80078d8:	425e      	negs	r6, r3
 80078da:	4b9b      	ldr	r3, [pc, #620]	; (8007b48 <_dtoa_r+0x618>)
 80078dc:	f006 020f 	and.w	r2, r6, #15
 80078e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	ec51 0b19 	vmov	r0, r1, d9
 80078ec:	f7f8 fe84 	bl	80005f8 <__aeabi_dmul>
 80078f0:	1136      	asrs	r6, r6, #4
 80078f2:	4682      	mov	sl, r0
 80078f4:	468b      	mov	fp, r1
 80078f6:	2300      	movs	r3, #0
 80078f8:	2502      	movs	r5, #2
 80078fa:	2e00      	cmp	r6, #0
 80078fc:	d17a      	bne.n	80079f4 <_dtoa_r+0x4c4>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1d3      	bne.n	80078aa <_dtoa_r+0x37a>
 8007902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8082 	beq.w	8007a0e <_dtoa_r+0x4de>
 800790a:	4b91      	ldr	r3, [pc, #580]	; (8007b50 <_dtoa_r+0x620>)
 800790c:	2200      	movs	r2, #0
 800790e:	4650      	mov	r0, sl
 8007910:	4659      	mov	r1, fp
 8007912:	f7f9 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	d079      	beq.n	8007a0e <_dtoa_r+0x4de>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d076      	beq.n	8007a0e <_dtoa_r+0x4de>
 8007920:	9b02      	ldr	r3, [sp, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	dd36      	ble.n	8007994 <_dtoa_r+0x464>
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	4650      	mov	r0, sl
 800792a:	4659      	mov	r1, fp
 800792c:	1e5f      	subs	r7, r3, #1
 800792e:	2200      	movs	r2, #0
 8007930:	4b88      	ldr	r3, [pc, #544]	; (8007b54 <_dtoa_r+0x624>)
 8007932:	f7f8 fe61 	bl	80005f8 <__aeabi_dmul>
 8007936:	9e02      	ldr	r6, [sp, #8]
 8007938:	4682      	mov	sl, r0
 800793a:	468b      	mov	fp, r1
 800793c:	3501      	adds	r5, #1
 800793e:	4628      	mov	r0, r5
 8007940:	f7f8 fdf0 	bl	8000524 <__aeabi_i2d>
 8007944:	4652      	mov	r2, sl
 8007946:	465b      	mov	r3, fp
 8007948:	f7f8 fe56 	bl	80005f8 <__aeabi_dmul>
 800794c:	4b82      	ldr	r3, [pc, #520]	; (8007b58 <_dtoa_r+0x628>)
 800794e:	2200      	movs	r2, #0
 8007950:	f7f8 fc9c 	bl	800028c <__adddf3>
 8007954:	46d0      	mov	r8, sl
 8007956:	46d9      	mov	r9, fp
 8007958:	4682      	mov	sl, r0
 800795a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800795e:	2e00      	cmp	r6, #0
 8007960:	d158      	bne.n	8007a14 <_dtoa_r+0x4e4>
 8007962:	4b7e      	ldr	r3, [pc, #504]	; (8007b5c <_dtoa_r+0x62c>)
 8007964:	2200      	movs	r2, #0
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	f7f8 fc8d 	bl	8000288 <__aeabi_dsub>
 800796e:	4652      	mov	r2, sl
 8007970:	465b      	mov	r3, fp
 8007972:	4680      	mov	r8, r0
 8007974:	4689      	mov	r9, r1
 8007976:	f7f9 f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800797a:	2800      	cmp	r0, #0
 800797c:	f040 8295 	bne.w	8007eaa <_dtoa_r+0x97a>
 8007980:	4652      	mov	r2, sl
 8007982:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007986:	4640      	mov	r0, r8
 8007988:	4649      	mov	r1, r9
 800798a:	f7f9 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	f040 8289 	bne.w	8007ea6 <_dtoa_r+0x976>
 8007994:	ec5b ab19 	vmov	sl, fp, d9
 8007998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800799a:	2b00      	cmp	r3, #0
 800799c:	f2c0 8148 	blt.w	8007c30 <_dtoa_r+0x700>
 80079a0:	9a00      	ldr	r2, [sp, #0]
 80079a2:	2a0e      	cmp	r2, #14
 80079a4:	f300 8144 	bgt.w	8007c30 <_dtoa_r+0x700>
 80079a8:	4b67      	ldr	r3, [pc, #412]	; (8007b48 <_dtoa_r+0x618>)
 80079aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f280 80d5 	bge.w	8007b64 <_dtoa_r+0x634>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f300 80d1 	bgt.w	8007b64 <_dtoa_r+0x634>
 80079c2:	f040 826f 	bne.w	8007ea4 <_dtoa_r+0x974>
 80079c6:	4b65      	ldr	r3, [pc, #404]	; (8007b5c <_dtoa_r+0x62c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	f7f8 fe13 	bl	80005f8 <__aeabi_dmul>
 80079d2:	4652      	mov	r2, sl
 80079d4:	465b      	mov	r3, fp
 80079d6:	f7f9 f895 	bl	8000b04 <__aeabi_dcmpge>
 80079da:	9e03      	ldr	r6, [sp, #12]
 80079dc:	4637      	mov	r7, r6
 80079de:	2800      	cmp	r0, #0
 80079e0:	f040 8245 	bne.w	8007e6e <_dtoa_r+0x93e>
 80079e4:	9d01      	ldr	r5, [sp, #4]
 80079e6:	2331      	movs	r3, #49	; 0x31
 80079e8:	f805 3b01 	strb.w	r3, [r5], #1
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	e240      	b.n	8007e76 <_dtoa_r+0x946>
 80079f4:	07f2      	lsls	r2, r6, #31
 80079f6:	d505      	bpl.n	8007a04 <_dtoa_r+0x4d4>
 80079f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079fc:	f7f8 fdfc 	bl	80005f8 <__aeabi_dmul>
 8007a00:	3501      	adds	r5, #1
 8007a02:	2301      	movs	r3, #1
 8007a04:	1076      	asrs	r6, r6, #1
 8007a06:	3708      	adds	r7, #8
 8007a08:	e777      	b.n	80078fa <_dtoa_r+0x3ca>
 8007a0a:	2502      	movs	r5, #2
 8007a0c:	e779      	b.n	8007902 <_dtoa_r+0x3d2>
 8007a0e:	9f00      	ldr	r7, [sp, #0]
 8007a10:	9e03      	ldr	r6, [sp, #12]
 8007a12:	e794      	b.n	800793e <_dtoa_r+0x40e>
 8007a14:	9901      	ldr	r1, [sp, #4]
 8007a16:	4b4c      	ldr	r3, [pc, #304]	; (8007b48 <_dtoa_r+0x618>)
 8007a18:	4431      	add	r1, r6
 8007a1a:	910d      	str	r1, [sp, #52]	; 0x34
 8007a1c:	9908      	ldr	r1, [sp, #32]
 8007a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a26:	2900      	cmp	r1, #0
 8007a28:	d043      	beq.n	8007ab2 <_dtoa_r+0x582>
 8007a2a:	494d      	ldr	r1, [pc, #308]	; (8007b60 <_dtoa_r+0x630>)
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7f8 ff0d 	bl	800084c <__aeabi_ddiv>
 8007a32:	4652      	mov	r2, sl
 8007a34:	465b      	mov	r3, fp
 8007a36:	f7f8 fc27 	bl	8000288 <__aeabi_dsub>
 8007a3a:	9d01      	ldr	r5, [sp, #4]
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	468b      	mov	fp, r1
 8007a40:	4649      	mov	r1, r9
 8007a42:	4640      	mov	r0, r8
 8007a44:	f7f9 f888 	bl	8000b58 <__aeabi_d2iz>
 8007a48:	4606      	mov	r6, r0
 8007a4a:	f7f8 fd6b 	bl	8000524 <__aeabi_i2d>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4640      	mov	r0, r8
 8007a54:	4649      	mov	r1, r9
 8007a56:	f7f8 fc17 	bl	8000288 <__aeabi_dsub>
 8007a5a:	3630      	adds	r6, #48	; 0x30
 8007a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	465b      	mov	r3, fp
 8007a64:	4680      	mov	r8, r0
 8007a66:	4689      	mov	r9, r1
 8007a68:	f7f9 f838 	bl	8000adc <__aeabi_dcmplt>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d163      	bne.n	8007b38 <_dtoa_r+0x608>
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	4936      	ldr	r1, [pc, #216]	; (8007b50 <_dtoa_r+0x620>)
 8007a76:	2000      	movs	r0, #0
 8007a78:	f7f8 fc06 	bl	8000288 <__aeabi_dsub>
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	465b      	mov	r3, fp
 8007a80:	f7f9 f82c 	bl	8000adc <__aeabi_dcmplt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f040 80b5 	bne.w	8007bf4 <_dtoa_r+0x6c4>
 8007a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	d081      	beq.n	8007994 <_dtoa_r+0x464>
 8007a90:	4b30      	ldr	r3, [pc, #192]	; (8007b54 <_dtoa_r+0x624>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	4650      	mov	r0, sl
 8007a96:	4659      	mov	r1, fp
 8007a98:	f7f8 fdae 	bl	80005f8 <__aeabi_dmul>
 8007a9c:	4b2d      	ldr	r3, [pc, #180]	; (8007b54 <_dtoa_r+0x624>)
 8007a9e:	4682      	mov	sl, r0
 8007aa0:	468b      	mov	fp, r1
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f7f8 fda6 	bl	80005f8 <__aeabi_dmul>
 8007aac:	4680      	mov	r8, r0
 8007aae:	4689      	mov	r9, r1
 8007ab0:	e7c6      	b.n	8007a40 <_dtoa_r+0x510>
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	f7f8 fd9f 	bl	80005f8 <__aeabi_dmul>
 8007aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007abc:	9d01      	ldr	r5, [sp, #4]
 8007abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac0:	4682      	mov	sl, r0
 8007ac2:	468b      	mov	fp, r1
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7f9 f846 	bl	8000b58 <__aeabi_d2iz>
 8007acc:	4606      	mov	r6, r0
 8007ace:	f7f8 fd29 	bl	8000524 <__aeabi_i2d>
 8007ad2:	3630      	adds	r6, #48	; 0x30
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f8 fbd4 	bl	8000288 <__aeabi_dsub>
 8007ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ae6:	429d      	cmp	r5, r3
 8007ae8:	4680      	mov	r8, r0
 8007aea:	4689      	mov	r9, r1
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	d124      	bne.n	8007b3c <_dtoa_r+0x60c>
 8007af2:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <_dtoa_r+0x630>)
 8007af4:	4650      	mov	r0, sl
 8007af6:	4659      	mov	r1, fp
 8007af8:	f7f8 fbc8 	bl	800028c <__adddf3>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4640      	mov	r0, r8
 8007b02:	4649      	mov	r1, r9
 8007b04:	f7f9 f808 	bl	8000b18 <__aeabi_dcmpgt>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d173      	bne.n	8007bf4 <_dtoa_r+0x6c4>
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	465b      	mov	r3, fp
 8007b10:	4913      	ldr	r1, [pc, #76]	; (8007b60 <_dtoa_r+0x630>)
 8007b12:	2000      	movs	r0, #0
 8007b14:	f7f8 fbb8 	bl	8000288 <__aeabi_dsub>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f8 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f43f af35 	beq.w	8007994 <_dtoa_r+0x464>
 8007b2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b2c:	1e6b      	subs	r3, r5, #1
 8007b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b34:	2b30      	cmp	r3, #48	; 0x30
 8007b36:	d0f8      	beq.n	8007b2a <_dtoa_r+0x5fa>
 8007b38:	9700      	str	r7, [sp, #0]
 8007b3a:	e049      	b.n	8007bd0 <_dtoa_r+0x6a0>
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <_dtoa_r+0x624>)
 8007b3e:	f7f8 fd5b 	bl	80005f8 <__aeabi_dmul>
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	e7bd      	b.n	8007ac4 <_dtoa_r+0x594>
 8007b48:	080097c8 	.word	0x080097c8
 8007b4c:	080097a0 	.word	0x080097a0
 8007b50:	3ff00000 	.word	0x3ff00000
 8007b54:	40240000 	.word	0x40240000
 8007b58:	401c0000 	.word	0x401c0000
 8007b5c:	40140000 	.word	0x40140000
 8007b60:	3fe00000 	.word	0x3fe00000
 8007b64:	9d01      	ldr	r5, [sp, #4]
 8007b66:	4656      	mov	r6, sl
 8007b68:	465f      	mov	r7, fp
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	464b      	mov	r3, r9
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 fe6b 	bl	800084c <__aeabi_ddiv>
 8007b76:	f7f8 ffef 	bl	8000b58 <__aeabi_d2iz>
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	f7f8 fcd2 	bl	8000524 <__aeabi_i2d>
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	f7f8 fd38 	bl	80005f8 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	4639      	mov	r1, r7
 8007b90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b94:	f7f8 fb78 	bl	8000288 <__aeabi_dsub>
 8007b98:	f805 6b01 	strb.w	r6, [r5], #1
 8007b9c:	9e01      	ldr	r6, [sp, #4]
 8007b9e:	9f03      	ldr	r7, [sp, #12]
 8007ba0:	1bae      	subs	r6, r5, r6
 8007ba2:	42b7      	cmp	r7, r6
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	d135      	bne.n	8007c16 <_dtoa_r+0x6e6>
 8007baa:	f7f8 fb6f 	bl	800028c <__adddf3>
 8007bae:	4642      	mov	r2, r8
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	f7f8 ffaf 	bl	8000b18 <__aeabi_dcmpgt>
 8007bba:	b9d0      	cbnz	r0, 8007bf2 <_dtoa_r+0x6c2>
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f8 ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bc8:	b110      	cbz	r0, 8007bd0 <_dtoa_r+0x6a0>
 8007bca:	f01a 0f01 	tst.w	sl, #1
 8007bce:	d110      	bne.n	8007bf2 <_dtoa_r+0x6c2>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	ee18 1a10 	vmov	r1, s16
 8007bd6:	f000 fd13 	bl	8008600 <_Bfree>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9800      	ldr	r0, [sp, #0]
 8007bde:	702b      	strb	r3, [r5, #0]
 8007be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be2:	3001      	adds	r0, #1
 8007be4:	6018      	str	r0, [r3, #0]
 8007be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f43f acf1 	beq.w	80075d0 <_dtoa_r+0xa0>
 8007bee:	601d      	str	r5, [r3, #0]
 8007bf0:	e4ee      	b.n	80075d0 <_dtoa_r+0xa0>
 8007bf2:	9f00      	ldr	r7, [sp, #0]
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bfc:	2a39      	cmp	r2, #57	; 0x39
 8007bfe:	d106      	bne.n	8007c0e <_dtoa_r+0x6de>
 8007c00:	9a01      	ldr	r2, [sp, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d1f7      	bne.n	8007bf6 <_dtoa_r+0x6c6>
 8007c06:	9901      	ldr	r1, [sp, #4]
 8007c08:	2230      	movs	r2, #48	; 0x30
 8007c0a:	3701      	adds	r7, #1
 8007c0c:	700a      	strb	r2, [r1, #0]
 8007c0e:	781a      	ldrb	r2, [r3, #0]
 8007c10:	3201      	adds	r2, #1
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e790      	b.n	8007b38 <_dtoa_r+0x608>
 8007c16:	4ba6      	ldr	r3, [pc, #664]	; (8007eb0 <_dtoa_r+0x980>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f7f8 fced 	bl	80005f8 <__aeabi_dmul>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2300      	movs	r3, #0
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	f7f8 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d09d      	beq.n	8007b6a <_dtoa_r+0x63a>
 8007c2e:	e7cf      	b.n	8007bd0 <_dtoa_r+0x6a0>
 8007c30:	9a08      	ldr	r2, [sp, #32]
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	f000 80d7 	beq.w	8007de6 <_dtoa_r+0x8b6>
 8007c38:	9a06      	ldr	r2, [sp, #24]
 8007c3a:	2a01      	cmp	r2, #1
 8007c3c:	f300 80ba 	bgt.w	8007db4 <_dtoa_r+0x884>
 8007c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	f000 80b2 	beq.w	8007dac <_dtoa_r+0x87c>
 8007c48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c4c:	9e07      	ldr	r6, [sp, #28]
 8007c4e:	9d04      	ldr	r5, [sp, #16]
 8007c50:	9a04      	ldr	r2, [sp, #16]
 8007c52:	441a      	add	r2, r3
 8007c54:	9204      	str	r2, [sp, #16]
 8007c56:	9a05      	ldr	r2, [sp, #20]
 8007c58:	2101      	movs	r1, #1
 8007c5a:	441a      	add	r2, r3
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	9205      	str	r2, [sp, #20]
 8007c60:	f000 fd86 	bl	8008770 <__i2b>
 8007c64:	4607      	mov	r7, r0
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	dd0c      	ble.n	8007c84 <_dtoa_r+0x754>
 8007c6a:	9b05      	ldr	r3, [sp, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dd09      	ble.n	8007c84 <_dtoa_r+0x754>
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	9a04      	ldr	r2, [sp, #16]
 8007c74:	bfa8      	it	ge
 8007c76:	462b      	movge	r3, r5
 8007c78:	1ad2      	subs	r2, r2, r3
 8007c7a:	9204      	str	r2, [sp, #16]
 8007c7c:	9a05      	ldr	r2, [sp, #20]
 8007c7e:	1aed      	subs	r5, r5, r3
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	b31b      	cbz	r3, 8007cd0 <_dtoa_r+0x7a0>
 8007c88:	9b08      	ldr	r3, [sp, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80af 	beq.w	8007dee <_dtoa_r+0x8be>
 8007c90:	2e00      	cmp	r6, #0
 8007c92:	dd13      	ble.n	8007cbc <_dtoa_r+0x78c>
 8007c94:	4639      	mov	r1, r7
 8007c96:	4632      	mov	r2, r6
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fe29 	bl	80088f0 <__pow5mult>
 8007c9e:	ee18 2a10 	vmov	r2, s16
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f000 fd78 	bl	800879c <__multiply>
 8007cac:	ee18 1a10 	vmov	r1, s16
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 fca4 	bl	8008600 <_Bfree>
 8007cb8:	ee08 8a10 	vmov	s16, r8
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	1b9a      	subs	r2, r3, r6
 8007cc0:	d006      	beq.n	8007cd0 <_dtoa_r+0x7a0>
 8007cc2:	ee18 1a10 	vmov	r1, s16
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 fe12 	bl	80088f0 <__pow5mult>
 8007ccc:	ee08 0a10 	vmov	s16, r0
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 fd4c 	bl	8008770 <__i2b>
 8007cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	4606      	mov	r6, r0
 8007cde:	f340 8088 	ble.w	8007df2 <_dtoa_r+0x8c2>
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 fe02 	bl	80088f0 <__pow5mult>
 8007cec:	9b06      	ldr	r3, [sp, #24]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	f340 8081 	ble.w	8007df8 <_dtoa_r+0x8c8>
 8007cf6:	f04f 0800 	mov.w	r8, #0
 8007cfa:	6933      	ldr	r3, [r6, #16]
 8007cfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d00:	6918      	ldr	r0, [r3, #16]
 8007d02:	f000 fce5 	bl	80086d0 <__hi0bits>
 8007d06:	f1c0 0020 	rsb	r0, r0, #32
 8007d0a:	9b05      	ldr	r3, [sp, #20]
 8007d0c:	4418      	add	r0, r3
 8007d0e:	f010 001f 	ands.w	r0, r0, #31
 8007d12:	f000 8092 	beq.w	8007e3a <_dtoa_r+0x90a>
 8007d16:	f1c0 0320 	rsb	r3, r0, #32
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	f340 808a 	ble.w	8007e34 <_dtoa_r+0x904>
 8007d20:	f1c0 001c 	rsb	r0, r0, #28
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	4403      	add	r3, r0
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	9b05      	ldr	r3, [sp, #20]
 8007d2c:	4403      	add	r3, r0
 8007d2e:	4405      	add	r5, r0
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	9b04      	ldr	r3, [sp, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dd07      	ble.n	8007d48 <_dtoa_r+0x818>
 8007d38:	ee18 1a10 	vmov	r1, s16
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fe30 	bl	80089a4 <__lshift>
 8007d44:	ee08 0a10 	vmov	s16, r0
 8007d48:	9b05      	ldr	r3, [sp, #20]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dd05      	ble.n	8007d5a <_dtoa_r+0x82a>
 8007d4e:	4631      	mov	r1, r6
 8007d50:	461a      	mov	r2, r3
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 fe26 	bl	80089a4 <__lshift>
 8007d58:	4606      	mov	r6, r0
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d06e      	beq.n	8007e3e <_dtoa_r+0x90e>
 8007d60:	ee18 0a10 	vmov	r0, s16
 8007d64:	4631      	mov	r1, r6
 8007d66:	f000 fe8d 	bl	8008a84 <__mcmp>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	da67      	bge.n	8007e3e <_dtoa_r+0x90e>
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	ee18 1a10 	vmov	r1, s16
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	220a      	movs	r2, #10
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 fc61 	bl	8008644 <__multadd>
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	ee08 0a10 	vmov	s16, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 81b1 	beq.w	80080f0 <_dtoa_r+0xbc0>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4639      	mov	r1, r7
 8007d92:	220a      	movs	r2, #10
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fc55 	bl	8008644 <__multadd>
 8007d9a:	9b02      	ldr	r3, [sp, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	4607      	mov	r7, r0
 8007da0:	f300 808e 	bgt.w	8007ec0 <_dtoa_r+0x990>
 8007da4:	9b06      	ldr	r3, [sp, #24]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	dc51      	bgt.n	8007e4e <_dtoa_r+0x91e>
 8007daa:	e089      	b.n	8007ec0 <_dtoa_r+0x990>
 8007dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007db2:	e74b      	b.n	8007c4c <_dtoa_r+0x71c>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	1e5e      	subs	r6, r3, #1
 8007db8:	9b07      	ldr	r3, [sp, #28]
 8007dba:	42b3      	cmp	r3, r6
 8007dbc:	bfbf      	itttt	lt
 8007dbe:	9b07      	ldrlt	r3, [sp, #28]
 8007dc0:	9607      	strlt	r6, [sp, #28]
 8007dc2:	1af2      	sublt	r2, r6, r3
 8007dc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007dc6:	bfb6      	itet	lt
 8007dc8:	189b      	addlt	r3, r3, r2
 8007dca:	1b9e      	subge	r6, r3, r6
 8007dcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	bfb8      	it	lt
 8007dd2:	2600      	movlt	r6, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfb7      	itett	lt
 8007dd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ddc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007de0:	1a9d      	sublt	r5, r3, r2
 8007de2:	2300      	movlt	r3, #0
 8007de4:	e734      	b.n	8007c50 <_dtoa_r+0x720>
 8007de6:	9e07      	ldr	r6, [sp, #28]
 8007de8:	9d04      	ldr	r5, [sp, #16]
 8007dea:	9f08      	ldr	r7, [sp, #32]
 8007dec:	e73b      	b.n	8007c66 <_dtoa_r+0x736>
 8007dee:	9a07      	ldr	r2, [sp, #28]
 8007df0:	e767      	b.n	8007cc2 <_dtoa_r+0x792>
 8007df2:	9b06      	ldr	r3, [sp, #24]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	dc18      	bgt.n	8007e2a <_dtoa_r+0x8fa>
 8007df8:	f1ba 0f00 	cmp.w	sl, #0
 8007dfc:	d115      	bne.n	8007e2a <_dtoa_r+0x8fa>
 8007dfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e02:	b993      	cbnz	r3, 8007e2a <_dtoa_r+0x8fa>
 8007e04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e08:	0d1b      	lsrs	r3, r3, #20
 8007e0a:	051b      	lsls	r3, r3, #20
 8007e0c:	b183      	cbz	r3, 8007e30 <_dtoa_r+0x900>
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	3301      	adds	r3, #1
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	9b05      	ldr	r3, [sp, #20]
 8007e16:	3301      	adds	r3, #1
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	f04f 0801 	mov.w	r8, #1
 8007e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f af6a 	bne.w	8007cfa <_dtoa_r+0x7ca>
 8007e26:	2001      	movs	r0, #1
 8007e28:	e76f      	b.n	8007d0a <_dtoa_r+0x7da>
 8007e2a:	f04f 0800 	mov.w	r8, #0
 8007e2e:	e7f6      	b.n	8007e1e <_dtoa_r+0x8ee>
 8007e30:	4698      	mov	r8, r3
 8007e32:	e7f4      	b.n	8007e1e <_dtoa_r+0x8ee>
 8007e34:	f43f af7d 	beq.w	8007d32 <_dtoa_r+0x802>
 8007e38:	4618      	mov	r0, r3
 8007e3a:	301c      	adds	r0, #28
 8007e3c:	e772      	b.n	8007d24 <_dtoa_r+0x7f4>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc37      	bgt.n	8007eb4 <_dtoa_r+0x984>
 8007e44:	9b06      	ldr	r3, [sp, #24]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	dd34      	ble.n	8007eb4 <_dtoa_r+0x984>
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	9302      	str	r3, [sp, #8]
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	b96b      	cbnz	r3, 8007e6e <_dtoa_r+0x93e>
 8007e52:	4631      	mov	r1, r6
 8007e54:	2205      	movs	r2, #5
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 fbf4 	bl	8008644 <__multadd>
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4606      	mov	r6, r0
 8007e60:	ee18 0a10 	vmov	r0, s16
 8007e64:	f000 fe0e 	bl	8008a84 <__mcmp>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	f73f adbb 	bgt.w	80079e4 <_dtoa_r+0x4b4>
 8007e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e70:	9d01      	ldr	r5, [sp, #4]
 8007e72:	43db      	mvns	r3, r3
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 fbbf 	bl	8008600 <_Bfree>
 8007e82:	2f00      	cmp	r7, #0
 8007e84:	f43f aea4 	beq.w	8007bd0 <_dtoa_r+0x6a0>
 8007e88:	f1b8 0f00 	cmp.w	r8, #0
 8007e8c:	d005      	beq.n	8007e9a <_dtoa_r+0x96a>
 8007e8e:	45b8      	cmp	r8, r7
 8007e90:	d003      	beq.n	8007e9a <_dtoa_r+0x96a>
 8007e92:	4641      	mov	r1, r8
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fbb3 	bl	8008600 <_Bfree>
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 fbaf 	bl	8008600 <_Bfree>
 8007ea2:	e695      	b.n	8007bd0 <_dtoa_r+0x6a0>
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	4637      	mov	r7, r6
 8007ea8:	e7e1      	b.n	8007e6e <_dtoa_r+0x93e>
 8007eaa:	9700      	str	r7, [sp, #0]
 8007eac:	4637      	mov	r7, r6
 8007eae:	e599      	b.n	80079e4 <_dtoa_r+0x4b4>
 8007eb0:	40240000 	.word	0x40240000
 8007eb4:	9b08      	ldr	r3, [sp, #32]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80ca 	beq.w	8008050 <_dtoa_r+0xb20>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	9302      	str	r3, [sp, #8]
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	dd05      	ble.n	8007ed0 <_dtoa_r+0x9a0>
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fd6b 	bl	80089a4 <__lshift>
 8007ece:	4607      	mov	r7, r0
 8007ed0:	f1b8 0f00 	cmp.w	r8, #0
 8007ed4:	d05b      	beq.n	8007f8e <_dtoa_r+0xa5e>
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fb51 	bl	8008580 <_Balloc>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	b928      	cbnz	r0, 8007eee <_dtoa_r+0x9be>
 8007ee2:	4b87      	ldr	r3, [pc, #540]	; (8008100 <_dtoa_r+0xbd0>)
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007eea:	f7ff bb3b 	b.w	8007564 <_dtoa_r+0x34>
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	f107 010c 	add.w	r1, r7, #12
 8007ef8:	300c      	adds	r0, #12
 8007efa:	f000 fb33 	bl	8008564 <memcpy>
 8007efe:	2201      	movs	r2, #1
 8007f00:	4629      	mov	r1, r5
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fd4e 	bl	80089a4 <__lshift>
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	f103 0901 	add.w	r9, r3, #1
 8007f0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	9305      	str	r3, [sp, #20]
 8007f16:	f00a 0301 	and.w	r3, sl, #1
 8007f1a:	46b8      	mov	r8, r7
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	4607      	mov	r7, r0
 8007f20:	4631      	mov	r1, r6
 8007f22:	ee18 0a10 	vmov	r0, s16
 8007f26:	f7ff fa75 	bl	8007414 <quorem>
 8007f2a:	4641      	mov	r1, r8
 8007f2c:	9002      	str	r0, [sp, #8]
 8007f2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f32:	ee18 0a10 	vmov	r0, s16
 8007f36:	f000 fda5 	bl	8008a84 <__mcmp>
 8007f3a:	463a      	mov	r2, r7
 8007f3c:	9003      	str	r0, [sp, #12]
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fdbb 	bl	8008abc <__mdiff>
 8007f46:	68c2      	ldr	r2, [r0, #12]
 8007f48:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	bb02      	cbnz	r2, 8007f92 <_dtoa_r+0xa62>
 8007f50:	4601      	mov	r1, r0
 8007f52:	ee18 0a10 	vmov	r0, s16
 8007f56:	f000 fd95 	bl	8008a84 <__mcmp>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4620      	mov	r0, r4
 8007f60:	9207      	str	r2, [sp, #28]
 8007f62:	f000 fb4d 	bl	8008600 <_Bfree>
 8007f66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f6a:	ea43 0102 	orr.w	r1, r3, r2
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	430b      	orrs	r3, r1
 8007f72:	464d      	mov	r5, r9
 8007f74:	d10f      	bne.n	8007f96 <_dtoa_r+0xa66>
 8007f76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f7a:	d02a      	beq.n	8007fd2 <_dtoa_r+0xaa2>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd02      	ble.n	8007f88 <_dtoa_r+0xa58>
 8007f82:	9b02      	ldr	r3, [sp, #8]
 8007f84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f88:	f88b a000 	strb.w	sl, [fp]
 8007f8c:	e775      	b.n	8007e7a <_dtoa_r+0x94a>
 8007f8e:	4638      	mov	r0, r7
 8007f90:	e7ba      	b.n	8007f08 <_dtoa_r+0x9d8>
 8007f92:	2201      	movs	r2, #1
 8007f94:	e7e2      	b.n	8007f5c <_dtoa_r+0xa2c>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db04      	blt.n	8007fa6 <_dtoa_r+0xa76>
 8007f9c:	9906      	ldr	r1, [sp, #24]
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	9904      	ldr	r1, [sp, #16]
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	d122      	bne.n	8007fec <_dtoa_r+0xabc>
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	ddee      	ble.n	8007f88 <_dtoa_r+0xa58>
 8007faa:	ee18 1a10 	vmov	r1, s16
 8007fae:	2201      	movs	r2, #1
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fcf7 	bl	80089a4 <__lshift>
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	ee08 0a10 	vmov	s16, r0
 8007fbc:	f000 fd62 	bl	8008a84 <__mcmp>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	dc03      	bgt.n	8007fcc <_dtoa_r+0xa9c>
 8007fc4:	d1e0      	bne.n	8007f88 <_dtoa_r+0xa58>
 8007fc6:	f01a 0f01 	tst.w	sl, #1
 8007fca:	d0dd      	beq.n	8007f88 <_dtoa_r+0xa58>
 8007fcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fd0:	d1d7      	bne.n	8007f82 <_dtoa_r+0xa52>
 8007fd2:	2339      	movs	r3, #57	; 0x39
 8007fd4:	f88b 3000 	strb.w	r3, [fp]
 8007fd8:	462b      	mov	r3, r5
 8007fda:	461d      	mov	r5, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fe2:	2a39      	cmp	r2, #57	; 0x39
 8007fe4:	d071      	beq.n	80080ca <_dtoa_r+0xb9a>
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	e746      	b.n	8007e7a <_dtoa_r+0x94a>
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	dd07      	ble.n	8008000 <_dtoa_r+0xad0>
 8007ff0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ff4:	d0ed      	beq.n	8007fd2 <_dtoa_r+0xaa2>
 8007ff6:	f10a 0301 	add.w	r3, sl, #1
 8007ffa:	f88b 3000 	strb.w	r3, [fp]
 8007ffe:	e73c      	b.n	8007e7a <_dtoa_r+0x94a>
 8008000:	9b05      	ldr	r3, [sp, #20]
 8008002:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008006:	4599      	cmp	r9, r3
 8008008:	d047      	beq.n	800809a <_dtoa_r+0xb6a>
 800800a:	ee18 1a10 	vmov	r1, s16
 800800e:	2300      	movs	r3, #0
 8008010:	220a      	movs	r2, #10
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fb16 	bl	8008644 <__multadd>
 8008018:	45b8      	cmp	r8, r7
 800801a:	ee08 0a10 	vmov	s16, r0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	f04f 020a 	mov.w	r2, #10
 8008026:	4641      	mov	r1, r8
 8008028:	4620      	mov	r0, r4
 800802a:	d106      	bne.n	800803a <_dtoa_r+0xb0a>
 800802c:	f000 fb0a 	bl	8008644 <__multadd>
 8008030:	4680      	mov	r8, r0
 8008032:	4607      	mov	r7, r0
 8008034:	f109 0901 	add.w	r9, r9, #1
 8008038:	e772      	b.n	8007f20 <_dtoa_r+0x9f0>
 800803a:	f000 fb03 	bl	8008644 <__multadd>
 800803e:	4639      	mov	r1, r7
 8008040:	4680      	mov	r8, r0
 8008042:	2300      	movs	r3, #0
 8008044:	220a      	movs	r2, #10
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fafc 	bl	8008644 <__multadd>
 800804c:	4607      	mov	r7, r0
 800804e:	e7f1      	b.n	8008034 <_dtoa_r+0xb04>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	9d01      	ldr	r5, [sp, #4]
 8008056:	ee18 0a10 	vmov	r0, s16
 800805a:	4631      	mov	r1, r6
 800805c:	f7ff f9da 	bl	8007414 <quorem>
 8008060:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008064:	9b01      	ldr	r3, [sp, #4]
 8008066:	f805 ab01 	strb.w	sl, [r5], #1
 800806a:	1aea      	subs	r2, r5, r3
 800806c:	9b02      	ldr	r3, [sp, #8]
 800806e:	4293      	cmp	r3, r2
 8008070:	dd09      	ble.n	8008086 <_dtoa_r+0xb56>
 8008072:	ee18 1a10 	vmov	r1, s16
 8008076:	2300      	movs	r3, #0
 8008078:	220a      	movs	r2, #10
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fae2 	bl	8008644 <__multadd>
 8008080:	ee08 0a10 	vmov	s16, r0
 8008084:	e7e7      	b.n	8008056 <_dtoa_r+0xb26>
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	bfc8      	it	gt
 800808c:	461d      	movgt	r5, r3
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	bfd8      	it	le
 8008092:	2501      	movle	r5, #1
 8008094:	441d      	add	r5, r3
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	ee18 1a10 	vmov	r1, s16
 800809e:	2201      	movs	r2, #1
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fc7f 	bl	80089a4 <__lshift>
 80080a6:	4631      	mov	r1, r6
 80080a8:	ee08 0a10 	vmov	s16, r0
 80080ac:	f000 fcea 	bl	8008a84 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	dc91      	bgt.n	8007fd8 <_dtoa_r+0xaa8>
 80080b4:	d102      	bne.n	80080bc <_dtoa_r+0xb8c>
 80080b6:	f01a 0f01 	tst.w	sl, #1
 80080ba:	d18d      	bne.n	8007fd8 <_dtoa_r+0xaa8>
 80080bc:	462b      	mov	r3, r5
 80080be:	461d      	mov	r5, r3
 80080c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080c4:	2a30      	cmp	r2, #48	; 0x30
 80080c6:	d0fa      	beq.n	80080be <_dtoa_r+0xb8e>
 80080c8:	e6d7      	b.n	8007e7a <_dtoa_r+0x94a>
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d184      	bne.n	8007fda <_dtoa_r+0xaaa>
 80080d0:	9b00      	ldr	r3, [sp, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2331      	movs	r3, #49	; 0x31
 80080d8:	7013      	strb	r3, [r2, #0]
 80080da:	e6ce      	b.n	8007e7a <_dtoa_r+0x94a>
 80080dc:	4b09      	ldr	r3, [pc, #36]	; (8008104 <_dtoa_r+0xbd4>)
 80080de:	f7ff ba95 	b.w	800760c <_dtoa_r+0xdc>
 80080e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f47f aa6e 	bne.w	80075c6 <_dtoa_r+0x96>
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <_dtoa_r+0xbd8>)
 80080ec:	f7ff ba8e 	b.w	800760c <_dtoa_r+0xdc>
 80080f0:	9b02      	ldr	r3, [sp, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	dcae      	bgt.n	8008054 <_dtoa_r+0xb24>
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f73f aea8 	bgt.w	8007e4e <_dtoa_r+0x91e>
 80080fe:	e7a9      	b.n	8008054 <_dtoa_r+0xb24>
 8008100:	080096cf 	.word	0x080096cf
 8008104:	0800962c 	.word	0x0800962c
 8008108:	08009650 	.word	0x08009650

0800810c <__sflush_r>:
 800810c:	898a      	ldrh	r2, [r1, #12]
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	4605      	mov	r5, r0
 8008114:	0710      	lsls	r0, r2, #28
 8008116:	460c      	mov	r4, r1
 8008118:	d458      	bmi.n	80081cc <__sflush_r+0xc0>
 800811a:	684b      	ldr	r3, [r1, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dc05      	bgt.n	800812c <__sflush_r+0x20>
 8008120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	dc02      	bgt.n	800812c <__sflush_r+0x20>
 8008126:	2000      	movs	r0, #0
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812e:	2e00      	cmp	r6, #0
 8008130:	d0f9      	beq.n	8008126 <__sflush_r+0x1a>
 8008132:	2300      	movs	r3, #0
 8008134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008138:	682f      	ldr	r7, [r5, #0]
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	d032      	beq.n	80081a4 <__sflush_r+0x98>
 800813e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	075a      	lsls	r2, r3, #29
 8008144:	d505      	bpl.n	8008152 <__sflush_r+0x46>
 8008146:	6863      	ldr	r3, [r4, #4]
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800814c:	b10b      	cbz	r3, 8008152 <__sflush_r+0x46>
 800814e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008150:	1ac0      	subs	r0, r0, r3
 8008152:	2300      	movs	r3, #0
 8008154:	4602      	mov	r2, r0
 8008156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008158:	6a21      	ldr	r1, [r4, #32]
 800815a:	4628      	mov	r0, r5
 800815c:	47b0      	blx	r6
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	d106      	bne.n	8008172 <__sflush_r+0x66>
 8008164:	6829      	ldr	r1, [r5, #0]
 8008166:	291d      	cmp	r1, #29
 8008168:	d82c      	bhi.n	80081c4 <__sflush_r+0xb8>
 800816a:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <__sflush_r+0x108>)
 800816c:	40ca      	lsrs	r2, r1
 800816e:	07d6      	lsls	r6, r2, #31
 8008170:	d528      	bpl.n	80081c4 <__sflush_r+0xb8>
 8008172:	2200      	movs	r2, #0
 8008174:	6062      	str	r2, [r4, #4]
 8008176:	04d9      	lsls	r1, r3, #19
 8008178:	6922      	ldr	r2, [r4, #16]
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	d504      	bpl.n	8008188 <__sflush_r+0x7c>
 800817e:	1c42      	adds	r2, r0, #1
 8008180:	d101      	bne.n	8008186 <__sflush_r+0x7a>
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	b903      	cbnz	r3, 8008188 <__sflush_r+0x7c>
 8008186:	6560      	str	r0, [r4, #84]	; 0x54
 8008188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800818a:	602f      	str	r7, [r5, #0]
 800818c:	2900      	cmp	r1, #0
 800818e:	d0ca      	beq.n	8008126 <__sflush_r+0x1a>
 8008190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008194:	4299      	cmp	r1, r3
 8008196:	d002      	beq.n	800819e <__sflush_r+0x92>
 8008198:	4628      	mov	r0, r5
 800819a:	f000 fd8b 	bl	8008cb4 <_free_r>
 800819e:	2000      	movs	r0, #0
 80081a0:	6360      	str	r0, [r4, #52]	; 0x34
 80081a2:	e7c1      	b.n	8008128 <__sflush_r+0x1c>
 80081a4:	6a21      	ldr	r1, [r4, #32]
 80081a6:	2301      	movs	r3, #1
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b0      	blx	r6
 80081ac:	1c41      	adds	r1, r0, #1
 80081ae:	d1c7      	bne.n	8008140 <__sflush_r+0x34>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c4      	beq.n	8008140 <__sflush_r+0x34>
 80081b6:	2b1d      	cmp	r3, #29
 80081b8:	d001      	beq.n	80081be <__sflush_r+0xb2>
 80081ba:	2b16      	cmp	r3, #22
 80081bc:	d101      	bne.n	80081c2 <__sflush_r+0xb6>
 80081be:	602f      	str	r7, [r5, #0]
 80081c0:	e7b1      	b.n	8008126 <__sflush_r+0x1a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	e7ad      	b.n	8008128 <__sflush_r+0x1c>
 80081cc:	690f      	ldr	r7, [r1, #16]
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	d0a9      	beq.n	8008126 <__sflush_r+0x1a>
 80081d2:	0793      	lsls	r3, r2, #30
 80081d4:	680e      	ldr	r6, [r1, #0]
 80081d6:	bf08      	it	eq
 80081d8:	694b      	ldreq	r3, [r1, #20]
 80081da:	600f      	str	r7, [r1, #0]
 80081dc:	bf18      	it	ne
 80081de:	2300      	movne	r3, #0
 80081e0:	eba6 0807 	sub.w	r8, r6, r7
 80081e4:	608b      	str	r3, [r1, #8]
 80081e6:	f1b8 0f00 	cmp.w	r8, #0
 80081ea:	dd9c      	ble.n	8008126 <__sflush_r+0x1a>
 80081ec:	6a21      	ldr	r1, [r4, #32]
 80081ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081f0:	4643      	mov	r3, r8
 80081f2:	463a      	mov	r2, r7
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	2800      	cmp	r0, #0
 80081fa:	dc06      	bgt.n	800820a <__sflush_r+0xfe>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	e78e      	b.n	8008128 <__sflush_r+0x1c>
 800820a:	4407      	add	r7, r0
 800820c:	eba8 0800 	sub.w	r8, r8, r0
 8008210:	e7e9      	b.n	80081e6 <__sflush_r+0xda>
 8008212:	bf00      	nop
 8008214:	20400001 	.word	0x20400001

08008218 <_fflush_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	690b      	ldr	r3, [r1, #16]
 800821c:	4605      	mov	r5, r0
 800821e:	460c      	mov	r4, r1
 8008220:	b913      	cbnz	r3, 8008228 <_fflush_r+0x10>
 8008222:	2500      	movs	r5, #0
 8008224:	4628      	mov	r0, r5
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	b118      	cbz	r0, 8008232 <_fflush_r+0x1a>
 800822a:	6983      	ldr	r3, [r0, #24]
 800822c:	b90b      	cbnz	r3, 8008232 <_fflush_r+0x1a>
 800822e:	f000 f887 	bl	8008340 <__sinit>
 8008232:	4b14      	ldr	r3, [pc, #80]	; (8008284 <_fflush_r+0x6c>)
 8008234:	429c      	cmp	r4, r3
 8008236:	d11b      	bne.n	8008270 <_fflush_r+0x58>
 8008238:	686c      	ldr	r4, [r5, #4]
 800823a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0ef      	beq.n	8008222 <_fflush_r+0xa>
 8008242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008244:	07d0      	lsls	r0, r2, #31
 8008246:	d404      	bmi.n	8008252 <_fflush_r+0x3a>
 8008248:	0599      	lsls	r1, r3, #22
 800824a:	d402      	bmi.n	8008252 <_fflush_r+0x3a>
 800824c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824e:	f000 f91a 	bl	8008486 <__retarget_lock_acquire_recursive>
 8008252:	4628      	mov	r0, r5
 8008254:	4621      	mov	r1, r4
 8008256:	f7ff ff59 	bl	800810c <__sflush_r>
 800825a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825c:	07da      	lsls	r2, r3, #31
 800825e:	4605      	mov	r5, r0
 8008260:	d4e0      	bmi.n	8008224 <_fflush_r+0xc>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	059b      	lsls	r3, r3, #22
 8008266:	d4dd      	bmi.n	8008224 <_fflush_r+0xc>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 f90d 	bl	8008488 <__retarget_lock_release_recursive>
 800826e:	e7d9      	b.n	8008224 <_fflush_r+0xc>
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <_fflush_r+0x70>)
 8008272:	429c      	cmp	r4, r3
 8008274:	d101      	bne.n	800827a <_fflush_r+0x62>
 8008276:	68ac      	ldr	r4, [r5, #8]
 8008278:	e7df      	b.n	800823a <_fflush_r+0x22>
 800827a:	4b04      	ldr	r3, [pc, #16]	; (800828c <_fflush_r+0x74>)
 800827c:	429c      	cmp	r4, r3
 800827e:	bf08      	it	eq
 8008280:	68ec      	ldreq	r4, [r5, #12]
 8008282:	e7da      	b.n	800823a <_fflush_r+0x22>
 8008284:	08009700 	.word	0x08009700
 8008288:	08009720 	.word	0x08009720
 800828c:	080096e0 	.word	0x080096e0

08008290 <std>:
 8008290:	2300      	movs	r3, #0
 8008292:	b510      	push	{r4, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	e9c0 3300 	strd	r3, r3, [r0]
 800829a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829e:	6083      	str	r3, [r0, #8]
 80082a0:	8181      	strh	r1, [r0, #12]
 80082a2:	6643      	str	r3, [r0, #100]	; 0x64
 80082a4:	81c2      	strh	r2, [r0, #14]
 80082a6:	6183      	str	r3, [r0, #24]
 80082a8:	4619      	mov	r1, r3
 80082aa:	2208      	movs	r2, #8
 80082ac:	305c      	adds	r0, #92	; 0x5c
 80082ae:	f7fe faf1 	bl	8006894 <memset>
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <std+0x38>)
 80082b4:	6263      	str	r3, [r4, #36]	; 0x24
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <std+0x3c>)
 80082b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <std+0x40>)
 80082bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <std+0x44>)
 80082c0:	6224      	str	r4, [r4, #32]
 80082c2:	6323      	str	r3, [r4, #48]	; 0x30
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	bf00      	nop
 80082c8:	08009149 	.word	0x08009149
 80082cc:	0800916b 	.word	0x0800916b
 80082d0:	080091a3 	.word	0x080091a3
 80082d4:	080091c7 	.word	0x080091c7

080082d8 <_cleanup_r>:
 80082d8:	4901      	ldr	r1, [pc, #4]	; (80082e0 <_cleanup_r+0x8>)
 80082da:	f000 b8af 	b.w	800843c <_fwalk_reent>
 80082de:	bf00      	nop
 80082e0:	08008219 	.word	0x08008219

080082e4 <__sfmoreglue>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	2268      	movs	r2, #104	; 0x68
 80082e8:	1e4d      	subs	r5, r1, #1
 80082ea:	4355      	muls	r5, r2
 80082ec:	460e      	mov	r6, r1
 80082ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082f2:	f000 fd4b 	bl	8008d8c <_malloc_r>
 80082f6:	4604      	mov	r4, r0
 80082f8:	b140      	cbz	r0, 800830c <__sfmoreglue+0x28>
 80082fa:	2100      	movs	r1, #0
 80082fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008300:	300c      	adds	r0, #12
 8008302:	60a0      	str	r0, [r4, #8]
 8008304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008308:	f7fe fac4 	bl	8006894 <memset>
 800830c:	4620      	mov	r0, r4
 800830e:	bd70      	pop	{r4, r5, r6, pc}

08008310 <__sfp_lock_acquire>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__sfp_lock_acquire+0x8>)
 8008312:	f000 b8b8 	b.w	8008486 <__retarget_lock_acquire_recursive>
 8008316:	bf00      	nop
 8008318:	20000331 	.word	0x20000331

0800831c <__sfp_lock_release>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__sfp_lock_release+0x8>)
 800831e:	f000 b8b3 	b.w	8008488 <__retarget_lock_release_recursive>
 8008322:	bf00      	nop
 8008324:	20000331 	.word	0x20000331

08008328 <__sinit_lock_acquire>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sinit_lock_acquire+0x8>)
 800832a:	f000 b8ac 	b.w	8008486 <__retarget_lock_acquire_recursive>
 800832e:	bf00      	nop
 8008330:	20000332 	.word	0x20000332

08008334 <__sinit_lock_release>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__sinit_lock_release+0x8>)
 8008336:	f000 b8a7 	b.w	8008488 <__retarget_lock_release_recursive>
 800833a:	bf00      	nop
 800833c:	20000332 	.word	0x20000332

08008340 <__sinit>:
 8008340:	b510      	push	{r4, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	f7ff fff0 	bl	8008328 <__sinit_lock_acquire>
 8008348:	69a3      	ldr	r3, [r4, #24]
 800834a:	b11b      	cbz	r3, 8008354 <__sinit+0x14>
 800834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008350:	f7ff bff0 	b.w	8008334 <__sinit_lock_release>
 8008354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008358:	6523      	str	r3, [r4, #80]	; 0x50
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <__sinit+0x68>)
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <__sinit+0x6c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	62a2      	str	r2, [r4, #40]	; 0x28
 8008362:	42a3      	cmp	r3, r4
 8008364:	bf04      	itt	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	61a3      	streq	r3, [r4, #24]
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f820 	bl	80083b0 <__sfp>
 8008370:	6060      	str	r0, [r4, #4]
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f81c 	bl	80083b0 <__sfp>
 8008378:	60a0      	str	r0, [r4, #8]
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f818 	bl	80083b0 <__sfp>
 8008380:	2200      	movs	r2, #0
 8008382:	60e0      	str	r0, [r4, #12]
 8008384:	2104      	movs	r1, #4
 8008386:	6860      	ldr	r0, [r4, #4]
 8008388:	f7ff ff82 	bl	8008290 <std>
 800838c:	68a0      	ldr	r0, [r4, #8]
 800838e:	2201      	movs	r2, #1
 8008390:	2109      	movs	r1, #9
 8008392:	f7ff ff7d 	bl	8008290 <std>
 8008396:	68e0      	ldr	r0, [r4, #12]
 8008398:	2202      	movs	r2, #2
 800839a:	2112      	movs	r1, #18
 800839c:	f7ff ff78 	bl	8008290 <std>
 80083a0:	2301      	movs	r3, #1
 80083a2:	61a3      	str	r3, [r4, #24]
 80083a4:	e7d2      	b.n	800834c <__sinit+0xc>
 80083a6:	bf00      	nop
 80083a8:	08009618 	.word	0x08009618
 80083ac:	080082d9 	.word	0x080082d9

080083b0 <__sfp>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	4607      	mov	r7, r0
 80083b4:	f7ff ffac 	bl	8008310 <__sfp_lock_acquire>
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <__sfp+0x84>)
 80083ba:	681e      	ldr	r6, [r3, #0]
 80083bc:	69b3      	ldr	r3, [r6, #24]
 80083be:	b913      	cbnz	r3, 80083c6 <__sfp+0x16>
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff ffbd 	bl	8008340 <__sinit>
 80083c6:	3648      	adds	r6, #72	; 0x48
 80083c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	d503      	bpl.n	80083d8 <__sfp+0x28>
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	b30b      	cbz	r3, 8008418 <__sfp+0x68>
 80083d4:	6836      	ldr	r6, [r6, #0]
 80083d6:	e7f7      	b.n	80083c8 <__sfp+0x18>
 80083d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083dc:	b9d5      	cbnz	r5, 8008414 <__sfp+0x64>
 80083de:	4b16      	ldr	r3, [pc, #88]	; (8008438 <__sfp+0x88>)
 80083e0:	60e3      	str	r3, [r4, #12]
 80083e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083e6:	6665      	str	r5, [r4, #100]	; 0x64
 80083e8:	f000 f84c 	bl	8008484 <__retarget_lock_init_recursive>
 80083ec:	f7ff ff96 	bl	800831c <__sfp_lock_release>
 80083f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083f8:	6025      	str	r5, [r4, #0]
 80083fa:	61a5      	str	r5, [r4, #24]
 80083fc:	2208      	movs	r2, #8
 80083fe:	4629      	mov	r1, r5
 8008400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008404:	f7fe fa46 	bl	8006894 <memset>
 8008408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800840c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008410:	4620      	mov	r0, r4
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008414:	3468      	adds	r4, #104	; 0x68
 8008416:	e7d9      	b.n	80083cc <__sfp+0x1c>
 8008418:	2104      	movs	r1, #4
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ff62 	bl	80082e4 <__sfmoreglue>
 8008420:	4604      	mov	r4, r0
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	2800      	cmp	r0, #0
 8008426:	d1d5      	bne.n	80083d4 <__sfp+0x24>
 8008428:	f7ff ff78 	bl	800831c <__sfp_lock_release>
 800842c:	230c      	movs	r3, #12
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	e7ee      	b.n	8008410 <__sfp+0x60>
 8008432:	bf00      	nop
 8008434:	08009618 	.word	0x08009618
 8008438:	ffff0001 	.word	0xffff0001

0800843c <_fwalk_reent>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4606      	mov	r6, r0
 8008442:	4688      	mov	r8, r1
 8008444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008448:	2700      	movs	r7, #0
 800844a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800844e:	f1b9 0901 	subs.w	r9, r9, #1
 8008452:	d505      	bpl.n	8008460 <_fwalk_reent+0x24>
 8008454:	6824      	ldr	r4, [r4, #0]
 8008456:	2c00      	cmp	r4, #0
 8008458:	d1f7      	bne.n	800844a <_fwalk_reent+0xe>
 800845a:	4638      	mov	r0, r7
 800845c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008460:	89ab      	ldrh	r3, [r5, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d907      	bls.n	8008476 <_fwalk_reent+0x3a>
 8008466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800846a:	3301      	adds	r3, #1
 800846c:	d003      	beq.n	8008476 <_fwalk_reent+0x3a>
 800846e:	4629      	mov	r1, r5
 8008470:	4630      	mov	r0, r6
 8008472:	47c0      	blx	r8
 8008474:	4307      	orrs	r7, r0
 8008476:	3568      	adds	r5, #104	; 0x68
 8008478:	e7e9      	b.n	800844e <_fwalk_reent+0x12>
	...

0800847c <_localeconv_r>:
 800847c:	4800      	ldr	r0, [pc, #0]	; (8008480 <_localeconv_r+0x4>)
 800847e:	4770      	bx	lr
 8008480:	20000160 	.word	0x20000160

08008484 <__retarget_lock_init_recursive>:
 8008484:	4770      	bx	lr

08008486 <__retarget_lock_acquire_recursive>:
 8008486:	4770      	bx	lr

08008488 <__retarget_lock_release_recursive>:
 8008488:	4770      	bx	lr

0800848a <__swhatbuf_r>:
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	460e      	mov	r6, r1
 800848e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008492:	2900      	cmp	r1, #0
 8008494:	b096      	sub	sp, #88	; 0x58
 8008496:	4614      	mov	r4, r2
 8008498:	461d      	mov	r5, r3
 800849a:	da08      	bge.n	80084ae <__swhatbuf_r+0x24>
 800849c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	602a      	str	r2, [r5, #0]
 80084a4:	061a      	lsls	r2, r3, #24
 80084a6:	d410      	bmi.n	80084ca <__swhatbuf_r+0x40>
 80084a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ac:	e00e      	b.n	80084cc <__swhatbuf_r+0x42>
 80084ae:	466a      	mov	r2, sp
 80084b0:	f000 fee0 	bl	8009274 <_fstat_r>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dbf1      	blt.n	800849c <__swhatbuf_r+0x12>
 80084b8:	9a01      	ldr	r2, [sp, #4]
 80084ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084c2:	425a      	negs	r2, r3
 80084c4:	415a      	adcs	r2, r3
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	e7ee      	b.n	80084a8 <__swhatbuf_r+0x1e>
 80084ca:	2340      	movs	r3, #64	; 0x40
 80084cc:	2000      	movs	r0, #0
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	b016      	add	sp, #88	; 0x58
 80084d2:	bd70      	pop	{r4, r5, r6, pc}

080084d4 <__smakebuf_r>:
 80084d4:	898b      	ldrh	r3, [r1, #12]
 80084d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084d8:	079d      	lsls	r5, r3, #30
 80084da:	4606      	mov	r6, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	d507      	bpl.n	80084f0 <__smakebuf_r+0x1c>
 80084e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	6123      	str	r3, [r4, #16]
 80084e8:	2301      	movs	r3, #1
 80084ea:	6163      	str	r3, [r4, #20]
 80084ec:	b002      	add	sp, #8
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	ab01      	add	r3, sp, #4
 80084f2:	466a      	mov	r2, sp
 80084f4:	f7ff ffc9 	bl	800848a <__swhatbuf_r>
 80084f8:	9900      	ldr	r1, [sp, #0]
 80084fa:	4605      	mov	r5, r0
 80084fc:	4630      	mov	r0, r6
 80084fe:	f000 fc45 	bl	8008d8c <_malloc_r>
 8008502:	b948      	cbnz	r0, 8008518 <__smakebuf_r+0x44>
 8008504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008508:	059a      	lsls	r2, r3, #22
 800850a:	d4ef      	bmi.n	80084ec <__smakebuf_r+0x18>
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	f043 0302 	orr.w	r3, r3, #2
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	e7e3      	b.n	80084e0 <__smakebuf_r+0xc>
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <__smakebuf_r+0x7c>)
 800851a:	62b3      	str	r3, [r6, #40]	; 0x28
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	6163      	str	r3, [r4, #20]
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	6120      	str	r0, [r4, #16]
 800852e:	b15b      	cbz	r3, 8008548 <__smakebuf_r+0x74>
 8008530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008534:	4630      	mov	r0, r6
 8008536:	f000 feaf 	bl	8009298 <_isatty_r>
 800853a:	b128      	cbz	r0, 8008548 <__smakebuf_r+0x74>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	89a0      	ldrh	r0, [r4, #12]
 800854a:	4305      	orrs	r5, r0
 800854c:	81a5      	strh	r5, [r4, #12]
 800854e:	e7cd      	b.n	80084ec <__smakebuf_r+0x18>
 8008550:	080082d9 	.word	0x080082d9

08008554 <malloc>:
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <malloc+0xc>)
 8008556:	4601      	mov	r1, r0
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	f000 bc17 	b.w	8008d8c <_malloc_r>
 800855e:	bf00      	nop
 8008560:	2000000c 	.word	0x2000000c

08008564 <memcpy>:
 8008564:	440a      	add	r2, r1
 8008566:	4291      	cmp	r1, r2
 8008568:	f100 33ff 	add.w	r3, r0, #4294967295
 800856c:	d100      	bne.n	8008570 <memcpy+0xc>
 800856e:	4770      	bx	lr
 8008570:	b510      	push	{r4, lr}
 8008572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800857a:	4291      	cmp	r1, r2
 800857c:	d1f9      	bne.n	8008572 <memcpy+0xe>
 800857e:	bd10      	pop	{r4, pc}

08008580 <_Balloc>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008584:	4604      	mov	r4, r0
 8008586:	460d      	mov	r5, r1
 8008588:	b976      	cbnz	r6, 80085a8 <_Balloc+0x28>
 800858a:	2010      	movs	r0, #16
 800858c:	f7ff ffe2 	bl	8008554 <malloc>
 8008590:	4602      	mov	r2, r0
 8008592:	6260      	str	r0, [r4, #36]	; 0x24
 8008594:	b920      	cbnz	r0, 80085a0 <_Balloc+0x20>
 8008596:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <_Balloc+0x78>)
 8008598:	4818      	ldr	r0, [pc, #96]	; (80085fc <_Balloc+0x7c>)
 800859a:	2166      	movs	r1, #102	; 0x66
 800859c:	f000 fe2a 	bl	80091f4 <__assert_func>
 80085a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a4:	6006      	str	r6, [r0, #0]
 80085a6:	60c6      	str	r6, [r0, #12]
 80085a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085aa:	68f3      	ldr	r3, [r6, #12]
 80085ac:	b183      	cbz	r3, 80085d0 <_Balloc+0x50>
 80085ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085b6:	b9b8      	cbnz	r0, 80085e8 <_Balloc+0x68>
 80085b8:	2101      	movs	r1, #1
 80085ba:	fa01 f605 	lsl.w	r6, r1, r5
 80085be:	1d72      	adds	r2, r6, #5
 80085c0:	0092      	lsls	r2, r2, #2
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 fb60 	bl	8008c88 <_calloc_r>
 80085c8:	b160      	cbz	r0, 80085e4 <_Balloc+0x64>
 80085ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085ce:	e00e      	b.n	80085ee <_Balloc+0x6e>
 80085d0:	2221      	movs	r2, #33	; 0x21
 80085d2:	2104      	movs	r1, #4
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fb57 	bl	8008c88 <_calloc_r>
 80085da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085dc:	60f0      	str	r0, [r6, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e4      	bne.n	80085ae <_Balloc+0x2e>
 80085e4:	2000      	movs	r0, #0
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	6802      	ldr	r2, [r0, #0]
 80085ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ee:	2300      	movs	r3, #0
 80085f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085f4:	e7f7      	b.n	80085e6 <_Balloc+0x66>
 80085f6:	bf00      	nop
 80085f8:	0800965d 	.word	0x0800965d
 80085fc:	08009740 	.word	0x08009740

08008600 <_Bfree>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008604:	4605      	mov	r5, r0
 8008606:	460c      	mov	r4, r1
 8008608:	b976      	cbnz	r6, 8008628 <_Bfree+0x28>
 800860a:	2010      	movs	r0, #16
 800860c:	f7ff ffa2 	bl	8008554 <malloc>
 8008610:	4602      	mov	r2, r0
 8008612:	6268      	str	r0, [r5, #36]	; 0x24
 8008614:	b920      	cbnz	r0, 8008620 <_Bfree+0x20>
 8008616:	4b09      	ldr	r3, [pc, #36]	; (800863c <_Bfree+0x3c>)
 8008618:	4809      	ldr	r0, [pc, #36]	; (8008640 <_Bfree+0x40>)
 800861a:	218a      	movs	r1, #138	; 0x8a
 800861c:	f000 fdea 	bl	80091f4 <__assert_func>
 8008620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008624:	6006      	str	r6, [r0, #0]
 8008626:	60c6      	str	r6, [r0, #12]
 8008628:	b13c      	cbz	r4, 800863a <_Bfree+0x3a>
 800862a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800862c:	6862      	ldr	r2, [r4, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008634:	6021      	str	r1, [r4, #0]
 8008636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	0800965d 	.word	0x0800965d
 8008640:	08009740 	.word	0x08009740

08008644 <__multadd>:
 8008644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008648:	690d      	ldr	r5, [r1, #16]
 800864a:	4607      	mov	r7, r0
 800864c:	460c      	mov	r4, r1
 800864e:	461e      	mov	r6, r3
 8008650:	f101 0c14 	add.w	ip, r1, #20
 8008654:	2000      	movs	r0, #0
 8008656:	f8dc 3000 	ldr.w	r3, [ip]
 800865a:	b299      	uxth	r1, r3
 800865c:	fb02 6101 	mla	r1, r2, r1, r6
 8008660:	0c1e      	lsrs	r6, r3, #16
 8008662:	0c0b      	lsrs	r3, r1, #16
 8008664:	fb02 3306 	mla	r3, r2, r6, r3
 8008668:	b289      	uxth	r1, r1
 800866a:	3001      	adds	r0, #1
 800866c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008670:	4285      	cmp	r5, r0
 8008672:	f84c 1b04 	str.w	r1, [ip], #4
 8008676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800867a:	dcec      	bgt.n	8008656 <__multadd+0x12>
 800867c:	b30e      	cbz	r6, 80086c2 <__multadd+0x7e>
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	42ab      	cmp	r3, r5
 8008682:	dc19      	bgt.n	80086b8 <__multadd+0x74>
 8008684:	6861      	ldr	r1, [r4, #4]
 8008686:	4638      	mov	r0, r7
 8008688:	3101      	adds	r1, #1
 800868a:	f7ff ff79 	bl	8008580 <_Balloc>
 800868e:	4680      	mov	r8, r0
 8008690:	b928      	cbnz	r0, 800869e <__multadd+0x5a>
 8008692:	4602      	mov	r2, r0
 8008694:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <__multadd+0x84>)
 8008696:	480d      	ldr	r0, [pc, #52]	; (80086cc <__multadd+0x88>)
 8008698:	21b5      	movs	r1, #181	; 0xb5
 800869a:	f000 fdab 	bl	80091f4 <__assert_func>
 800869e:	6922      	ldr	r2, [r4, #16]
 80086a0:	3202      	adds	r2, #2
 80086a2:	f104 010c 	add.w	r1, r4, #12
 80086a6:	0092      	lsls	r2, r2, #2
 80086a8:	300c      	adds	r0, #12
 80086aa:	f7ff ff5b 	bl	8008564 <memcpy>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff ffa5 	bl	8008600 <_Bfree>
 80086b6:	4644      	mov	r4, r8
 80086b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086bc:	3501      	adds	r5, #1
 80086be:	615e      	str	r6, [r3, #20]
 80086c0:	6125      	str	r5, [r4, #16]
 80086c2:	4620      	mov	r0, r4
 80086c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c8:	080096cf 	.word	0x080096cf
 80086cc:	08009740 	.word	0x08009740

080086d0 <__hi0bits>:
 80086d0:	0c03      	lsrs	r3, r0, #16
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	b9d3      	cbnz	r3, 800870c <__hi0bits+0x3c>
 80086d6:	0400      	lsls	r0, r0, #16
 80086d8:	2310      	movs	r3, #16
 80086da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086de:	bf04      	itt	eq
 80086e0:	0200      	lsleq	r0, r0, #8
 80086e2:	3308      	addeq	r3, #8
 80086e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086e8:	bf04      	itt	eq
 80086ea:	0100      	lsleq	r0, r0, #4
 80086ec:	3304      	addeq	r3, #4
 80086ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086f2:	bf04      	itt	eq
 80086f4:	0080      	lsleq	r0, r0, #2
 80086f6:	3302      	addeq	r3, #2
 80086f8:	2800      	cmp	r0, #0
 80086fa:	db05      	blt.n	8008708 <__hi0bits+0x38>
 80086fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008700:	f103 0301 	add.w	r3, r3, #1
 8008704:	bf08      	it	eq
 8008706:	2320      	moveq	r3, #32
 8008708:	4618      	mov	r0, r3
 800870a:	4770      	bx	lr
 800870c:	2300      	movs	r3, #0
 800870e:	e7e4      	b.n	80086da <__hi0bits+0xa>

08008710 <__lo0bits>:
 8008710:	6803      	ldr	r3, [r0, #0]
 8008712:	f013 0207 	ands.w	r2, r3, #7
 8008716:	4601      	mov	r1, r0
 8008718:	d00b      	beq.n	8008732 <__lo0bits+0x22>
 800871a:	07da      	lsls	r2, r3, #31
 800871c:	d423      	bmi.n	8008766 <__lo0bits+0x56>
 800871e:	0798      	lsls	r0, r3, #30
 8008720:	bf49      	itett	mi
 8008722:	085b      	lsrmi	r3, r3, #1
 8008724:	089b      	lsrpl	r3, r3, #2
 8008726:	2001      	movmi	r0, #1
 8008728:	600b      	strmi	r3, [r1, #0]
 800872a:	bf5c      	itt	pl
 800872c:	600b      	strpl	r3, [r1, #0]
 800872e:	2002      	movpl	r0, #2
 8008730:	4770      	bx	lr
 8008732:	b298      	uxth	r0, r3
 8008734:	b9a8      	cbnz	r0, 8008762 <__lo0bits+0x52>
 8008736:	0c1b      	lsrs	r3, r3, #16
 8008738:	2010      	movs	r0, #16
 800873a:	b2da      	uxtb	r2, r3
 800873c:	b90a      	cbnz	r2, 8008742 <__lo0bits+0x32>
 800873e:	3008      	adds	r0, #8
 8008740:	0a1b      	lsrs	r3, r3, #8
 8008742:	071a      	lsls	r2, r3, #28
 8008744:	bf04      	itt	eq
 8008746:	091b      	lsreq	r3, r3, #4
 8008748:	3004      	addeq	r0, #4
 800874a:	079a      	lsls	r2, r3, #30
 800874c:	bf04      	itt	eq
 800874e:	089b      	lsreq	r3, r3, #2
 8008750:	3002      	addeq	r0, #2
 8008752:	07da      	lsls	r2, r3, #31
 8008754:	d403      	bmi.n	800875e <__lo0bits+0x4e>
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	f100 0001 	add.w	r0, r0, #1
 800875c:	d005      	beq.n	800876a <__lo0bits+0x5a>
 800875e:	600b      	str	r3, [r1, #0]
 8008760:	4770      	bx	lr
 8008762:	4610      	mov	r0, r2
 8008764:	e7e9      	b.n	800873a <__lo0bits+0x2a>
 8008766:	2000      	movs	r0, #0
 8008768:	4770      	bx	lr
 800876a:	2020      	movs	r0, #32
 800876c:	4770      	bx	lr
	...

08008770 <__i2b>:
 8008770:	b510      	push	{r4, lr}
 8008772:	460c      	mov	r4, r1
 8008774:	2101      	movs	r1, #1
 8008776:	f7ff ff03 	bl	8008580 <_Balloc>
 800877a:	4602      	mov	r2, r0
 800877c:	b928      	cbnz	r0, 800878a <__i2b+0x1a>
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <__i2b+0x24>)
 8008780:	4805      	ldr	r0, [pc, #20]	; (8008798 <__i2b+0x28>)
 8008782:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008786:	f000 fd35 	bl	80091f4 <__assert_func>
 800878a:	2301      	movs	r3, #1
 800878c:	6144      	str	r4, [r0, #20]
 800878e:	6103      	str	r3, [r0, #16]
 8008790:	bd10      	pop	{r4, pc}
 8008792:	bf00      	nop
 8008794:	080096cf 	.word	0x080096cf
 8008798:	08009740 	.word	0x08009740

0800879c <__multiply>:
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	4691      	mov	r9, r2
 80087a2:	690a      	ldr	r2, [r1, #16]
 80087a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	bfb8      	it	lt
 80087ac:	460b      	movlt	r3, r1
 80087ae:	460c      	mov	r4, r1
 80087b0:	bfbc      	itt	lt
 80087b2:	464c      	movlt	r4, r9
 80087b4:	4699      	movlt	r9, r3
 80087b6:	6927      	ldr	r7, [r4, #16]
 80087b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087bc:	68a3      	ldr	r3, [r4, #8]
 80087be:	6861      	ldr	r1, [r4, #4]
 80087c0:	eb07 060a 	add.w	r6, r7, sl
 80087c4:	42b3      	cmp	r3, r6
 80087c6:	b085      	sub	sp, #20
 80087c8:	bfb8      	it	lt
 80087ca:	3101      	addlt	r1, #1
 80087cc:	f7ff fed8 	bl	8008580 <_Balloc>
 80087d0:	b930      	cbnz	r0, 80087e0 <__multiply+0x44>
 80087d2:	4602      	mov	r2, r0
 80087d4:	4b44      	ldr	r3, [pc, #272]	; (80088e8 <__multiply+0x14c>)
 80087d6:	4845      	ldr	r0, [pc, #276]	; (80088ec <__multiply+0x150>)
 80087d8:	f240 115d 	movw	r1, #349	; 0x15d
 80087dc:	f000 fd0a 	bl	80091f4 <__assert_func>
 80087e0:	f100 0514 	add.w	r5, r0, #20
 80087e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087e8:	462b      	mov	r3, r5
 80087ea:	2200      	movs	r2, #0
 80087ec:	4543      	cmp	r3, r8
 80087ee:	d321      	bcc.n	8008834 <__multiply+0x98>
 80087f0:	f104 0314 	add.w	r3, r4, #20
 80087f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087f8:	f109 0314 	add.w	r3, r9, #20
 80087fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008800:	9202      	str	r2, [sp, #8]
 8008802:	1b3a      	subs	r2, r7, r4
 8008804:	3a15      	subs	r2, #21
 8008806:	f022 0203 	bic.w	r2, r2, #3
 800880a:	3204      	adds	r2, #4
 800880c:	f104 0115 	add.w	r1, r4, #21
 8008810:	428f      	cmp	r7, r1
 8008812:	bf38      	it	cc
 8008814:	2204      	movcc	r2, #4
 8008816:	9201      	str	r2, [sp, #4]
 8008818:	9a02      	ldr	r2, [sp, #8]
 800881a:	9303      	str	r3, [sp, #12]
 800881c:	429a      	cmp	r2, r3
 800881e:	d80c      	bhi.n	800883a <__multiply+0x9e>
 8008820:	2e00      	cmp	r6, #0
 8008822:	dd03      	ble.n	800882c <__multiply+0x90>
 8008824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008828:	2b00      	cmp	r3, #0
 800882a:	d05a      	beq.n	80088e2 <__multiply+0x146>
 800882c:	6106      	str	r6, [r0, #16]
 800882e:	b005      	add	sp, #20
 8008830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008834:	f843 2b04 	str.w	r2, [r3], #4
 8008838:	e7d8      	b.n	80087ec <__multiply+0x50>
 800883a:	f8b3 a000 	ldrh.w	sl, [r3]
 800883e:	f1ba 0f00 	cmp.w	sl, #0
 8008842:	d024      	beq.n	800888e <__multiply+0xf2>
 8008844:	f104 0e14 	add.w	lr, r4, #20
 8008848:	46a9      	mov	r9, r5
 800884a:	f04f 0c00 	mov.w	ip, #0
 800884e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008852:	f8d9 1000 	ldr.w	r1, [r9]
 8008856:	fa1f fb82 	uxth.w	fp, r2
 800885a:	b289      	uxth	r1, r1
 800885c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008860:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008864:	f8d9 2000 	ldr.w	r2, [r9]
 8008868:	4461      	add	r1, ip
 800886a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800886e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008872:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008876:	b289      	uxth	r1, r1
 8008878:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800887c:	4577      	cmp	r7, lr
 800887e:	f849 1b04 	str.w	r1, [r9], #4
 8008882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008886:	d8e2      	bhi.n	800884e <__multiply+0xb2>
 8008888:	9a01      	ldr	r2, [sp, #4]
 800888a:	f845 c002 	str.w	ip, [r5, r2]
 800888e:	9a03      	ldr	r2, [sp, #12]
 8008890:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008894:	3304      	adds	r3, #4
 8008896:	f1b9 0f00 	cmp.w	r9, #0
 800889a:	d020      	beq.n	80088de <__multiply+0x142>
 800889c:	6829      	ldr	r1, [r5, #0]
 800889e:	f104 0c14 	add.w	ip, r4, #20
 80088a2:	46ae      	mov	lr, r5
 80088a4:	f04f 0a00 	mov.w	sl, #0
 80088a8:	f8bc b000 	ldrh.w	fp, [ip]
 80088ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088b0:	fb09 220b 	mla	r2, r9, fp, r2
 80088b4:	4492      	add	sl, r2
 80088b6:	b289      	uxth	r1, r1
 80088b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80088bc:	f84e 1b04 	str.w	r1, [lr], #4
 80088c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80088c4:	f8be 1000 	ldrh.w	r1, [lr]
 80088c8:	0c12      	lsrs	r2, r2, #16
 80088ca:	fb09 1102 	mla	r1, r9, r2, r1
 80088ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088d2:	4567      	cmp	r7, ip
 80088d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088d8:	d8e6      	bhi.n	80088a8 <__multiply+0x10c>
 80088da:	9a01      	ldr	r2, [sp, #4]
 80088dc:	50a9      	str	r1, [r5, r2]
 80088de:	3504      	adds	r5, #4
 80088e0:	e79a      	b.n	8008818 <__multiply+0x7c>
 80088e2:	3e01      	subs	r6, #1
 80088e4:	e79c      	b.n	8008820 <__multiply+0x84>
 80088e6:	bf00      	nop
 80088e8:	080096cf 	.word	0x080096cf
 80088ec:	08009740 	.word	0x08009740

080088f0 <__pow5mult>:
 80088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	4615      	mov	r5, r2
 80088f6:	f012 0203 	ands.w	r2, r2, #3
 80088fa:	4606      	mov	r6, r0
 80088fc:	460f      	mov	r7, r1
 80088fe:	d007      	beq.n	8008910 <__pow5mult+0x20>
 8008900:	4c25      	ldr	r4, [pc, #148]	; (8008998 <__pow5mult+0xa8>)
 8008902:	3a01      	subs	r2, #1
 8008904:	2300      	movs	r3, #0
 8008906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800890a:	f7ff fe9b 	bl	8008644 <__multadd>
 800890e:	4607      	mov	r7, r0
 8008910:	10ad      	asrs	r5, r5, #2
 8008912:	d03d      	beq.n	8008990 <__pow5mult+0xa0>
 8008914:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008916:	b97c      	cbnz	r4, 8008938 <__pow5mult+0x48>
 8008918:	2010      	movs	r0, #16
 800891a:	f7ff fe1b 	bl	8008554 <malloc>
 800891e:	4602      	mov	r2, r0
 8008920:	6270      	str	r0, [r6, #36]	; 0x24
 8008922:	b928      	cbnz	r0, 8008930 <__pow5mult+0x40>
 8008924:	4b1d      	ldr	r3, [pc, #116]	; (800899c <__pow5mult+0xac>)
 8008926:	481e      	ldr	r0, [pc, #120]	; (80089a0 <__pow5mult+0xb0>)
 8008928:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800892c:	f000 fc62 	bl	80091f4 <__assert_func>
 8008930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008934:	6004      	str	r4, [r0, #0]
 8008936:	60c4      	str	r4, [r0, #12]
 8008938:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800893c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008940:	b94c      	cbnz	r4, 8008956 <__pow5mult+0x66>
 8008942:	f240 2171 	movw	r1, #625	; 0x271
 8008946:	4630      	mov	r0, r6
 8008948:	f7ff ff12 	bl	8008770 <__i2b>
 800894c:	2300      	movs	r3, #0
 800894e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008952:	4604      	mov	r4, r0
 8008954:	6003      	str	r3, [r0, #0]
 8008956:	f04f 0900 	mov.w	r9, #0
 800895a:	07eb      	lsls	r3, r5, #31
 800895c:	d50a      	bpl.n	8008974 <__pow5mult+0x84>
 800895e:	4639      	mov	r1, r7
 8008960:	4622      	mov	r2, r4
 8008962:	4630      	mov	r0, r6
 8008964:	f7ff ff1a 	bl	800879c <__multiply>
 8008968:	4639      	mov	r1, r7
 800896a:	4680      	mov	r8, r0
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff fe47 	bl	8008600 <_Bfree>
 8008972:	4647      	mov	r7, r8
 8008974:	106d      	asrs	r5, r5, #1
 8008976:	d00b      	beq.n	8008990 <__pow5mult+0xa0>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	b938      	cbnz	r0, 800898c <__pow5mult+0x9c>
 800897c:	4622      	mov	r2, r4
 800897e:	4621      	mov	r1, r4
 8008980:	4630      	mov	r0, r6
 8008982:	f7ff ff0b 	bl	800879c <__multiply>
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	f8c0 9000 	str.w	r9, [r0]
 800898c:	4604      	mov	r4, r0
 800898e:	e7e4      	b.n	800895a <__pow5mult+0x6a>
 8008990:	4638      	mov	r0, r7
 8008992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008996:	bf00      	nop
 8008998:	08009890 	.word	0x08009890
 800899c:	0800965d 	.word	0x0800965d
 80089a0:	08009740 	.word	0x08009740

080089a4 <__lshift>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	460c      	mov	r4, r1
 80089aa:	6849      	ldr	r1, [r1, #4]
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089b2:	68a3      	ldr	r3, [r4, #8]
 80089b4:	4607      	mov	r7, r0
 80089b6:	4691      	mov	r9, r2
 80089b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089bc:	f108 0601 	add.w	r6, r8, #1
 80089c0:	42b3      	cmp	r3, r6
 80089c2:	db0b      	blt.n	80089dc <__lshift+0x38>
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff fddb 	bl	8008580 <_Balloc>
 80089ca:	4605      	mov	r5, r0
 80089cc:	b948      	cbnz	r0, 80089e2 <__lshift+0x3e>
 80089ce:	4602      	mov	r2, r0
 80089d0:	4b2a      	ldr	r3, [pc, #168]	; (8008a7c <__lshift+0xd8>)
 80089d2:	482b      	ldr	r0, [pc, #172]	; (8008a80 <__lshift+0xdc>)
 80089d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089d8:	f000 fc0c 	bl	80091f4 <__assert_func>
 80089dc:	3101      	adds	r1, #1
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	e7ee      	b.n	80089c0 <__lshift+0x1c>
 80089e2:	2300      	movs	r3, #0
 80089e4:	f100 0114 	add.w	r1, r0, #20
 80089e8:	f100 0210 	add.w	r2, r0, #16
 80089ec:	4618      	mov	r0, r3
 80089ee:	4553      	cmp	r3, sl
 80089f0:	db37      	blt.n	8008a62 <__lshift+0xbe>
 80089f2:	6920      	ldr	r0, [r4, #16]
 80089f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089f8:	f104 0314 	add.w	r3, r4, #20
 80089fc:	f019 091f 	ands.w	r9, r9, #31
 8008a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a08:	d02f      	beq.n	8008a6a <__lshift+0xc6>
 8008a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a0e:	468a      	mov	sl, r1
 8008a10:	f04f 0c00 	mov.w	ip, #0
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	fa02 f209 	lsl.w	r2, r2, r9
 8008a1a:	ea42 020c 	orr.w	r2, r2, ip
 8008a1e:	f84a 2b04 	str.w	r2, [sl], #4
 8008a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a26:	4298      	cmp	r0, r3
 8008a28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a2c:	d8f2      	bhi.n	8008a14 <__lshift+0x70>
 8008a2e:	1b03      	subs	r3, r0, r4
 8008a30:	3b15      	subs	r3, #21
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	3304      	adds	r3, #4
 8008a38:	f104 0215 	add.w	r2, r4, #21
 8008a3c:	4290      	cmp	r0, r2
 8008a3e:	bf38      	it	cc
 8008a40:	2304      	movcc	r3, #4
 8008a42:	f841 c003 	str.w	ip, [r1, r3]
 8008a46:	f1bc 0f00 	cmp.w	ip, #0
 8008a4a:	d001      	beq.n	8008a50 <__lshift+0xac>
 8008a4c:	f108 0602 	add.w	r6, r8, #2
 8008a50:	3e01      	subs	r6, #1
 8008a52:	4638      	mov	r0, r7
 8008a54:	612e      	str	r6, [r5, #16]
 8008a56:	4621      	mov	r1, r4
 8008a58:	f7ff fdd2 	bl	8008600 <_Bfree>
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a66:	3301      	adds	r3, #1
 8008a68:	e7c1      	b.n	80089ee <__lshift+0x4a>
 8008a6a:	3904      	subs	r1, #4
 8008a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a74:	4298      	cmp	r0, r3
 8008a76:	d8f9      	bhi.n	8008a6c <__lshift+0xc8>
 8008a78:	e7ea      	b.n	8008a50 <__lshift+0xac>
 8008a7a:	bf00      	nop
 8008a7c:	080096cf 	.word	0x080096cf
 8008a80:	08009740 	.word	0x08009740

08008a84 <__mcmp>:
 8008a84:	b530      	push	{r4, r5, lr}
 8008a86:	6902      	ldr	r2, [r0, #16]
 8008a88:	690c      	ldr	r4, [r1, #16]
 8008a8a:	1b12      	subs	r2, r2, r4
 8008a8c:	d10e      	bne.n	8008aac <__mcmp+0x28>
 8008a8e:	f100 0314 	add.w	r3, r0, #20
 8008a92:	3114      	adds	r1, #20
 8008a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d003      	beq.n	8008ab0 <__mcmp+0x2c>
 8008aa8:	d305      	bcc.n	8008ab6 <__mcmp+0x32>
 8008aaa:	2201      	movs	r2, #1
 8008aac:	4610      	mov	r0, r2
 8008aae:	bd30      	pop	{r4, r5, pc}
 8008ab0:	4283      	cmp	r3, r0
 8008ab2:	d3f3      	bcc.n	8008a9c <__mcmp+0x18>
 8008ab4:	e7fa      	b.n	8008aac <__mcmp+0x28>
 8008ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aba:	e7f7      	b.n	8008aac <__mcmp+0x28>

08008abc <__mdiff>:
 8008abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4690      	mov	r8, r2
 8008aca:	f7ff ffdb 	bl	8008a84 <__mcmp>
 8008ace:	1e05      	subs	r5, r0, #0
 8008ad0:	d110      	bne.n	8008af4 <__mdiff+0x38>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff fd53 	bl	8008580 <_Balloc>
 8008ada:	b930      	cbnz	r0, 8008aea <__mdiff+0x2e>
 8008adc:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <__mdiff+0x10c>)
 8008ade:	4602      	mov	r2, r0
 8008ae0:	f240 2132 	movw	r1, #562	; 0x232
 8008ae4:	4839      	ldr	r0, [pc, #228]	; (8008bcc <__mdiff+0x110>)
 8008ae6:	f000 fb85 	bl	80091f4 <__assert_func>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	bfa4      	itt	ge
 8008af6:	4643      	movge	r3, r8
 8008af8:	46a0      	movge	r8, r4
 8008afa:	4630      	mov	r0, r6
 8008afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b00:	bfa6      	itte	ge
 8008b02:	461c      	movge	r4, r3
 8008b04:	2500      	movge	r5, #0
 8008b06:	2501      	movlt	r5, #1
 8008b08:	f7ff fd3a 	bl	8008580 <_Balloc>
 8008b0c:	b920      	cbnz	r0, 8008b18 <__mdiff+0x5c>
 8008b0e:	4b2e      	ldr	r3, [pc, #184]	; (8008bc8 <__mdiff+0x10c>)
 8008b10:	4602      	mov	r2, r0
 8008b12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b16:	e7e5      	b.n	8008ae4 <__mdiff+0x28>
 8008b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b1c:	6926      	ldr	r6, [r4, #16]
 8008b1e:	60c5      	str	r5, [r0, #12]
 8008b20:	f104 0914 	add.w	r9, r4, #20
 8008b24:	f108 0514 	add.w	r5, r8, #20
 8008b28:	f100 0e14 	add.w	lr, r0, #20
 8008b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b34:	f108 0210 	add.w	r2, r8, #16
 8008b38:	46f2      	mov	sl, lr
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b44:	fa1f f883 	uxth.w	r8, r3
 8008b48:	fa11 f18b 	uxtah	r1, r1, fp
 8008b4c:	0c1b      	lsrs	r3, r3, #16
 8008b4e:	eba1 0808 	sub.w	r8, r1, r8
 8008b52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b5a:	fa1f f888 	uxth.w	r8, r8
 8008b5e:	1419      	asrs	r1, r3, #16
 8008b60:	454e      	cmp	r6, r9
 8008b62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b66:	f84a 3b04 	str.w	r3, [sl], #4
 8008b6a:	d8e7      	bhi.n	8008b3c <__mdiff+0x80>
 8008b6c:	1b33      	subs	r3, r6, r4
 8008b6e:	3b15      	subs	r3, #21
 8008b70:	f023 0303 	bic.w	r3, r3, #3
 8008b74:	3304      	adds	r3, #4
 8008b76:	3415      	adds	r4, #21
 8008b78:	42a6      	cmp	r6, r4
 8008b7a:	bf38      	it	cc
 8008b7c:	2304      	movcc	r3, #4
 8008b7e:	441d      	add	r5, r3
 8008b80:	4473      	add	r3, lr
 8008b82:	469e      	mov	lr, r3
 8008b84:	462e      	mov	r6, r5
 8008b86:	4566      	cmp	r6, ip
 8008b88:	d30e      	bcc.n	8008ba8 <__mdiff+0xec>
 8008b8a:	f10c 0203 	add.w	r2, ip, #3
 8008b8e:	1b52      	subs	r2, r2, r5
 8008b90:	f022 0203 	bic.w	r2, r2, #3
 8008b94:	3d03      	subs	r5, #3
 8008b96:	45ac      	cmp	ip, r5
 8008b98:	bf38      	it	cc
 8008b9a:	2200      	movcc	r2, #0
 8008b9c:	441a      	add	r2, r3
 8008b9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ba2:	b17b      	cbz	r3, 8008bc4 <__mdiff+0x108>
 8008ba4:	6107      	str	r7, [r0, #16]
 8008ba6:	e7a3      	b.n	8008af0 <__mdiff+0x34>
 8008ba8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bac:	fa11 f288 	uxtah	r2, r1, r8
 8008bb0:	1414      	asrs	r4, r2, #16
 8008bb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bb6:	b292      	uxth	r2, r2
 8008bb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008bbc:	f84e 2b04 	str.w	r2, [lr], #4
 8008bc0:	1421      	asrs	r1, r4, #16
 8008bc2:	e7e0      	b.n	8008b86 <__mdiff+0xca>
 8008bc4:	3f01      	subs	r7, #1
 8008bc6:	e7ea      	b.n	8008b9e <__mdiff+0xe2>
 8008bc8:	080096cf 	.word	0x080096cf
 8008bcc:	08009740 	.word	0x08009740

08008bd0 <__d2b>:
 8008bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	4689      	mov	r9, r1
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	ec57 6b10 	vmov	r6, r7, d0
 8008bdc:	4690      	mov	r8, r2
 8008bde:	f7ff fccf 	bl	8008580 <_Balloc>
 8008be2:	4604      	mov	r4, r0
 8008be4:	b930      	cbnz	r0, 8008bf4 <__d2b+0x24>
 8008be6:	4602      	mov	r2, r0
 8008be8:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <__d2b+0xb0>)
 8008bea:	4826      	ldr	r0, [pc, #152]	; (8008c84 <__d2b+0xb4>)
 8008bec:	f240 310a 	movw	r1, #778	; 0x30a
 8008bf0:	f000 fb00 	bl	80091f4 <__assert_func>
 8008bf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bfc:	bb35      	cbnz	r5, 8008c4c <__d2b+0x7c>
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	d028      	beq.n	8008c56 <__d2b+0x86>
 8008c04:	4668      	mov	r0, sp
 8008c06:	9600      	str	r6, [sp, #0]
 8008c08:	f7ff fd82 	bl	8008710 <__lo0bits>
 8008c0c:	9900      	ldr	r1, [sp, #0]
 8008c0e:	b300      	cbz	r0, 8008c52 <__d2b+0x82>
 8008c10:	9a01      	ldr	r2, [sp, #4]
 8008c12:	f1c0 0320 	rsb	r3, r0, #32
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	430b      	orrs	r3, r1
 8008c1c:	40c2      	lsrs	r2, r0
 8008c1e:	6163      	str	r3, [r4, #20]
 8008c20:	9201      	str	r2, [sp, #4]
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	61a3      	str	r3, [r4, #24]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bf14      	ite	ne
 8008c2a:	2202      	movne	r2, #2
 8008c2c:	2201      	moveq	r2, #1
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	b1d5      	cbz	r5, 8008c68 <__d2b+0x98>
 8008c32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c36:	4405      	add	r5, r0
 8008c38:	f8c9 5000 	str.w	r5, [r9]
 8008c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c40:	f8c8 0000 	str.w	r0, [r8]
 8008c44:	4620      	mov	r0, r4
 8008c46:	b003      	add	sp, #12
 8008c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c50:	e7d5      	b.n	8008bfe <__d2b+0x2e>
 8008c52:	6161      	str	r1, [r4, #20]
 8008c54:	e7e5      	b.n	8008c22 <__d2b+0x52>
 8008c56:	a801      	add	r0, sp, #4
 8008c58:	f7ff fd5a 	bl	8008710 <__lo0bits>
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	6163      	str	r3, [r4, #20]
 8008c60:	2201      	movs	r2, #1
 8008c62:	6122      	str	r2, [r4, #16]
 8008c64:	3020      	adds	r0, #32
 8008c66:	e7e3      	b.n	8008c30 <__d2b+0x60>
 8008c68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c70:	f8c9 0000 	str.w	r0, [r9]
 8008c74:	6918      	ldr	r0, [r3, #16]
 8008c76:	f7ff fd2b 	bl	80086d0 <__hi0bits>
 8008c7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c7e:	e7df      	b.n	8008c40 <__d2b+0x70>
 8008c80:	080096cf 	.word	0x080096cf
 8008c84:	08009740 	.word	0x08009740

08008c88 <_calloc_r>:
 8008c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c8a:	fba1 2402 	umull	r2, r4, r1, r2
 8008c8e:	b94c      	cbnz	r4, 8008ca4 <_calloc_r+0x1c>
 8008c90:	4611      	mov	r1, r2
 8008c92:	9201      	str	r2, [sp, #4]
 8008c94:	f000 f87a 	bl	8008d8c <_malloc_r>
 8008c98:	9a01      	ldr	r2, [sp, #4]
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	b930      	cbnz	r0, 8008cac <_calloc_r+0x24>
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	b003      	add	sp, #12
 8008ca2:	bd30      	pop	{r4, r5, pc}
 8008ca4:	220c      	movs	r2, #12
 8008ca6:	6002      	str	r2, [r0, #0]
 8008ca8:	2500      	movs	r5, #0
 8008caa:	e7f8      	b.n	8008c9e <_calloc_r+0x16>
 8008cac:	4621      	mov	r1, r4
 8008cae:	f7fd fdf1 	bl	8006894 <memset>
 8008cb2:	e7f4      	b.n	8008c9e <_calloc_r+0x16>

08008cb4 <_free_r>:
 8008cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cb6:	2900      	cmp	r1, #0
 8008cb8:	d044      	beq.n	8008d44 <_free_r+0x90>
 8008cba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbe:	9001      	str	r0, [sp, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f1a1 0404 	sub.w	r4, r1, #4
 8008cc6:	bfb8      	it	lt
 8008cc8:	18e4      	addlt	r4, r4, r3
 8008cca:	f000 fb19 	bl	8009300 <__malloc_lock>
 8008cce:	4a1e      	ldr	r2, [pc, #120]	; (8008d48 <_free_r+0x94>)
 8008cd0:	9801      	ldr	r0, [sp, #4]
 8008cd2:	6813      	ldr	r3, [r2, #0]
 8008cd4:	b933      	cbnz	r3, 8008ce4 <_free_r+0x30>
 8008cd6:	6063      	str	r3, [r4, #4]
 8008cd8:	6014      	str	r4, [r2, #0]
 8008cda:	b003      	add	sp, #12
 8008cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ce0:	f000 bb14 	b.w	800930c <__malloc_unlock>
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	d908      	bls.n	8008cfa <_free_r+0x46>
 8008ce8:	6825      	ldr	r5, [r4, #0]
 8008cea:	1961      	adds	r1, r4, r5
 8008cec:	428b      	cmp	r3, r1
 8008cee:	bf01      	itttt	eq
 8008cf0:	6819      	ldreq	r1, [r3, #0]
 8008cf2:	685b      	ldreq	r3, [r3, #4]
 8008cf4:	1949      	addeq	r1, r1, r5
 8008cf6:	6021      	streq	r1, [r4, #0]
 8008cf8:	e7ed      	b.n	8008cd6 <_free_r+0x22>
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	b10b      	cbz	r3, 8008d04 <_free_r+0x50>
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	d9fa      	bls.n	8008cfa <_free_r+0x46>
 8008d04:	6811      	ldr	r1, [r2, #0]
 8008d06:	1855      	adds	r5, r2, r1
 8008d08:	42a5      	cmp	r5, r4
 8008d0a:	d10b      	bne.n	8008d24 <_free_r+0x70>
 8008d0c:	6824      	ldr	r4, [r4, #0]
 8008d0e:	4421      	add	r1, r4
 8008d10:	1854      	adds	r4, r2, r1
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	6011      	str	r1, [r2, #0]
 8008d16:	d1e0      	bne.n	8008cda <_free_r+0x26>
 8008d18:	681c      	ldr	r4, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	6053      	str	r3, [r2, #4]
 8008d1e:	4421      	add	r1, r4
 8008d20:	6011      	str	r1, [r2, #0]
 8008d22:	e7da      	b.n	8008cda <_free_r+0x26>
 8008d24:	d902      	bls.n	8008d2c <_free_r+0x78>
 8008d26:	230c      	movs	r3, #12
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	e7d6      	b.n	8008cda <_free_r+0x26>
 8008d2c:	6825      	ldr	r5, [r4, #0]
 8008d2e:	1961      	adds	r1, r4, r5
 8008d30:	428b      	cmp	r3, r1
 8008d32:	bf04      	itt	eq
 8008d34:	6819      	ldreq	r1, [r3, #0]
 8008d36:	685b      	ldreq	r3, [r3, #4]
 8008d38:	6063      	str	r3, [r4, #4]
 8008d3a:	bf04      	itt	eq
 8008d3c:	1949      	addeq	r1, r1, r5
 8008d3e:	6021      	streq	r1, [r4, #0]
 8008d40:	6054      	str	r4, [r2, #4]
 8008d42:	e7ca      	b.n	8008cda <_free_r+0x26>
 8008d44:	b003      	add	sp, #12
 8008d46:	bd30      	pop	{r4, r5, pc}
 8008d48:	20000334 	.word	0x20000334

08008d4c <sbrk_aligned>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	4e0e      	ldr	r6, [pc, #56]	; (8008d88 <sbrk_aligned+0x3c>)
 8008d50:	460c      	mov	r4, r1
 8008d52:	6831      	ldr	r1, [r6, #0]
 8008d54:	4605      	mov	r5, r0
 8008d56:	b911      	cbnz	r1, 8008d5e <sbrk_aligned+0x12>
 8008d58:	f000 f9e6 	bl	8009128 <_sbrk_r>
 8008d5c:	6030      	str	r0, [r6, #0]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4628      	mov	r0, r5
 8008d62:	f000 f9e1 	bl	8009128 <_sbrk_r>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d00a      	beq.n	8008d80 <sbrk_aligned+0x34>
 8008d6a:	1cc4      	adds	r4, r0, #3
 8008d6c:	f024 0403 	bic.w	r4, r4, #3
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d007      	beq.n	8008d84 <sbrk_aligned+0x38>
 8008d74:	1a21      	subs	r1, r4, r0
 8008d76:	4628      	mov	r0, r5
 8008d78:	f000 f9d6 	bl	8009128 <_sbrk_r>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d101      	bne.n	8008d84 <sbrk_aligned+0x38>
 8008d80:	f04f 34ff 	mov.w	r4, #4294967295
 8008d84:	4620      	mov	r0, r4
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	20000338 	.word	0x20000338

08008d8c <_malloc_r>:
 8008d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	1ccd      	adds	r5, r1, #3
 8008d92:	f025 0503 	bic.w	r5, r5, #3
 8008d96:	3508      	adds	r5, #8
 8008d98:	2d0c      	cmp	r5, #12
 8008d9a:	bf38      	it	cc
 8008d9c:	250c      	movcc	r5, #12
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	4607      	mov	r7, r0
 8008da2:	db01      	blt.n	8008da8 <_malloc_r+0x1c>
 8008da4:	42a9      	cmp	r1, r5
 8008da6:	d905      	bls.n	8008db4 <_malloc_r+0x28>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	2600      	movs	r6, #0
 8008dae:	4630      	mov	r0, r6
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db4:	4e2e      	ldr	r6, [pc, #184]	; (8008e70 <_malloc_r+0xe4>)
 8008db6:	f000 faa3 	bl	8009300 <__malloc_lock>
 8008dba:	6833      	ldr	r3, [r6, #0]
 8008dbc:	461c      	mov	r4, r3
 8008dbe:	bb34      	cbnz	r4, 8008e0e <_malloc_r+0x82>
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	f7ff ffc2 	bl	8008d4c <sbrk_aligned>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	4604      	mov	r4, r0
 8008dcc:	d14d      	bne.n	8008e6a <_malloc_r+0xde>
 8008dce:	6834      	ldr	r4, [r6, #0]
 8008dd0:	4626      	mov	r6, r4
 8008dd2:	2e00      	cmp	r6, #0
 8008dd4:	d140      	bne.n	8008e58 <_malloc_r+0xcc>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4638      	mov	r0, r7
 8008ddc:	eb04 0803 	add.w	r8, r4, r3
 8008de0:	f000 f9a2 	bl	8009128 <_sbrk_r>
 8008de4:	4580      	cmp	r8, r0
 8008de6:	d13a      	bne.n	8008e5e <_malloc_r+0xd2>
 8008de8:	6821      	ldr	r1, [r4, #0]
 8008dea:	3503      	adds	r5, #3
 8008dec:	1a6d      	subs	r5, r5, r1
 8008dee:	f025 0503 	bic.w	r5, r5, #3
 8008df2:	3508      	adds	r5, #8
 8008df4:	2d0c      	cmp	r5, #12
 8008df6:	bf38      	it	cc
 8008df8:	250c      	movcc	r5, #12
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7ff ffa5 	bl	8008d4c <sbrk_aligned>
 8008e02:	3001      	adds	r0, #1
 8008e04:	d02b      	beq.n	8008e5e <_malloc_r+0xd2>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	442b      	add	r3, r5
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	e00e      	b.n	8008e2c <_malloc_r+0xa0>
 8008e0e:	6822      	ldr	r2, [r4, #0]
 8008e10:	1b52      	subs	r2, r2, r5
 8008e12:	d41e      	bmi.n	8008e52 <_malloc_r+0xc6>
 8008e14:	2a0b      	cmp	r2, #11
 8008e16:	d916      	bls.n	8008e46 <_malloc_r+0xba>
 8008e18:	1961      	adds	r1, r4, r5
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	6025      	str	r5, [r4, #0]
 8008e1e:	bf18      	it	ne
 8008e20:	6059      	strne	r1, [r3, #4]
 8008e22:	6863      	ldr	r3, [r4, #4]
 8008e24:	bf08      	it	eq
 8008e26:	6031      	streq	r1, [r6, #0]
 8008e28:	5162      	str	r2, [r4, r5]
 8008e2a:	604b      	str	r3, [r1, #4]
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	f104 060b 	add.w	r6, r4, #11
 8008e32:	f000 fa6b 	bl	800930c <__malloc_unlock>
 8008e36:	f026 0607 	bic.w	r6, r6, #7
 8008e3a:	1d23      	adds	r3, r4, #4
 8008e3c:	1af2      	subs	r2, r6, r3
 8008e3e:	d0b6      	beq.n	8008dae <_malloc_r+0x22>
 8008e40:	1b9b      	subs	r3, r3, r6
 8008e42:	50a3      	str	r3, [r4, r2]
 8008e44:	e7b3      	b.n	8008dae <_malloc_r+0x22>
 8008e46:	6862      	ldr	r2, [r4, #4]
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	bf0c      	ite	eq
 8008e4c:	6032      	streq	r2, [r6, #0]
 8008e4e:	605a      	strne	r2, [r3, #4]
 8008e50:	e7ec      	b.n	8008e2c <_malloc_r+0xa0>
 8008e52:	4623      	mov	r3, r4
 8008e54:	6864      	ldr	r4, [r4, #4]
 8008e56:	e7b2      	b.n	8008dbe <_malloc_r+0x32>
 8008e58:	4634      	mov	r4, r6
 8008e5a:	6876      	ldr	r6, [r6, #4]
 8008e5c:	e7b9      	b.n	8008dd2 <_malloc_r+0x46>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	603b      	str	r3, [r7, #0]
 8008e62:	4638      	mov	r0, r7
 8008e64:	f000 fa52 	bl	800930c <__malloc_unlock>
 8008e68:	e7a1      	b.n	8008dae <_malloc_r+0x22>
 8008e6a:	6025      	str	r5, [r4, #0]
 8008e6c:	e7de      	b.n	8008e2c <_malloc_r+0xa0>
 8008e6e:	bf00      	nop
 8008e70:	20000334 	.word	0x20000334

08008e74 <__sfputc_r>:
 8008e74:	6893      	ldr	r3, [r2, #8]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	b410      	push	{r4}
 8008e7c:	6093      	str	r3, [r2, #8]
 8008e7e:	da08      	bge.n	8008e92 <__sfputc_r+0x1e>
 8008e80:	6994      	ldr	r4, [r2, #24]
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	db01      	blt.n	8008e8a <__sfputc_r+0x16>
 8008e86:	290a      	cmp	r1, #10
 8008e88:	d103      	bne.n	8008e92 <__sfputc_r+0x1e>
 8008e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8e:	f7fe ba01 	b.w	8007294 <__swbuf_r>
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	1c58      	adds	r0, r3, #1
 8008e96:	6010      	str	r0, [r2, #0]
 8008e98:	7019      	strb	r1, [r3, #0]
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <__sfputs_r>:
 8008ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460f      	mov	r7, r1
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	18d5      	adds	r5, r2, r3
 8008eac:	42ac      	cmp	r4, r5
 8008eae:	d101      	bne.n	8008eb4 <__sfputs_r+0x12>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e007      	b.n	8008ec4 <__sfputs_r+0x22>
 8008eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb8:	463a      	mov	r2, r7
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff ffda 	bl	8008e74 <__sfputc_r>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d1f3      	bne.n	8008eac <__sfputs_r+0xa>
 8008ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ec8 <_vfiprintf_r>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	460d      	mov	r5, r1
 8008ece:	b09d      	sub	sp, #116	; 0x74
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	4698      	mov	r8, r3
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	b118      	cbz	r0, 8008ee0 <_vfiprintf_r+0x18>
 8008ed8:	6983      	ldr	r3, [r0, #24]
 8008eda:	b90b      	cbnz	r3, 8008ee0 <_vfiprintf_r+0x18>
 8008edc:	f7ff fa30 	bl	8008340 <__sinit>
 8008ee0:	4b89      	ldr	r3, [pc, #548]	; (8009108 <_vfiprintf_r+0x240>)
 8008ee2:	429d      	cmp	r5, r3
 8008ee4:	d11b      	bne.n	8008f1e <_vfiprintf_r+0x56>
 8008ee6:	6875      	ldr	r5, [r6, #4]
 8008ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eea:	07d9      	lsls	r1, r3, #31
 8008eec:	d405      	bmi.n	8008efa <_vfiprintf_r+0x32>
 8008eee:	89ab      	ldrh	r3, [r5, #12]
 8008ef0:	059a      	lsls	r2, r3, #22
 8008ef2:	d402      	bmi.n	8008efa <_vfiprintf_r+0x32>
 8008ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ef6:	f7ff fac6 	bl	8008486 <__retarget_lock_acquire_recursive>
 8008efa:	89ab      	ldrh	r3, [r5, #12]
 8008efc:	071b      	lsls	r3, r3, #28
 8008efe:	d501      	bpl.n	8008f04 <_vfiprintf_r+0x3c>
 8008f00:	692b      	ldr	r3, [r5, #16]
 8008f02:	b9eb      	cbnz	r3, 8008f40 <_vfiprintf_r+0x78>
 8008f04:	4629      	mov	r1, r5
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7fe fa16 	bl	8007338 <__swsetup_r>
 8008f0c:	b1c0      	cbz	r0, 8008f40 <_vfiprintf_r+0x78>
 8008f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f10:	07dc      	lsls	r4, r3, #31
 8008f12:	d50e      	bpl.n	8008f32 <_vfiprintf_r+0x6a>
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	b01d      	add	sp, #116	; 0x74
 8008f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1e:	4b7b      	ldr	r3, [pc, #492]	; (800910c <_vfiprintf_r+0x244>)
 8008f20:	429d      	cmp	r5, r3
 8008f22:	d101      	bne.n	8008f28 <_vfiprintf_r+0x60>
 8008f24:	68b5      	ldr	r5, [r6, #8]
 8008f26:	e7df      	b.n	8008ee8 <_vfiprintf_r+0x20>
 8008f28:	4b79      	ldr	r3, [pc, #484]	; (8009110 <_vfiprintf_r+0x248>)
 8008f2a:	429d      	cmp	r5, r3
 8008f2c:	bf08      	it	eq
 8008f2e:	68f5      	ldreq	r5, [r6, #12]
 8008f30:	e7da      	b.n	8008ee8 <_vfiprintf_r+0x20>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	0598      	lsls	r0, r3, #22
 8008f36:	d4ed      	bmi.n	8008f14 <_vfiprintf_r+0x4c>
 8008f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f3a:	f7ff faa5 	bl	8008488 <__retarget_lock_release_recursive>
 8008f3e:	e7e9      	b.n	8008f14 <_vfiprintf_r+0x4c>
 8008f40:	2300      	movs	r3, #0
 8008f42:	9309      	str	r3, [sp, #36]	; 0x24
 8008f44:	2320      	movs	r3, #32
 8008f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f4e:	2330      	movs	r3, #48	; 0x30
 8008f50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009114 <_vfiprintf_r+0x24c>
 8008f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f58:	f04f 0901 	mov.w	r9, #1
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	469a      	mov	sl, r3
 8008f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f64:	b10a      	cbz	r2, 8008f6a <_vfiprintf_r+0xa2>
 8008f66:	2a25      	cmp	r2, #37	; 0x25
 8008f68:	d1f9      	bne.n	8008f5e <_vfiprintf_r+0x96>
 8008f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f6e:	d00b      	beq.n	8008f88 <_vfiprintf_r+0xc0>
 8008f70:	465b      	mov	r3, fp
 8008f72:	4622      	mov	r2, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7ff ff93 	bl	8008ea2 <__sfputs_r>
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	f000 80aa 	beq.w	80090d6 <_vfiprintf_r+0x20e>
 8008f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f84:	445a      	add	r2, fp
 8008f86:	9209      	str	r2, [sp, #36]	; 0x24
 8008f88:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80a2 	beq.w	80090d6 <_vfiprintf_r+0x20e>
 8008f92:	2300      	movs	r3, #0
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295
 8008f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f9c:	f10a 0a01 	add.w	sl, sl, #1
 8008fa0:	9304      	str	r3, [sp, #16]
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8008faa:	4654      	mov	r4, sl
 8008fac:	2205      	movs	r2, #5
 8008fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb2:	4858      	ldr	r0, [pc, #352]	; (8009114 <_vfiprintf_r+0x24c>)
 8008fb4:	f7f7 f914 	bl	80001e0 <memchr>
 8008fb8:	9a04      	ldr	r2, [sp, #16]
 8008fba:	b9d8      	cbnz	r0, 8008ff4 <_vfiprintf_r+0x12c>
 8008fbc:	06d1      	lsls	r1, r2, #27
 8008fbe:	bf44      	itt	mi
 8008fc0:	2320      	movmi	r3, #32
 8008fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc6:	0713      	lsls	r3, r2, #28
 8008fc8:	bf44      	itt	mi
 8008fca:	232b      	movmi	r3, #43	; 0x2b
 8008fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd6:	d015      	beq.n	8009004 <_vfiprintf_r+0x13c>
 8008fd8:	9a07      	ldr	r2, [sp, #28]
 8008fda:	4654      	mov	r4, sl
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f04f 0c0a 	mov.w	ip, #10
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fe8:	3b30      	subs	r3, #48	; 0x30
 8008fea:	2b09      	cmp	r3, #9
 8008fec:	d94e      	bls.n	800908c <_vfiprintf_r+0x1c4>
 8008fee:	b1b0      	cbz	r0, 800901e <_vfiprintf_r+0x156>
 8008ff0:	9207      	str	r2, [sp, #28]
 8008ff2:	e014      	b.n	800901e <_vfiprintf_r+0x156>
 8008ff4:	eba0 0308 	sub.w	r3, r0, r8
 8008ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	9304      	str	r3, [sp, #16]
 8009000:	46a2      	mov	sl, r4
 8009002:	e7d2      	b.n	8008faa <_vfiprintf_r+0xe2>
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	1d19      	adds	r1, r3, #4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	9103      	str	r1, [sp, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	bfbb      	ittet	lt
 8009010:	425b      	neglt	r3, r3
 8009012:	f042 0202 	orrlt.w	r2, r2, #2
 8009016:	9307      	strge	r3, [sp, #28]
 8009018:	9307      	strlt	r3, [sp, #28]
 800901a:	bfb8      	it	lt
 800901c:	9204      	strlt	r2, [sp, #16]
 800901e:	7823      	ldrb	r3, [r4, #0]
 8009020:	2b2e      	cmp	r3, #46	; 0x2e
 8009022:	d10c      	bne.n	800903e <_vfiprintf_r+0x176>
 8009024:	7863      	ldrb	r3, [r4, #1]
 8009026:	2b2a      	cmp	r3, #42	; 0x2a
 8009028:	d135      	bne.n	8009096 <_vfiprintf_r+0x1ce>
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	1d1a      	adds	r2, r3, #4
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	9203      	str	r2, [sp, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfb8      	it	lt
 8009036:	f04f 33ff 	movlt.w	r3, #4294967295
 800903a:	3402      	adds	r4, #2
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009124 <_vfiprintf_r+0x25c>
 8009042:	7821      	ldrb	r1, [r4, #0]
 8009044:	2203      	movs	r2, #3
 8009046:	4650      	mov	r0, sl
 8009048:	f7f7 f8ca 	bl	80001e0 <memchr>
 800904c:	b140      	cbz	r0, 8009060 <_vfiprintf_r+0x198>
 800904e:	2340      	movs	r3, #64	; 0x40
 8009050:	eba0 000a 	sub.w	r0, r0, sl
 8009054:	fa03 f000 	lsl.w	r0, r3, r0
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	4303      	orrs	r3, r0
 800905c:	3401      	adds	r4, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009064:	482c      	ldr	r0, [pc, #176]	; (8009118 <_vfiprintf_r+0x250>)
 8009066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800906a:	2206      	movs	r2, #6
 800906c:	f7f7 f8b8 	bl	80001e0 <memchr>
 8009070:	2800      	cmp	r0, #0
 8009072:	d03f      	beq.n	80090f4 <_vfiprintf_r+0x22c>
 8009074:	4b29      	ldr	r3, [pc, #164]	; (800911c <_vfiprintf_r+0x254>)
 8009076:	bb1b      	cbnz	r3, 80090c0 <_vfiprintf_r+0x1f8>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	3307      	adds	r3, #7
 800907c:	f023 0307 	bic.w	r3, r3, #7
 8009080:	3308      	adds	r3, #8
 8009082:	9303      	str	r3, [sp, #12]
 8009084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009086:	443b      	add	r3, r7
 8009088:	9309      	str	r3, [sp, #36]	; 0x24
 800908a:	e767      	b.n	8008f5c <_vfiprintf_r+0x94>
 800908c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009090:	460c      	mov	r4, r1
 8009092:	2001      	movs	r0, #1
 8009094:	e7a5      	b.n	8008fe2 <_vfiprintf_r+0x11a>
 8009096:	2300      	movs	r3, #0
 8009098:	3401      	adds	r4, #1
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	4619      	mov	r1, r3
 800909e:	f04f 0c0a 	mov.w	ip, #10
 80090a2:	4620      	mov	r0, r4
 80090a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090a8:	3a30      	subs	r2, #48	; 0x30
 80090aa:	2a09      	cmp	r2, #9
 80090ac:	d903      	bls.n	80090b6 <_vfiprintf_r+0x1ee>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0c5      	beq.n	800903e <_vfiprintf_r+0x176>
 80090b2:	9105      	str	r1, [sp, #20]
 80090b4:	e7c3      	b.n	800903e <_vfiprintf_r+0x176>
 80090b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ba:	4604      	mov	r4, r0
 80090bc:	2301      	movs	r3, #1
 80090be:	e7f0      	b.n	80090a2 <_vfiprintf_r+0x1da>
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4b16      	ldr	r3, [pc, #88]	; (8009120 <_vfiprintf_r+0x258>)
 80090c8:	a904      	add	r1, sp, #16
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7fd fc8a 	bl	80069e4 <_printf_float>
 80090d0:	4607      	mov	r7, r0
 80090d2:	1c78      	adds	r0, r7, #1
 80090d4:	d1d6      	bne.n	8009084 <_vfiprintf_r+0x1bc>
 80090d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090d8:	07d9      	lsls	r1, r3, #31
 80090da:	d405      	bmi.n	80090e8 <_vfiprintf_r+0x220>
 80090dc:	89ab      	ldrh	r3, [r5, #12]
 80090de:	059a      	lsls	r2, r3, #22
 80090e0:	d402      	bmi.n	80090e8 <_vfiprintf_r+0x220>
 80090e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e4:	f7ff f9d0 	bl	8008488 <__retarget_lock_release_recursive>
 80090e8:	89ab      	ldrh	r3, [r5, #12]
 80090ea:	065b      	lsls	r3, r3, #25
 80090ec:	f53f af12 	bmi.w	8008f14 <_vfiprintf_r+0x4c>
 80090f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f2:	e711      	b.n	8008f18 <_vfiprintf_r+0x50>
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4b09      	ldr	r3, [pc, #36]	; (8009120 <_vfiprintf_r+0x258>)
 80090fc:	a904      	add	r1, sp, #16
 80090fe:	4630      	mov	r0, r6
 8009100:	f7fd ff14 	bl	8006f2c <_printf_i>
 8009104:	e7e4      	b.n	80090d0 <_vfiprintf_r+0x208>
 8009106:	bf00      	nop
 8009108:	08009700 	.word	0x08009700
 800910c:	08009720 	.word	0x08009720
 8009110:	080096e0 	.word	0x080096e0
 8009114:	0800989c 	.word	0x0800989c
 8009118:	080098a6 	.word	0x080098a6
 800911c:	080069e5 	.word	0x080069e5
 8009120:	08008ea3 	.word	0x08008ea3
 8009124:	080098a2 	.word	0x080098a2

08009128 <_sbrk_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d06      	ldr	r5, [pc, #24]	; (8009144 <_sbrk_r+0x1c>)
 800912c:	2300      	movs	r3, #0
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	f7f9 fe70 	bl	8002e18 <_sbrk>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d102      	bne.n	8009142 <_sbrk_r+0x1a>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	b103      	cbz	r3, 8009142 <_sbrk_r+0x1a>
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	bd38      	pop	{r3, r4, r5, pc}
 8009144:	2000033c 	.word	0x2000033c

08009148 <__sread>:
 8009148:	b510      	push	{r4, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	f000 f8e2 	bl	8009318 <_read_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	bfab      	itete	ge
 8009158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800915a:	89a3      	ldrhlt	r3, [r4, #12]
 800915c:	181b      	addge	r3, r3, r0
 800915e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009162:	bfac      	ite	ge
 8009164:	6563      	strge	r3, [r4, #84]	; 0x54
 8009166:	81a3      	strhlt	r3, [r4, #12]
 8009168:	bd10      	pop	{r4, pc}

0800916a <__swrite>:
 800916a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	461f      	mov	r7, r3
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	05db      	lsls	r3, r3, #23
 8009174:	4605      	mov	r5, r0
 8009176:	460c      	mov	r4, r1
 8009178:	4616      	mov	r6, r2
 800917a:	d505      	bpl.n	8009188 <__swrite+0x1e>
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	2302      	movs	r3, #2
 8009182:	2200      	movs	r2, #0
 8009184:	f000 f898 	bl	80092b8 <_lseek_r>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	4632      	mov	r2, r6
 8009196:	463b      	mov	r3, r7
 8009198:	4628      	mov	r0, r5
 800919a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	f000 b817 	b.w	80091d0 <_write_r>

080091a2 <__sseek>:
 80091a2:	b510      	push	{r4, lr}
 80091a4:	460c      	mov	r4, r1
 80091a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091aa:	f000 f885 	bl	80092b8 <_lseek_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	bf15      	itete	ne
 80091b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091be:	81a3      	strheq	r3, [r4, #12]
 80091c0:	bf18      	it	ne
 80091c2:	81a3      	strhne	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__sclose>:
 80091c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ca:	f000 b831 	b.w	8009230 <_close_r>
	...

080091d0 <_write_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d07      	ldr	r5, [pc, #28]	; (80091f0 <_write_r+0x20>)
 80091d4:	4604      	mov	r4, r0
 80091d6:	4608      	mov	r0, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	2200      	movs	r2, #0
 80091dc:	602a      	str	r2, [r5, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	f7f9 f970 	bl	80024c4 <_write>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_write_r+0x1e>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_write_r+0x1e>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	2000033c 	.word	0x2000033c

080091f4 <__assert_func>:
 80091f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091f6:	4614      	mov	r4, r2
 80091f8:	461a      	mov	r2, r3
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <__assert_func+0x2c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4605      	mov	r5, r0
 8009200:	68d8      	ldr	r0, [r3, #12]
 8009202:	b14c      	cbz	r4, 8009218 <__assert_func+0x24>
 8009204:	4b07      	ldr	r3, [pc, #28]	; (8009224 <__assert_func+0x30>)
 8009206:	9100      	str	r1, [sp, #0]
 8009208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800920c:	4906      	ldr	r1, [pc, #24]	; (8009228 <__assert_func+0x34>)
 800920e:	462b      	mov	r3, r5
 8009210:	f000 f81e 	bl	8009250 <fiprintf>
 8009214:	f000 f89f 	bl	8009356 <abort>
 8009218:	4b04      	ldr	r3, [pc, #16]	; (800922c <__assert_func+0x38>)
 800921a:	461c      	mov	r4, r3
 800921c:	e7f3      	b.n	8009206 <__assert_func+0x12>
 800921e:	bf00      	nop
 8009220:	2000000c 	.word	0x2000000c
 8009224:	080098ad 	.word	0x080098ad
 8009228:	080098ba 	.word	0x080098ba
 800922c:	080098e8 	.word	0x080098e8

08009230 <_close_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d06      	ldr	r5, [pc, #24]	; (800924c <_close_r+0x1c>)
 8009234:	2300      	movs	r3, #0
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	f7f9 fdb7 	bl	8002dae <_close>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_close_r+0x1a>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_close_r+0x1a>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	2000033c 	.word	0x2000033c

08009250 <fiprintf>:
 8009250:	b40e      	push	{r1, r2, r3}
 8009252:	b503      	push	{r0, r1, lr}
 8009254:	4601      	mov	r1, r0
 8009256:	ab03      	add	r3, sp, #12
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <fiprintf+0x20>)
 800925a:	f853 2b04 	ldr.w	r2, [r3], #4
 800925e:	6800      	ldr	r0, [r0, #0]
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	f7ff fe31 	bl	8008ec8 <_vfiprintf_r>
 8009266:	b002      	add	sp, #8
 8009268:	f85d eb04 	ldr.w	lr, [sp], #4
 800926c:	b003      	add	sp, #12
 800926e:	4770      	bx	lr
 8009270:	2000000c 	.word	0x2000000c

08009274 <_fstat_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	; (8009294 <_fstat_r+0x20>)
 8009278:	2300      	movs	r3, #0
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	f7f9 fda0 	bl	8002dc6 <_fstat>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d102      	bne.n	8009290 <_fstat_r+0x1c>
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	b103      	cbz	r3, 8009290 <_fstat_r+0x1c>
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	bd38      	pop	{r3, r4, r5, pc}
 8009292:	bf00      	nop
 8009294:	2000033c 	.word	0x2000033c

08009298 <_isatty_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_isatty_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f9 fd9f 	bl	8002de6 <_isatty>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_isatty_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_isatty_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	2000033c 	.word	0x2000033c

080092b8 <_lseek_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d07      	ldr	r5, [pc, #28]	; (80092d8 <_lseek_r+0x20>)
 80092bc:	4604      	mov	r4, r0
 80092be:	4608      	mov	r0, r1
 80092c0:	4611      	mov	r1, r2
 80092c2:	2200      	movs	r2, #0
 80092c4:	602a      	str	r2, [r5, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	f7f9 fd98 	bl	8002dfc <_lseek>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_lseek_r+0x1e>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_lseek_r+0x1e>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	2000033c 	.word	0x2000033c

080092dc <__ascii_mbtowc>:
 80092dc:	b082      	sub	sp, #8
 80092de:	b901      	cbnz	r1, 80092e2 <__ascii_mbtowc+0x6>
 80092e0:	a901      	add	r1, sp, #4
 80092e2:	b142      	cbz	r2, 80092f6 <__ascii_mbtowc+0x1a>
 80092e4:	b14b      	cbz	r3, 80092fa <__ascii_mbtowc+0x1e>
 80092e6:	7813      	ldrb	r3, [r2, #0]
 80092e8:	600b      	str	r3, [r1, #0]
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	1e10      	subs	r0, r2, #0
 80092ee:	bf18      	it	ne
 80092f0:	2001      	movne	r0, #1
 80092f2:	b002      	add	sp, #8
 80092f4:	4770      	bx	lr
 80092f6:	4610      	mov	r0, r2
 80092f8:	e7fb      	b.n	80092f2 <__ascii_mbtowc+0x16>
 80092fa:	f06f 0001 	mvn.w	r0, #1
 80092fe:	e7f8      	b.n	80092f2 <__ascii_mbtowc+0x16>

08009300 <__malloc_lock>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__malloc_lock+0x8>)
 8009302:	f7ff b8c0 	b.w	8008486 <__retarget_lock_acquire_recursive>
 8009306:	bf00      	nop
 8009308:	20000330 	.word	0x20000330

0800930c <__malloc_unlock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_unlock+0x8>)
 800930e:	f7ff b8bb 	b.w	8008488 <__retarget_lock_release_recursive>
 8009312:	bf00      	nop
 8009314:	20000330 	.word	0x20000330

08009318 <_read_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	; (8009338 <_read_r+0x20>)
 800931c:	4604      	mov	r4, r0
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	2200      	movs	r2, #0
 8009324:	602a      	str	r2, [r5, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	f7f9 fd24 	bl	8002d74 <_read>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_read_r+0x1e>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_read_r+0x1e>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	2000033c 	.word	0x2000033c

0800933c <__ascii_wctomb>:
 800933c:	b149      	cbz	r1, 8009352 <__ascii_wctomb+0x16>
 800933e:	2aff      	cmp	r2, #255	; 0xff
 8009340:	bf85      	ittet	hi
 8009342:	238a      	movhi	r3, #138	; 0x8a
 8009344:	6003      	strhi	r3, [r0, #0]
 8009346:	700a      	strbls	r2, [r1, #0]
 8009348:	f04f 30ff 	movhi.w	r0, #4294967295
 800934c:	bf98      	it	ls
 800934e:	2001      	movls	r0, #1
 8009350:	4770      	bx	lr
 8009352:	4608      	mov	r0, r1
 8009354:	4770      	bx	lr

08009356 <abort>:
 8009356:	b508      	push	{r3, lr}
 8009358:	2006      	movs	r0, #6
 800935a:	f000 f82b 	bl	80093b4 <raise>
 800935e:	2001      	movs	r0, #1
 8009360:	f7f9 fcfe 	bl	8002d60 <_exit>

08009364 <_raise_r>:
 8009364:	291f      	cmp	r1, #31
 8009366:	b538      	push	{r3, r4, r5, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	460d      	mov	r5, r1
 800936c:	d904      	bls.n	8009378 <_raise_r+0x14>
 800936e:	2316      	movs	r3, #22
 8009370:	6003      	str	r3, [r0, #0]
 8009372:	f04f 30ff 	mov.w	r0, #4294967295
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800937a:	b112      	cbz	r2, 8009382 <_raise_r+0x1e>
 800937c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009380:	b94b      	cbnz	r3, 8009396 <_raise_r+0x32>
 8009382:	4620      	mov	r0, r4
 8009384:	f000 f830 	bl	80093e8 <_getpid_r>
 8009388:	462a      	mov	r2, r5
 800938a:	4601      	mov	r1, r0
 800938c:	4620      	mov	r0, r4
 800938e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009392:	f000 b817 	b.w	80093c4 <_kill_r>
 8009396:	2b01      	cmp	r3, #1
 8009398:	d00a      	beq.n	80093b0 <_raise_r+0x4c>
 800939a:	1c59      	adds	r1, r3, #1
 800939c:	d103      	bne.n	80093a6 <_raise_r+0x42>
 800939e:	2316      	movs	r3, #22
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	2001      	movs	r0, #1
 80093a4:	e7e7      	b.n	8009376 <_raise_r+0x12>
 80093a6:	2400      	movs	r4, #0
 80093a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093ac:	4628      	mov	r0, r5
 80093ae:	4798      	blx	r3
 80093b0:	2000      	movs	r0, #0
 80093b2:	e7e0      	b.n	8009376 <_raise_r+0x12>

080093b4 <raise>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <raise+0xc>)
 80093b6:	4601      	mov	r1, r0
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f7ff bfd3 	b.w	8009364 <_raise_r>
 80093be:	bf00      	nop
 80093c0:	2000000c 	.word	0x2000000c

080093c4 <_kill_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d07      	ldr	r5, [pc, #28]	; (80093e4 <_kill_r+0x20>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	f7f9 fcb5 	bl	8002d40 <_kill>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d102      	bne.n	80093e0 <_kill_r+0x1c>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	b103      	cbz	r3, 80093e0 <_kill_r+0x1c>
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	bf00      	nop
 80093e4:	2000033c 	.word	0x2000033c

080093e8 <_getpid_r>:
 80093e8:	f7f9 bca2 	b.w	8002d30 <_getpid>

080093ec <_init>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	bf00      	nop
 80093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f2:	bc08      	pop	{r3}
 80093f4:	469e      	mov	lr, r3
 80093f6:	4770      	bx	lr

080093f8 <_fini>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	bf00      	nop
 80093fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fe:	bc08      	pop	{r3}
 8009400:	469e      	mov	lr, r3
 8009402:	4770      	bx	lr
