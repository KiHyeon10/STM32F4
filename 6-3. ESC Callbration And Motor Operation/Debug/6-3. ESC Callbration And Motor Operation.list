
6-3. ESC Callbration And Motor Operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000817c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08008310  08008310  00018310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088dc  080088dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e4  080088e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080088ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000128  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0ef  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff1  00000000  00000000  0002e2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  000312f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db8  00000000  00000000  00032208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243d6  00000000  00000000  00032fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f124  00000000  00000000  00057396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca5ac  00000000  00000000  000664ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130a66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d00  00000000  00000000  00130ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082f4 	.word	0x080082f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080082f4 	.word	0x080082f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f023 0210 	bic.w	r2, r3, #16
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d101      	bne.n	8000f70 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	330c      	adds	r3, #12
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2301      	moveq	r3, #1
 8000fd8:	2300      	movne	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	619a      	str	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800102e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40023800 	.word	0x40023800

08001054 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <LL_APB1_GRP1_EnableClock+0x2c>)
 800105e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <LL_APB1_GRP1_EnableClock+0x2c>)
 800106a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4013      	ands	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40023800 	.word	0x40023800

08001084 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	; 0x40
 8001088:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fb84 	bl	80057a0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80010a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010ac:	f7ff ffd2 	bl	8001054 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ffb7 	bl	8001024 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010b6:	2004      	movs	r0, #4
 80010b8:	f7ff ffb4 	bl	8001024 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff ffb1 	bl	8001024 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80010c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010c8:	2302      	movs	r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80010d8:	2305      	movs	r3, #5
 80010da:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4841      	ldr	r0, [pc, #260]	; (80011e8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010e2:	f003 fb38 	bl	8004756 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010ea:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010ee:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010f4:	2302      	movs	r3, #2
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001102:	2318      	movs	r3, #24
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800110e:	230a      	movs	r3, #10
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	4619      	mov	r1, r3
 8001118:	4834      	ldr	r0, [pc, #208]	; (80011ec <BNO080_GPIO_SPI_Initialization+0x168>)
 800111a:	f003 fcec 	bl	8004af6 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800111e:	2100      	movs	r1, #0
 8001120:	4832      	ldr	r0, [pc, #200]	; (80011ec <BNO080_GPIO_SPI_Initialization+0x168>)
 8001122:	f7ff fef3 	bl	8000f0c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4831      	ldr	r0, [pc, #196]	; (80011f0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800112c:	f7ff ff6a 	bl	8001004 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001130:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001136:	f7ff ff65 	bl	8001004 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113e:	482d      	ldr	r0, [pc, #180]	; (80011f4 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001140:	f7ff ff60 	bl	8001004 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4822      	ldr	r0, [pc, #136]	; (80011e8 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001160:	f003 faf9 	bl	8004756 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	481c      	ldr	r0, [pc, #112]	; (80011f0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001180:	f003 fae9 	bl	8004756 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001188:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800118a:	2301      	movs	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <BNO080_GPIO_SPI_Initialization+0x170>)
 80011a0:	f003 fad9 	bl	8004756 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80011a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011b8:	f003 facd 	bl	8004756 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <BNO080_GPIO_SPI_Initialization+0x168>)
 80011be:	f7ff fe95 	bl	8000eec <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80011c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011c8:	f7ff ff0e 	bl	8000fe8 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <BNO080_GPIO_SPI_Initialization+0x170>)
 80011d2:	f7ff ff09 	bl	8000fe8 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011dc:	f7ff ff04 	bl	8000fe8 <LL_GPIO_SetOutputPin>
}
 80011e0:	bf00      	nop
 80011e2:	3740      	adds	r7, #64	; 0x40
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40003800 	.word	0x40003800
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020000 	.word	0x40020000

080011f8 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011fe:	f7ff ff41 	bl	8001084 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8001202:	482e      	ldr	r0, [pc, #184]	; (80012bc <BNO080_Initialization+0xc4>)
 8001204:	f004 ff3e 	bl	8006084 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120c:	482c      	ldr	r0, [pc, #176]	; (80012c0 <BNO080_Initialization+0xc8>)
 800120e:	f7ff feeb 	bl	8000fe8 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	482b      	ldr	r0, [pc, #172]	; (80012c4 <BNO080_Initialization+0xcc>)
 8001218:	f7ff fee6 	bl	8000fe8 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <BNO080_Initialization+0xd0>)
 8001222:	f7ff feef 	bl	8001004 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001226:	20c8      	movs	r0, #200	; 0xc8
 8001228:	f002 fc22 	bl	8003a70 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4825      	ldr	r0, [pc, #148]	; (80012c8 <BNO080_Initialization+0xd0>)
 8001232:	f7ff fed9 	bl	8000fe8 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001236:	f000 f8d7 	bl	80013e8 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800123a:	f000 f8d5 	bl	80013e8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800123e:	f000 f8f7 	bl	8001430 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001242:	f000 f8d1 	bl	80013e8 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001246:	f000 f8f3 	bl	8001430 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <BNO080_Initialization+0xd4>)
 800124c:	22f9      	movs	r2, #249	; 0xf9
 800124e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <BNO080_Initialization+0xd4>)
 8001252:	2200      	movs	r2, #0
 8001254:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001256:	2102      	movs	r1, #2
 8001258:	2002      	movs	r0, #2
 800125a:	f000 f959 	bl	8001510 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800125e:	f000 f8c3 	bl	80013e8 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001262:	f000 f8e5 	bl	8001430 <BNO080_receivePacket>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d11b      	bne.n	80012a4 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <BNO080_Initialization+0xd8>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <BNO080_Initialization+0xd8>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	461a      	mov	r2, r3
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <BNO080_Initialization+0xd8>)
 800127a:	789b      	ldrb	r3, [r3, #2]
 800127c:	4618      	mov	r0, r3
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <BNO080_Initialization+0xd8>)
 8001280:	78db      	ldrb	r3, [r3, #3]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4603      	mov	r3, r0
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <BNO080_Initialization+0xdc>)
 8001288:	f004 fefc 	bl	8006084 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <BNO080_Initialization+0xd4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2bf8      	cmp	r3, #248	; 0xf8
 8001292:	d107      	bne.n	80012a4 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <BNO080_Initialization+0xd4>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <BNO080_Initialization+0xe0>)
 800129c:	f004 fef2 	bl	8006084 <iprintf>
			return (0);
 80012a0:	2300      	movs	r3, #0
 80012a2:	e007      	b.n	80012b4 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <BNO080_Initialization+0xd4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	22f8      	movs	r2, #248	; 0xf8
 80012aa:	4619      	mov	r1, r3
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <BNO080_Initialization+0xe4>)
 80012ae:	f004 fee9 	bl	8006084 <iprintf>
	return (1); //Something went wrong
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	08008310 	.word	0x08008310
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020800 	.word	0x40020800
 80012cc:	200001fc 	.word	0x200001fc
 80012d0:	200001f8 	.word	0x200001f8
 80012d4:	08008324 	.word	0x08008324
 80012d8:	0800833c 	.word	0x0800833c
 80012dc:	0800835c 	.word	0x0800835c

080012e0 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012ea:	bf00      	nop
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <SPI2_SendByte+0x40>)
 80012ee:	f7ff fe33 	bl	8000f58 <LL_SPI_IsActiveFlag_TXE>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f9      	beq.n	80012ec <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <SPI2_SendByte+0x40>)
 80012fe:	f7ff fe4c 	bl	8000f9a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8001302:	bf00      	nop
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <SPI2_SendByte+0x40>)
 8001306:	f7ff fe14 	bl	8000f32 <LL_SPI_IsActiveFlag_RXNE>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f9      	beq.n	8001304 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <SPI2_SendByte+0x40>)
 8001312:	f7ff fe34 	bl	8000f7e <LL_SPI_ReceiveData8>
 8001316:	4603      	mov	r3, r0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40003800 	.word	0x40003800

08001324 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	2005      	movs	r0, #5
 8001336:	f000 f805 	bl	8001344 <BNO080_setFeatureCommand>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 8001354:	22fd      	movs	r2, #253	; 0xfd
 8001356:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001358:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 8001376:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 8001380:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 800138a:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0e1b      	lsrs	r3, r3, #24
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 8001394:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 8001398:	2200      	movs	r2, #0
 800139a:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 80013b4:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 80013be:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	0c1b      	lsrs	r3, r3, #16
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 80013c8:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	0e1b      	lsrs	r3, r3, #24
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <BNO080_setFeatureCommand+0xa0>)
 80013d2:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 80013d4:	2111      	movs	r1, #17
 80013d6:	2002      	movs	r0, #2
 80013d8:	f000 f89a 	bl	8001510 <BNO080_sendPacket>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001fc 	.word	0x200001fc

080013e8 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	e00c      	b.n	800140e <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <BNO080_waitForSPI+0x40>)
 80013fa:	f7ff fde0 	bl	8000fbe <LL_GPIO_IsInputPinSet>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001404:	2301      	movs	r3, #1
 8001406:	e00a      	b.n	800141e <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d1ee      	bne.n	80013f4 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <BNO080_waitForSPI+0x44>)
 8001418:	f004 feba 	bl	8006190 <puts>
	return (0);
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020800 	.word	0x40020800
 800142c:	080083a8 	.word	0x080083a8

08001430 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	4831      	ldr	r0, [pc, #196]	; (8001500 <BNO080_receivePacket+0xd0>)
 800143c:	f7ff fdbf 	bl	8000fbe <LL_GPIO_IsInputPinSet>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001446:	2300      	movs	r3, #0
 8001448:	e056      	b.n	80014f8 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800144a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144e:	482d      	ldr	r0, [pc, #180]	; (8001504 <BNO080_receivePacket+0xd4>)
 8001450:	f7ff fdd8 	bl	8001004 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff ff43 	bl	80012e0 <SPI2_SendByte>
 800145a:	4603      	mov	r3, r0
 800145c:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff ff3e 	bl	80012e0 <SPI2_SendByte>
 8001464:	4603      	mov	r3, r0
 8001466:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ff39 	bl	80012e0 <SPI2_SendByte>
 800146e:	4603      	mov	r3, r0
 8001470:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ff34 	bl	80012e0 <SPI2_SendByte>
 8001478:	4603      	mov	r3, r0
 800147a:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <BNO080_receivePacket+0xd8>)
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001482:	4a21      	ldr	r2, [pc, #132]	; (8001508 <BNO080_receivePacket+0xd8>)
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001488:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <BNO080_receivePacket+0xd8>)
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800148e:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <BNO080_receivePacket+0xd8>)
 8001490:	7abb      	ldrb	r3, [r7, #10]
 8001492:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7b7b      	ldrb	r3, [r7, #13]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80014a2:	893b      	ldrh	r3, [r7, #8]
 80014a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014a8:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80014aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 80014b2:	2300      	movs	r3, #0
 80014b4:	e020      	b.n	80014f8 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80014b6:	893b      	ldrh	r3, [r7, #8]
 80014b8:	3b04      	subs	r3, #4
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80014be:	2300      	movs	r3, #0
 80014c0:	81fb      	strh	r3, [r7, #14]
 80014c2:	e00e      	b.n	80014e2 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 80014c4:	20ff      	movs	r0, #255	; 0xff
 80014c6:	f7ff ff0b 	bl	80012e0 <SPI2_SendByte>
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	2b7f      	cmp	r3, #127	; 0x7f
 80014d2:	d803      	bhi.n	80014dc <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	490d      	ldr	r1, [pc, #52]	; (800150c <BNO080_receivePacket+0xdc>)
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	3301      	adds	r3, #1
 80014e0:	81fb      	strh	r3, [r7, #14]
 80014e2:	89fa      	ldrh	r2, [r7, #14]
 80014e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbeb      	blt.n	80014c4 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <BNO080_receivePacket+0xd4>)
 80014f2:	f7ff fd79 	bl	8000fe8 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40020800 	.word	0x40020800
 8001504:	40020400 	.word	0x40020400
 8001508:	200001f8 	.word	0x200001f8
 800150c:	200001fc 	.word	0x200001fc

08001510 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	3304      	adds	r3, #4
 8001524:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001526:	f7ff ff5f 	bl	80013e8 <BNO080_waitForSPI>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001530:	2300      	movs	r3, #0
 8001532:	e032      	b.n	800159a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001538:	481a      	ldr	r0, [pc, #104]	; (80015a4 <BNO080_sendPacket+0x94>)
 800153a:	f7ff fd63 	bl	8001004 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fecd 	bl	80012e0 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	121b      	asrs	r3, r3, #8
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fec7 	bl	80012e0 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fec3 	bl	80012e0 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <BNO080_sendPacket+0x98>)
 800155e:	5cd2      	ldrb	r2, [r2, r3]
 8001560:	1c51      	adds	r1, r2, #1
 8001562:	b2c8      	uxtb	r0, r1
 8001564:	4910      	ldr	r1, [pc, #64]	; (80015a8 <BNO080_sendPacket+0x98>)
 8001566:	54c8      	strb	r0, [r1, r3]
 8001568:	4610      	mov	r0, r2
 800156a:	f7ff feb9 	bl	80012e0 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e008      	b.n	8001586 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <BNO080_sendPacket+0x9c>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff feb0 	bl	80012e0 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	3301      	adds	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3f2      	bcc.n	8001574 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800158e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <BNO080_sendPacket+0x94>)
 8001594:	f7ff fd28 	bl	8000fe8 <LL_GPIO_SetOutputPin>

	return (1);
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020400 	.word	0x40020400
 80015a8:	2000027c 	.word	0x2000027c
 80015ac:	200001fc 	.word	0x200001fc

080015b0 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 80015bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c0:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	e00a      	b.n	80015de <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	89fa      	ldrh	r2, [r7, #14]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	3b02      	subs	r3, #2
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbef      	blt.n	80015c8 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	321e      	adds	r2, #30
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d10a      	bne.n	800160c <iBus_Check_CHKSUM+0x5c>
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	331f      	adds	r3, #31
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	429a      	cmp	r2, r3
 8001606:	d101      	bne.n	800160c <iBus_Check_CHKSUM+0x5c>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <iBus_Check_CHKSUM+0x5e>
 800160c:	2300      	movs	r3, #0
 800160e:	b2db      	uxtb	r3, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3302      	adds	r3, #2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b21a      	sxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3303      	adds	r3, #3
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	b29a      	uxth	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b21a      	sxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3305      	adds	r3, #5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	b29b      	uxth	r3, r3
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	b29a      	uxth	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3306      	adds	r3, #6
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b21a      	sxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3307      	adds	r3, #7
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21b      	sxth	r3, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001686:	b29a      	uxth	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3308      	adds	r3, #8
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b21a      	sxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3309      	adds	r3, #9
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	330a      	adds	r3, #10
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	330b      	adds	r3, #11
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	330c      	adds	r3, #12
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	330d      	adds	r3, #13
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	819a      	strh	r2, [r3, #12]

	//CH6의 값이 변하지 않아서 failsafe 발생 X -> CH5로 대체하여 failsafe 진행
	iBus->FailSafe = (data[11] >> 4);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	330b      	adds	r3, #11
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	751a      	strb	r2, [r3, #20]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <iBus_isActive_Failsafe>:

unsigned char iBus_isActive_Failsafe(FSiA6B_iBus* iBus) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7d1b      	ldrb	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2db      	uxtb	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_SPI_Enable>:
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_SPI_SetStandard>:
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f023 0210 	bic.w	r2, r3, #16
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	605a      	str	r2, [r3, #4]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_SPI_IsActiveFlag_TXE>:
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d101      	bne.n	80017b2 <LL_SPI_IsActiveFlag_TXE+0x18>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_SPI_ReceiveData8>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	330c      	adds	r3, #12
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_SPI_TransmitData8>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	330c      	adds	r3, #12
 80017ec:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	701a      	strb	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_GPIO_SetOutputPin>:
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	619a      	str	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_GPIO_ResetOutputPin>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	619a      	str	r2, [r3, #24]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <LL_AHB1_GRP1_EnableClock>:
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4313      	orrs	r3, r2
 800184e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4013      	ands	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40023800 	.word	0x40023800

0800186c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <LL_APB2_GRP1_EnableClock+0x2c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4313      	orrs	r3, r2
 800187e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40023800 	.word	0x40023800

0800189c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b090      	sub	sp, #64	; 0x40
 80018a0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80018a2:	f107 0318 	add.w	r3, r7, #24
 80018a6:	2228      	movs	r2, #40	; 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 ff78 	bl	80057a0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80018c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018c4:	f7ff ffd2 	bl	800186c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7ff ffb7 	bl	800183c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80018ce:	2004      	movs	r0, #4
 80018d0:	f7ff ffb4 	bl	800183c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80018d4:	23e0      	movs	r3, #224	; 0xe0
 80018d6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018d8:	2302      	movs	r3, #2
 80018da:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80018e8:	2305      	movs	r3, #5
 80018ea:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	463b      	mov	r3, r7
 80018ee:	4619      	mov	r1, r3
 80018f0:	4825      	ldr	r0, [pc, #148]	; (8001988 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80018f2:	f002 ff30 	bl	8004756 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80018fa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80018fe:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001904:	2302      	movs	r3, #2
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001908:	2301      	movs	r3, #1
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800190c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001912:	2310      	movs	r3, #16
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800191e:	230a      	movs	r3, #10
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001922:	f107 0318 	add.w	r3, r7, #24
 8001926:	4619      	mov	r1, r3
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800192a:	f003 f8e4 	bl	8004af6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800192e:	2100      	movs	r1, #0
 8001930:	4816      	ldr	r0, [pc, #88]	; (800198c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001932:	f7ff ff0c 	bl	800174e <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001936:	2110      	movs	r1, #16
 8001938:	4815      	ldr	r0, [pc, #84]	; (8001990 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800193a:	f7ff ff6f 	bl	800181c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800193e:	2310      	movs	r3, #16
 8001940:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001942:	2301      	movs	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001958:	f002 fefd 	bl	8004756 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800195c:	2320      	movs	r3, #32
 800195e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001964:	2301      	movs	r3, #1
 8001966:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800196e:	f002 fef2 	bl	8004756 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001974:	f7ff fedb 	bl	800172e <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001978:	2110      	movs	r1, #16
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800197c:	f7ff ff40 	bl	8001800 <LL_GPIO_SetOutputPin>
}
 8001980:	bf00      	nop
 8001982:	3740      	adds	r7, #64	; 0x40
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40020000 	.word	0x40020000
 800198c:	40013000 	.word	0x40013000
 8001990:	40020800 	.word	0x40020800

08001994 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800199e:	bf00      	nop
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <SPI1_SendByte+0x40>)
 80019a2:	f7ff fefa 	bl	800179a <LL_SPI_IsActiveFlag_TXE>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f9      	beq.n	80019a0 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <SPI1_SendByte+0x40>)
 80019b2:	f7ff ff13 	bl	80017dc <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80019b6:	bf00      	nop
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <SPI1_SendByte+0x40>)
 80019ba:	f7ff fedb 	bl	8001774 <LL_SPI_IsActiveFlag_RXNE>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f9      	beq.n	80019b8 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <SPI1_SendByte+0x40>)
 80019c6:	f7ff fefb 	bl	80017c0 <LL_SPI_ReceiveData8>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013000 	.word	0x40013000

080019d8 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80019e2:	2110      	movs	r1, #16
 80019e4:	480b      	ldr	r0, [pc, #44]	; (8001a14 <ICM20602_Readbyte+0x3c>)
 80019e6:	f7ff ff19 	bl	800181c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffce 	bl	8001994 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff ffcb 	bl	8001994 <SPI1_SendByte>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001a02:	2110      	movs	r1, #16
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <ICM20602_Readbyte+0x3c>)
 8001a06:	f7ff fefb 	bl	8001800 <LL_GPIO_SetOutputPin>
	
	return val;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40020800 	.word	0x40020800

08001a18 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460a      	mov	r2, r1
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	4613      	mov	r3, r2
 8001a26:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001a28:	2110      	movs	r1, #16
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <ICM20602_Writebyte+0x40>)
 8001a2c:	f7ff fef6 	bl	800181c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ffab 	bl	8001994 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ffa7 	bl	8001994 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001a46:	2110      	movs	r1, #16
 8001a48:	4803      	ldr	r0, [pc, #12]	; (8001a58 <ICM20602_Writebyte+0x40>)
 8001a4a:	f7ff fed9 	bl	8001800 <LL_GPIO_SetOutputPin>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40020800 	.word	0x40020800

08001a5c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001a78:	f7ff ff10 	bl	800189c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001a7c:	4833      	ldr	r0, [pc, #204]	; (8001b4c <ICM20602_Initialization+0xf0>)
 8001a7e:	f004 fb01 	bl	8006084 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001a82:	2075      	movs	r0, #117	; 0x75
 8001a84:	f7ff ffa8 	bl	80019d8 <ICM20602_Readbyte>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d105      	bne.n	8001a9e <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	4619      	mov	r1, r3
 8001a96:	482e      	ldr	r0, [pc, #184]	; (8001b50 <ICM20602_Initialization+0xf4>)
 8001a98:	f004 faf4 	bl	8006084 <iprintf>
 8001a9c:	e012      	b.n	8001ac4 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d00f      	beq.n	8001ac4 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001aa4:	2075      	movs	r0, #117	; 0x75
 8001aa6:	f7ff ff97 	bl	80019d8 <ICM20602_Readbyte>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d007      	beq.n	8001ac4 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	2212      	movs	r2, #18
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4826      	ldr	r0, [pc, #152]	; (8001b54 <ICM20602_Initialization+0xf8>)
 8001abc:	f004 fae2 	bl	8006084 <iprintf>
			return 1; //ERROR
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e03f      	b.n	8001b44 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	206b      	movs	r0, #107	; 0x6b
 8001ac8:	f7ff ffa6 	bl	8001a18 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f001 ffcf 	bl	8003a70 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	206b      	movs	r0, #107	; 0x6b
 8001ad6:	f7ff ff9f 	bl	8001a18 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001ada:	2032      	movs	r0, #50	; 0x32
 8001adc:	f001 ffc8 	bl	8003a70 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001ae0:	2138      	movs	r1, #56	; 0x38
 8001ae2:	206c      	movs	r0, #108	; 0x6c
 8001ae4:	f7ff ff98 	bl	8001a18 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001ae8:	2032      	movs	r0, #50	; 0x32
 8001aea:	f001 ffc1 	bl	8003a70 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001aee:	2100      	movs	r1, #0
 8001af0:	2019      	movs	r0, #25
 8001af2:	f7ff ff91 	bl	8001a18 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001af6:	2032      	movs	r0, #50	; 0x32
 8001af8:	f001 ffba 	bl	8003a70 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001afc:	2105      	movs	r1, #5
 8001afe:	201a      	movs	r0, #26
 8001b00:	f7ff ff8a 	bl	8001a18 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001b04:	2032      	movs	r0, #50	; 0x32
 8001b06:	f001 ffb3 	bl	8003a70 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001b0a:	2118      	movs	r1, #24
 8001b0c:	201b      	movs	r0, #27
 8001b0e:	f7ff ff83 	bl	8001a18 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001b12:	2032      	movs	r0, #50	; 0x32
 8001b14:	f001 ffac 	bl	8003a70 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001b18:	2118      	movs	r1, #24
 8001b1a:	201c      	movs	r0, #28
 8001b1c:	f7ff ff7c 	bl	8001a18 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001b20:	2032      	movs	r0, #50	; 0x32
 8001b22:	f001 ffa5 	bl	8003a70 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001b26:	2103      	movs	r1, #3
 8001b28:	201d      	movs	r0, #29
 8001b2a:	f7ff ff75 	bl	8001a18 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001b2e:	2032      	movs	r0, #50	; 0x32
 8001b30:	f001 ff9e 	bl	8003a70 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001b34:	2101      	movs	r1, #1
 8001b36:	2038      	movs	r0, #56	; 0x38
 8001b38:	f7ff ff6e 	bl	8001a18 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001b3c:	2032      	movs	r0, #50	; 0x32
 8001b3e:	f001 ff97 	bl	8003a70 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	080083bc 	.word	0x080083bc
 8001b50:	080083d4 	.word	0x080083d4
 8001b54:	080083f8 	.word	0x080083f8

08001b58 <LL_SPI_Enable>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	601a      	str	r2, [r3, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_SPI_SetStandard>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f023 0210 	bic.w	r2, r3, #16
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	605a      	str	r2, [r3, #4]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_SPI_IsActiveFlag_RXNE>:
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_SPI_IsActiveFlag_TXE>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d101      	bne.n	8001bdc <LL_SPI_IsActiveFlag_TXE+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_SPI_ReceiveData8>:
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_SPI_TransmitData8>:
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	330c      	adds	r3, #12
 8001c16:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	701a      	strb	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_GPIO_SetOutputPin>:
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_GPIO_ResetOutputPin>:
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	041a      	lsls	r2, r3, #16
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_AHB1_GRP1_EnableClock>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800

08001c94 <LL_APB1_GRP1_EnableClock>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b090      	sub	sp, #64	; 0x40
 8001cc8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001cca:	f107 0318 	add.w	r3, r7, #24
 8001cce:	2228      	movs	r2, #40	; 0x28
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fd64 	bl	80057a0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	463b      	mov	r3, r7
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001ce8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cec:	f7ff ffd2 	bl	8001c94 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff ffb7 	bl	8001c64 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001cf6:	2338      	movs	r3, #56	; 0x38
 8001cf8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4619      	mov	r1, r3
 8001d12:	4826      	ldr	r0, [pc, #152]	; (8001dac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d14:	f002 fd1f 	bl	8004756 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001d1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d20:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001d26:	2302      	movs	r3, #2
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001d34:	2308      	movs	r3, #8
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001d40:	230a      	movs	r3, #10
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4819      	ldr	r0, [pc, #100]	; (8001db0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d4c:	f002 fed3 	bl	8004af6 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001d50:	2100      	movs	r1, #0
 8001d52:	4817      	ldr	r0, [pc, #92]	; (8001db0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d54:	f7ff ff10 	bl	8001b78 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001d58:	2140      	movs	r1, #64	; 0x40
 8001d5a:	4814      	ldr	r0, [pc, #80]	; (8001dac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d5c:	f7ff ff73 	bl	8001c46 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d64:	2301      	movs	r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d7a:	f002 fcec 	bl	8004756 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d90:	f002 fce1 	bl	8004756 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001d94:	4806      	ldr	r0, [pc, #24]	; (8001db0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d96:	f7ff fedf 	bl	8001b58 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d9e:	f7ff ff44 	bl	8001c2a <LL_GPIO_SetOutputPin>
}
 8001da2:	bf00      	nop
 8001da4:	3740      	adds	r7, #64	; 0x40
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40003c00 	.word	0x40003c00

08001db4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001dbe:	bf00      	nop
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <SPI3_SendByte+0x40>)
 8001dc2:	f7ff feff 	bl	8001bc4 <LL_SPI_IsActiveFlag_TXE>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f9      	beq.n	8001dc0 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4808      	ldr	r0, [pc, #32]	; (8001df4 <SPI3_SendByte+0x40>)
 8001dd2:	f7ff ff18 	bl	8001c06 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001dd6:	bf00      	nop
 8001dd8:	4806      	ldr	r0, [pc, #24]	; (8001df4 <SPI3_SendByte+0x40>)
 8001dda:	f7ff fee0 	bl	8001b9e <LL_SPI_IsActiveFlag_RXNE>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f9      	beq.n	8001dd8 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <SPI3_SendByte+0x40>)
 8001de6:	f7ff ff00 	bl	8001bea <LL_SPI_ReceiveData8>
 8001dea:	4603      	mov	r3, r0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40003c00 	.word	0x40003c00

08001df8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <LPS22HH_Readbyte+0x3c>)
 8001e06:	f7ff ff1e 	bl	8001c46 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ffce 	bl	8001db4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff ffcb 	bl	8001db4 <SPI3_SendByte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <LPS22HH_Readbyte+0x3c>)
 8001e26:	f7ff ff00 	bl	8001c2a <LL_GPIO_SetOutputPin>
	
	return val;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40020400 	.word	0x40020400

08001e38 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	480b      	ldr	r0, [pc, #44]	; (8001e78 <LPS22HH_Writebyte+0x40>)
 8001e4c:	f7ff fefb 	bl	8001c46 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ffab 	bl	8001db4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001e5e:	79bb      	ldrb	r3, [r7, #6]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ffa7 	bl	8001db4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001e66:	2140      	movs	r1, #64	; 0x40
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <LPS22HH_Writebyte+0x40>)
 8001e6a:	f7ff fede 	bl	8001c2a <LL_GPIO_SetOutputPin>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020400 	.word	0x40020400

08001e7c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001e86:	f7ff ff1d 	bl	8001cc4 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001e8a:	4841      	ldr	r0, [pc, #260]	; (8001f90 <LPS22HH_Initialization+0x114>)
 8001e8c:	f004 f8fa 	bl	8006084 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001e90:	200f      	movs	r0, #15
 8001e92:	f7ff ffb1 	bl	8001df8 <LPS22HH_Readbyte>
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2bb3      	cmp	r3, #179	; 0xb3
 8001e9e:	d105      	bne.n	8001eac <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	483b      	ldr	r0, [pc, #236]	; (8001f94 <LPS22HH_Initialization+0x118>)
 8001ea6:	f004 f8ed 	bl	8006084 <iprintf>
 8001eaa:	e012      	b.n	8001ed2 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2bb3      	cmp	r3, #179	; 0xb3
 8001eb0:	d00f      	beq.n	8001ed2 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f7ff ffa0 	bl	8001df8 <LPS22HH_Readbyte>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2bb3      	cmp	r3, #179	; 0xb3
 8001ec0:	d007      	beq.n	8001ed2 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	22b3      	movs	r2, #179	; 0xb3
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4833      	ldr	r0, [pc, #204]	; (8001f98 <LPS22HH_Initialization+0x11c>)
 8001eca:	f004 f8db 	bl	8006084 <iprintf>
			return 1; //ERROR
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e059      	b.n	8001f86 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	2011      	movs	r0, #17
 8001ed6:	f7ff ffaf 	bl	8001e38 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001eda:	2011      	movs	r0, #17
 8001edc:	f7ff ff8c 	bl	8001df8 <LPS22HH_Readbyte>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f7      	bne.n	8001eda <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001eea:	2010      	movs	r0, #16
 8001eec:	f7ff ff84 	bl	8001df8 <LPS22HH_Readbyte>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efa:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	4619      	mov	r1, r3
 8001f00:	2010      	movs	r0, #16
 8001f02:	f7ff ff99 	bl	8001e38 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001f0a:	2010      	movs	r0, #16
 8001f0c:	f7ff ff74 	bl	8001df8 <LPS22HH_Readbyte>
 8001f10:	4603      	mov	r3, r0
 8001f12:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001f14:	2010      	movs	r0, #16
 8001f16:	f7ff ff6f 	bl	8001df8 <LPS22HH_Readbyte>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	f043 030c 	orr.w	r3, r3, #12
 8001f24:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	2010      	movs	r0, #16
 8001f2c:	f7ff ff84 	bl	8001e38 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001f30:	2010      	movs	r0, #16
 8001f32:	f7ff ff61 	bl	8001df8 <LPS22HH_Readbyte>
 8001f36:	4603      	mov	r3, r0
 8001f38:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	4619      	mov	r1, r3
 8001f46:	2010      	movs	r0, #16
 8001f48:	f7ff ff76 	bl	8001e38 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001f4c:	2011      	movs	r0, #17
 8001f4e:	f7ff ff53 	bl	8001df8 <LPS22HH_Readbyte>
 8001f52:	4603      	mov	r3, r0
 8001f54:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001f56:	79bb      	ldrb	r3, [r7, #6]
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	4619      	mov	r1, r3
 8001f62:	2011      	movs	r0, #17
 8001f64:	f7ff ff68 	bl	8001e38 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001f68:	2012      	movs	r0, #18
 8001f6a:	f7ff ff45 	bl	8001df8 <LPS22HH_Readbyte>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001f7a:	79bb      	ldrb	r3, [r7, #6]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2012      	movs	r0, #18
 8001f80:	f7ff ff5a 	bl	8001e38 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	08008424 	.word	0x08008424
 8001f94:	08008438 	.word	0x08008438
 8001f98:	0800845c 	.word	0x0800845c

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60da      	str	r2, [r3, #12]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	615a      	str	r2, [r3, #20]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b80      	cmp	r3, #128	; 0x80
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	605a      	str	r2, [r3, #4]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <LL_AHB1_GRP1_EnableClock>:
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800214a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4313      	orrs	r3, r2
 8002152:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40023800 	.word	0x40023800

08002170 <LL_APB1_GRP1_EnableClock>:
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <LL_APB1_GRP1_EnableClock+0x2c>)
 800217a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <LL_APB1_GRP1_EnableClock+0x2c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4313      	orrs	r3, r2
 8002182:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	40023800 	.word	0x40023800

080021a0 <M8N_TransmitDATA>:
	0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitDATA(unsigned char* data, unsigned char len) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < len; i++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e011      	b.n	80021d6 <M8N_TransmitDATA+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 80021b2:	bf00      	nop
 80021b4:	480c      	ldr	r0, [pc, #48]	; (80021e8 <M8N_TransmitDATA+0x48>)
 80021b6:	f7ff ffa0 	bl	80020fa <LL_USART_IsActiveFlag_TXE>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f9      	beq.n	80021b4 <M8N_TransmitDATA+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4807      	ldr	r0, [pc, #28]	; (80021e8 <M8N_TransmitDATA+0x48>)
 80021cc:	f7ff ffa8 	bl	8002120 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++) {
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3301      	adds	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbe9      	blt.n	80021b2 <M8N_TransmitDATA+0x12>
	}
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40004c00 	.word	0x40004c00

080021ec <M8N_UART4_Initialzation>:

void M8N_UART4_Initialzation(void){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */

	  /* USER CODE END UART4_Init 0 */

	  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	615a      	str	r2, [r3, #20]
 8002204:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
 8002214:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002216:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800221a:	f7ff ffa9 	bl	8002170 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800221e:	2004      	movs	r0, #4
 8002220:	f7ff ff8e 	bl	8002140 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002224:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002228:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800222a:	2302      	movs	r3, #2
 800222c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800223a:	2308      	movs	r3, #8
 800223c:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4819      	ldr	r0, [pc, #100]	; (80022a8 <M8N_UART4_Initialzation+0xbc>)
 8002244:	f002 fa87 	bl	8004756 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002248:	f7ff fea8 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 800224c:	4603      	mov	r3, r0
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fef8 	bl	8002048 <NVIC_EncodePriority>
 8002258:	4603      	mov	r3, r0
 800225a:	4619      	mov	r1, r3
 800225c:	2034      	movs	r0, #52	; 0x34
 800225e:	f7ff fec9 	bl	8001ff4 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002262:	2034      	movs	r0, #52	; 0x34
 8002264:	f7ff fea8 	bl	8001fb8 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002268:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800226c:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800227a:	230c      	movs	r3, #12
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800227e:	2300      	movs	r3, #0
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002282:	2300      	movs	r3, #0
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4619      	mov	r1, r3
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <M8N_UART4_Initialzation+0xc0>)
 800228e:	f003 f9dd 	bl	800564c <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002292:	4806      	ldr	r0, [pc, #24]	; (80022ac <M8N_UART4_Initialzation+0xc0>)
 8002294:	f7ff ff1b 	bl	80020ce <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <M8N_UART4_Initialzation+0xc0>)
 800229a:	f7ff ff08 	bl	80020ae <LL_USART_Enable>
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */
}
 800229e:	bf00      	nop
 80022a0:	3738      	adds	r7, #56	; 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40004c00 	.word	0x40004c00

080022b0 <M8N_Initialzation>:

void M8N_Initialzation(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	M8N_UART4_Initialzation();
 80022b4:	f7ff ff9a 	bl	80021ec <M8N_UART4_Initialzation>

	M8N_TransmitDATA(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80022b8:	211c      	movs	r1, #28
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <M8N_Initialzation+0x40>)
 80022bc:	f7ff ff70 	bl	80021a0 <M8N_TransmitDATA>
	HAL_Delay(100);
 80022c0:	2064      	movs	r0, #100	; 0x64
 80022c2:	f001 fbd5 	bl	8003a70 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 80022c6:	2110      	movs	r1, #16
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <M8N_Initialzation+0x44>)
 80022ca:	f7ff ff69 	bl	80021a0 <M8N_TransmitDATA>
	HAL_Delay(100);
 80022ce:	2064      	movs	r0, #100	; 0x64
 80022d0:	f001 fbce 	bl	8003a70 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80022d4:	210e      	movs	r1, #14
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <M8N_Initialzation+0x48>)
 80022d8:	f7ff ff62 	bl	80021a0 <M8N_TransmitDATA>
	HAL_Delay(100);
 80022dc:	2064      	movs	r0, #100	; 0x64
 80022de:	f001 fbc7 	bl	8003a70 <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80022e2:	2115      	movs	r1, #21
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <M8N_Initialzation+0x4c>)
 80022e6:	f7ff ff5b 	bl	80021a0 <M8N_TransmitDATA>
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	08008488 	.word	0x08008488
 80022f4:	080084a4 	.word	0x080084a4
 80022f8:	080084b4 	.word	0x080084b4
 80022fc:	080084c4 	.word	0x080084c4

08002300 <LL_GPIO_ResetOutputPin>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <LL_AHB1_GRP1_EnableClock>:
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800232a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4313      	orrs	r3, r2
 8002332:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40023800 	.word	0x40023800

08002350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002366:	2080      	movs	r0, #128	; 0x80
 8002368:	f7ff ffda 	bl	8002320 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800236c:	2004      	movs	r0, #4
 800236e:	f7ff ffd7 	bl	8002320 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff ffd4 	bl	8002320 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002378:	2002      	movs	r0, #2
 800237a:	f7ff ffd1 	bl	8002320 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800237e:	2008      	movs	r0, #8
 8002380:	f7ff ffce 	bl	8002320 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002384:	f240 2117 	movw	r1, #535	; 0x217
 8002388:	482b      	ldr	r0, [pc, #172]	; (8002438 <MX_GPIO_Init+0xe8>)
 800238a:	f7ff ffb9 	bl	8002300 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 800238e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002392:	482a      	ldr	r0, [pc, #168]	; (800243c <MX_GPIO_Init+0xec>)
 8002394:	f7ff ffb4 	bl	8002300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239c:	4828      	ldr	r0, [pc, #160]	; (8002440 <MX_GPIO_Init+0xf0>)
 800239e:	f7ff ffaf 	bl	8002300 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80023a2:	f240 2317 	movw	r3, #535	; 0x217
 80023a6:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023a8:	2301      	movs	r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	463b      	mov	r3, r7
 80023ba:	4619      	mov	r1, r3
 80023bc:	481e      	ldr	r0, [pc, #120]	; (8002438 <MX_GPIO_Init+0xe8>)
 80023be:	f002 f9ca 	bl	8004756 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80023c2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80023c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d0:	463b      	mov	r3, r7
 80023d2:	4619      	mov	r1, r3
 80023d4:	4818      	ldr	r0, [pc, #96]	; (8002438 <MX_GPIO_Init+0xe8>)
 80023d6:	f002 f9be 	bl	8004756 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80023da:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80023de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023e0:	2301      	movs	r3, #1
 80023e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	4811      	ldr	r0, [pc, #68]	; (800243c <MX_GPIO_Init+0xec>)
 80023f6:	f002 f9ae 	bl	8004756 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80023fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002400:	2301      	movs	r3, #1
 8002402:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	463b      	mov	r3, r7
 8002412:	4619      	mov	r1, r3
 8002414:	480a      	ldr	r0, [pc, #40]	; (8002440 <MX_GPIO_Init+0xf0>)
 8002416:	f002 f99e 	bl	8004756 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	463b      	mov	r3, r7
 8002428:	4619      	mov	r1, r3
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <MX_GPIO_Init+0xec>)
 800242c:	f002 f993 	bl	8004756 <LL_GPIO_Init>

}
 8002430:	bf00      	nop
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020800 	.word	0x40020800
 800243c:	40020400 	.word	0x40020400
 8002440:	40020000 	.word	0x40020000

08002444 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	601a      	str	r2, [r3, #0]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1a      	ldr	r2, [r3, #32]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	621a      	str	r2, [r3, #32]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_USART_IsActiveFlag_TXE>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_USART_EnableIT_RXNE>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330c      	adds	r3, #12
 80024dc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f043 0320 	orr.w	r3, r3, #32
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	330c      	adds	r3, #12
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	61ba      	str	r2, [r7, #24]
 80024f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6979      	ldr	r1, [r7, #20]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	613b      	str	r3, [r7, #16]
   return(result);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e7      	bne.n	80024d8 <LL_USART_EnableIT_RXNE+0x8>
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_USART_TransmitData8>:
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	605a      	str	r2, [r3, #4]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	4013      	ands	r3, r2
 800254a:	041a      	lsls	r2, r3, #16
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43d9      	mvns	r1, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	400b      	ands	r3, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <_write>:
#include "FS-iA6B.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len){
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e011      	b.n	800259e <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 800257a:	bf00      	nop
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <_write+0x48>)
 800257e:	f7ff ff94 	bl	80024aa <LL_USART_IsActiveFlag_TXE>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f9      	beq.n	800257c <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p + i));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	4807      	ldr	r0, [pc, #28]	; (80025b0 <_write+0x48>)
 8002594:	f7ff ffbf 	bl	8002516 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++){
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dbe9      	blt.n	800257a <_write+0x12>
	}
	return len;
 80025a6:	687b      	ldr	r3, [r7, #4]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40011400 	.word	0x40011400
 80025b4:	00000000 	.word	0x00000000

080025b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025be:	f001 f9e5 	bl	800398c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c2:	f000 f945 	bl	8002850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c6:	f7ff fec3 	bl	8002350 <MX_GPIO_Init>
  MX_TIM3_Init();
 80025ca:	f000 fe6f 	bl	80032ac <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80025ce:	f001 f953 	bl	8003878 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80025d2:	f000 fa7f 	bl	8002ad4 <MX_SPI2_Init>
  MX_SPI1_Init();
 80025d6:	f000 fa2b 	bl	8002a30 <MX_SPI1_Init>
  MX_SPI3_Init();
 80025da:	f000 facf 	bl	8002b7c <MX_SPI3_Init>
  MX_UART4_Init();
 80025de:	f001 f871 	bl	80036c4 <MX_UART4_Init>
  MX_UART5_Init();
 80025e2:	f001 f8d1 	bl	8003788 <MX_UART5_Init>
  MX_TIM5_Init();
 80025e6:	f000 fed3 	bl	8003390 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80025ea:	488f      	ldr	r0, [pc, #572]	; (8002828 <main+0x270>)
 80025ec:	f7ff ff2a 	bl	8002444 <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(USART6);
 80025f0:	488e      	ldr	r0, [pc, #568]	; (800282c <main+0x274>)
 80025f2:	f7ff ff6d 	bl	80024d0 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 80025f6:	488e      	ldr	r0, [pc, #568]	; (8002830 <main+0x278>)
 80025f8:	f7ff ff6a 	bl	80024d0 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);
 80025fc:	488d      	ldr	r0, [pc, #564]	; (8002834 <main+0x27c>)
 80025fe:	f7ff ff67 	bl	80024d0 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8002602:	f7fe fdf9 	bl	80011f8 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 8002606:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800260a:	f7fe fe8b 	bl	8001324 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 800260e:	f7ff fa25 	bl	8001a5c <ICM20602_Initialization>
  LPS22HH_Initialization();
 8002612:	f7ff fc33 	bl	8001e7c <LPS22HH_Initialization>
  M8N_Initialzation();
 8002616:	f7ff fe4b 	bl	80022b0 <M8N_Initialzation>

  LL_TIM_EnableCounter(TIM5);
 800261a:	4887      	ldr	r0, [pc, #540]	; (8002838 <main+0x280>)
 800261c:	f7ff ff12 	bl	8002444 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8002620:	2101      	movs	r1, #1
 8002622:	4885      	ldr	r0, [pc, #532]	; (8002838 <main+0x280>)
 8002624:	f7ff ff1e 	bl	8002464 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8002628:	2110      	movs	r1, #16
 800262a:	4883      	ldr	r0, [pc, #524]	; (8002838 <main+0x280>)
 800262c:	f7ff ff1a 	bl	8002464 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8002630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002634:	4880      	ldr	r0, [pc, #512]	; (8002838 <main+0x280>)
 8002636:	f7ff ff15 	bl	8002464 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 800263a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263e:	487e      	ldr	r0, [pc, #504]	; (8002838 <main+0x280>)
 8002640:	f7ff ff10 	bl	8002464 <LL_TIM_CC_EnableChannel>

  TIM5->CCR1 = 21000;
 8002644:	4b7c      	ldr	r3, [pc, #496]	; (8002838 <main+0x280>)
 8002646:	f245 2208 	movw	r2, #21000	; 0x5208
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM5->CCR2 = 21000;
 800264c:	4b7a      	ldr	r3, [pc, #488]	; (8002838 <main+0x280>)
 800264e:	f245 2208 	movw	r2, #21000	; 0x5208
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
  TIM5->CCR3 = 21000;
 8002654:	4b78      	ldr	r3, [pc, #480]	; (8002838 <main+0x280>)
 8002656:	f245 2208 	movw	r2, #21000	; 0x5208
 800265a:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM5->CCR4 = 21000;
 800265c:	4b76      	ldr	r3, [pc, #472]	; (8002838 <main+0x280>)
 800265e:	f245 2208 	movw	r2, #21000	; 0x5208
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(7000);
 8002664:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002668:	f001 fa02 	bl	8003a70 <HAL_Delay>

  TIM5->CCR1 = 10500;
 800266c:	4b72      	ldr	r3, [pc, #456]	; (8002838 <main+0x280>)
 800266e:	f642 1204 	movw	r2, #10500	; 0x2904
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  TIM5->CCR2 = 10500;
 8002674:	4b70      	ldr	r3, [pc, #448]	; (8002838 <main+0x280>)
 8002676:	f642 1204 	movw	r2, #10500	; 0x2904
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM5->CCR3 = 10500;
 800267c:	4b6e      	ldr	r3, [pc, #440]	; (8002838 <main+0x280>)
 800267e:	f642 1204 	movw	r2, #10500	; 0x2904
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM5->CCR4 = 10500;
 8002684:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <main+0x280>)
 8002686:	f642 1204 	movw	r2, #10500	; 0x2904
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(8000);
 800268c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002690:	f001 f9ee 	bl	8003a70 <HAL_Delay>

  while(Is_iBus_Throttle_Min() == 0);
 8002694:	bf00      	nop
 8002696:	f000 f945 	bl	8002924 <Is_iBus_Throttle_Min>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0fa      	beq.n	8002696 <main+0xde>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80026a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a4:	4860      	ldr	r0, [pc, #384]	; (8002828 <main+0x270>)
 80026a6:	f7ff fedd 	bl	8002464 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000;
 80026aa:	4b5f      	ldr	r3, [pc, #380]	; (8002828 <main+0x270>)
 80026ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80026b2:	2064      	movs	r0, #100	; 0x64
 80026b4:	f001 f9dc 	bl	8003a70 <HAL_Delay>
  TIM3->PSC = 1500;
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <main+0x270>)
 80026ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80026c0:	2064      	movs	r0, #100	; 0x64
 80026c2:	f001 f9d5 	bl	8003a70 <HAL_Delay>
  TIM3->PSC = 1000;
 80026c6:	4b58      	ldr	r3, [pc, #352]	; (8002828 <main+0x270>)
 80026c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80026ce:	2064      	movs	r0, #100	; 0x64
 80026d0:	f001 f9ce 	bl	8003a70 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80026d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026d8:	4853      	ldr	r0, [pc, #332]	; (8002828 <main+0x270>)
 80026da:	f7ff fed4 	bl	8002486 <LL_TIM_CC_DisableChannel>
			  M8N_UBX_NAV_POSLLH_Pasing(&m8n_rx_buf[0], &posllh);

			  printf("LAT: %d\tLOT: %d\tLength: %d\t\n", posllh.lon, posllh.lat, posllh.length);
		  }
	  }*/
	  if(ibus_rx_cplt_flag == 1){
 80026de:	4b57      	ldr	r3, [pc, #348]	; (800283c <main+0x284>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d122      	bne.n	800272c <main+0x174>
		  ibus_rx_cplt_flag = 0;
 80026e6:	4b55      	ldr	r3, [pc, #340]	; (800283c <main+0x284>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 80026ec:	2120      	movs	r1, #32
 80026ee:	4854      	ldr	r0, [pc, #336]	; (8002840 <main+0x288>)
 80026f0:	f7fe ff5e 	bl	80015b0 <iBus_Check_CHKSUM>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d118      	bne.n	800272c <main+0x174>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80026fa:	2104      	movs	r1, #4
 80026fc:	4851      	ldr	r0, [pc, #324]	; (8002844 <main+0x28c>)
 80026fe:	f7ff ff19 	bl	8002534 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002702:	4951      	ldr	r1, [pc, #324]	; (8002848 <main+0x290>)
 8002704:	484e      	ldr	r0, [pc, #312]	; (8002840 <main+0x288>)
 8002706:	f7fe ff89 	bl	800161c <iBus_Parsing>

			  if(iBus_isActive_Failsafe(&iBus) == 1){
 800270a:	484f      	ldr	r0, [pc, #316]	; (8002848 <main+0x290>)
 800270c:	f7fe fffe 	bl	800170c <iBus_isActive_Failsafe>
 8002710:	4603      	mov	r3, r0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <main+0x16a>
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800271a:	4843      	ldr	r0, [pc, #268]	; (8002828 <main+0x270>)
 800271c:	f7ff fea2 	bl	8002464 <LL_TIM_CC_EnableChannel>
 8002720:	e004      	b.n	800272c <main+0x174>
			  }
			  else
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002726:	4840      	ldr	r0, [pc, #256]	; (8002828 <main+0x270>)
 8002728:	f7ff fead 	bl	8002486 <LL_TIM_CC_DisableChannel>
			  HAL_Delay(50);*/
		  }
	  }


	  TIM5->CCR1 = 10500 + (iBus.LV - 1000) * 10.5;
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <main+0x290>)
 800272e:	889b      	ldrh	r3, [r3, #4]
 8002730:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fef5 	bl	8000524 <__aeabi_i2d>
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <main+0x294>)
 8002740:	f7fd ff5a 	bl	80005f8 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	a334      	add	r3, pc, #208	; (adr r3, 8002820 <main+0x268>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd fd9b 	bl	800028c <__adddf3>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4c37      	ldr	r4, [pc, #220]	; (8002838 <main+0x280>)
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa22 	bl	8000ba8 <__aeabi_d2uiz>
 8002764:	4603      	mov	r3, r0
 8002766:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM5->CCR2 = 10500 + (iBus.LV - 1000) * 10.5;
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <main+0x290>)
 800276a:	889b      	ldrh	r3, [r3, #4]
 800276c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fed7 	bl	8000524 <__aeabi_i2d>
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b34      	ldr	r3, [pc, #208]	; (800284c <main+0x294>)
 800277c:	f7fd ff3c 	bl	80005f8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	a325      	add	r3, pc, #148	; (adr r3, 8002820 <main+0x268>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fd fd7d 	bl	800028c <__adddf3>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4c28      	ldr	r4, [pc, #160]	; (8002838 <main+0x280>)
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe fa04 	bl	8000ba8 <__aeabi_d2uiz>
 80027a0:	4603      	mov	r3, r0
 80027a2:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM5->CCR3 = 10500 + (iBus.LV - 1000) * 10.5;
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <main+0x290>)
 80027a6:	889b      	ldrh	r3, [r3, #4]
 80027a8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd feb9 	bl	8000524 <__aeabi_i2d>
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <main+0x294>)
 80027b8:	f7fd ff1e 	bl	80005f8 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	a316      	add	r3, pc, #88	; (adr r3, 8002820 <main+0x268>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd fd5f 	bl	800028c <__adddf3>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4c19      	ldr	r4, [pc, #100]	; (8002838 <main+0x280>)
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe f9e6 	bl	8000ba8 <__aeabi_d2uiz>
 80027dc:	4603      	mov	r3, r0
 80027de:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM5->CCR4 = 10500 + (iBus.LV - 1000) * 10.5;
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <main+0x290>)
 80027e2:	889b      	ldrh	r3, [r3, #4]
 80027e4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe9b 	bl	8000524 <__aeabi_i2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <main+0x294>)
 80027f4:	f7fd ff00 	bl	80005f8 <__aeabi_dmul>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	a307      	add	r3, pc, #28	; (adr r3, 8002820 <main+0x268>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fd fd41 	bl	800028c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4c0a      	ldr	r4, [pc, #40]	; (8002838 <main+0x280>)
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7fe f9c8 	bl	8000ba8 <__aeabi_d2uiz>
 8002818:	4603      	mov	r3, r0
 800281a:	6423      	str	r3, [r4, #64]	; 0x40
	  if(ibus_rx_cplt_flag == 1){
 800281c:	e75f      	b.n	80026de <main+0x126>
 800281e:	bf00      	nop
 8002820:	00000000 	.word	0x00000000
 8002824:	40c48200 	.word	0x40c48200
 8002828:	40000400 	.word	0x40000400
 800282c:	40011400 	.word	0x40011400
 8002830:	40004c00 	.word	0x40004c00
 8002834:	40005000 	.word	0x40005000
 8002838:	40000c00 	.word	0x40000c00
 800283c:	200002e8 	.word	0x200002e8
 8002840:	200002c8 	.word	0x200002c8
 8002844:	40020800 	.word	0x40020800
 8002848:	20000284 	.word	0x20000284
 800284c:	40250000 	.word	0x40250000

08002850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b094      	sub	sp, #80	; 0x50
 8002854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002856:	f107 0320 	add.w	r3, r7, #32
 800285a:	2230      	movs	r2, #48	; 0x30
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f002 ff9e 	bl	80057a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <SystemClock_Config+0xcc>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <SystemClock_Config+0xcc>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	6413      	str	r3, [r2, #64]	; 0x40
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <SystemClock_Config+0xcc>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002890:	2300      	movs	r3, #0
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <SystemClock_Config+0xd0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a21      	ldr	r2, [pc, #132]	; (8002920 <SystemClock_Config+0xd0>)
 800289a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <SystemClock_Config+0xd0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028b6:	2302      	movs	r3, #2
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028c0:	2304      	movs	r3, #4
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028c4:	23a8      	movs	r3, #168	; 0xa8
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028c8:	2302      	movs	r3, #2
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028cc:	2304      	movs	r3, #4
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d0:	f107 0320 	add.w	r3, r7, #32
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f9d5 	bl	8003c84 <HAL_RCC_OscConfig>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028e0:	f000 f846 	bl	8002970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e4:	230f      	movs	r3, #15
 80028e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e8:	2302      	movs	r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2105      	movs	r1, #5
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fc36 	bl	8004174 <HAL_RCC_ClockConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800290e:	f000 f82f 	bl	8002970 <Error_Handler>
  }
}
 8002912:	bf00      	nop
 8002914:	3750      	adds	r7, #80	; 0x50
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40007000 	.word	0x40007000

08002924 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <Is_iBus_Throttle_Min+0x40>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d115      	bne.n	800295c <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <Is_iBus_Throttle_Min+0x40>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8002936:	2120      	movs	r1, #32
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <Is_iBus_Throttle_Min+0x44>)
 800293a:	f7fe fe39 	bl	80015b0 <iBus_Check_CHKSUM>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10b      	bne.n	800295c <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002944:	4909      	ldr	r1, [pc, #36]	; (800296c <Is_iBus_Throttle_Min+0x48>)
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <Is_iBus_Throttle_Min+0x44>)
 8002948:	f7fe fe68 	bl	800161c <iBus_Parsing>
			if(iBus.LV < 1010)
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <Is_iBus_Throttle_Min+0x48>)
 800294e:	889b      	ldrh	r3, [r3, #4]
 8002950:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002954:	4293      	cmp	r3, r2
 8002956:	d801      	bhi.n	800295c <Is_iBus_Throttle_Min+0x38>
				return 1;
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200002e8 	.word	0x200002e8
 8002968:	200002c8 	.word	0x200002c8
 800296c:	20000284 	.word	0x20000284

08002970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002974:	b672      	cpsid	i
}
 8002976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002978:	e7fe      	b.n	8002978 <Error_Handler+0x8>

0800297a <LL_SPI_SetStandard>:
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 0210 	bic.w	r2, r3, #16
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	605a      	str	r2, [r3, #4]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_AHB1_GRP1_EnableClock>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ac:	4907      	ldr	r1, [pc, #28]	; (80029cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40023800 	.word	0x40023800

080029d0 <LL_APB1_GRP1_EnableClock>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40023800 	.word	0x40023800

08002a00 <LL_APB2_GRP1_EnableClock>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0c:	4907      	ldr	r1, [pc, #28]	; (8002a2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40023800 	.word	0x40023800

08002a30 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b090      	sub	sp, #64	; 0x40
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002a36:	f107 0318 	add.w	r3, r7, #24
 8002a3a:	2228      	movs	r2, #40	; 0x28
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 feae 	bl	80057a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	463b      	mov	r3, r7
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]
 8002a52:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002a54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a58:	f7ff ffd2 	bl	8002a00 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff ff9f 	bl	80029a0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a62:	23e0      	movs	r3, #224	; 0xe0
 8002a64:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a66:	2302      	movs	r3, #2
 8002a68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002a76:	2305      	movs	r3, #5
 8002a78:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4813      	ldr	r0, [pc, #76]	; (8002acc <MX_SPI1_Init+0x9c>)
 8002a80:	f001 fe69 	bl	8004756 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002a88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a8c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002a92:	2302      	movs	r3, #2
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002aac:	230a      	movs	r3, #10
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002ab0:	f107 0318 	add.w	r3, r7, #24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <MX_SPI1_Init+0xa0>)
 8002ab8:	f002 f81d 	bl	8004af6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002abc:	2100      	movs	r1, #0
 8002abe:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_SPI1_Init+0xa0>)
 8002ac0:	f7ff ff5b 	bl	800297a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	3740      	adds	r7, #64	; 0x40
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40013000 	.word	0x40013000

08002ad4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b090      	sub	sp, #64	; 0x40
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002ada:	f107 0318 	add.w	r3, r7, #24
 8002ade:	2228      	movs	r2, #40	; 0x28
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fe5c 	bl	80057a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002af8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002afc:	f7ff ff68 	bl	80029d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002b00:	2002      	movs	r0, #2
 8002b02:	f7ff ff4d 	bl	80029a0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002b06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b20:	463b      	mov	r3, r7
 8002b22:	4619      	mov	r1, r3
 8002b24:	4813      	ldr	r0, [pc, #76]	; (8002b74 <MX_SPI2_Init+0xa0>)
 8002b26:	f001 fe16 	bl	8004756 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002b2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b32:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002b46:	2318      	movs	r3, #24
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002b52:	230a      	movs	r3, #10
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002b56:	f107 0318 	add.w	r3, r7, #24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4806      	ldr	r0, [pc, #24]	; (8002b78 <MX_SPI2_Init+0xa4>)
 8002b5e:	f001 ffca 	bl	8004af6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002b62:	2100      	movs	r1, #0
 8002b64:	4804      	ldr	r0, [pc, #16]	; (8002b78 <MX_SPI2_Init+0xa4>)
 8002b66:	f7ff ff08 	bl	800297a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	3740      	adds	r7, #64	; 0x40
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40003800 	.word	0x40003800

08002b7c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b090      	sub	sp, #64	; 0x40
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002b82:	f107 0318 	add.w	r3, r7, #24
 8002b86:	2228      	movs	r2, #40	; 0x28
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fe08 	bl	80057a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	463b      	mov	r3, r7
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ba4:	f7ff ff14 	bl	80029d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002ba8:	2002      	movs	r0, #2
 8002baa:	f7ff fef9 	bl	80029a0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002bae:	2338      	movs	r3, #56	; 0x38
 8002bb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002bc2:	2306      	movs	r3, #6
 8002bc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4813      	ldr	r0, [pc, #76]	; (8002c18 <MX_SPI3_Init+0x9c>)
 8002bcc:	f001 fdc3 	bl	8004756 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002bd4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002bd8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002bde:	2302      	movs	r3, #2
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002bec:	2308      	movs	r3, #8
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002bf8:	230a      	movs	r3, #10
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002bfc:	f107 0318 	add.w	r3, r7, #24
 8002c00:	4619      	mov	r1, r3
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <MX_SPI3_Init+0xa0>)
 8002c04:	f001 ff77 	bl	8004af6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4804      	ldr	r0, [pc, #16]	; (8002c1c <MX_SPI3_Init+0xa0>)
 8002c0c:	f7ff feb5 	bl	800297a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	3740      	adds	r7, #64	; 0x40
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40003c00 	.word	0x40003c00

08002c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_MspInit+0x4c>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <HAL_MspInit+0x4c>)
 8002c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c34:	6453      	str	r3, [r2, #68]	; 0x44
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_MspInit+0x4c>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_MspInit+0x4c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_MspInit+0x4c>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_MspInit+0x4c>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <LL_USART_IsActiveFlag_RXNE>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_USART_ClearFlag_RXNE>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f06f 0220 	mvn.w	r2, #32
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_USART_ReceiveData8>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	b2db      	uxtb	r3, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd6:	e7fe      	b.n	8002cd6 <HardFault_Handler+0x4>

08002cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <MemManage_Handler+0x4>

08002cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce2:	e7fe      	b.n	8002ce2 <BusFault_Handler+0x4>

08002ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <UsageFault_Handler+0x4>

08002cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d18:	f000 fe8a 	bl	8003a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4)){
 8002d24:	4833      	ldr	r0, [pc, #204]	; (8002df4 <UART4_IRQHandler+0xd4>)
 8002d26:	f7ff ffa3 	bl	8002c70 <LL_USART_IsActiveFlag_RXNE>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d05b      	beq.n	8002de8 <UART4_IRQHandler+0xc8>
			LL_USART_ClearFlag_RXNE(UART4);
 8002d30:	4830      	ldr	r0, [pc, #192]	; (8002df4 <UART4_IRQHandler+0xd4>)
 8002d32:	f7ff ffb0 	bl	8002c96 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8002d36:	482f      	ldr	r0, [pc, #188]	; (8002df4 <UART4_IRQHandler+0xd4>)
 8002d38:	f7ff ffbb 	bl	8002cb2 <LL_USART_ReceiveData8>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <UART4_IRQHandler+0xd8>)
 8002d42:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <UART4_IRQHandler+0xdc>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]

//			LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt){
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b23      	cmp	r3, #35	; 0x23
 8002d50:	d02e      	beq.n	8002db0 <UART4_IRQHandler+0x90>
 8002d52:	2b23      	cmp	r3, #35	; 0x23
 8002d54:	dc3a      	bgt.n	8002dcc <UART4_IRQHandler+0xac>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <UART4_IRQHandler+0x40>
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d012      	beq.n	8002d84 <UART4_IRQHandler+0x64>
 8002d5e:	e035      	b.n	8002dcc <UART4_IRQHandler+0xac>
			case 0:
				if(uart4_rx_data == 0xb5){
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <UART4_IRQHandler+0xd8>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2bb5      	cmp	r3, #181	; 0xb5
 8002d66:	d141      	bne.n	8002dec <UART4_IRQHandler+0xcc>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <UART4_IRQHandler+0xd8>)
 8002d70:	7819      	ldrb	r1, [r3, #0]
 8002d72:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <UART4_IRQHandler+0xe4>)
 8002d74:	5499      	strb	r1, [r3, r2]
					cnt++;
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002d80:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002d82:	e033      	b.n	8002dec <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62) {
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <UART4_IRQHandler+0xd8>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b62      	cmp	r3, #98	; 0x62
 8002d8a:	d10d      	bne.n	8002da8 <UART4_IRQHandler+0x88>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <UART4_IRQHandler+0xd8>)
 8002d94:	7819      	ldrb	r1, [r3, #0]
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <UART4_IRQHandler+0xe4>)
 8002d98:	5499      	strb	r1, [r3, r2]
					cnt++;
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002da4:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8002da6:	e022      	b.n	8002dee <UART4_IRQHandler+0xce>
					cnt = 0;
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
				break;
 8002dae:	e01e      	b.n	8002dee <UART4_IRQHandler+0xce>
			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <UART4_IRQHandler+0xd8>)
 8002db8:	7819      	ldrb	r1, [r3, #0]
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <UART4_IRQHandler+0xe4>)
 8002dbc:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <UART4_IRQHandler+0xe8>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
				break;
 8002dca:	e010      	b.n	8002dee <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <UART4_IRQHandler+0xd8>)
 8002dd4:	7819      	ldrb	r1, [r3, #0]
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <UART4_IRQHandler+0xe4>)
 8002dd8:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <UART4_IRQHandler+0xe0>)
 8002de4:	701a      	strb	r2, [r3, #0]
				break;
 8002de6:	e002      	b.n	8002dee <UART4_IRQHandler+0xce>
			}
	}
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <UART4_IRQHandler+0xce>
				break;
 8002dec:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40004c00 	.word	0x40004c00
 8002df8:	2000029d 	.word	0x2000029d
 8002dfc:	2000029c 	.word	0x2000029c
 8002e00:	200002e9 	.word	0x200002e9
 8002e04:	200002a0 	.word	0x200002a0
 8002e08:	200002c4 	.word	0x200002c4

08002e0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5)){
 8002e10:	4833      	ldr	r0, [pc, #204]	; (8002ee0 <UART5_IRQHandler+0xd4>)
 8002e12:	f7ff ff2d 	bl	8002c70 <LL_USART_IsActiveFlag_RXNE>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <UART5_IRQHandler+0xc8>
		LL_USART_ClearFlag_RXNE(UART5);
 8002e1c:	4830      	ldr	r0, [pc, #192]	; (8002ee0 <UART5_IRQHandler+0xd4>)
 8002e1e:	f7ff ff3a 	bl	8002c96 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8002e22:	482f      	ldr	r0, [pc, #188]	; (8002ee0 <UART5_IRQHandler+0xd4>)
 8002e24:	f7ff ff45 	bl	8002cb2 <LL_USART_ReceiveData8>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <UART5_IRQHandler+0xd8>)
 8002e2e:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <UART5_IRQHandler+0xdc>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
		/*while(!LL_USART_IsActiveFlag_TXE(USART6));
		LL_USART_TransmitData8(USART6, uart5_rx_data);*/

		switch(cnt){
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b1f      	cmp	r3, #31
 8002e3c:	d02e      	beq.n	8002e9c <UART5_IRQHandler+0x90>
 8002e3e:	2b1f      	cmp	r3, #31
 8002e40:	dc3a      	bgt.n	8002eb8 <UART5_IRQHandler+0xac>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <UART5_IRQHandler+0x40>
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d012      	beq.n	8002e70 <UART5_IRQHandler+0x64>
 8002e4a:	e035      	b.n	8002eb8 <UART5_IRQHandler+0xac>
		case 0:
			if(uart5_rx_data == 0x20){
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <UART5_IRQHandler+0xd8>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d141      	bne.n	8002ed8 <UART5_IRQHandler+0xcc>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <UART5_IRQHandler+0xd8>)
 8002e5c:	7819      	ldrb	r1, [r3, #0]
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <UART5_IRQHandler+0xe4>)
 8002e60:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e6c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e6e:	e033      	b.n	8002ed8 <UART5_IRQHandler+0xcc>

		case 1:
			if(uart5_rx_data == 0x40) {
 8002e70:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <UART5_IRQHandler+0xd8>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d10d      	bne.n	8002e94 <UART5_IRQHandler+0x88>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8002e78:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <UART5_IRQHandler+0xd8>)
 8002e80:	7819      	ldrb	r1, [r3, #0]
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <UART5_IRQHandler+0xe4>)
 8002e84:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002e86:	4b19      	ldr	r3, [pc, #100]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e90:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8002e92:	e022      	b.n	8002eda <UART5_IRQHandler+0xce>
				cnt = 0;
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
			break;
 8002e9a:	e01e      	b.n	8002eda <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <UART5_IRQHandler+0xd8>)
 8002ea4:	7819      	ldrb	r1, [r3, #0]
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <UART5_IRQHandler+0xe4>)
 8002ea8:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <UART5_IRQHandler+0xe8>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
			break;
 8002eb6:	e010      	b.n	8002eda <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <UART5_IRQHandler+0xd8>)
 8002ec0:	7819      	ldrb	r1, [r3, #0]
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <UART5_IRQHandler+0xe4>)
 8002ec4:	5499      	strb	r1, [r3, r2]
			cnt++;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <UART5_IRQHandler+0xe0>)
 8002ed0:	701a      	strb	r2, [r3, #0]
			break;
 8002ed2:	e002      	b.n	8002eda <UART5_IRQHandler+0xce>
		}
	}
 8002ed4:	bf00      	nop
 8002ed6:	e000      	b.n	8002eda <UART5_IRQHandler+0xce>
			break;
 8002ed8:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40005000 	.word	0x40005000
 8002ee4:	200002c6 	.word	0x200002c6
 8002ee8:	200002c5 	.word	0x200002c5
 8002eec:	200002ea 	.word	0x200002ea
 8002ef0:	200002c8 	.word	0x200002c8
 8002ef4:	200002e8 	.word	0x200002e8

08002ef8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)){
 8002efc:	480a      	ldr	r0, [pc, #40]	; (8002f28 <USART6_IRQHandler+0x30>)
 8002efe:	f7ff feb7 	bl	8002c70 <LL_USART_IsActiveFlag_RXNE>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8002f08:	4807      	ldr	r0, [pc, #28]	; (8002f28 <USART6_IRQHandler+0x30>)
 8002f0a:	f7ff fec4 	bl	8002c96 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <USART6_IRQHandler+0x30>)
 8002f10:	f7ff fecf 	bl	8002cb2 <LL_USART_ReceiveData8>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <USART6_IRQHandler+0x34>)
 8002f1a:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <USART6_IRQHandler+0x38>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40011400 	.word	0x40011400
 8002f2c:	2000029b 	.word	0x2000029b
 8002f30:	2000029a 	.word	0x2000029a

08002f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <_kill>:

int _kill(int pid, int sig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f4e:	f002 fbfd 	bl	800574c <__errno>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2216      	movs	r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
  return -1;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <_exit>:

void _exit (int status)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ffe7 	bl	8002f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f76:	e7fe      	b.n	8002f76 <_exit+0x12>

08002f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e00a      	b.n	8002fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f8a:	f3af 8000 	nop.w
 8002f8e:	4601      	mov	r1, r0
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	b2ca      	uxtb	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dbf0      	blt.n	8002f8a <_read+0x12>
  }

  return len;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fda:	605a      	str	r2, [r3, #4]
  return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_isatty>:

int _isatty(int file)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f002 fb7e 	bl	800574c <__errno>
 8003050:	4603      	mov	r3, r0
 8003052:	220c      	movs	r2, #12
 8003054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20020000 	.word	0x20020000
 800307c:	00000400 	.word	0x00000400
 8003080:	200002ec 	.word	0x200002ec
 8003084:	20000308 	.word	0x20000308

08003088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SystemInit+0x20>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <SystemInit+0x20>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <LL_TIM_EnableARRPreload>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d01c      	beq.n	8003116 <LL_TIM_OC_EnableFast+0x4a>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d017      	beq.n	8003112 <LL_TIM_OC_EnableFast+0x46>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d012      	beq.n	800310e <LL_TIM_OC_EnableFast+0x42>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d00d      	beq.n	800310a <LL_TIM_OC_EnableFast+0x3e>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f4:	d007      	beq.n	8003106 <LL_TIM_OC_EnableFast+0x3a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d101      	bne.n	8003102 <LL_TIM_OC_EnableFast+0x36>
 80030fe:	2305      	movs	r3, #5
 8003100:	e00a      	b.n	8003118 <LL_TIM_OC_EnableFast+0x4c>
 8003102:	2306      	movs	r3, #6
 8003104:	e008      	b.n	8003118 <LL_TIM_OC_EnableFast+0x4c>
 8003106:	2304      	movs	r3, #4
 8003108:	e006      	b.n	8003118 <LL_TIM_OC_EnableFast+0x4c>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <LL_TIM_OC_EnableFast+0x4c>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <LL_TIM_OC_EnableFast+0x4c>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <LL_TIM_OC_EnableFast+0x4c>
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3318      	adds	r3, #24
 800311e:	4619      	mov	r1, r3
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <LL_TIM_OC_EnableFast+0x80>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	440b      	add	r3, r1
 8003128:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <LL_TIM_OC_EnableFast+0x84>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	4619      	mov	r1, r3
 8003136:	2304      	movs	r3, #4
 8003138:	408b      	lsls	r3, r1
 800313a:	431a      	orrs	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	601a      	str	r2, [r3, #0]

}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	080084f4 	.word	0x080084f4
 8003150:	080084fc 	.word	0x080084fc

08003154 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d01c      	beq.n	800319e <LL_TIM_OC_EnablePreload+0x4a>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d017      	beq.n	800319a <LL_TIM_OC_EnablePreload+0x46>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b10      	cmp	r3, #16
 800316e:	d012      	beq.n	8003196 <LL_TIM_OC_EnablePreload+0x42>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d00d      	beq.n	8003192 <LL_TIM_OC_EnablePreload+0x3e>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317c:	d007      	beq.n	800318e <LL_TIM_OC_EnablePreload+0x3a>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	d101      	bne.n	800318a <LL_TIM_OC_EnablePreload+0x36>
 8003186:	2305      	movs	r3, #5
 8003188:	e00a      	b.n	80031a0 <LL_TIM_OC_EnablePreload+0x4c>
 800318a:	2306      	movs	r3, #6
 800318c:	e008      	b.n	80031a0 <LL_TIM_OC_EnablePreload+0x4c>
 800318e:	2304      	movs	r3, #4
 8003190:	e006      	b.n	80031a0 <LL_TIM_OC_EnablePreload+0x4c>
 8003192:	2303      	movs	r3, #3
 8003194:	e004      	b.n	80031a0 <LL_TIM_OC_EnablePreload+0x4c>
 8003196:	2302      	movs	r3, #2
 8003198:	e002      	b.n	80031a0 <LL_TIM_OC_EnablePreload+0x4c>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <LL_TIM_OC_EnablePreload+0x4c>
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3318      	adds	r3, #24
 80031a6:	4619      	mov	r1, r3
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <LL_TIM_OC_EnablePreload+0x80>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
 80031ae:	440b      	add	r3, r1
 80031b0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	4907      	ldr	r1, [pc, #28]	; (80031d8 <LL_TIM_OC_EnablePreload+0x84>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	4619      	mov	r1, r3
 80031be:	2308      	movs	r3, #8
 80031c0:	408b      	lsls	r3, r1
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	601a      	str	r2, [r3, #0]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	080084f4 	.word	0x080084f4
 80031d8:	080084fc 	.word	0x080084fc

080031dc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ee:	f023 0307 	bic.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	605a      	str	r2, [r3, #4]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_AHB1_GRP1_EnableClock>:
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4313      	orrs	r3, r2
 800325e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4013      	ands	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40023800 	.word	0x40023800

0800327c <LL_APB1_GRP1_EnableClock>:
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4313      	orrs	r3, r2
 800328e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4013      	ands	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800329a:	68fb      	ldr	r3, [r7, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40023800 	.word	0x40023800

080032ac <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b094      	sub	sp, #80	; 0x50
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80032b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80032c2:	f107 031c 	add.w	r3, r7, #28
 80032c6:	2220      	movs	r2, #32
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 fa68 	bl	80057a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80032e0:	2002      	movs	r0, #2
 80032e2:	f7ff ffcb 	bl	800327c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80032e6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80032ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80032ec:	2300      	movs	r3, #0
 80032ee:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 80032f0:	2314      	movs	r3, #20
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80032f4:	2300      	movs	r3, #0
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80032f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032fc:	4619      	mov	r1, r3
 80032fe:	4822      	ldr	r0, [pc, #136]	; (8003388 <MX_TIM3_Init+0xdc>)
 8003300:	f001 fcbe 	bl	8004c80 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8003304:	4820      	ldr	r0, [pc, #128]	; (8003388 <MX_TIM3_Init+0xdc>)
 8003306:	f7ff fed1 	bl	80030ac <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800330a:	2100      	movs	r1, #0
 800330c:	481e      	ldr	r0, [pc, #120]	; (8003388 <MX_TIM3_Init+0xdc>)
 800330e:	f7ff ff65 	bl	80031dc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003316:	481c      	ldr	r0, [pc, #112]	; (8003388 <MX_TIM3_Init+0xdc>)
 8003318:	f7ff ff1c 	bl	8003154 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800331c:	2360      	movs	r3, #96	; 0x60
 800331e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8003328:	230a      	movs	r3, #10
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800332c:	2300      	movs	r3, #0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	461a      	mov	r2, r3
 8003336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800333a:	4813      	ldr	r0, [pc, #76]	; (8003388 <MX_TIM3_Init+0xdc>)
 800333c:	f001 fd3a 	bl	8004db4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003344:	4810      	ldr	r0, [pc, #64]	; (8003388 <MX_TIM3_Init+0xdc>)
 8003346:	f7ff fec1 	bl	80030cc <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800334a:	2100      	movs	r1, #0
 800334c:	480e      	ldr	r0, [pc, #56]	; (8003388 <MX_TIM3_Init+0xdc>)
 800334e:	f7ff ff5a 	bl	8003206 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003352:	480d      	ldr	r0, [pc, #52]	; (8003388 <MX_TIM3_Init+0xdc>)
 8003354:	f7ff ff6a 	bl	800322c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003358:	2002      	movs	r0, #2
 800335a:	f7ff ff77 	bl	800324c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800335e:	2302      	movs	r3, #2
 8003360:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003362:	2302      	movs	r3, #2
 8003364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4804      	ldr	r0, [pc, #16]	; (800338c <MX_TIM3_Init+0xe0>)
 800337c:	f001 f9eb 	bl	8004756 <LL_GPIO_Init>

}
 8003380:	bf00      	nop
 8003382:	3750      	adds	r7, #80	; 0x50
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40000400 	.word	0x40000400
 800338c:	40020400 	.word	0x40020400

08003390 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b094      	sub	sp, #80	; 0x50
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80033a6:	f107 031c 	add.w	r3, r7, #28
 80033aa:	2220      	movs	r2, #32
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 f9f6 	bl	80057a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80033c4:	2008      	movs	r0, #8
 80033c6:	f7ff ff59 	bl	800327c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80033ce:	2300      	movs	r3, #0
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 80033d2:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80033d6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80033d8:	2300      	movs	r3, #0
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80033dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033e0:	4619      	mov	r1, r3
 80033e2:	483a      	ldr	r0, [pc, #232]	; (80034cc <MX_TIM5_Init+0x13c>)
 80033e4:	f001 fc4c 	bl	8004c80 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 80033e8:	4838      	ldr	r0, [pc, #224]	; (80034cc <MX_TIM5_Init+0x13c>)
 80033ea:	f7ff fe5f 	bl	80030ac <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80033ee:	2100      	movs	r1, #0
 80033f0:	4836      	ldr	r0, [pc, #216]	; (80034cc <MX_TIM5_Init+0x13c>)
 80033f2:	f7ff fef3 	bl	80031dc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80033f6:	2101      	movs	r1, #1
 80033f8:	4834      	ldr	r0, [pc, #208]	; (80034cc <MX_TIM5_Init+0x13c>)
 80033fa:	f7ff feab 	bl	8003154 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80033fe:	2360      	movs	r3, #96	; 0x60
 8003400:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800340e:	2300      	movs	r3, #0
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003412:	f107 031c 	add.w	r3, r7, #28
 8003416:	461a      	mov	r2, r3
 8003418:	2101      	movs	r1, #1
 800341a:	482c      	ldr	r0, [pc, #176]	; (80034cc <MX_TIM5_Init+0x13c>)
 800341c:	f001 fcca 	bl	8004db4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8003420:	2101      	movs	r1, #1
 8003422:	482a      	ldr	r0, [pc, #168]	; (80034cc <MX_TIM5_Init+0x13c>)
 8003424:	f7ff fe52 	bl	80030cc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8003428:	2110      	movs	r1, #16
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <MX_TIM5_Init+0x13c>)
 800342c:	f7ff fe92 	bl	8003154 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	461a      	mov	r2, r3
 8003436:	2110      	movs	r1, #16
 8003438:	4824      	ldr	r0, [pc, #144]	; (80034cc <MX_TIM5_Init+0x13c>)
 800343a:	f001 fcbb 	bl	8004db4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 800343e:	2110      	movs	r1, #16
 8003440:	4822      	ldr	r0, [pc, #136]	; (80034cc <MX_TIM5_Init+0x13c>)
 8003442:	f7ff fe43 	bl	80030cc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8003446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800344a:	4820      	ldr	r0, [pc, #128]	; (80034cc <MX_TIM5_Init+0x13c>)
 800344c:	f7ff fe82 	bl	8003154 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003450:	f107 031c 	add.w	r3, r7, #28
 8003454:	461a      	mov	r2, r3
 8003456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800345a:	481c      	ldr	r0, [pc, #112]	; (80034cc <MX_TIM5_Init+0x13c>)
 800345c:	f001 fcaa 	bl	8004db4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8003460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003464:	4819      	ldr	r0, [pc, #100]	; (80034cc <MX_TIM5_Init+0x13c>)
 8003466:	f7ff fe31 	bl	80030cc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 800346a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346e:	4817      	ldr	r0, [pc, #92]	; (80034cc <MX_TIM5_Init+0x13c>)
 8003470:	f7ff fe70 	bl	8003154 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003474:	f107 031c 	add.w	r3, r7, #28
 8003478:	461a      	mov	r2, r3
 800347a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800347e:	4813      	ldr	r0, [pc, #76]	; (80034cc <MX_TIM5_Init+0x13c>)
 8003480:	f001 fc98 	bl	8004db4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8003484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003488:	4810      	ldr	r0, [pc, #64]	; (80034cc <MX_TIM5_Init+0x13c>)
 800348a:	f7ff fe1f 	bl	80030cc <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800348e:	2100      	movs	r1, #0
 8003490:	480e      	ldr	r0, [pc, #56]	; (80034cc <MX_TIM5_Init+0x13c>)
 8003492:	f7ff feb8 	bl	8003206 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8003496:	480d      	ldr	r0, [pc, #52]	; (80034cc <MX_TIM5_Init+0x13c>)
 8003498:	f7ff fec8 	bl	800322c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800349c:	2001      	movs	r0, #1
 800349e:	f7ff fed5 	bl	800324c <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80034a2:	230f      	movs	r3, #15
 80034a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034a6:	2302      	movs	r3, #2
 80034a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4804      	ldr	r0, [pc, #16]	; (80034d0 <MX_TIM5_Init+0x140>)
 80034c0:	f001 f949 	bl	8004756 <LL_GPIO_Init>

}
 80034c4:	bf00      	nop
 80034c6:	3750      	adds	r7, #80	; 0x50
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40020000 	.word	0x40020000

080034d4 <__NVIC_GetPriorityGrouping>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	; (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	; (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	; (800357c <__NVIC_SetPriority+0x50>)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_USART_Enable>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60da      	str	r2, [r3, #12]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_USART_ConfigAsyncMode>:
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	615a      	str	r2, [r3, #20]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <LL_AHB1_GRP1_EnableClock>:
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	4907      	ldr	r1, [pc, #28]	; (8003660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4313      	orrs	r3, r2
 8003646:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800364a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4013      	ands	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40023800 	.word	0x40023800

08003664 <LL_APB1_GRP1_EnableClock>:
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800366e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4313      	orrs	r3, r2
 8003676:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800367a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40023800 	.word	0x40023800

08003694 <LL_APB2_GRP1_EnableClock>:
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800369c:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800369e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a0:	4907      	ldr	r1, [pc, #28]	; (80036c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40023800 	.word	0x40023800

080036c4 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08e      	sub	sp, #56	; 0x38
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	60da      	str	r2, [r3, #12]
 80036d8:	611a      	str	r2, [r3, #16]
 80036da:	615a      	str	r2, [r3, #20]
 80036dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
 80036ec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80036ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036f2:	f7ff ffb7 	bl	8003664 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80036f6:	2004      	movs	r0, #4
 80036f8:	f7ff ff9c 	bl	8003634 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80036fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003700:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003702:	2302      	movs	r3, #2
 8003704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	2303      	movs	r3, #3
 8003708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003712:	2308      	movs	r3, #8
 8003714:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4819      	ldr	r0, [pc, #100]	; (8003780 <MX_UART4_Init+0xbc>)
 800371c:	f001 f81b 	bl	8004756 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003720:	f7ff fed8 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 8003724:	4603      	mov	r3, r0
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff28 	bl	8003580 <NVIC_EncodePriority>
 8003730:	4603      	mov	r3, r0
 8003732:	4619      	mov	r1, r3
 8003734:	2034      	movs	r0, #52	; 0x34
 8003736:	f7ff fef9 	bl	800352c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800373a:	2034      	movs	r0, #52	; 0x34
 800373c:	f7ff fed8 	bl	80034f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8003740:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003744:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003746:	2300      	movs	r3, #0
 8003748:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800374a:	2300      	movs	r3, #0
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800374e:	2300      	movs	r3, #0
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003752:	230c      	movs	r3, #12
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003756:	2300      	movs	r3, #0
 8003758:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800375a:	2300      	movs	r3, #0
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800375e:	f107 031c 	add.w	r3, r7, #28
 8003762:	4619      	mov	r1, r3
 8003764:	4807      	ldr	r0, [pc, #28]	; (8003784 <MX_UART4_Init+0xc0>)
 8003766:	f001 ff71 	bl	800564c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800376a:	4806      	ldr	r0, [pc, #24]	; (8003784 <MX_UART4_Init+0xc0>)
 800376c:	f7ff ff4b 	bl	8003606 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8003770:	4804      	ldr	r0, [pc, #16]	; (8003784 <MX_UART4_Init+0xc0>)
 8003772:	f7ff ff38 	bl	80035e6 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003776:	bf00      	nop
 8003778:	3738      	adds	r7, #56	; 0x38
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40020800 	.word	0x40020800
 8003784:	40004c00 	.word	0x40004c00

08003788 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08e      	sub	sp, #56	; 0x38
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	615a      	str	r2, [r3, #20]
 80037a0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
 80037b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80037b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80037b6:	f7ff ff55 	bl	8003664 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80037ba:	2004      	movs	r0, #4
 80037bc:	f7ff ff3a 	bl	8003634 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80037c0:	2008      	movs	r0, #8
 80037c2:	f7ff ff37 	bl	8003634 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80037c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80037cc:	2302      	movs	r3, #2
 80037ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80037dc:	2308      	movs	r3, #8
 80037de:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4821      	ldr	r0, [pc, #132]	; (800386c <MX_UART5_Init+0xe4>)
 80037e6:	f000 ffb6 	bl	8004756 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80037ea:	2304      	movs	r3, #4
 80037ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80037ee:	2302      	movs	r3, #2
 80037f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80037f2:	2303      	movs	r3, #3
 80037f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80037fe:	2308      	movs	r3, #8
 8003800:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	4619      	mov	r1, r3
 8003806:	481a      	ldr	r0, [pc, #104]	; (8003870 <MX_UART5_Init+0xe8>)
 8003808:	f000 ffa5 	bl	8004756 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800380c:	f7ff fe62 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 8003810:	4603      	mov	r3, r0
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff feb2 	bl	8003580 <NVIC_EncodePriority>
 800381c:	4603      	mov	r3, r0
 800381e:	4619      	mov	r1, r3
 8003820:	2035      	movs	r0, #53	; 0x35
 8003822:	f7ff fe83 	bl	800352c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8003826:	2035      	movs	r0, #53	; 0x35
 8003828:	f7ff fe62 	bl	80034f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800382c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003830:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003836:	2300      	movs	r3, #0
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800383a:	2300      	movs	r3, #0
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800383e:	2304      	movs	r3, #4
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003842:	2300      	movs	r3, #0
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003846:	2300      	movs	r3, #0
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800384a:	f107 031c 	add.w	r3, r7, #28
 800384e:	4619      	mov	r1, r3
 8003850:	4808      	ldr	r0, [pc, #32]	; (8003874 <MX_UART5_Init+0xec>)
 8003852:	f001 fefb 	bl	800564c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8003856:	4807      	ldr	r0, [pc, #28]	; (8003874 <MX_UART5_Init+0xec>)
 8003858:	f7ff fed5 	bl	8003606 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <MX_UART5_Init+0xec>)
 800385e:	f7ff fec2 	bl	80035e6 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003862:	bf00      	nop
 8003864:	3738      	adds	r7, #56	; 0x38
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40020800 	.word	0x40020800
 8003870:	40020c00 	.word	0x40020c00
 8003874:	40005000 	.word	0x40005000

08003878 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08e      	sub	sp, #56	; 0x38
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	615a      	str	r2, [r3, #20]
 8003890:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
 80038a0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80038a2:	2020      	movs	r0, #32
 80038a4:	f7ff fef6 	bl	8003694 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80038a8:	2004      	movs	r0, #4
 80038aa:	f7ff fec3 	bl	8003634 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038b2:	2302      	movs	r3, #2
 80038b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80038c2:	2308      	movs	r3, #8
 80038c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4819      	ldr	r0, [pc, #100]	; (8003930 <MX_USART6_UART_Init+0xb8>)
 80038cc:	f000 ff43 	bl	8004756 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80038d0:	f7ff fe00 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fe50 	bl	8003580 <NVIC_EncodePriority>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4619      	mov	r1, r3
 80038e4:	2047      	movs	r0, #71	; 0x47
 80038e6:	f7ff fe21 	bl	800352c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80038ea:	2047      	movs	r0, #71	; 0x47
 80038ec:	f7ff fe00 	bl	80034f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80038f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80038f4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003902:	230c      	movs	r3, #12
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003906:	2300      	movs	r3, #0
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800390a:	2300      	movs	r3, #0
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800390e:	f107 031c 	add.w	r3, r7, #28
 8003912:	4619      	mov	r1, r3
 8003914:	4807      	ldr	r0, [pc, #28]	; (8003934 <MX_USART6_UART_Init+0xbc>)
 8003916:	f001 fe99 	bl	800564c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800391a:	4806      	ldr	r0, [pc, #24]	; (8003934 <MX_USART6_UART_Init+0xbc>)
 800391c:	f7ff fe73 	bl	8003606 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003920:	4804      	ldr	r0, [pc, #16]	; (8003934 <MX_USART6_UART_Init+0xbc>)
 8003922:	f7ff fe60 	bl	80035e6 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003926:	bf00      	nop
 8003928:	3738      	adds	r7, #56	; 0x38
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40020800 	.word	0x40020800
 8003934:	40011400 	.word	0x40011400

08003938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800393c:	480d      	ldr	r0, [pc, #52]	; (8003974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800393e:	490e      	ldr	r1, [pc, #56]	; (8003978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003944:	e002      	b.n	800394c <LoopCopyDataInit>

08003946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800394a:	3304      	adds	r3, #4

0800394c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800394c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003950:	d3f9      	bcc.n	8003946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003954:	4c0b      	ldr	r4, [pc, #44]	; (8003984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003958:	e001      	b.n	800395e <LoopFillZerobss>

0800395a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800395a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800395c:	3204      	adds	r2, #4

0800395e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003960:	d3fb      	bcc.n	800395a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003962:	f7ff fb91 	bl	8003088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003966:	f001 fef7 	bl	8005758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800396a:	f7fe fe25 	bl	80025b8 <main>
  bx  lr    
 800396e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003978:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800397c:	080088ec 	.word	0x080088ec
  ldr r2, =_sbss
 8003980:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003984:	20000304 	.word	0x20000304

08003988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003988:	e7fe      	b.n	8003988 <ADC_IRQHandler>
	...

0800398c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_Init+0x40>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <HAL_Init+0x40>)
 8003996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800399a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_Init+0x40>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_Init+0x40>)
 80039a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_Init+0x40>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a07      	ldr	r2, [pc, #28]	; (80039cc <HAL_Init+0x40>)
 80039ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b4:	2003      	movs	r0, #3
 80039b6:	f000 f931 	bl	8003c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ba:	200f      	movs	r0, #15
 80039bc:	f000 f808 	bl	80039d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c0:	f7ff f92e 	bl	8002c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00

080039d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_InitTick+0x54>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_InitTick+0x58>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f93b 	bl	8003c6a <HAL_SYSTICK_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00e      	b.n	8003a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d80a      	bhi.n	8003a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a04:	2200      	movs	r2, #0
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f000 f911 	bl	8003c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a10:	4a06      	ldr	r2, [pc, #24]	; (8003a2c <HAL_InitTick+0x5c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000008 	.word	0x20000008
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_IncTick+0x20>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_IncTick+0x24>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <HAL_IncTick+0x24>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000008 	.word	0x20000008
 8003a54:	200002f0 	.word	0x200002f0

08003a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_GetTick+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	200002f0 	.word	0x200002f0

08003a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff ffee 	bl	8003a58 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d005      	beq.n	8003a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_Delay+0x44>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a96:	bf00      	nop
 8003a98:	f7ff ffde 	bl	8003a58 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d8f7      	bhi.n	8003a98 <HAL_Delay+0x28>
  {
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000008 	.word	0x20000008

08003ab8 <__NVIC_SetPriorityGrouping>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_GetPriorityGrouping>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <__NVIC_GetPriorityGrouping+0x18>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 0307 	and.w	r3, r3, #7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_SetPriority>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	; (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <NVIC_EncodePriority>:
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f1c3 0307 	rsb	r3, r3, #7
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf28      	it	cs
 8003b8e:	2304      	movcs	r3, #4
 8003b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d902      	bls.n	8003ba0 <NVIC_EncodePriority+0x30>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3b03      	subs	r3, #3
 8003b9e:	e000      	b.n	8003ba2 <NVIC_EncodePriority+0x32>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43d9      	mvns	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	4313      	orrs	r3, r2
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be8:	d301      	bcc.n	8003bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00f      	b.n	8003c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <SysTick_Config+0x40>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bf6:	210f      	movs	r1, #15
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	f7ff ff8e 	bl	8003b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <SysTick_Config+0x40>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c06:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <SysTick_Config+0x40>)
 8003c08:	2207      	movs	r2, #7
 8003c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	e000e010 	.word	0xe000e010

08003c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff47 	bl	8003ab8 <__NVIC_SetPriorityGrouping>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c44:	f7ff ff5c 	bl	8003b00 <__NVIC_GetPriorityGrouping>
 8003c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	6978      	ldr	r0, [r7, #20]
 8003c50:	f7ff ff8e 	bl	8003b70 <NVIC_EncodePriority>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff5d 	bl	8003b1c <__NVIC_SetPriority>
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffb0 	bl	8003bd8 <SysTick_Config>
 8003c78:	4603      	mov	r3, r0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e267      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d075      	beq.n	8003d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	4b88      	ldr	r3, [pc, #544]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b85      	ldr	r3, [pc, #532]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b7e      	ldr	r3, [pc, #504]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05b      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d157      	bne.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e242      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x74>
 8003cea:	4b76      	ldr	r3, [pc, #472]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a75      	ldr	r2, [pc, #468]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x98>
 8003d02:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6f      	ldr	r2, [pc, #444]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6c      	ldr	r2, [pc, #432]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	4b69      	ldr	r3, [pc, #420]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b66      	ldr	r3, [pc, #408]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7ff fe8c 	bl	8003a58 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7ff fe88 	bl	8003a58 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e207      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b5b      	ldr	r3, [pc, #364]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7ff fe78 	bl	8003a58 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7ff fe74 	bl	8003a58 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1f3      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe8>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	4b4a      	ldr	r3, [pc, #296]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b44      	ldr	r3, [pc, #272]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1c7      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4937      	ldr	r1, [pc, #220]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b34      	ldr	r3, [pc, #208]	; (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7ff fe2d 	bl	8003a58 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e02:	f7ff fe29 	bl	8003a58 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1a8      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4925      	ldr	r1, [pc, #148]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7ff fe0c 	bl	8003a58 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e44:	f7ff fe08 	bl	8003a58 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e187      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d036      	beq.n	8003edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7ff fdec 	bl	8003a58 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e84:	f7ff fde8 	bl	8003a58 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e167      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x200>
 8003ea2:	e01b      	b.n	8003edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7ff fdd5 	bl	8003a58 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	e00e      	b.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7ff fdd1 	bl	8003a58 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d907      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e150      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ea      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b81      	ldr	r3, [pc, #516]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	4a7c      	ldr	r2, [pc, #496]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b77      	ldr	r3, [pc, #476]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b74      	ldr	r3, [pc, #464]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7ff fd91 	bl	8003a58 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7ff fd8d 	bl	8003a58 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e10c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b6a      	ldr	r3, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2ea>
 8003f60:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a63      	ldr	r2, [pc, #396]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x30c>
 8003f76:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	4b5c      	ldr	r3, [pc, #368]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a5b      	ldr	r2, [pc, #364]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f90:	4b58      	ldr	r3, [pc, #352]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	4b55      	ldr	r3, [pc, #340]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a54      	ldr	r2, [pc, #336]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7ff fd52 	bl	8003a58 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7ff fd4e 	bl	8003a58 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0cb      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x334>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7ff fd3c 	bl	8003a58 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7ff fd38 	bl	8003a58 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0b5      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a1 	beq.w	8004164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004022:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b08      	cmp	r3, #8
 800402c:	d05c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d141      	bne.n	80040ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_OscConfig+0x478>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7ff fd0c 	bl	8003a58 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7ff fd08 	bl	8003a58 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e087      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	491b      	ldr	r1, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x478>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7ff fce1 	bl	8003a58 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7ff fcdd 	bl	8003a58 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e05c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x416>
 80040b8:	e054      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7ff fcca 	bl	8003a58 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7ff fcc6 	bl	8003a58 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e045      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x444>
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e038      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x4ec>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d028      	beq.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d121      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d11a      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d111      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0cc      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b68      	ldr	r3, [pc, #416]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d90c      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b63      	ldr	r3, [pc, #396]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0b8      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c8:	4b59      	ldr	r3, [pc, #356]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a58      	ldr	r2, [pc, #352]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b50      	ldr	r3, [pc, #320]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	494d      	ldr	r1, [pc, #308]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d044      	beq.n	8004294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d119      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e07f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d003      	beq.n	8004232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	2b03      	cmp	r3, #3
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e067      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4934      	ldr	r1, [pc, #208]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004264:	f7ff fbf8 	bl	8003a58 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	e00a      	b.n	8004282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	f7ff fbf4 	bl	8003a58 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e04f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 020c 	and.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	429a      	cmp	r2, r3
 8004292:	d1eb      	bne.n	800426c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20c      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e032      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4916      	ldr	r1, [pc, #88]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	490e      	ldr	r1, [pc, #56]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fa:	f000 f821 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80042fe:	4602      	mov	r2, r0
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	490a      	ldr	r1, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	5ccb      	ldrb	r3, [r1, r3]
 800430e:	fa22 f303 	lsr.w	r3, r2, r3
 8004312:	4a09      	ldr	r2, [pc, #36]	; (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fb58 	bl	80039d0 <HAL_InitTick>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023c00 	.word	0x40023c00
 8004330:	40023800 	.word	0x40023800
 8004334:	080084dc 	.word	0x080084dc
 8004338:	20000000 	.word	0x20000000
 800433c:	20000004 	.word	0x20000004

08004340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b094      	sub	sp, #80	; 0x50
 8004346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	647b      	str	r3, [r7, #68]	; 0x44
 800434c:	2300      	movs	r3, #0
 800434e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004350:	2300      	movs	r3, #0
 8004352:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004358:	4b79      	ldr	r3, [pc, #484]	; (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b08      	cmp	r3, #8
 8004362:	d00d      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x40>
 8004364:	2b08      	cmp	r3, #8
 8004366:	f200 80e1 	bhi.w	800452c <HAL_RCC_GetSysClockFreq+0x1ec>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x34>
 800436e:	2b04      	cmp	r3, #4
 8004370:	d003      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0x3a>
 8004372:	e0db      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b73      	ldr	r3, [pc, #460]	; (8004544 <HAL_RCC_GetSysClockFreq+0x204>)
 8004376:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004378:	e0db      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800437a:	4b73      	ldr	r3, [pc, #460]	; (8004548 <HAL_RCC_GetSysClockFreq+0x208>)
 800437c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800437e:	e0d8      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004380:	4b6f      	ldr	r3, [pc, #444]	; (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004388:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800438a:	4b6d      	ldr	r3, [pc, #436]	; (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	2200      	movs	r2, #0
 800439e:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a8:	633b      	str	r3, [r7, #48]	; 0x30
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
 80043ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c4:	0150      	lsls	r0, r2, #5
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4621      	mov	r1, r4
 80043cc:	1a51      	subs	r1, r2, r1
 80043ce:	6139      	str	r1, [r7, #16]
 80043d0:	4629      	mov	r1, r5
 80043d2:	eb63 0301 	sbc.w	r3, r3, r1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e4:	4659      	mov	r1, fp
 80043e6:	018b      	lsls	r3, r1, #6
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ee:	4651      	mov	r1, sl
 80043f0:	018a      	lsls	r2, r1, #6
 80043f2:	4651      	mov	r1, sl
 80043f4:	ebb2 0801 	subs.w	r8, r2, r1
 80043f8:	4659      	mov	r1, fp
 80043fa:	eb63 0901 	sbc.w	r9, r3, r1
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800440a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800440e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004412:	4690      	mov	r8, r2
 8004414:	4699      	mov	r9, r3
 8004416:	4623      	mov	r3, r4
 8004418:	eb18 0303 	adds.w	r3, r8, r3
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	462b      	mov	r3, r5
 8004420:	eb49 0303 	adc.w	r3, r9, r3
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004432:	4629      	mov	r1, r5
 8004434:	024b      	lsls	r3, r1, #9
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800443c:	4621      	mov	r1, r4
 800443e:	024a      	lsls	r2, r1, #9
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
 800444a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004450:	f7fc fbca 	bl	8000be8 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445c:	e058      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445e:	4b38      	ldr	r3, [pc, #224]	; (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	2200      	movs	r2, #0
 8004466:	4618      	mov	r0, r3
 8004468:	4611      	mov	r1, r2
 800446a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
 8004474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	f04f 0000 	mov.w	r0, #0
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	0159      	lsls	r1, r3, #5
 8004486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448a:	0150      	lsls	r0, r2, #5
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4641      	mov	r1, r8
 8004492:	ebb2 0a01 	subs.w	sl, r2, r1
 8004496:	4649      	mov	r1, r9
 8004498:	eb63 0b01 	sbc.w	fp, r3, r1
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044b0:	ebb2 040a 	subs.w	r4, r2, sl
 80044b4:	eb63 050b 	sbc.w	r5, r3, fp
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	00eb      	lsls	r3, r5, #3
 80044c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c6:	00e2      	lsls	r2, r4, #3
 80044c8:	4614      	mov	r4, r2
 80044ca:	461d      	mov	r5, r3
 80044cc:	4643      	mov	r3, r8
 80044ce:	18e3      	adds	r3, r4, r3
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	464b      	mov	r3, r9
 80044d4:	eb45 0303 	adc.w	r3, r5, r3
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044e6:	4629      	mov	r1, r5
 80044e8:	028b      	lsls	r3, r1, #10
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f0:	4621      	mov	r1, r4
 80044f2:	028a      	lsls	r2, r1, #10
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	2200      	movs	r2, #0
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004504:	f7fc fb70 	bl	8000be8 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	3301      	adds	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800452a:	e002      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_GetSysClockFreq+0x204>)
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004534:	4618      	mov	r0, r3
 8004536:	3750      	adds	r7, #80	; 0x50
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <LL_GPIO_SetPinMode>:
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	613b      	str	r3, [r7, #16]
  return result;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	2103      	movs	r1, #3
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	401a      	ands	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	61bb      	str	r3, [r7, #24]
  return result;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	3724      	adds	r7, #36	; 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_GPIO_SetPinOutputType>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	43db      	mvns	r3, r3
 80045be:	401a      	ands	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]
}
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_GPIO_SetPinSpeed>:
{
 80045da:	b480      	push	{r7}
 80045dc:	b089      	sub	sp, #36	; 0x24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	613b      	str	r3, [r7, #16]
  return result;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	fab3 f383 	clz	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	2103      	movs	r1, #3
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	401a      	ands	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	61bb      	str	r3, [r7, #24]
  return result;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]
}
 800462c:	bf00      	nop
 800462e:	3724      	adds	r7, #36	; 0x24
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_GPIO_SetPinPull>:
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	613b      	str	r3, [r7, #16]
  return result;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2103      	movs	r1, #3
 8004660:	fa01 f303 	lsl.w	r3, r1, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	401a      	ands	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	61bb      	str	r3, [r7, #24]
  return result;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	60da      	str	r2, [r3, #12]
}
 800468a:	bf00      	nop
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <LL_GPIO_SetAFPin_0_7>:
{
 8004696:	b480      	push	{r7}
 8004698:	b089      	sub	sp, #36	; 0x24
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	613b      	str	r3, [r7, #16]
  return result;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	210f      	movs	r1, #15
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	401a      	ands	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	61bb      	str	r3, [r7, #24]
  return result;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	3724      	adds	r7, #36	; 0x24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_GPIO_SetAFPin_8_15>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	613b      	str	r3, [r7, #16]
  return result;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	210f      	movs	r1, #15
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	401a      	ands	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	61bb      	str	r3, [r7, #24]
  return result;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24
}
 800474a:	bf00      	nop
 800474c:	3724      	adds	r7, #36	; 0x24
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b088      	sub	sp, #32
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	613b      	str	r3, [r7, #16]
  return result;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004780:	e050      	b.n	8004824 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	2101      	movs	r1, #1
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d042      	beq.n	800481e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d003      	beq.n	80047a8 <LL_GPIO_Init+0x52>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d10d      	bne.n	80047c4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	461a      	mov	r2, r3
 80047ae:	69b9      	ldr	r1, [r7, #24]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff12 	bl	80045da <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fef3 	bl	80045aa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	461a      	mov	r2, r3
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff33 	bl	8004638 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d11a      	bne.n	8004810 <LL_GPIO_Init+0xba>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	60bb      	str	r3, [r7, #8]
  return result;
 80047e6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80047e8:	fab3 f383 	clz	r3, r3
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b07      	cmp	r3, #7
 80047f0:	d807      	bhi.n	8004802 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	461a      	mov	r2, r3
 80047f8:	69b9      	ldr	r1, [r7, #24]
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ff4b 	bl	8004696 <LL_GPIO_SetAFPin_0_7>
 8004800:	e006      	b.n	8004810 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	461a      	mov	r2, r3
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff ff72 	bl	80046f4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	461a      	mov	r2, r3
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fe97 	bl	800454c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3301      	adds	r3, #1
 8004822:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1a7      	bne.n	8004782 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <LL_RCC_GetSysClkSource+0x18>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <LL_RCC_GetAHBPrescaler+0x18>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800

08004874 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <LL_RCC_GetAPB1Prescaler+0x18>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800

08004890 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800

080048ac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800

080048c8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <LL_RCC_PLL_GetN+0x18>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40023800 	.word	0x40023800

080048e4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <LL_RCC_PLL_GetP+0x18>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800

08004900 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <LL_RCC_PLL_GetDivider+0x18>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800

0800491c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004924:	f000 f820 	bl	8004968 <RCC_GetSystemClockFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f840 	bl	80049b8 <RCC_GetHCLKClockFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f84e 	bl	80049e4 <RCC_GetPCLK1ClockFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f85a 	bl	8004a0c <RCC_GetPCLK2ClockFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004972:	f7ff ff63 	bl	800483c <LL_RCC_GetSysClkSource>
 8004976:	4603      	mov	r3, r0
 8004978:	2b08      	cmp	r3, #8
 800497a:	d00c      	beq.n	8004996 <RCC_GetSystemClockFreq+0x2e>
 800497c:	2b08      	cmp	r3, #8
 800497e:	d80f      	bhi.n	80049a0 <RCC_GetSystemClockFreq+0x38>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <RCC_GetSystemClockFreq+0x22>
 8004984:	2b04      	cmp	r3, #4
 8004986:	d003      	beq.n	8004990 <RCC_GetSystemClockFreq+0x28>
 8004988:	e00a      	b.n	80049a0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <RCC_GetSystemClockFreq+0x48>)
 800498c:	607b      	str	r3, [r7, #4]
      break;
 800498e:	e00a      	b.n	80049a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004990:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <RCC_GetSystemClockFreq+0x4c>)
 8004992:	607b      	str	r3, [r7, #4]
      break;
 8004994:	e007      	b.n	80049a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004996:	2008      	movs	r0, #8
 8004998:	f000 f84c 	bl	8004a34 <RCC_PLL_GetFreqDomain_SYS>
 800499c:	6078      	str	r0, [r7, #4]
      break;
 800499e:	e002      	b.n	80049a6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <RCC_GetSystemClockFreq+0x48>)
 80049a2:	607b      	str	r3, [r7, #4]
      break;
 80049a4:	bf00      	nop
  }

  return frequency;
 80049a6:	687b      	ldr	r3, [r7, #4]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	00f42400 	.word	0x00f42400
 80049b4:	007a1200 	.word	0x007a1200

080049b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80049c0:	f7ff ff4a 	bl	8004858 <LL_RCC_GetAHBPrescaler>
 80049c4:	4603      	mov	r3, r0
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <RCC_GetHCLKClockFreq+0x28>)
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	40d3      	lsrs	r3, r2
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	080084dc 	.word	0x080084dc

080049e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80049ec:	f7ff ff42 	bl	8004874 <LL_RCC_GetAPB1Prescaler>
 80049f0:	4603      	mov	r3, r0
 80049f2:	0a9b      	lsrs	r3, r3, #10
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <RCC_GetPCLK1ClockFreq+0x24>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	461a      	mov	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	40d3      	lsrs	r3, r2
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	080084ec 	.word	0x080084ec

08004a0c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004a14:	f7ff ff3c 	bl	8004890 <LL_RCC_GetAPB2Prescaler>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	0b5b      	lsrs	r3, r3, #13
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <RCC_GetPCLK2ClockFreq+0x24>)
 8004a1e:	5cd3      	ldrb	r3, [r2, r3]
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	40d3      	lsrs	r3, r2
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	080084ec 	.word	0x080084ec

08004a34 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004a48:	f7ff ff30 	bl	80048ac <LL_RCC_PLL_GetMainSource>
 8004a4c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d004      	beq.n	8004a5e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a5a:	d003      	beq.n	8004a64 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004a5c:	e005      	b.n	8004a6a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004a60:	617b      	str	r3, [r7, #20]
      break;
 8004a62:	e005      	b.n	8004a70 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004a66:	617b      	str	r3, [r7, #20]
      break;
 8004a68:	e002      	b.n	8004a70 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004a6c:	617b      	str	r3, [r7, #20]
      break;
 8004a6e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d113      	bne.n	8004a9e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004a76:	f7ff ff43 	bl	8004900 <LL_RCC_PLL_GetDivider>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	fbb3 f4f2 	udiv	r4, r3, r2
 8004a82:	f7ff ff21 	bl	80048c8 <LL_RCC_PLL_GetN>
 8004a86:	4603      	mov	r3, r0
 8004a88:	fb03 f404 	mul.w	r4, r3, r4
 8004a8c:	f7ff ff2a 	bl	80048e4 <LL_RCC_PLL_GetP>
 8004a90:	4603      	mov	r3, r0
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	3301      	adds	r3, #1
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fbb4 f3f3 	udiv	r3, r4, r3
 8004a9c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004a9e:	693b      	ldr	r3, [r7, #16]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <LL_SPI_IsEnabled>:
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d101      	bne.n	8004ac8 <LL_SPI_IsEnabled+0x18>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <LL_SPI_IsEnabled+0x1a>
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_SPI_SetCRCPolynomial>:
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	611a      	str	r2, [r3, #16]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ffd3 	bl	8004ab0 <LL_SPI_IsEnabled>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d139      	bne.n	8004b84 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b18:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	6811      	ldr	r1, [r2, #0]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	6852      	ldr	r2, [r2, #4]
 8004b24:	4311      	orrs	r1, r2
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	6892      	ldr	r2, [r2, #8]
 8004b2a:	4311      	orrs	r1, r2
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	4311      	orrs	r1, r2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	6912      	ldr	r2, [r2, #16]
 8004b36:	4311      	orrs	r1, r2
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	6952      	ldr	r2, [r2, #20]
 8004b3c:	4311      	orrs	r1, r2
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	6992      	ldr	r2, [r2, #24]
 8004b42:	4311      	orrs	r1, r2
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	69d2      	ldr	r2, [r2, #28]
 8004b48:	4311      	orrs	r1, r2
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6a12      	ldr	r2, [r2, #32]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f023 0204 	bic.w	r2, r3, #4
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	d105      	bne.n	8004b80 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff ffab 	bl	8004ad6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004b80:	2300      	movs	r3, #0
 8004b82:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	61da      	str	r2, [r3, #28]
  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <LL_TIM_SetPrescaler>:
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_TIM_SetAutoReload>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <LL_TIM_SetRepetitionCounter>:
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <LL_TIM_OC_SetCompareCH1>:
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_TIM_OC_SetCompareCH2>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_TIM_OC_SetCompareCH3>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <LL_TIM_OC_SetCompareCH4>:
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f043 0201 	orr.w	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	615a      	str	r2, [r3, #20]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3d      	ldr	r2, [pc, #244]	; (8004d88 <LL_TIM_Init+0x108>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <LL_TIM_Init+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d00f      	beq.n	8004cc0 <LL_TIM_Init+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3a      	ldr	r2, [pc, #232]	; (8004d8c <LL_TIM_Init+0x10c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <LL_TIM_Init+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a39      	ldr	r2, [pc, #228]	; (8004d90 <LL_TIM_Init+0x110>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d007      	beq.n	8004cc0 <LL_TIM_Init+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a38      	ldr	r2, [pc, #224]	; (8004d94 <LL_TIM_Init+0x114>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <LL_TIM_Init+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a37      	ldr	r2, [pc, #220]	; (8004d98 <LL_TIM_Init+0x118>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d106      	bne.n	8004cce <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <LL_TIM_Init+0x108>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02b      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d027      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <LL_TIM_Init+0x10c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d023      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a29      	ldr	r2, [pc, #164]	; (8004d90 <LL_TIM_Init+0x110>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01f      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a28      	ldr	r2, [pc, #160]	; (8004d94 <LL_TIM_Init+0x114>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01b      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <LL_TIM_Init+0x118>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d017      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <LL_TIM_Init+0x11c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <LL_TIM_Init+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a24      	ldr	r2, [pc, #144]	; (8004da4 <LL_TIM_Init+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a23      	ldr	r2, [pc, #140]	; (8004da8 <LL_TIM_Init+0x128>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <LL_TIM_Init+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <LL_TIM_Init+0xae>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <LL_TIM_Init+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d106      	bne.n	8004d3c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff34 	bl	8004bb6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff20 	bl	8004b9a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <LL_TIM_Init+0x108>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <LL_TIM_Init+0xea>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a0c      	ldr	r2, [pc, #48]	; (8004d98 <LL_TIM_Init+0x118>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d105      	bne.n	8004d76 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ff2e 	bl	8004bd2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ff71 	bl	8004c5e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40010400 	.word	0x40010400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800
 8004da8:	40001800 	.word	0x40001800
 8004dac:	40001c00 	.word	0x40001c00
 8004db0:	40002000 	.word	0x40002000

08004db4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dca:	d027      	beq.n	8004e1c <LL_TIM_OC_Init+0x68>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	d82a      	bhi.n	8004e2a <LL_TIM_OC_Init+0x76>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dda:	d018      	beq.n	8004e0e <LL_TIM_OC_Init+0x5a>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de2:	d822      	bhi.n	8004e2a <LL_TIM_OC_Init+0x76>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d003      	beq.n	8004df2 <LL_TIM_OC_Init+0x3e>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d007      	beq.n	8004e00 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004df0:	e01b      	b.n	8004e2a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f81f 	bl	8004e38 <OC1Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfe:	e015      	b.n	8004e2c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f884 	bl	8004f10 <OC2Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0c:	e00e      	b.n	8004e2c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f8ed 	bl	8004ff0 <OC3Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	75fb      	strb	r3, [r7, #23]
      break;
 8004e1a:	e007      	b.n	8004e2c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f956 	bl	80050d0 <OC4Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]
      break;
 8004e28:	e000      	b.n	8004e2c <LL_TIM_OC_Init+0x78>
      break;
 8004e2a:	bf00      	nop
  }

  return result;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 0202 	bic.w	r2, r3, #2
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <OC1Config+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <OC1Config+0x6a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <OC1Config+0xd4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d11e      	bne.n	8004ee0 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 0208 	bic.w	r2, r3, #8
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 0204 	bic.w	r2, r3, #4
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fe7b 	bl	8004bee <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0210 	bic.w	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0220 	bic.w	r2, r3, #32
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0210 	bic.w	r2, r3, #16
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <OC2Config+0xd8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <OC2Config+0x70>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <OC2Config+0xdc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d11f      	bne.n	8004fc0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	019b      	lsls	r3, r3, #6
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	019b      	lsls	r3, r3, #6
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fe19 	bl	8004c0a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400

08004ff0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <OC3Config+0xd8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <OC3Config+0x6e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <OC3Config+0xdc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d11f      	bne.n	800509e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	029b      	lsls	r3, r3, #10
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	029b      	lsls	r3, r3, #10
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	015b      	lsls	r3, r3, #5
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fdb8 	bl	8004c26 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	031b      	lsls	r3, r3, #12
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	031b      	lsls	r3, r3, #12
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a11      	ldr	r2, [pc, #68]	; (8005178 <OC4Config+0xa8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <OC4Config+0x70>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a10      	ldr	r2, [pc, #64]	; (800517c <OC4Config+0xac>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d107      	bne.n	8005150 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	019b      	lsls	r3, r3, #6
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fd6d 	bl	8004c42 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40010000 	.word	0x40010000
 800517c:	40010400 	.word	0x40010400

08005180 <LL_USART_IsEnabled>:
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_USART_SetStopBitsLength>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_USART_SetHWFlowCtrl>:
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	615a      	str	r2, [r3, #20]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <LL_USART_SetBaudRate>:
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b0c0      	sub	sp, #256	; 0x100
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005200:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005204:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005208:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	f040 810c 	bne.w	8005430 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005218:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800521c:	2200      	movs	r2, #0
 800521e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	1891      	adds	r1, r2, r2
 8005230:	6639      	str	r1, [r7, #96]	; 0x60
 8005232:	415b      	adcs	r3, r3
 8005234:	667b      	str	r3, [r7, #100]	; 0x64
 8005236:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800523a:	4621      	mov	r1, r4
 800523c:	eb12 0801 	adds.w	r8, r2, r1
 8005240:	4629      	mov	r1, r5
 8005242:	eb43 0901 	adc.w	r9, r3, r1
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525a:	4690      	mov	r8, r2
 800525c:	4699      	mov	r9, r3
 800525e:	4623      	mov	r3, r4
 8005260:	eb18 0303 	adds.w	r3, r8, r3
 8005264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005268:	462b      	mov	r3, r5
 800526a:	eb49 0303 	adc.w	r3, r9, r3
 800526e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005272:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005276:	2200      	movs	r2, #0
 8005278:	469a      	mov	sl, r3
 800527a:	4693      	mov	fp, r2
 800527c:	eb1a 030a 	adds.w	r3, sl, sl
 8005280:	65bb      	str	r3, [r7, #88]	; 0x58
 8005282:	eb4b 030b 	adc.w	r3, fp, fp
 8005286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005288:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800528c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005290:	f7fb fcaa 	bl	8000be8 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4b64      	ldr	r3, [pc, #400]	; (800542c <LL_USART_SetBaudRate+0x238>)
 800529a:	fba3 2302 	umull	r2, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	b29c      	uxth	r4, r3
 80052a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052b0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052b4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	6539      	str	r1, [r7, #80]	; 0x50
 80052c0:	415b      	adcs	r3, r3
 80052c2:	657b      	str	r3, [r7, #84]	; 0x54
 80052c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052fc:	464b      	mov	r3, r9
 80052fe:	460a      	mov	r2, r1
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005308:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800530c:	2200      	movs	r2, #0
 800530e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005312:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005316:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800531a:	460b      	mov	r3, r1
 800531c:	18db      	adds	r3, r3, r3
 800531e:	643b      	str	r3, [r7, #64]	; 0x40
 8005320:	4613      	mov	r3, r2
 8005322:	eb42 0303 	adc.w	r3, r2, r3
 8005326:	647b      	str	r3, [r7, #68]	; 0x44
 8005328:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800532c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005330:	f7fb fc5a 	bl	8000be8 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4611      	mov	r1, r2
 800533a:	4b3c      	ldr	r3, [pc, #240]	; (800542c <LL_USART_SetBaudRate+0x238>)
 800533c:	fba3 2301 	umull	r2, r3, r3, r1
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	2264      	movs	r2, #100	; 0x64
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	1acb      	subs	r3, r1, r3
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <LL_USART_SetBaudRate+0x238>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	b29b      	uxth	r3, r3
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	b29b      	uxth	r3, r3
 800535e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005362:	b29b      	uxth	r3, r3
 8005364:	4423      	add	r3, r4
 8005366:	b29c      	uxth	r4, r3
 8005368:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800536c:	2200      	movs	r2, #0
 800536e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005372:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005376:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800537a:	4642      	mov	r2, r8
 800537c:	464b      	mov	r3, r9
 800537e:	1891      	adds	r1, r2, r2
 8005380:	63b9      	str	r1, [r7, #56]	; 0x38
 8005382:	415b      	adcs	r3, r3
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005386:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800538a:	4641      	mov	r1, r8
 800538c:	1851      	adds	r1, r2, r1
 800538e:	6339      	str	r1, [r7, #48]	; 0x30
 8005390:	4649      	mov	r1, r9
 8005392:	414b      	adcs	r3, r1
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053a2:	4659      	mov	r1, fp
 80053a4:	00cb      	lsls	r3, r1, #3
 80053a6:	4651      	mov	r1, sl
 80053a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ac:	4651      	mov	r1, sl
 80053ae:	00ca      	lsls	r2, r1, #3
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	4603      	mov	r3, r0
 80053b6:	4642      	mov	r2, r8
 80053b8:	189b      	adds	r3, r3, r2
 80053ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053be:	464b      	mov	r3, r9
 80053c0:	460a      	mov	r2, r1
 80053c2:	eb42 0303 	adc.w	r3, r2, r3
 80053c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80053d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80053dc:	460b      	mov	r3, r1
 80053de:	18db      	adds	r3, r3, r3
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e2:	4613      	mov	r3, r2
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80053f2:	f7fb fbf9 	bl	8000be8 <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <LL_USART_SetBaudRate+0x238>)
 80053fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	2164      	movs	r1, #100	; 0x64
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	3332      	adds	r3, #50	; 0x32
 800540e:	4a07      	ldr	r2, [pc, #28]	; (800542c <LL_USART_SetBaudRate+0x238>)
 8005410:	fba2 2303 	umull	r2, r3, r2, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	b29b      	uxth	r3, r3
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	b29b      	uxth	r3, r3
 800541e:	4423      	add	r3, r4
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005428:	609a      	str	r2, [r3, #8]
}
 800542a:	e107      	b.n	800563c <LL_USART_SetBaudRate+0x448>
 800542c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005430:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800543a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800543e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005442:	4642      	mov	r2, r8
 8005444:	464b      	mov	r3, r9
 8005446:	1891      	adds	r1, r2, r2
 8005448:	6239      	str	r1, [r7, #32]
 800544a:	415b      	adcs	r3, r3
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
 800544e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005452:	4641      	mov	r1, r8
 8005454:	1854      	adds	r4, r2, r1
 8005456:	4649      	mov	r1, r9
 8005458:	eb43 0501 	adc.w	r5, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	00eb      	lsls	r3, r5, #3
 8005466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	4614      	mov	r4, r2
 800546e:	461d      	mov	r5, r3
 8005470:	4643      	mov	r3, r8
 8005472:	18e3      	adds	r3, r4, r3
 8005474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005478:	464b      	mov	r3, r9
 800547a:	eb45 0303 	adc.w	r3, r5, r3
 800547e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005482:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800548c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800549c:	4629      	mov	r1, r5
 800549e:	008b      	lsls	r3, r1, #2
 80054a0:	4621      	mov	r1, r4
 80054a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a6:	4621      	mov	r1, r4
 80054a8:	008a      	lsls	r2, r1, #2
 80054aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80054ae:	f7fb fb9b 	bl	8000be8 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4b64      	ldr	r3, [pc, #400]	; (8005648 <LL_USART_SetBaudRate+0x454>)
 80054b8:	fba3 2302 	umull	r2, r3, r3, r2
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	b29b      	uxth	r3, r3
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	b29c      	uxth	r4, r3
 80054c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054d2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80054d6:	4642      	mov	r2, r8
 80054d8:	464b      	mov	r3, r9
 80054da:	1891      	adds	r1, r2, r2
 80054dc:	61b9      	str	r1, [r7, #24]
 80054de:	415b      	adcs	r3, r3
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e6:	4641      	mov	r1, r8
 80054e8:	1851      	adds	r1, r2, r1
 80054ea:	6139      	str	r1, [r7, #16]
 80054ec:	4649      	mov	r1, r9
 80054ee:	414b      	adcs	r3, r1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054fe:	4659      	mov	r1, fp
 8005500:	00cb      	lsls	r3, r1, #3
 8005502:	4651      	mov	r1, sl
 8005504:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005508:	4651      	mov	r1, sl
 800550a:	00ca      	lsls	r2, r1, #3
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	4603      	mov	r3, r0
 8005512:	4642      	mov	r2, r8
 8005514:	189b      	adds	r3, r3, r2
 8005516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800551a:	464b      	mov	r3, r9
 800551c:	460a      	mov	r2, r1
 800551e:	eb42 0303 	adc.w	r3, r2, r3
 8005522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005526:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800552a:	2200      	movs	r2, #0
 800552c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005530:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005540:	4649      	mov	r1, r9
 8005542:	008b      	lsls	r3, r1, #2
 8005544:	4641      	mov	r1, r8
 8005546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800554a:	4641      	mov	r1, r8
 800554c:	008a      	lsls	r2, r1, #2
 800554e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005552:	f7fb fb49 	bl	8000be8 <__aeabi_uldivmod>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <LL_USART_SetBaudRate+0x454>)
 800555c:	fba3 1302 	umull	r1, r3, r3, r2
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	2164      	movs	r1, #100	; 0x64
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	3332      	adds	r3, #50	; 0x32
 800556e:	4a36      	ldr	r2, [pc, #216]	; (8005648 <LL_USART_SetBaudRate+0x454>)
 8005570:	fba2 2303 	umull	r2, r3, r2, r3
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	b29b      	uxth	r3, r3
 8005578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800557c:	b29b      	uxth	r3, r3
 800557e:	4423      	add	r3, r4
 8005580:	b29c      	uxth	r4, r3
 8005582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005586:	2200      	movs	r2, #0
 8005588:	67bb      	str	r3, [r7, #120]	; 0x78
 800558a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800558c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	1891      	adds	r1, r2, r2
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	415b      	adcs	r3, r3
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a0:	4641      	mov	r1, r8
 80055a2:	1851      	adds	r1, r2, r1
 80055a4:	6039      	str	r1, [r7, #0]
 80055a6:	4649      	mov	r1, r9
 80055a8:	414b      	adcs	r3, r1
 80055aa:	607b      	str	r3, [r7, #4]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055b8:	4659      	mov	r1, fp
 80055ba:	00cb      	lsls	r3, r1, #3
 80055bc:	4651      	mov	r1, sl
 80055be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c2:	4651      	mov	r1, sl
 80055c4:	00ca      	lsls	r2, r1, #3
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	4603      	mov	r3, r0
 80055cc:	4642      	mov	r2, r8
 80055ce:	189b      	adds	r3, r3, r2
 80055d0:	673b      	str	r3, [r7, #112]	; 0x70
 80055d2:	464b      	mov	r3, r9
 80055d4:	460a      	mov	r2, r1
 80055d6:	eb42 0303 	adc.w	r3, r2, r3
 80055da:	677b      	str	r3, [r7, #116]	; 0x74
 80055dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055e0:	2200      	movs	r2, #0
 80055e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80055f2:	4649      	mov	r1, r9
 80055f4:	008b      	lsls	r3, r1, #2
 80055f6:	4641      	mov	r1, r8
 80055f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055fc:	4641      	mov	r1, r8
 80055fe:	008a      	lsls	r2, r1, #2
 8005600:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005604:	f7fb faf0 	bl	8000be8 <__aeabi_uldivmod>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <LL_USART_SetBaudRate+0x454>)
 800560e:	fba3 1302 	umull	r1, r3, r3, r2
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2164      	movs	r1, #100	; 0x64
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	3332      	adds	r3, #50	; 0x32
 8005620:	4a09      	ldr	r2, [pc, #36]	; (8005648 <LL_USART_SetBaudRate+0x454>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	b29b      	uxth	r3, r3
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	b29b      	uxth	r3, r3
 8005630:	4423      	add	r3, r4
 8005632:	b29b      	uxth	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005642:	46bd      	mov	sp, r7
 8005644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005648:	51eb851f 	.word	0x51eb851f

0800564c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff fd8e 	bl	8005180 <LL_USART_IsEnabled>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d15e      	bne.n	8005728 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005672:	f023 030c 	bic.w	r3, r3, #12
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	6851      	ldr	r1, [r2, #4]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	68d2      	ldr	r2, [r2, #12]
 800567e:	4311      	orrs	r1, r2
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	6912      	ldr	r2, [r2, #16]
 8005684:	4311      	orrs	r1, r2
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	6992      	ldr	r2, [r2, #24]
 800568a:	430a      	orrs	r2, r1
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fd85 	bl	80051a8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff fd92 	bl	80051ce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff f934 	bl	800491c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <LL_USART_Init+0xe8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d102      	bne.n	80056c2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	e021      	b.n	8005706 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <LL_USART_Init+0xec>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d102      	bne.n	80056d0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e01a      	b.n	8005706 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a1a      	ldr	r2, [pc, #104]	; (800573c <LL_USART_Init+0xf0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d102      	bne.n	80056de <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e013      	b.n	8005706 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a17      	ldr	r2, [pc, #92]	; (8005740 <LL_USART_Init+0xf4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d102      	bne.n	80056ec <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e00c      	b.n	8005706 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <LL_USART_Init+0xf8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d102      	bne.n	80056fa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	e005      	b.n	8005706 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a12      	ldr	r2, [pc, #72]	; (8005748 <LL_USART_Init+0xfc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d101      	bne.n	8005706 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005714:	2300      	movs	r3, #0
 8005716:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fd66 	bl	80051f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005728:	7ffb      	ldrb	r3, [r7, #31]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40011000 	.word	0x40011000
 8005738:	40004400 	.word	0x40004400
 800573c:	40004800 	.word	0x40004800
 8005740:	40011400 	.word	0x40011400
 8005744:	40004c00 	.word	0x40004c00
 8005748:	40005000 	.word	0x40005000

0800574c <__errno>:
 800574c:	4b01      	ldr	r3, [pc, #4]	; (8005754 <__errno+0x8>)
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	2000000c 	.word	0x2000000c

08005758 <__libc_init_array>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	4d0d      	ldr	r5, [pc, #52]	; (8005790 <__libc_init_array+0x38>)
 800575c:	4c0d      	ldr	r4, [pc, #52]	; (8005794 <__libc_init_array+0x3c>)
 800575e:	1b64      	subs	r4, r4, r5
 8005760:	10a4      	asrs	r4, r4, #2
 8005762:	2600      	movs	r6, #0
 8005764:	42a6      	cmp	r6, r4
 8005766:	d109      	bne.n	800577c <__libc_init_array+0x24>
 8005768:	4d0b      	ldr	r5, [pc, #44]	; (8005798 <__libc_init_array+0x40>)
 800576a:	4c0c      	ldr	r4, [pc, #48]	; (800579c <__libc_init_array+0x44>)
 800576c:	f002 fdc2 	bl	80082f4 <_init>
 8005770:	1b64      	subs	r4, r4, r5
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	2600      	movs	r6, #0
 8005776:	42a6      	cmp	r6, r4
 8005778:	d105      	bne.n	8005786 <__libc_init_array+0x2e>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005780:	4798      	blx	r3
 8005782:	3601      	adds	r6, #1
 8005784:	e7ee      	b.n	8005764 <__libc_init_array+0xc>
 8005786:	f855 3b04 	ldr.w	r3, [r5], #4
 800578a:	4798      	blx	r3
 800578c:	3601      	adds	r6, #1
 800578e:	e7f2      	b.n	8005776 <__libc_init_array+0x1e>
 8005790:	080088e4 	.word	0x080088e4
 8005794:	080088e4 	.word	0x080088e4
 8005798:	080088e4 	.word	0x080088e4
 800579c:	080088e8 	.word	0x080088e8

080057a0 <memset>:
 80057a0:	4402      	add	r2, r0
 80057a2:	4603      	mov	r3, r0
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d100      	bne.n	80057aa <memset+0xa>
 80057a8:	4770      	bx	lr
 80057aa:	f803 1b01 	strb.w	r1, [r3], #1
 80057ae:	e7f9      	b.n	80057a4 <memset+0x4>

080057b0 <__cvt>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	ec55 4b10 	vmov	r4, r5, d0
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	460e      	mov	r6, r1
 80057bc:	4619      	mov	r1, r3
 80057be:	462b      	mov	r3, r5
 80057c0:	bfbb      	ittet	lt
 80057c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057c6:	461d      	movlt	r5, r3
 80057c8:	2300      	movge	r3, #0
 80057ca:	232d      	movlt	r3, #45	; 0x2d
 80057cc:	700b      	strb	r3, [r1, #0]
 80057ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057d4:	4691      	mov	r9, r2
 80057d6:	f023 0820 	bic.w	r8, r3, #32
 80057da:	bfbc      	itt	lt
 80057dc:	4622      	movlt	r2, r4
 80057de:	4614      	movlt	r4, r2
 80057e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057e4:	d005      	beq.n	80057f2 <__cvt+0x42>
 80057e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057ea:	d100      	bne.n	80057ee <__cvt+0x3e>
 80057ec:	3601      	adds	r6, #1
 80057ee:	2102      	movs	r1, #2
 80057f0:	e000      	b.n	80057f4 <__cvt+0x44>
 80057f2:	2103      	movs	r1, #3
 80057f4:	ab03      	add	r3, sp, #12
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	ab02      	add	r3, sp, #8
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	ec45 4b10 	vmov	d0, r4, r5
 8005800:	4653      	mov	r3, sl
 8005802:	4632      	mov	r2, r6
 8005804:	f000 fe18 	bl	8006438 <_dtoa_r>
 8005808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800580c:	4607      	mov	r7, r0
 800580e:	d102      	bne.n	8005816 <__cvt+0x66>
 8005810:	f019 0f01 	tst.w	r9, #1
 8005814:	d022      	beq.n	800585c <__cvt+0xac>
 8005816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800581a:	eb07 0906 	add.w	r9, r7, r6
 800581e:	d110      	bne.n	8005842 <__cvt+0x92>
 8005820:	783b      	ldrb	r3, [r7, #0]
 8005822:	2b30      	cmp	r3, #48	; 0x30
 8005824:	d10a      	bne.n	800583c <__cvt+0x8c>
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	4620      	mov	r0, r4
 800582c:	4629      	mov	r1, r5
 800582e:	f7fb f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005832:	b918      	cbnz	r0, 800583c <__cvt+0x8c>
 8005834:	f1c6 0601 	rsb	r6, r6, #1
 8005838:	f8ca 6000 	str.w	r6, [sl]
 800583c:	f8da 3000 	ldr.w	r3, [sl]
 8005840:	4499      	add	r9, r3
 8005842:	2200      	movs	r2, #0
 8005844:	2300      	movs	r3, #0
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fb f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800584e:	b108      	cbz	r0, 8005854 <__cvt+0xa4>
 8005850:	f8cd 900c 	str.w	r9, [sp, #12]
 8005854:	2230      	movs	r2, #48	; 0x30
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	454b      	cmp	r3, r9
 800585a:	d307      	bcc.n	800586c <__cvt+0xbc>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005860:	1bdb      	subs	r3, r3, r7
 8005862:	4638      	mov	r0, r7
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	b004      	add	sp, #16
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	1c59      	adds	r1, r3, #1
 800586e:	9103      	str	r1, [sp, #12]
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e7f0      	b.n	8005856 <__cvt+0xa6>

08005874 <__exponent>:
 8005874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005876:	4603      	mov	r3, r0
 8005878:	2900      	cmp	r1, #0
 800587a:	bfb8      	it	lt
 800587c:	4249      	neglt	r1, r1
 800587e:	f803 2b02 	strb.w	r2, [r3], #2
 8005882:	bfb4      	ite	lt
 8005884:	222d      	movlt	r2, #45	; 0x2d
 8005886:	222b      	movge	r2, #43	; 0x2b
 8005888:	2909      	cmp	r1, #9
 800588a:	7042      	strb	r2, [r0, #1]
 800588c:	dd2a      	ble.n	80058e4 <__exponent+0x70>
 800588e:	f10d 0407 	add.w	r4, sp, #7
 8005892:	46a4      	mov	ip, r4
 8005894:	270a      	movs	r7, #10
 8005896:	46a6      	mov	lr, r4
 8005898:	460a      	mov	r2, r1
 800589a:	fb91 f6f7 	sdiv	r6, r1, r7
 800589e:	fb07 1516 	mls	r5, r7, r6, r1
 80058a2:	3530      	adds	r5, #48	; 0x30
 80058a4:	2a63      	cmp	r2, #99	; 0x63
 80058a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80058aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058ae:	4631      	mov	r1, r6
 80058b0:	dcf1      	bgt.n	8005896 <__exponent+0x22>
 80058b2:	3130      	adds	r1, #48	; 0x30
 80058b4:	f1ae 0502 	sub.w	r5, lr, #2
 80058b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058bc:	1c44      	adds	r4, r0, #1
 80058be:	4629      	mov	r1, r5
 80058c0:	4561      	cmp	r1, ip
 80058c2:	d30a      	bcc.n	80058da <__exponent+0x66>
 80058c4:	f10d 0209 	add.w	r2, sp, #9
 80058c8:	eba2 020e 	sub.w	r2, r2, lr
 80058cc:	4565      	cmp	r5, ip
 80058ce:	bf88      	it	hi
 80058d0:	2200      	movhi	r2, #0
 80058d2:	4413      	add	r3, r2
 80058d4:	1a18      	subs	r0, r3, r0
 80058d6:	b003      	add	sp, #12
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058e2:	e7ed      	b.n	80058c0 <__exponent+0x4c>
 80058e4:	2330      	movs	r3, #48	; 0x30
 80058e6:	3130      	adds	r1, #48	; 0x30
 80058e8:	7083      	strb	r3, [r0, #2]
 80058ea:	70c1      	strb	r1, [r0, #3]
 80058ec:	1d03      	adds	r3, r0, #4
 80058ee:	e7f1      	b.n	80058d4 <__exponent+0x60>

080058f0 <_printf_float>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	ed2d 8b02 	vpush	{d8}
 80058f8:	b08d      	sub	sp, #52	; 0x34
 80058fa:	460c      	mov	r4, r1
 80058fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005900:	4616      	mov	r6, r2
 8005902:	461f      	mov	r7, r3
 8005904:	4605      	mov	r5, r0
 8005906:	f001 fd3d 	bl	8007384 <_localeconv_r>
 800590a:	f8d0 a000 	ldr.w	sl, [r0]
 800590e:	4650      	mov	r0, sl
 8005910:	f7fa fc5e 	bl	80001d0 <strlen>
 8005914:	2300      	movs	r3, #0
 8005916:	930a      	str	r3, [sp, #40]	; 0x28
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	f8d8 3000 	ldr.w	r3, [r8]
 8005920:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005924:	3307      	adds	r3, #7
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	f103 0208 	add.w	r2, r3, #8
 800592e:	f8c8 2000 	str.w	r2, [r8]
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800593a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800593e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005942:	9307      	str	r3, [sp, #28]
 8005944:	f8cd 8018 	str.w	r8, [sp, #24]
 8005948:	ee08 0a10 	vmov	s16, r0
 800594c:	4b9f      	ldr	r3, [pc, #636]	; (8005bcc <_printf_float+0x2dc>)
 800594e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	f7fb f8e9 	bl	8000b2c <__aeabi_dcmpun>
 800595a:	bb88      	cbnz	r0, 80059c0 <_printf_float+0xd0>
 800595c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005960:	4b9a      	ldr	r3, [pc, #616]	; (8005bcc <_printf_float+0x2dc>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	f7fb f8c3 	bl	8000af0 <__aeabi_dcmple>
 800596a:	bb48      	cbnz	r0, 80059c0 <_printf_float+0xd0>
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fb f8b2 	bl	8000adc <__aeabi_dcmplt>
 8005978:	b110      	cbz	r0, 8005980 <_printf_float+0x90>
 800597a:	232d      	movs	r3, #45	; 0x2d
 800597c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005980:	4b93      	ldr	r3, [pc, #588]	; (8005bd0 <_printf_float+0x2e0>)
 8005982:	4894      	ldr	r0, [pc, #592]	; (8005bd4 <_printf_float+0x2e4>)
 8005984:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005988:	bf94      	ite	ls
 800598a:	4698      	movls	r8, r3
 800598c:	4680      	movhi	r8, r0
 800598e:	2303      	movs	r3, #3
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	9b05      	ldr	r3, [sp, #20]
 8005994:	f023 0204 	bic.w	r2, r3, #4
 8005998:	6022      	str	r2, [r4, #0]
 800599a:	f04f 0900 	mov.w	r9, #0
 800599e:	9700      	str	r7, [sp, #0]
 80059a0:	4633      	mov	r3, r6
 80059a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f9d8 	bl	8005d5c <_printf_common>
 80059ac:	3001      	adds	r0, #1
 80059ae:	f040 8090 	bne.w	8005ad2 <_printf_float+0x1e2>
 80059b2:	f04f 30ff 	mov.w	r0, #4294967295
 80059b6:	b00d      	add	sp, #52	; 0x34
 80059b8:	ecbd 8b02 	vpop	{d8}
 80059bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c0:	4642      	mov	r2, r8
 80059c2:	464b      	mov	r3, r9
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fb f8b0 	bl	8000b2c <__aeabi_dcmpun>
 80059cc:	b140      	cbz	r0, 80059e0 <_printf_float+0xf0>
 80059ce:	464b      	mov	r3, r9
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bfbc      	itt	lt
 80059d4:	232d      	movlt	r3, #45	; 0x2d
 80059d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059da:	487f      	ldr	r0, [pc, #508]	; (8005bd8 <_printf_float+0x2e8>)
 80059dc:	4b7f      	ldr	r3, [pc, #508]	; (8005bdc <_printf_float+0x2ec>)
 80059de:	e7d1      	b.n	8005984 <_printf_float+0x94>
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059e6:	9206      	str	r2, [sp, #24]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	d13f      	bne.n	8005a6c <_printf_float+0x17c>
 80059ec:	2306      	movs	r3, #6
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	9b05      	ldr	r3, [sp, #20]
 80059f2:	6861      	ldr	r1, [r4, #4]
 80059f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059f8:	2300      	movs	r3, #0
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	ab0a      	add	r3, sp, #40	; 0x28
 80059fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a02:	ab09      	add	r3, sp, #36	; 0x24
 8005a04:	ec49 8b10 	vmov	d0, r8, r9
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	6022      	str	r2, [r4, #0]
 8005a0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a10:	4628      	mov	r0, r5
 8005a12:	f7ff fecd 	bl	80057b0 <__cvt>
 8005a16:	9b06      	ldr	r3, [sp, #24]
 8005a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a1a:	2b47      	cmp	r3, #71	; 0x47
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	d108      	bne.n	8005a32 <_printf_float+0x142>
 8005a20:	1cc8      	adds	r0, r1, #3
 8005a22:	db02      	blt.n	8005a2a <_printf_float+0x13a>
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	4299      	cmp	r1, r3
 8005a28:	dd41      	ble.n	8005aae <_printf_float+0x1be>
 8005a2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a2e:	fa5f fb8b 	uxtb.w	fp, fp
 8005a32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a36:	d820      	bhi.n	8005a7a <_printf_float+0x18a>
 8005a38:	3901      	subs	r1, #1
 8005a3a:	465a      	mov	r2, fp
 8005a3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a40:	9109      	str	r1, [sp, #36]	; 0x24
 8005a42:	f7ff ff17 	bl	8005874 <__exponent>
 8005a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a48:	1813      	adds	r3, r2, r0
 8005a4a:	2a01      	cmp	r2, #1
 8005a4c:	4681      	mov	r9, r0
 8005a4e:	6123      	str	r3, [r4, #16]
 8005a50:	dc02      	bgt.n	8005a58 <_printf_float+0x168>
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	07d2      	lsls	r2, r2, #31
 8005a56:	d501      	bpl.n	8005a5c <_printf_float+0x16c>
 8005a58:	3301      	adds	r3, #1
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d09c      	beq.n	800599e <_printf_float+0xae>
 8005a64:	232d      	movs	r3, #45	; 0x2d
 8005a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6a:	e798      	b.n	800599e <_printf_float+0xae>
 8005a6c:	9a06      	ldr	r2, [sp, #24]
 8005a6e:	2a47      	cmp	r2, #71	; 0x47
 8005a70:	d1be      	bne.n	80059f0 <_printf_float+0x100>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1bc      	bne.n	80059f0 <_printf_float+0x100>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e7b9      	b.n	80059ee <_printf_float+0xfe>
 8005a7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a7e:	d118      	bne.n	8005ab2 <_printf_float+0x1c2>
 8005a80:	2900      	cmp	r1, #0
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	dd0b      	ble.n	8005a9e <_printf_float+0x1ae>
 8005a86:	6121      	str	r1, [r4, #16]
 8005a88:	b913      	cbnz	r3, 8005a90 <_printf_float+0x1a0>
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	07d0      	lsls	r0, r2, #31
 8005a8e:	d502      	bpl.n	8005a96 <_printf_float+0x1a6>
 8005a90:	3301      	adds	r3, #1
 8005a92:	440b      	add	r3, r1
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a98:	f04f 0900 	mov.w	r9, #0
 8005a9c:	e7de      	b.n	8005a5c <_printf_float+0x16c>
 8005a9e:	b913      	cbnz	r3, 8005aa6 <_printf_float+0x1b6>
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	07d2      	lsls	r2, r2, #31
 8005aa4:	d501      	bpl.n	8005aaa <_printf_float+0x1ba>
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	e7f4      	b.n	8005a94 <_printf_float+0x1a4>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e7f2      	b.n	8005a94 <_printf_float+0x1a4>
 8005aae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab4:	4299      	cmp	r1, r3
 8005ab6:	db05      	blt.n	8005ac4 <_printf_float+0x1d4>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	6121      	str	r1, [r4, #16]
 8005abc:	07d8      	lsls	r0, r3, #31
 8005abe:	d5ea      	bpl.n	8005a96 <_printf_float+0x1a6>
 8005ac0:	1c4b      	adds	r3, r1, #1
 8005ac2:	e7e7      	b.n	8005a94 <_printf_float+0x1a4>
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	bfd4      	ite	le
 8005ac8:	f1c1 0202 	rsble	r2, r1, #2
 8005acc:	2201      	movgt	r2, #1
 8005ace:	4413      	add	r3, r2
 8005ad0:	e7e0      	b.n	8005a94 <_printf_float+0x1a4>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	055a      	lsls	r2, r3, #21
 8005ad6:	d407      	bmi.n	8005ae8 <_printf_float+0x1f8>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	4642      	mov	r2, r8
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d12c      	bne.n	8005b40 <_printf_float+0x250>
 8005ae6:	e764      	b.n	80059b2 <_printf_float+0xc2>
 8005ae8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aec:	f240 80e0 	bls.w	8005cb0 <_printf_float+0x3c0>
 8005af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	f7fa ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d034      	beq.n	8005b6a <_printf_float+0x27a>
 8005b00:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <_printf_float+0x2f0>)
 8005b02:	2301      	movs	r3, #1
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af51 	beq.w	80059b2 <_printf_float+0xc2>
 8005b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b14:	429a      	cmp	r2, r3
 8005b16:	db02      	blt.n	8005b1e <_printf_float+0x22e>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	07d8      	lsls	r0, r3, #31
 8005b1c:	d510      	bpl.n	8005b40 <_printf_float+0x250>
 8005b1e:	ee18 3a10 	vmov	r3, s16
 8005b22:	4652      	mov	r2, sl
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f af41 	beq.w	80059b2 <_printf_float+0xc2>
 8005b30:	f04f 0800 	mov.w	r8, #0
 8005b34:	f104 091a 	add.w	r9, r4, #26
 8005b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	dc09      	bgt.n	8005b54 <_printf_float+0x264>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	079b      	lsls	r3, r3, #30
 8005b44:	f100 8105 	bmi.w	8005d52 <_printf_float+0x462>
 8005b48:	68e0      	ldr	r0, [r4, #12]
 8005b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4c:	4298      	cmp	r0, r3
 8005b4e:	bfb8      	it	lt
 8005b50:	4618      	movlt	r0, r3
 8005b52:	e730      	b.n	80059b6 <_printf_float+0xc6>
 8005b54:	2301      	movs	r3, #1
 8005b56:	464a      	mov	r2, r9
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f af27 	beq.w	80059b2 <_printf_float+0xc2>
 8005b64:	f108 0801 	add.w	r8, r8, #1
 8005b68:	e7e6      	b.n	8005b38 <_printf_float+0x248>
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dc39      	bgt.n	8005be4 <_printf_float+0x2f4>
 8005b70:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <_printf_float+0x2f0>)
 8005b72:	2301      	movs	r3, #1
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f af19 	beq.w	80059b2 <_printf_float+0xc2>
 8005b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d102      	bne.n	8005b8e <_printf_float+0x29e>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	07d9      	lsls	r1, r3, #31
 8005b8c:	d5d8      	bpl.n	8005b40 <_printf_float+0x250>
 8005b8e:	ee18 3a10 	vmov	r3, s16
 8005b92:	4652      	mov	r2, sl
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af09 	beq.w	80059b2 <_printf_float+0xc2>
 8005ba0:	f04f 0900 	mov.w	r9, #0
 8005ba4:	f104 0a1a 	add.w	sl, r4, #26
 8005ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005baa:	425b      	negs	r3, r3
 8005bac:	454b      	cmp	r3, r9
 8005bae:	dc01      	bgt.n	8005bb4 <_printf_float+0x2c4>
 8005bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb2:	e792      	b.n	8005ada <_printf_float+0x1ea>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4652      	mov	r2, sl
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f aef7 	beq.w	80059b2 <_printf_float+0xc2>
 8005bc4:	f109 0901 	add.w	r9, r9, #1
 8005bc8:	e7ee      	b.n	8005ba8 <_printf_float+0x2b8>
 8005bca:	bf00      	nop
 8005bcc:	7fefffff 	.word	0x7fefffff
 8005bd0:	08008508 	.word	0x08008508
 8005bd4:	0800850c 	.word	0x0800850c
 8005bd8:	08008514 	.word	0x08008514
 8005bdc:	08008510 	.word	0x08008510
 8005be0:	08008518 	.word	0x08008518
 8005be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005be8:	429a      	cmp	r2, r3
 8005bea:	bfa8      	it	ge
 8005bec:	461a      	movge	r2, r3
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	4691      	mov	r9, r2
 8005bf2:	dc37      	bgt.n	8005c64 <_printf_float+0x374>
 8005bf4:	f04f 0b00 	mov.w	fp, #0
 8005bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bfc:	f104 021a 	add.w	r2, r4, #26
 8005c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c02:	9305      	str	r3, [sp, #20]
 8005c04:	eba3 0309 	sub.w	r3, r3, r9
 8005c08:	455b      	cmp	r3, fp
 8005c0a:	dc33      	bgt.n	8005c74 <_printf_float+0x384>
 8005c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c10:	429a      	cmp	r2, r3
 8005c12:	db3b      	blt.n	8005c8c <_printf_float+0x39c>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	07da      	lsls	r2, r3, #31
 8005c18:	d438      	bmi.n	8005c8c <_printf_float+0x39c>
 8005c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1c:	9a05      	ldr	r2, [sp, #20]
 8005c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c20:	1a9a      	subs	r2, r3, r2
 8005c22:	eba3 0901 	sub.w	r9, r3, r1
 8005c26:	4591      	cmp	r9, r2
 8005c28:	bfa8      	it	ge
 8005c2a:	4691      	movge	r9, r2
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	dc35      	bgt.n	8005c9e <_printf_float+0x3ae>
 8005c32:	f04f 0800 	mov.w	r8, #0
 8005c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c3a:	f104 0a1a 	add.w	sl, r4, #26
 8005c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c42:	1a9b      	subs	r3, r3, r2
 8005c44:	eba3 0309 	sub.w	r3, r3, r9
 8005c48:	4543      	cmp	r3, r8
 8005c4a:	f77f af79 	ble.w	8005b40 <_printf_float+0x250>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4652      	mov	r2, sl
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f aeaa 	beq.w	80059b2 <_printf_float+0xc2>
 8005c5e:	f108 0801 	add.w	r8, r8, #1
 8005c62:	e7ec      	b.n	8005c3e <_printf_float+0x34e>
 8005c64:	4613      	mov	r3, r2
 8005c66:	4631      	mov	r1, r6
 8005c68:	4642      	mov	r2, r8
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d1c0      	bne.n	8005bf4 <_printf_float+0x304>
 8005c72:	e69e      	b.n	80059b2 <_printf_float+0xc2>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	9205      	str	r2, [sp, #20]
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f ae97 	beq.w	80059b2 <_printf_float+0xc2>
 8005c84:	9a05      	ldr	r2, [sp, #20]
 8005c86:	f10b 0b01 	add.w	fp, fp, #1
 8005c8a:	e7b9      	b.n	8005c00 <_printf_float+0x310>
 8005c8c:	ee18 3a10 	vmov	r3, s16
 8005c90:	4652      	mov	r2, sl
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d1be      	bne.n	8005c1a <_printf_float+0x32a>
 8005c9c:	e689      	b.n	80059b2 <_printf_float+0xc2>
 8005c9e:	9a05      	ldr	r2, [sp, #20]
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	4442      	add	r2, r8
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	d1c1      	bne.n	8005c32 <_printf_float+0x342>
 8005cae:	e680      	b.n	80059b2 <_printf_float+0xc2>
 8005cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cb2:	2a01      	cmp	r2, #1
 8005cb4:	dc01      	bgt.n	8005cba <_printf_float+0x3ca>
 8005cb6:	07db      	lsls	r3, r3, #31
 8005cb8:	d538      	bpl.n	8005d2c <_printf_float+0x43c>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f ae74 	beq.w	80059b2 <_printf_float+0xc2>
 8005cca:	ee18 3a10 	vmov	r3, s16
 8005cce:	4652      	mov	r2, sl
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f ae6b 	beq.w	80059b2 <_printf_float+0xc2>
 8005cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f7fa fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ce8:	b9d8      	cbnz	r0, 8005d22 <_printf_float+0x432>
 8005cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cec:	f108 0201 	add.w	r2, r8, #1
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d10e      	bne.n	8005d1a <_printf_float+0x42a>
 8005cfc:	e659      	b.n	80059b2 <_printf_float+0xc2>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f ae52 	beq.w	80059b2 <_printf_float+0xc2>
 8005d0e:	f108 0801 	add.w	r8, r8, #1
 8005d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	4543      	cmp	r3, r8
 8005d18:	dcf1      	bgt.n	8005cfe <_printf_float+0x40e>
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d20:	e6dc      	b.n	8005adc <_printf_float+0x1ec>
 8005d22:	f04f 0800 	mov.w	r8, #0
 8005d26:	f104 0a1a 	add.w	sl, r4, #26
 8005d2a:	e7f2      	b.n	8005d12 <_printf_float+0x422>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4642      	mov	r2, r8
 8005d30:	e7df      	b.n	8005cf2 <_printf_float+0x402>
 8005d32:	2301      	movs	r3, #1
 8005d34:	464a      	mov	r2, r9
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	f43f ae38 	beq.w	80059b2 <_printf_float+0xc2>
 8005d42:	f108 0801 	add.w	r8, r8, #1
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d4a:	1a5b      	subs	r3, r3, r1
 8005d4c:	4543      	cmp	r3, r8
 8005d4e:	dcf0      	bgt.n	8005d32 <_printf_float+0x442>
 8005d50:	e6fa      	b.n	8005b48 <_printf_float+0x258>
 8005d52:	f04f 0800 	mov.w	r8, #0
 8005d56:	f104 0919 	add.w	r9, r4, #25
 8005d5a:	e7f4      	b.n	8005d46 <_printf_float+0x456>

08005d5c <_printf_common>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	4616      	mov	r6, r2
 8005d62:	4699      	mov	r9, r3
 8005d64:	688a      	ldr	r2, [r1, #8]
 8005d66:	690b      	ldr	r3, [r1, #16]
 8005d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfb8      	it	lt
 8005d70:	4613      	movlt	r3, r2
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d78:	4607      	mov	r7, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b10a      	cbz	r2, 8005d82 <_printf_common+0x26>
 8005d7e:	3301      	adds	r3, #1
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0699      	lsls	r1, r3, #26
 8005d86:	bf42      	ittt	mi
 8005d88:	6833      	ldrmi	r3, [r6, #0]
 8005d8a:	3302      	addmi	r3, #2
 8005d8c:	6033      	strmi	r3, [r6, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	f015 0506 	ands.w	r5, r5, #6
 8005d94:	d106      	bne.n	8005da4 <_printf_common+0x48>
 8005d96:	f104 0a19 	add.w	sl, r4, #25
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	6832      	ldr	r2, [r6, #0]
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	dc26      	bgt.n	8005df2 <_printf_common+0x96>
 8005da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005da8:	1e13      	subs	r3, r2, #0
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	bf18      	it	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	0692      	lsls	r2, r2, #26
 8005db2:	d42b      	bmi.n	8005e0c <_printf_common+0xb0>
 8005db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005db8:	4649      	mov	r1, r9
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c0      	blx	r8
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d01e      	beq.n	8005e00 <_printf_common+0xa4>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	68e5      	ldr	r5, [r4, #12]
 8005dc6:	6832      	ldr	r2, [r6, #0]
 8005dc8:	f003 0306 	and.w	r3, r3, #6
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	bf08      	it	eq
 8005dd0:	1aad      	subeq	r5, r5, r2
 8005dd2:	68a3      	ldr	r3, [r4, #8]
 8005dd4:	6922      	ldr	r2, [r4, #16]
 8005dd6:	bf0c      	ite	eq
 8005dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ddc:	2500      	movne	r5, #0
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bfc4      	itt	gt
 8005de2:	1a9b      	subgt	r3, r3, r2
 8005de4:	18ed      	addgt	r5, r5, r3
 8005de6:	2600      	movs	r6, #0
 8005de8:	341a      	adds	r4, #26
 8005dea:	42b5      	cmp	r5, r6
 8005dec:	d11a      	bne.n	8005e24 <_printf_common+0xc8>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e008      	b.n	8005e04 <_printf_common+0xa8>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4649      	mov	r1, r9
 8005df8:	4638      	mov	r0, r7
 8005dfa:	47c0      	blx	r8
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_printf_common+0xac>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7c6      	b.n	8005d9a <_printf_common+0x3e>
 8005e0c:	18e1      	adds	r1, r4, r3
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	2030      	movs	r0, #48	; 0x30
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e16:	4422      	add	r2, r4
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7c7      	b.n	8005db4 <_printf_common+0x58>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4622      	mov	r2, r4
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c0      	blx	r8
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0e6      	beq.n	8005e00 <_printf_common+0xa4>
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7d9      	b.n	8005dea <_printf_common+0x8e>
	...

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	7e0f      	ldrb	r7, [r1, #24]
 8005e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e40:	2f78      	cmp	r7, #120	; 0x78
 8005e42:	4691      	mov	r9, r2
 8005e44:	4680      	mov	r8, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	469a      	mov	sl, r3
 8005e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	; 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d8 	beq.w	800600a <_printf_i+0x1d2>
 8005e5a:	2f58      	cmp	r7, #88	; 0x58
 8005e5c:	f000 80a3 	beq.w	8005fa6 <_printf_i+0x16e>
 8005e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a101      	add	r1, pc, #4	; (adr r1, 8005e78 <_printf_i+0x40>)
 8005e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005ff1 	.word	0x08005ff1
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005fd3 	.word	0x08005fd3
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006013 	.word	0x08006013
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fdb 	.word	0x08005fdb
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	602a      	str	r2, [r5, #0]
 8005ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0a3      	b.n	800602c <_printf_i+0x1f4>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	6829      	ldr	r1, [r5, #0]
 8005ee8:	0606      	lsls	r6, r0, #24
 8005eea:	f101 0304 	add.w	r3, r1, #4
 8005eee:	d50a      	bpl.n	8005f06 <_printf_i+0xce>
 8005ef0:	680e      	ldr	r6, [r1, #0]
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	da03      	bge.n	8005f00 <_printf_i+0xc8>
 8005ef8:	232d      	movs	r3, #45	; 0x2d
 8005efa:	4276      	negs	r6, r6
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f00:	485e      	ldr	r0, [pc, #376]	; (800607c <_printf_i+0x244>)
 8005f02:	230a      	movs	r3, #10
 8005f04:	e019      	b.n	8005f3a <_printf_i+0x102>
 8005f06:	680e      	ldr	r6, [r1, #0]
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f0e:	bf18      	it	ne
 8005f10:	b236      	sxthne	r6, r6
 8005f12:	e7ef      	b.n	8005ef4 <_printf_i+0xbc>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	6820      	ldr	r0, [r4, #0]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	6029      	str	r1, [r5, #0]
 8005f1c:	0601      	lsls	r1, r0, #24
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0xec>
 8005f20:	681e      	ldr	r6, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0xf2>
 8005f24:	0646      	lsls	r6, r0, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0xe8>
 8005f28:	881e      	ldrh	r6, [r3, #0]
 8005f2a:	4854      	ldr	r0, [pc, #336]	; (800607c <_printf_i+0x244>)
 8005f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f2e:	bf0c      	ite	eq
 8005f30:	2308      	moveq	r3, #8
 8005f32:	230a      	movne	r3, #10
 8005f34:	2100      	movs	r1, #0
 8005f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f3a:	6865      	ldr	r5, [r4, #4]
 8005f3c:	60a5      	str	r5, [r4, #8]
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	bfa2      	ittt	ge
 8005f42:	6821      	ldrge	r1, [r4, #0]
 8005f44:	f021 0104 	bicge.w	r1, r1, #4
 8005f48:	6021      	strge	r1, [r4, #0]
 8005f4a:	b90e      	cbnz	r6, 8005f50 <_printf_i+0x118>
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	d04d      	beq.n	8005fec <_printf_i+0x1b4>
 8005f50:	4615      	mov	r5, r2
 8005f52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f56:	fb03 6711 	mls	r7, r3, r1, r6
 8005f5a:	5dc7      	ldrb	r7, [r0, r7]
 8005f5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f60:	4637      	mov	r7, r6
 8005f62:	42bb      	cmp	r3, r7
 8005f64:	460e      	mov	r6, r1
 8005f66:	d9f4      	bls.n	8005f52 <_printf_i+0x11a>
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d10b      	bne.n	8005f84 <_printf_i+0x14c>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	07de      	lsls	r6, r3, #31
 8005f70:	d508      	bpl.n	8005f84 <_printf_i+0x14c>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	6861      	ldr	r1, [r4, #4]
 8005f76:	4299      	cmp	r1, r3
 8005f78:	bfde      	ittt	le
 8005f7a:	2330      	movle	r3, #48	; 0x30
 8005f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f84:	1b52      	subs	r2, r2, r5
 8005f86:	6122      	str	r2, [r4, #16]
 8005f88:	f8cd a000 	str.w	sl, [sp]
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	aa03      	add	r2, sp, #12
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f7ff fee2 	bl	8005d5c <_printf_common>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d14c      	bne.n	8006036 <_printf_i+0x1fe>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa0:	b004      	add	sp, #16
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa6:	4835      	ldr	r0, [pc, #212]	; (800607c <_printf_i+0x244>)
 8005fa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fac:	6829      	ldr	r1, [r5, #0]
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fb4:	6029      	str	r1, [r5, #0]
 8005fb6:	061d      	lsls	r5, r3, #24
 8005fb8:	d514      	bpl.n	8005fe4 <_printf_i+0x1ac>
 8005fba:	07df      	lsls	r7, r3, #31
 8005fbc:	bf44      	itt	mi
 8005fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc2:	6023      	strmi	r3, [r4, #0]
 8005fc4:	b91e      	cbnz	r6, 8005fce <_printf_i+0x196>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	f023 0320 	bic.w	r3, r3, #32
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	2310      	movs	r3, #16
 8005fd0:	e7b0      	b.n	8005f34 <_printf_i+0xfc>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f043 0320 	orr.w	r3, r3, #32
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	2378      	movs	r3, #120	; 0x78
 8005fdc:	4828      	ldr	r0, [pc, #160]	; (8006080 <_printf_i+0x248>)
 8005fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fe2:	e7e3      	b.n	8005fac <_printf_i+0x174>
 8005fe4:	0659      	lsls	r1, r3, #25
 8005fe6:	bf48      	it	mi
 8005fe8:	b2b6      	uxthmi	r6, r6
 8005fea:	e7e6      	b.n	8005fba <_printf_i+0x182>
 8005fec:	4615      	mov	r5, r2
 8005fee:	e7bb      	b.n	8005f68 <_printf_i+0x130>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	6826      	ldr	r6, [r4, #0]
 8005ff4:	6961      	ldr	r1, [r4, #20]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6028      	str	r0, [r5, #0]
 8005ffa:	0635      	lsls	r5, r6, #24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	d501      	bpl.n	8006004 <_printf_i+0x1cc>
 8006000:	6019      	str	r1, [r3, #0]
 8006002:	e002      	b.n	800600a <_printf_i+0x1d2>
 8006004:	0670      	lsls	r0, r6, #25
 8006006:	d5fb      	bpl.n	8006000 <_printf_i+0x1c8>
 8006008:	8019      	strh	r1, [r3, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	4615      	mov	r5, r2
 8006010:	e7ba      	b.n	8005f88 <_printf_i+0x150>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	681d      	ldr	r5, [r3, #0]
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	2100      	movs	r1, #0
 800601e:	4628      	mov	r0, r5
 8006020:	f7fa f8de 	bl	80001e0 <memchr>
 8006024:	b108      	cbz	r0, 800602a <_printf_i+0x1f2>
 8006026:	1b40      	subs	r0, r0, r5
 8006028:	6060      	str	r0, [r4, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	2300      	movs	r3, #0
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006034:	e7a8      	b.n	8005f88 <_printf_i+0x150>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	462a      	mov	r2, r5
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d0ab      	beq.n	8005f9c <_printf_i+0x164>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079b      	lsls	r3, r3, #30
 8006048:	d413      	bmi.n	8006072 <_printf_i+0x23a>
 800604a:	68e0      	ldr	r0, [r4, #12]
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	4298      	cmp	r0, r3
 8006050:	bfb8      	it	lt
 8006052:	4618      	movlt	r0, r3
 8006054:	e7a4      	b.n	8005fa0 <_printf_i+0x168>
 8006056:	2301      	movs	r3, #1
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d09b      	beq.n	8005f9c <_printf_i+0x164>
 8006064:	3501      	adds	r5, #1
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	9903      	ldr	r1, [sp, #12]
 800606a:	1a5b      	subs	r3, r3, r1
 800606c:	42ab      	cmp	r3, r5
 800606e:	dcf2      	bgt.n	8006056 <_printf_i+0x21e>
 8006070:	e7eb      	b.n	800604a <_printf_i+0x212>
 8006072:	2500      	movs	r5, #0
 8006074:	f104 0619 	add.w	r6, r4, #25
 8006078:	e7f5      	b.n	8006066 <_printf_i+0x22e>
 800607a:	bf00      	nop
 800607c:	0800851a 	.word	0x0800851a
 8006080:	0800852b 	.word	0x0800852b

08006084 <iprintf>:
 8006084:	b40f      	push	{r0, r1, r2, r3}
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <iprintf+0x2c>)
 8006088:	b513      	push	{r0, r1, r4, lr}
 800608a:	681c      	ldr	r4, [r3, #0]
 800608c:	b124      	cbz	r4, 8006098 <iprintf+0x14>
 800608e:	69a3      	ldr	r3, [r4, #24]
 8006090:	b913      	cbnz	r3, 8006098 <iprintf+0x14>
 8006092:	4620      	mov	r0, r4
 8006094:	f001 f8d8 	bl	8007248 <__sinit>
 8006098:	ab05      	add	r3, sp, #20
 800609a:	9a04      	ldr	r2, [sp, #16]
 800609c:	68a1      	ldr	r1, [r4, #8]
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 fe95 	bl	8007dd0 <_vfiprintf_r>
 80060a6:	b002      	add	sp, #8
 80060a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ac:	b004      	add	sp, #16
 80060ae:	4770      	bx	lr
 80060b0:	2000000c 	.word	0x2000000c

080060b4 <_puts_r>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	460e      	mov	r6, r1
 80060b8:	4605      	mov	r5, r0
 80060ba:	b118      	cbz	r0, 80060c4 <_puts_r+0x10>
 80060bc:	6983      	ldr	r3, [r0, #24]
 80060be:	b90b      	cbnz	r3, 80060c4 <_puts_r+0x10>
 80060c0:	f001 f8c2 	bl	8007248 <__sinit>
 80060c4:	69ab      	ldr	r3, [r5, #24]
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	b913      	cbnz	r3, 80060d0 <_puts_r+0x1c>
 80060ca:	4628      	mov	r0, r5
 80060cc:	f001 f8bc 	bl	8007248 <__sinit>
 80060d0:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <_puts_r+0xd0>)
 80060d2:	429c      	cmp	r4, r3
 80060d4:	d120      	bne.n	8006118 <_puts_r+0x64>
 80060d6:	686c      	ldr	r4, [r5, #4]
 80060d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060da:	07db      	lsls	r3, r3, #31
 80060dc:	d405      	bmi.n	80060ea <_puts_r+0x36>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	0598      	lsls	r0, r3, #22
 80060e2:	d402      	bmi.n	80060ea <_puts_r+0x36>
 80060e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060e6:	f001 f952 	bl	800738e <__retarget_lock_acquire_recursive>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	0719      	lsls	r1, r3, #28
 80060ee:	d51d      	bpl.n	800612c <_puts_r+0x78>
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	b1db      	cbz	r3, 800612c <_puts_r+0x78>
 80060f4:	3e01      	subs	r6, #1
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060fc:	3b01      	subs	r3, #1
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	bb39      	cbnz	r1, 8006152 <_puts_r+0x9e>
 8006102:	2b00      	cmp	r3, #0
 8006104:	da38      	bge.n	8006178 <_puts_r+0xc4>
 8006106:	4622      	mov	r2, r4
 8006108:	210a      	movs	r1, #10
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f848 	bl	80061a0 <__swbuf_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d011      	beq.n	8006138 <_puts_r+0x84>
 8006114:	250a      	movs	r5, #10
 8006116:	e011      	b.n	800613c <_puts_r+0x88>
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <_puts_r+0xd4>)
 800611a:	429c      	cmp	r4, r3
 800611c:	d101      	bne.n	8006122 <_puts_r+0x6e>
 800611e:	68ac      	ldr	r4, [r5, #8]
 8006120:	e7da      	b.n	80060d8 <_puts_r+0x24>
 8006122:	4b1a      	ldr	r3, [pc, #104]	; (800618c <_puts_r+0xd8>)
 8006124:	429c      	cmp	r4, r3
 8006126:	bf08      	it	eq
 8006128:	68ec      	ldreq	r4, [r5, #12]
 800612a:	e7d5      	b.n	80060d8 <_puts_r+0x24>
 800612c:	4621      	mov	r1, r4
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f888 	bl	8006244 <__swsetup_r>
 8006134:	2800      	cmp	r0, #0
 8006136:	d0dd      	beq.n	80060f4 <_puts_r+0x40>
 8006138:	f04f 35ff 	mov.w	r5, #4294967295
 800613c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800613e:	07da      	lsls	r2, r3, #31
 8006140:	d405      	bmi.n	800614e <_puts_r+0x9a>
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	059b      	lsls	r3, r3, #22
 8006146:	d402      	bmi.n	800614e <_puts_r+0x9a>
 8006148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800614a:	f001 f921 	bl	8007390 <__retarget_lock_release_recursive>
 800614e:	4628      	mov	r0, r5
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	2b00      	cmp	r3, #0
 8006154:	da04      	bge.n	8006160 <_puts_r+0xac>
 8006156:	69a2      	ldr	r2, [r4, #24]
 8006158:	429a      	cmp	r2, r3
 800615a:	dc06      	bgt.n	800616a <_puts_r+0xb6>
 800615c:	290a      	cmp	r1, #10
 800615e:	d004      	beq.n	800616a <_puts_r+0xb6>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	6022      	str	r2, [r4, #0]
 8006166:	7019      	strb	r1, [r3, #0]
 8006168:	e7c5      	b.n	80060f6 <_puts_r+0x42>
 800616a:	4622      	mov	r2, r4
 800616c:	4628      	mov	r0, r5
 800616e:	f000 f817 	bl	80061a0 <__swbuf_r>
 8006172:	3001      	adds	r0, #1
 8006174:	d1bf      	bne.n	80060f6 <_puts_r+0x42>
 8006176:	e7df      	b.n	8006138 <_puts_r+0x84>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	250a      	movs	r5, #10
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	701d      	strb	r5, [r3, #0]
 8006182:	e7db      	b.n	800613c <_puts_r+0x88>
 8006184:	080085ec 	.word	0x080085ec
 8006188:	0800860c 	.word	0x0800860c
 800618c:	080085cc 	.word	0x080085cc

08006190 <puts>:
 8006190:	4b02      	ldr	r3, [pc, #8]	; (800619c <puts+0xc>)
 8006192:	4601      	mov	r1, r0
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	f7ff bf8d 	b.w	80060b4 <_puts_r>
 800619a:	bf00      	nop
 800619c:	2000000c 	.word	0x2000000c

080061a0 <__swbuf_r>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	460e      	mov	r6, r1
 80061a4:	4614      	mov	r4, r2
 80061a6:	4605      	mov	r5, r0
 80061a8:	b118      	cbz	r0, 80061b2 <__swbuf_r+0x12>
 80061aa:	6983      	ldr	r3, [r0, #24]
 80061ac:	b90b      	cbnz	r3, 80061b2 <__swbuf_r+0x12>
 80061ae:	f001 f84b 	bl	8007248 <__sinit>
 80061b2:	4b21      	ldr	r3, [pc, #132]	; (8006238 <__swbuf_r+0x98>)
 80061b4:	429c      	cmp	r4, r3
 80061b6:	d12b      	bne.n	8006210 <__swbuf_r+0x70>
 80061b8:	686c      	ldr	r4, [r5, #4]
 80061ba:	69a3      	ldr	r3, [r4, #24]
 80061bc:	60a3      	str	r3, [r4, #8]
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	071a      	lsls	r2, r3, #28
 80061c2:	d52f      	bpl.n	8006224 <__swbuf_r+0x84>
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	b36b      	cbz	r3, 8006224 <__swbuf_r+0x84>
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	1ac0      	subs	r0, r0, r3
 80061ce:	6963      	ldr	r3, [r4, #20]
 80061d0:	b2f6      	uxtb	r6, r6
 80061d2:	4283      	cmp	r3, r0
 80061d4:	4637      	mov	r7, r6
 80061d6:	dc04      	bgt.n	80061e2 <__swbuf_r+0x42>
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 ffa0 	bl	8007120 <_fflush_r>
 80061e0:	bb30      	cbnz	r0, 8006230 <__swbuf_r+0x90>
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	60a3      	str	r3, [r4, #8]
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	6022      	str	r2, [r4, #0]
 80061ee:	701e      	strb	r6, [r3, #0]
 80061f0:	6963      	ldr	r3, [r4, #20]
 80061f2:	3001      	adds	r0, #1
 80061f4:	4283      	cmp	r3, r0
 80061f6:	d004      	beq.n	8006202 <__swbuf_r+0x62>
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	07db      	lsls	r3, r3, #31
 80061fc:	d506      	bpl.n	800620c <__swbuf_r+0x6c>
 80061fe:	2e0a      	cmp	r6, #10
 8006200:	d104      	bne.n	800620c <__swbuf_r+0x6c>
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 ff8b 	bl	8007120 <_fflush_r>
 800620a:	b988      	cbnz	r0, 8006230 <__swbuf_r+0x90>
 800620c:	4638      	mov	r0, r7
 800620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <__swbuf_r+0x9c>)
 8006212:	429c      	cmp	r4, r3
 8006214:	d101      	bne.n	800621a <__swbuf_r+0x7a>
 8006216:	68ac      	ldr	r4, [r5, #8]
 8006218:	e7cf      	b.n	80061ba <__swbuf_r+0x1a>
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <__swbuf_r+0xa0>)
 800621c:	429c      	cmp	r4, r3
 800621e:	bf08      	it	eq
 8006220:	68ec      	ldreq	r4, [r5, #12]
 8006222:	e7ca      	b.n	80061ba <__swbuf_r+0x1a>
 8006224:	4621      	mov	r1, r4
 8006226:	4628      	mov	r0, r5
 8006228:	f000 f80c 	bl	8006244 <__swsetup_r>
 800622c:	2800      	cmp	r0, #0
 800622e:	d0cb      	beq.n	80061c8 <__swbuf_r+0x28>
 8006230:	f04f 37ff 	mov.w	r7, #4294967295
 8006234:	e7ea      	b.n	800620c <__swbuf_r+0x6c>
 8006236:	bf00      	nop
 8006238:	080085ec 	.word	0x080085ec
 800623c:	0800860c 	.word	0x0800860c
 8006240:	080085cc 	.word	0x080085cc

08006244 <__swsetup_r>:
 8006244:	4b32      	ldr	r3, [pc, #200]	; (8006310 <__swsetup_r+0xcc>)
 8006246:	b570      	push	{r4, r5, r6, lr}
 8006248:	681d      	ldr	r5, [r3, #0]
 800624a:	4606      	mov	r6, r0
 800624c:	460c      	mov	r4, r1
 800624e:	b125      	cbz	r5, 800625a <__swsetup_r+0x16>
 8006250:	69ab      	ldr	r3, [r5, #24]
 8006252:	b913      	cbnz	r3, 800625a <__swsetup_r+0x16>
 8006254:	4628      	mov	r0, r5
 8006256:	f000 fff7 	bl	8007248 <__sinit>
 800625a:	4b2e      	ldr	r3, [pc, #184]	; (8006314 <__swsetup_r+0xd0>)
 800625c:	429c      	cmp	r4, r3
 800625e:	d10f      	bne.n	8006280 <__swsetup_r+0x3c>
 8006260:	686c      	ldr	r4, [r5, #4]
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006268:	0719      	lsls	r1, r3, #28
 800626a:	d42c      	bmi.n	80062c6 <__swsetup_r+0x82>
 800626c:	06dd      	lsls	r5, r3, #27
 800626e:	d411      	bmi.n	8006294 <__swsetup_r+0x50>
 8006270:	2309      	movs	r3, #9
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	f04f 30ff 	mov.w	r0, #4294967295
 800627e:	e03e      	b.n	80062fe <__swsetup_r+0xba>
 8006280:	4b25      	ldr	r3, [pc, #148]	; (8006318 <__swsetup_r+0xd4>)
 8006282:	429c      	cmp	r4, r3
 8006284:	d101      	bne.n	800628a <__swsetup_r+0x46>
 8006286:	68ac      	ldr	r4, [r5, #8]
 8006288:	e7eb      	b.n	8006262 <__swsetup_r+0x1e>
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <__swsetup_r+0xd8>)
 800628c:	429c      	cmp	r4, r3
 800628e:	bf08      	it	eq
 8006290:	68ec      	ldreq	r4, [r5, #12]
 8006292:	e7e6      	b.n	8006262 <__swsetup_r+0x1e>
 8006294:	0758      	lsls	r0, r3, #29
 8006296:	d512      	bpl.n	80062be <__swsetup_r+0x7a>
 8006298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800629a:	b141      	cbz	r1, 80062ae <__swsetup_r+0x6a>
 800629c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062a0:	4299      	cmp	r1, r3
 80062a2:	d002      	beq.n	80062aa <__swsetup_r+0x66>
 80062a4:	4630      	mov	r0, r6
 80062a6:	f001 fc89 	bl	8007bbc <_free_r>
 80062aa:	2300      	movs	r3, #0
 80062ac:	6363      	str	r3, [r4, #52]	; 0x34
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062b4:	81a3      	strh	r3, [r4, #12]
 80062b6:	2300      	movs	r3, #0
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	6923      	ldr	r3, [r4, #16]
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	f043 0308 	orr.w	r3, r3, #8
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	b94b      	cbnz	r3, 80062de <__swsetup_r+0x9a>
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	d003      	beq.n	80062de <__swsetup_r+0x9a>
 80062d6:	4621      	mov	r1, r4
 80062d8:	4630      	mov	r0, r6
 80062da:	f001 f87f 	bl	80073dc <__smakebuf_r>
 80062de:	89a0      	ldrh	r0, [r4, #12]
 80062e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e4:	f010 0301 	ands.w	r3, r0, #1
 80062e8:	d00a      	beq.n	8006300 <__swsetup_r+0xbc>
 80062ea:	2300      	movs	r3, #0
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	6963      	ldr	r3, [r4, #20]
 80062f0:	425b      	negs	r3, r3
 80062f2:	61a3      	str	r3, [r4, #24]
 80062f4:	6923      	ldr	r3, [r4, #16]
 80062f6:	b943      	cbnz	r3, 800630a <__swsetup_r+0xc6>
 80062f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062fc:	d1ba      	bne.n	8006274 <__swsetup_r+0x30>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	0781      	lsls	r1, r0, #30
 8006302:	bf58      	it	pl
 8006304:	6963      	ldrpl	r3, [r4, #20]
 8006306:	60a3      	str	r3, [r4, #8]
 8006308:	e7f4      	b.n	80062f4 <__swsetup_r+0xb0>
 800630a:	2000      	movs	r0, #0
 800630c:	e7f7      	b.n	80062fe <__swsetup_r+0xba>
 800630e:	bf00      	nop
 8006310:	2000000c 	.word	0x2000000c
 8006314:	080085ec 	.word	0x080085ec
 8006318:	0800860c 	.word	0x0800860c
 800631c:	080085cc 	.word	0x080085cc

08006320 <quorem>:
 8006320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	6903      	ldr	r3, [r0, #16]
 8006326:	690c      	ldr	r4, [r1, #16]
 8006328:	42a3      	cmp	r3, r4
 800632a:	4607      	mov	r7, r0
 800632c:	f2c0 8081 	blt.w	8006432 <quorem+0x112>
 8006330:	3c01      	subs	r4, #1
 8006332:	f101 0814 	add.w	r8, r1, #20
 8006336:	f100 0514 	add.w	r5, r0, #20
 800633a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006348:	3301      	adds	r3, #1
 800634a:	429a      	cmp	r2, r3
 800634c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006354:	fbb2 f6f3 	udiv	r6, r2, r3
 8006358:	d331      	bcc.n	80063be <quorem+0x9e>
 800635a:	f04f 0e00 	mov.w	lr, #0
 800635e:	4640      	mov	r0, r8
 8006360:	46ac      	mov	ip, r5
 8006362:	46f2      	mov	sl, lr
 8006364:	f850 2b04 	ldr.w	r2, [r0], #4
 8006368:	b293      	uxth	r3, r2
 800636a:	fb06 e303 	mla	r3, r6, r3, lr
 800636e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006372:	b29b      	uxth	r3, r3
 8006374:	ebaa 0303 	sub.w	r3, sl, r3
 8006378:	f8dc a000 	ldr.w	sl, [ip]
 800637c:	0c12      	lsrs	r2, r2, #16
 800637e:	fa13 f38a 	uxtah	r3, r3, sl
 8006382:	fb06 e202 	mla	r2, r6, r2, lr
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	9b00      	ldr	r3, [sp, #0]
 800638a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800638e:	b292      	uxth	r2, r2
 8006390:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006398:	f8bd 3000 	ldrh.w	r3, [sp]
 800639c:	4581      	cmp	r9, r0
 800639e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063a2:	f84c 3b04 	str.w	r3, [ip], #4
 80063a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063aa:	d2db      	bcs.n	8006364 <quorem+0x44>
 80063ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80063b0:	b92b      	cbnz	r3, 80063be <quorem+0x9e>
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	3b04      	subs	r3, #4
 80063b6:	429d      	cmp	r5, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	d32e      	bcc.n	800641a <quorem+0xfa>
 80063bc:	613c      	str	r4, [r7, #16]
 80063be:	4638      	mov	r0, r7
 80063c0:	f001 fae4 	bl	800798c <__mcmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	db24      	blt.n	8006412 <quorem+0xf2>
 80063c8:	3601      	adds	r6, #1
 80063ca:	4628      	mov	r0, r5
 80063cc:	f04f 0c00 	mov.w	ip, #0
 80063d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80063d4:	f8d0 e000 	ldr.w	lr, [r0]
 80063d8:	b293      	uxth	r3, r2
 80063da:	ebac 0303 	sub.w	r3, ip, r3
 80063de:	0c12      	lsrs	r2, r2, #16
 80063e0:	fa13 f38e 	uxtah	r3, r3, lr
 80063e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063f2:	45c1      	cmp	r9, r8
 80063f4:	f840 3b04 	str.w	r3, [r0], #4
 80063f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063fc:	d2e8      	bcs.n	80063d0 <quorem+0xb0>
 80063fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006406:	b922      	cbnz	r2, 8006412 <quorem+0xf2>
 8006408:	3b04      	subs	r3, #4
 800640a:	429d      	cmp	r5, r3
 800640c:	461a      	mov	r2, r3
 800640e:	d30a      	bcc.n	8006426 <quorem+0x106>
 8006410:	613c      	str	r4, [r7, #16]
 8006412:	4630      	mov	r0, r6
 8006414:	b003      	add	sp, #12
 8006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	3b04      	subs	r3, #4
 800641e:	2a00      	cmp	r2, #0
 8006420:	d1cc      	bne.n	80063bc <quorem+0x9c>
 8006422:	3c01      	subs	r4, #1
 8006424:	e7c7      	b.n	80063b6 <quorem+0x96>
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	3b04      	subs	r3, #4
 800642a:	2a00      	cmp	r2, #0
 800642c:	d1f0      	bne.n	8006410 <quorem+0xf0>
 800642e:	3c01      	subs	r4, #1
 8006430:	e7eb      	b.n	800640a <quorem+0xea>
 8006432:	2000      	movs	r0, #0
 8006434:	e7ee      	b.n	8006414 <quorem+0xf4>
	...

08006438 <_dtoa_r>:
 8006438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	ed2d 8b04 	vpush	{d8-d9}
 8006440:	ec57 6b10 	vmov	r6, r7, d0
 8006444:	b093      	sub	sp, #76	; 0x4c
 8006446:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006448:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800644c:	9106      	str	r1, [sp, #24]
 800644e:	ee10 aa10 	vmov	sl, s0
 8006452:	4604      	mov	r4, r0
 8006454:	9209      	str	r2, [sp, #36]	; 0x24
 8006456:	930c      	str	r3, [sp, #48]	; 0x30
 8006458:	46bb      	mov	fp, r7
 800645a:	b975      	cbnz	r5, 800647a <_dtoa_r+0x42>
 800645c:	2010      	movs	r0, #16
 800645e:	f000 fffd 	bl	800745c <malloc>
 8006462:	4602      	mov	r2, r0
 8006464:	6260      	str	r0, [r4, #36]	; 0x24
 8006466:	b920      	cbnz	r0, 8006472 <_dtoa_r+0x3a>
 8006468:	4ba7      	ldr	r3, [pc, #668]	; (8006708 <_dtoa_r+0x2d0>)
 800646a:	21ea      	movs	r1, #234	; 0xea
 800646c:	48a7      	ldr	r0, [pc, #668]	; (800670c <_dtoa_r+0x2d4>)
 800646e:	f001 fe45 	bl	80080fc <__assert_func>
 8006472:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006476:	6005      	str	r5, [r0, #0]
 8006478:	60c5      	str	r5, [r0, #12]
 800647a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	b151      	cbz	r1, 8006496 <_dtoa_r+0x5e>
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	604a      	str	r2, [r1, #4]
 8006484:	2301      	movs	r3, #1
 8006486:	4093      	lsls	r3, r2
 8006488:	608b      	str	r3, [r1, #8]
 800648a:	4620      	mov	r0, r4
 800648c:	f001 f83c 	bl	8007508 <_Bfree>
 8006490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	1e3b      	subs	r3, r7, #0
 8006498:	bfaa      	itet	ge
 800649a:	2300      	movge	r3, #0
 800649c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064a0:	f8c8 3000 	strge.w	r3, [r8]
 80064a4:	4b9a      	ldr	r3, [pc, #616]	; (8006710 <_dtoa_r+0x2d8>)
 80064a6:	bfbc      	itt	lt
 80064a8:	2201      	movlt	r2, #1
 80064aa:	f8c8 2000 	strlt.w	r2, [r8]
 80064ae:	ea33 030b 	bics.w	r3, r3, fp
 80064b2:	d11b      	bne.n	80064ec <_dtoa_r+0xb4>
 80064b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064c0:	4333      	orrs	r3, r6
 80064c2:	f000 8592 	beq.w	8006fea <_dtoa_r+0xbb2>
 80064c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c8:	b963      	cbnz	r3, 80064e4 <_dtoa_r+0xac>
 80064ca:	4b92      	ldr	r3, [pc, #584]	; (8006714 <_dtoa_r+0x2dc>)
 80064cc:	e022      	b.n	8006514 <_dtoa_r+0xdc>
 80064ce:	4b92      	ldr	r3, [pc, #584]	; (8006718 <_dtoa_r+0x2e0>)
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	3308      	adds	r3, #8
 80064d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	9801      	ldr	r0, [sp, #4]
 80064da:	b013      	add	sp, #76	; 0x4c
 80064dc:	ecbd 8b04 	vpop	{d8-d9}
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	4b8b      	ldr	r3, [pc, #556]	; (8006714 <_dtoa_r+0x2dc>)
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	3303      	adds	r3, #3
 80064ea:	e7f3      	b.n	80064d4 <_dtoa_r+0x9c>
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	f7fa fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f8:	ec4b ab19 	vmov	d9, sl, fp
 80064fc:	4680      	mov	r8, r0
 80064fe:	b158      	cbz	r0, 8006518 <_dtoa_r+0xe0>
 8006500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006502:	2301      	movs	r3, #1
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 856b 	beq.w	8006fe4 <_dtoa_r+0xbac>
 800650e:	4883      	ldr	r0, [pc, #524]	; (800671c <_dtoa_r+0x2e4>)
 8006510:	6018      	str	r0, [r3, #0]
 8006512:	1e43      	subs	r3, r0, #1
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	e7df      	b.n	80064d8 <_dtoa_r+0xa0>
 8006518:	ec4b ab10 	vmov	d0, sl, fp
 800651c:	aa10      	add	r2, sp, #64	; 0x40
 800651e:	a911      	add	r1, sp, #68	; 0x44
 8006520:	4620      	mov	r0, r4
 8006522:	f001 fad9 	bl	8007ad8 <__d2b>
 8006526:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800652a:	ee08 0a10 	vmov	s16, r0
 800652e:	2d00      	cmp	r5, #0
 8006530:	f000 8084 	beq.w	800663c <_dtoa_r+0x204>
 8006534:	ee19 3a90 	vmov	r3, s19
 8006538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800653c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006540:	4656      	mov	r6, sl
 8006542:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800654a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800654e:	4b74      	ldr	r3, [pc, #464]	; (8006720 <_dtoa_r+0x2e8>)
 8006550:	2200      	movs	r2, #0
 8006552:	4630      	mov	r0, r6
 8006554:	4639      	mov	r1, r7
 8006556:	f7f9 fe97 	bl	8000288 <__aeabi_dsub>
 800655a:	a365      	add	r3, pc, #404	; (adr r3, 80066f0 <_dtoa_r+0x2b8>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7fa f84a 	bl	80005f8 <__aeabi_dmul>
 8006564:	a364      	add	r3, pc, #400	; (adr r3, 80066f8 <_dtoa_r+0x2c0>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 fe8f 	bl	800028c <__adddf3>
 800656e:	4606      	mov	r6, r0
 8006570:	4628      	mov	r0, r5
 8006572:	460f      	mov	r7, r1
 8006574:	f7f9 ffd6 	bl	8000524 <__aeabi_i2d>
 8006578:	a361      	add	r3, pc, #388	; (adr r3, 8006700 <_dtoa_r+0x2c8>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa f83b 	bl	80005f8 <__aeabi_dmul>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4630      	mov	r0, r6
 8006588:	4639      	mov	r1, r7
 800658a:	f7f9 fe7f 	bl	800028c <__adddf3>
 800658e:	4606      	mov	r6, r0
 8006590:	460f      	mov	r7, r1
 8006592:	f7fa fae1 	bl	8000b58 <__aeabi_d2iz>
 8006596:	2200      	movs	r2, #0
 8006598:	9000      	str	r0, [sp, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7fa fa9c 	bl	8000adc <__aeabi_dcmplt>
 80065a4:	b150      	cbz	r0, 80065bc <_dtoa_r+0x184>
 80065a6:	9800      	ldr	r0, [sp, #0]
 80065a8:	f7f9 ffbc 	bl	8000524 <__aeabi_i2d>
 80065ac:	4632      	mov	r2, r6
 80065ae:	463b      	mov	r3, r7
 80065b0:	f7fa fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80065b4:	b910      	cbnz	r0, 80065bc <_dtoa_r+0x184>
 80065b6:	9b00      	ldr	r3, [sp, #0]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	9b00      	ldr	r3, [sp, #0]
 80065be:	2b16      	cmp	r3, #22
 80065c0:	d85a      	bhi.n	8006678 <_dtoa_r+0x240>
 80065c2:	9a00      	ldr	r2, [sp, #0]
 80065c4:	4b57      	ldr	r3, [pc, #348]	; (8006724 <_dtoa_r+0x2ec>)
 80065c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	ec51 0b19 	vmov	r0, r1, d9
 80065d2:	f7fa fa83 	bl	8000adc <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d050      	beq.n	800667c <_dtoa_r+0x244>
 80065da:	9b00      	ldr	r3, [sp, #0]
 80065dc:	3b01      	subs	r3, #1
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2300      	movs	r3, #0
 80065e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065e6:	1b5d      	subs	r5, r3, r5
 80065e8:	1e6b      	subs	r3, r5, #1
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	bf45      	ittet	mi
 80065ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80065f2:	9304      	strmi	r3, [sp, #16]
 80065f4:	2300      	movpl	r3, #0
 80065f6:	2300      	movmi	r3, #0
 80065f8:	bf4c      	ite	mi
 80065fa:	9305      	strmi	r3, [sp, #20]
 80065fc:	9304      	strpl	r3, [sp, #16]
 80065fe:	9b00      	ldr	r3, [sp, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	db3d      	blt.n	8006680 <_dtoa_r+0x248>
 8006604:	9b05      	ldr	r3, [sp, #20]
 8006606:	9a00      	ldr	r2, [sp, #0]
 8006608:	920a      	str	r2, [sp, #40]	; 0x28
 800660a:	4413      	add	r3, r2
 800660c:	9305      	str	r3, [sp, #20]
 800660e:	2300      	movs	r3, #0
 8006610:	9307      	str	r3, [sp, #28]
 8006612:	9b06      	ldr	r3, [sp, #24]
 8006614:	2b09      	cmp	r3, #9
 8006616:	f200 8089 	bhi.w	800672c <_dtoa_r+0x2f4>
 800661a:	2b05      	cmp	r3, #5
 800661c:	bfc4      	itt	gt
 800661e:	3b04      	subgt	r3, #4
 8006620:	9306      	strgt	r3, [sp, #24]
 8006622:	9b06      	ldr	r3, [sp, #24]
 8006624:	f1a3 0302 	sub.w	r3, r3, #2
 8006628:	bfcc      	ite	gt
 800662a:	2500      	movgt	r5, #0
 800662c:	2501      	movle	r5, #1
 800662e:	2b03      	cmp	r3, #3
 8006630:	f200 8087 	bhi.w	8006742 <_dtoa_r+0x30a>
 8006634:	e8df f003 	tbb	[pc, r3]
 8006638:	59383a2d 	.word	0x59383a2d
 800663c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006640:	441d      	add	r5, r3
 8006642:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006646:	2b20      	cmp	r3, #32
 8006648:	bfc1      	itttt	gt
 800664a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800664e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006652:	fa0b f303 	lslgt.w	r3, fp, r3
 8006656:	fa26 f000 	lsrgt.w	r0, r6, r0
 800665a:	bfda      	itte	le
 800665c:	f1c3 0320 	rsble	r3, r3, #32
 8006660:	fa06 f003 	lslle.w	r0, r6, r3
 8006664:	4318      	orrgt	r0, r3
 8006666:	f7f9 ff4d 	bl	8000504 <__aeabi_ui2d>
 800666a:	2301      	movs	r3, #1
 800666c:	4606      	mov	r6, r0
 800666e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006672:	3d01      	subs	r5, #1
 8006674:	930e      	str	r3, [sp, #56]	; 0x38
 8006676:	e76a      	b.n	800654e <_dtoa_r+0x116>
 8006678:	2301      	movs	r3, #1
 800667a:	e7b2      	b.n	80065e2 <_dtoa_r+0x1aa>
 800667c:	900b      	str	r0, [sp, #44]	; 0x2c
 800667e:	e7b1      	b.n	80065e4 <_dtoa_r+0x1ac>
 8006680:	9b04      	ldr	r3, [sp, #16]
 8006682:	9a00      	ldr	r2, [sp, #0]
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	4253      	negs	r3, r2
 800668a:	9307      	str	r3, [sp, #28]
 800668c:	2300      	movs	r3, #0
 800668e:	930a      	str	r3, [sp, #40]	; 0x28
 8006690:	e7bf      	b.n	8006612 <_dtoa_r+0x1da>
 8006692:	2300      	movs	r3, #0
 8006694:	9308      	str	r3, [sp, #32]
 8006696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc55      	bgt.n	8006748 <_dtoa_r+0x310>
 800669c:	2301      	movs	r3, #1
 800669e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066a2:	461a      	mov	r2, r3
 80066a4:	9209      	str	r2, [sp, #36]	; 0x24
 80066a6:	e00c      	b.n	80066c2 <_dtoa_r+0x28a>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e7f3      	b.n	8006694 <_dtoa_r+0x25c>
 80066ac:	2300      	movs	r3, #0
 80066ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b0:	9308      	str	r3, [sp, #32]
 80066b2:	9b00      	ldr	r3, [sp, #0]
 80066b4:	4413      	add	r3, r2
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	3301      	adds	r3, #1
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	9303      	str	r3, [sp, #12]
 80066be:	bfb8      	it	lt
 80066c0:	2301      	movlt	r3, #1
 80066c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066c4:	2200      	movs	r2, #0
 80066c6:	6042      	str	r2, [r0, #4]
 80066c8:	2204      	movs	r2, #4
 80066ca:	f102 0614 	add.w	r6, r2, #20
 80066ce:	429e      	cmp	r6, r3
 80066d0:	6841      	ldr	r1, [r0, #4]
 80066d2:	d93d      	bls.n	8006750 <_dtoa_r+0x318>
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fed7 	bl	8007488 <_Balloc>
 80066da:	9001      	str	r0, [sp, #4]
 80066dc:	2800      	cmp	r0, #0
 80066de:	d13b      	bne.n	8006758 <_dtoa_r+0x320>
 80066e0:	4b11      	ldr	r3, [pc, #68]	; (8006728 <_dtoa_r+0x2f0>)
 80066e2:	4602      	mov	r2, r0
 80066e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066e8:	e6c0      	b.n	800646c <_dtoa_r+0x34>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e7df      	b.n	80066ae <_dtoa_r+0x276>
 80066ee:	bf00      	nop
 80066f0:	636f4361 	.word	0x636f4361
 80066f4:	3fd287a7 	.word	0x3fd287a7
 80066f8:	8b60c8b3 	.word	0x8b60c8b3
 80066fc:	3fc68a28 	.word	0x3fc68a28
 8006700:	509f79fb 	.word	0x509f79fb
 8006704:	3fd34413 	.word	0x3fd34413
 8006708:	08008549 	.word	0x08008549
 800670c:	08008560 	.word	0x08008560
 8006710:	7ff00000 	.word	0x7ff00000
 8006714:	08008545 	.word	0x08008545
 8006718:	0800853c 	.word	0x0800853c
 800671c:	08008519 	.word	0x08008519
 8006720:	3ff80000 	.word	0x3ff80000
 8006724:	080086b0 	.word	0x080086b0
 8006728:	080085bb 	.word	0x080085bb
 800672c:	2501      	movs	r5, #1
 800672e:	2300      	movs	r3, #0
 8006730:	9306      	str	r3, [sp, #24]
 8006732:	9508      	str	r5, [sp, #32]
 8006734:	f04f 33ff 	mov.w	r3, #4294967295
 8006738:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	2312      	movs	r3, #18
 8006740:	e7b0      	b.n	80066a4 <_dtoa_r+0x26c>
 8006742:	2301      	movs	r3, #1
 8006744:	9308      	str	r3, [sp, #32]
 8006746:	e7f5      	b.n	8006734 <_dtoa_r+0x2fc>
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800674e:	e7b8      	b.n	80066c2 <_dtoa_r+0x28a>
 8006750:	3101      	adds	r1, #1
 8006752:	6041      	str	r1, [r0, #4]
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	e7b8      	b.n	80066ca <_dtoa_r+0x292>
 8006758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800675a:	9a01      	ldr	r2, [sp, #4]
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	2b0e      	cmp	r3, #14
 8006762:	f200 809d 	bhi.w	80068a0 <_dtoa_r+0x468>
 8006766:	2d00      	cmp	r5, #0
 8006768:	f000 809a 	beq.w	80068a0 <_dtoa_r+0x468>
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	dd32      	ble.n	80067d8 <_dtoa_r+0x3a0>
 8006772:	4ab7      	ldr	r2, [pc, #732]	; (8006a50 <_dtoa_r+0x618>)
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800677c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006780:	9b00      	ldr	r3, [sp, #0]
 8006782:	05d8      	lsls	r0, r3, #23
 8006784:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006788:	d516      	bpl.n	80067b8 <_dtoa_r+0x380>
 800678a:	4bb2      	ldr	r3, [pc, #712]	; (8006a54 <_dtoa_r+0x61c>)
 800678c:	ec51 0b19 	vmov	r0, r1, d9
 8006790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006794:	f7fa f85a 	bl	800084c <__aeabi_ddiv>
 8006798:	f007 070f 	and.w	r7, r7, #15
 800679c:	4682      	mov	sl, r0
 800679e:	468b      	mov	fp, r1
 80067a0:	2503      	movs	r5, #3
 80067a2:	4eac      	ldr	r6, [pc, #688]	; (8006a54 <_dtoa_r+0x61c>)
 80067a4:	b957      	cbnz	r7, 80067bc <_dtoa_r+0x384>
 80067a6:	4642      	mov	r2, r8
 80067a8:	464b      	mov	r3, r9
 80067aa:	4650      	mov	r0, sl
 80067ac:	4659      	mov	r1, fp
 80067ae:	f7fa f84d 	bl	800084c <__aeabi_ddiv>
 80067b2:	4682      	mov	sl, r0
 80067b4:	468b      	mov	fp, r1
 80067b6:	e028      	b.n	800680a <_dtoa_r+0x3d2>
 80067b8:	2502      	movs	r5, #2
 80067ba:	e7f2      	b.n	80067a2 <_dtoa_r+0x36a>
 80067bc:	07f9      	lsls	r1, r7, #31
 80067be:	d508      	bpl.n	80067d2 <_dtoa_r+0x39a>
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	3501      	adds	r5, #1
 80067ce:	4680      	mov	r8, r0
 80067d0:	4689      	mov	r9, r1
 80067d2:	107f      	asrs	r7, r7, #1
 80067d4:	3608      	adds	r6, #8
 80067d6:	e7e5      	b.n	80067a4 <_dtoa_r+0x36c>
 80067d8:	f000 809b 	beq.w	8006912 <_dtoa_r+0x4da>
 80067dc:	9b00      	ldr	r3, [sp, #0]
 80067de:	4f9d      	ldr	r7, [pc, #628]	; (8006a54 <_dtoa_r+0x61c>)
 80067e0:	425e      	negs	r6, r3
 80067e2:	4b9b      	ldr	r3, [pc, #620]	; (8006a50 <_dtoa_r+0x618>)
 80067e4:	f006 020f 	and.w	r2, r6, #15
 80067e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	ec51 0b19 	vmov	r0, r1, d9
 80067f4:	f7f9 ff00 	bl	80005f8 <__aeabi_dmul>
 80067f8:	1136      	asrs	r6, r6, #4
 80067fa:	4682      	mov	sl, r0
 80067fc:	468b      	mov	fp, r1
 80067fe:	2300      	movs	r3, #0
 8006800:	2502      	movs	r5, #2
 8006802:	2e00      	cmp	r6, #0
 8006804:	d17a      	bne.n	80068fc <_dtoa_r+0x4c4>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1d3      	bne.n	80067b2 <_dtoa_r+0x37a>
 800680a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8082 	beq.w	8006916 <_dtoa_r+0x4de>
 8006812:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <_dtoa_r+0x620>)
 8006814:	2200      	movs	r2, #0
 8006816:	4650      	mov	r0, sl
 8006818:	4659      	mov	r1, fp
 800681a:	f7fa f95f 	bl	8000adc <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	d079      	beq.n	8006916 <_dtoa_r+0x4de>
 8006822:	9b03      	ldr	r3, [sp, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d076      	beq.n	8006916 <_dtoa_r+0x4de>
 8006828:	9b02      	ldr	r3, [sp, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	dd36      	ble.n	800689c <_dtoa_r+0x464>
 800682e:	9b00      	ldr	r3, [sp, #0]
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	1e5f      	subs	r7, r3, #1
 8006836:	2200      	movs	r2, #0
 8006838:	4b88      	ldr	r3, [pc, #544]	; (8006a5c <_dtoa_r+0x624>)
 800683a:	f7f9 fedd 	bl	80005f8 <__aeabi_dmul>
 800683e:	9e02      	ldr	r6, [sp, #8]
 8006840:	4682      	mov	sl, r0
 8006842:	468b      	mov	fp, r1
 8006844:	3501      	adds	r5, #1
 8006846:	4628      	mov	r0, r5
 8006848:	f7f9 fe6c 	bl	8000524 <__aeabi_i2d>
 800684c:	4652      	mov	r2, sl
 800684e:	465b      	mov	r3, fp
 8006850:	f7f9 fed2 	bl	80005f8 <__aeabi_dmul>
 8006854:	4b82      	ldr	r3, [pc, #520]	; (8006a60 <_dtoa_r+0x628>)
 8006856:	2200      	movs	r2, #0
 8006858:	f7f9 fd18 	bl	800028c <__adddf3>
 800685c:	46d0      	mov	r8, sl
 800685e:	46d9      	mov	r9, fp
 8006860:	4682      	mov	sl, r0
 8006862:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006866:	2e00      	cmp	r6, #0
 8006868:	d158      	bne.n	800691c <_dtoa_r+0x4e4>
 800686a:	4b7e      	ldr	r3, [pc, #504]	; (8006a64 <_dtoa_r+0x62c>)
 800686c:	2200      	movs	r2, #0
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7f9 fd09 	bl	8000288 <__aeabi_dsub>
 8006876:	4652      	mov	r2, sl
 8006878:	465b      	mov	r3, fp
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	f7fa f94b 	bl	8000b18 <__aeabi_dcmpgt>
 8006882:	2800      	cmp	r0, #0
 8006884:	f040 8295 	bne.w	8006db2 <_dtoa_r+0x97a>
 8006888:	4652      	mov	r2, sl
 800688a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800688e:	4640      	mov	r0, r8
 8006890:	4649      	mov	r1, r9
 8006892:	f7fa f923 	bl	8000adc <__aeabi_dcmplt>
 8006896:	2800      	cmp	r0, #0
 8006898:	f040 8289 	bne.w	8006dae <_dtoa_r+0x976>
 800689c:	ec5b ab19 	vmov	sl, fp, d9
 80068a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f2c0 8148 	blt.w	8006b38 <_dtoa_r+0x700>
 80068a8:	9a00      	ldr	r2, [sp, #0]
 80068aa:	2a0e      	cmp	r2, #14
 80068ac:	f300 8144 	bgt.w	8006b38 <_dtoa_r+0x700>
 80068b0:	4b67      	ldr	r3, [pc, #412]	; (8006a50 <_dtoa_r+0x618>)
 80068b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f280 80d5 	bge.w	8006a6c <_dtoa_r+0x634>
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f300 80d1 	bgt.w	8006a6c <_dtoa_r+0x634>
 80068ca:	f040 826f 	bne.w	8006dac <_dtoa_r+0x974>
 80068ce:	4b65      	ldr	r3, [pc, #404]	; (8006a64 <_dtoa_r+0x62c>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	f7f9 fe8f 	bl	80005f8 <__aeabi_dmul>
 80068da:	4652      	mov	r2, sl
 80068dc:	465b      	mov	r3, fp
 80068de:	f7fa f911 	bl	8000b04 <__aeabi_dcmpge>
 80068e2:	9e03      	ldr	r6, [sp, #12]
 80068e4:	4637      	mov	r7, r6
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f040 8245 	bne.w	8006d76 <_dtoa_r+0x93e>
 80068ec:	9d01      	ldr	r5, [sp, #4]
 80068ee:	2331      	movs	r3, #49	; 0x31
 80068f0:	f805 3b01 	strb.w	r3, [r5], #1
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	3301      	adds	r3, #1
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	e240      	b.n	8006d7e <_dtoa_r+0x946>
 80068fc:	07f2      	lsls	r2, r6, #31
 80068fe:	d505      	bpl.n	800690c <_dtoa_r+0x4d4>
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	f7f9 fe78 	bl	80005f8 <__aeabi_dmul>
 8006908:	3501      	adds	r5, #1
 800690a:	2301      	movs	r3, #1
 800690c:	1076      	asrs	r6, r6, #1
 800690e:	3708      	adds	r7, #8
 8006910:	e777      	b.n	8006802 <_dtoa_r+0x3ca>
 8006912:	2502      	movs	r5, #2
 8006914:	e779      	b.n	800680a <_dtoa_r+0x3d2>
 8006916:	9f00      	ldr	r7, [sp, #0]
 8006918:	9e03      	ldr	r6, [sp, #12]
 800691a:	e794      	b.n	8006846 <_dtoa_r+0x40e>
 800691c:	9901      	ldr	r1, [sp, #4]
 800691e:	4b4c      	ldr	r3, [pc, #304]	; (8006a50 <_dtoa_r+0x618>)
 8006920:	4431      	add	r1, r6
 8006922:	910d      	str	r1, [sp, #52]	; 0x34
 8006924:	9908      	ldr	r1, [sp, #32]
 8006926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800692a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800692e:	2900      	cmp	r1, #0
 8006930:	d043      	beq.n	80069ba <_dtoa_r+0x582>
 8006932:	494d      	ldr	r1, [pc, #308]	; (8006a68 <_dtoa_r+0x630>)
 8006934:	2000      	movs	r0, #0
 8006936:	f7f9 ff89 	bl	800084c <__aeabi_ddiv>
 800693a:	4652      	mov	r2, sl
 800693c:	465b      	mov	r3, fp
 800693e:	f7f9 fca3 	bl	8000288 <__aeabi_dsub>
 8006942:	9d01      	ldr	r5, [sp, #4]
 8006944:	4682      	mov	sl, r0
 8006946:	468b      	mov	fp, r1
 8006948:	4649      	mov	r1, r9
 800694a:	4640      	mov	r0, r8
 800694c:	f7fa f904 	bl	8000b58 <__aeabi_d2iz>
 8006950:	4606      	mov	r6, r0
 8006952:	f7f9 fde7 	bl	8000524 <__aeabi_i2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 fc93 	bl	8000288 <__aeabi_dsub>
 8006962:	3630      	adds	r6, #48	; 0x30
 8006964:	f805 6b01 	strb.w	r6, [r5], #1
 8006968:	4652      	mov	r2, sl
 800696a:	465b      	mov	r3, fp
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	f7fa f8b4 	bl	8000adc <__aeabi_dcmplt>
 8006974:	2800      	cmp	r0, #0
 8006976:	d163      	bne.n	8006a40 <_dtoa_r+0x608>
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	4936      	ldr	r1, [pc, #216]	; (8006a58 <_dtoa_r+0x620>)
 800697e:	2000      	movs	r0, #0
 8006980:	f7f9 fc82 	bl	8000288 <__aeabi_dsub>
 8006984:	4652      	mov	r2, sl
 8006986:	465b      	mov	r3, fp
 8006988:	f7fa f8a8 	bl	8000adc <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	f040 80b5 	bne.w	8006afc <_dtoa_r+0x6c4>
 8006992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006994:	429d      	cmp	r5, r3
 8006996:	d081      	beq.n	800689c <_dtoa_r+0x464>
 8006998:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <_dtoa_r+0x624>)
 800699a:	2200      	movs	r2, #0
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7f9 fe2a 	bl	80005f8 <__aeabi_dmul>
 80069a4:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <_dtoa_r+0x624>)
 80069a6:	4682      	mov	sl, r0
 80069a8:	468b      	mov	fp, r1
 80069aa:	4640      	mov	r0, r8
 80069ac:	4649      	mov	r1, r9
 80069ae:	2200      	movs	r2, #0
 80069b0:	f7f9 fe22 	bl	80005f8 <__aeabi_dmul>
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	e7c6      	b.n	8006948 <_dtoa_r+0x510>
 80069ba:	4650      	mov	r0, sl
 80069bc:	4659      	mov	r1, fp
 80069be:	f7f9 fe1b 	bl	80005f8 <__aeabi_dmul>
 80069c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c4:	9d01      	ldr	r5, [sp, #4]
 80069c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c8:	4682      	mov	sl, r0
 80069ca:	468b      	mov	fp, r1
 80069cc:	4649      	mov	r1, r9
 80069ce:	4640      	mov	r0, r8
 80069d0:	f7fa f8c2 	bl	8000b58 <__aeabi_d2iz>
 80069d4:	4606      	mov	r6, r0
 80069d6:	f7f9 fda5 	bl	8000524 <__aeabi_i2d>
 80069da:	3630      	adds	r6, #48	; 0x30
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7f9 fc50 	bl	8000288 <__aeabi_dsub>
 80069e8:	f805 6b01 	strb.w	r6, [r5], #1
 80069ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ee:	429d      	cmp	r5, r3
 80069f0:	4680      	mov	r8, r0
 80069f2:	4689      	mov	r9, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	d124      	bne.n	8006a44 <_dtoa_r+0x60c>
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <_dtoa_r+0x630>)
 80069fc:	4650      	mov	r0, sl
 80069fe:	4659      	mov	r1, fp
 8006a00:	f7f9 fc44 	bl	800028c <__adddf3>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7fa f884 	bl	8000b18 <__aeabi_dcmpgt>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d173      	bne.n	8006afc <_dtoa_r+0x6c4>
 8006a14:	4652      	mov	r2, sl
 8006a16:	465b      	mov	r3, fp
 8006a18:	4913      	ldr	r1, [pc, #76]	; (8006a68 <_dtoa_r+0x630>)
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	f7f9 fc34 	bl	8000288 <__aeabi_dsub>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4640      	mov	r0, r8
 8006a26:	4649      	mov	r1, r9
 8006a28:	f7fa f858 	bl	8000adc <__aeabi_dcmplt>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f43f af35 	beq.w	800689c <_dtoa_r+0x464>
 8006a32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a34:	1e6b      	subs	r3, r5, #1
 8006a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a3c:	2b30      	cmp	r3, #48	; 0x30
 8006a3e:	d0f8      	beq.n	8006a32 <_dtoa_r+0x5fa>
 8006a40:	9700      	str	r7, [sp, #0]
 8006a42:	e049      	b.n	8006ad8 <_dtoa_r+0x6a0>
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <_dtoa_r+0x624>)
 8006a46:	f7f9 fdd7 	bl	80005f8 <__aeabi_dmul>
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	4689      	mov	r9, r1
 8006a4e:	e7bd      	b.n	80069cc <_dtoa_r+0x594>
 8006a50:	080086b0 	.word	0x080086b0
 8006a54:	08008688 	.word	0x08008688
 8006a58:	3ff00000 	.word	0x3ff00000
 8006a5c:	40240000 	.word	0x40240000
 8006a60:	401c0000 	.word	0x401c0000
 8006a64:	40140000 	.word	0x40140000
 8006a68:	3fe00000 	.word	0x3fe00000
 8006a6c:	9d01      	ldr	r5, [sp, #4]
 8006a6e:	4656      	mov	r6, sl
 8006a70:	465f      	mov	r7, fp
 8006a72:	4642      	mov	r2, r8
 8006a74:	464b      	mov	r3, r9
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7f9 fee7 	bl	800084c <__aeabi_ddiv>
 8006a7e:	f7fa f86b 	bl	8000b58 <__aeabi_d2iz>
 8006a82:	4682      	mov	sl, r0
 8006a84:	f7f9 fd4e 	bl	8000524 <__aeabi_i2d>
 8006a88:	4642      	mov	r2, r8
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	f7f9 fdb4 	bl	80005f8 <__aeabi_dmul>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a9c:	f7f9 fbf4 	bl	8000288 <__aeabi_dsub>
 8006aa0:	f805 6b01 	strb.w	r6, [r5], #1
 8006aa4:	9e01      	ldr	r6, [sp, #4]
 8006aa6:	9f03      	ldr	r7, [sp, #12]
 8006aa8:	1bae      	subs	r6, r5, r6
 8006aaa:	42b7      	cmp	r7, r6
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	d135      	bne.n	8006b1e <_dtoa_r+0x6e6>
 8006ab2:	f7f9 fbeb 	bl	800028c <__adddf3>
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	464b      	mov	r3, r9
 8006aba:	4606      	mov	r6, r0
 8006abc:	460f      	mov	r7, r1
 8006abe:	f7fa f82b 	bl	8000b18 <__aeabi_dcmpgt>
 8006ac2:	b9d0      	cbnz	r0, 8006afa <_dtoa_r+0x6c2>
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7f9 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad0:	b110      	cbz	r0, 8006ad8 <_dtoa_r+0x6a0>
 8006ad2:	f01a 0f01 	tst.w	sl, #1
 8006ad6:	d110      	bne.n	8006afa <_dtoa_r+0x6c2>
 8006ad8:	4620      	mov	r0, r4
 8006ada:	ee18 1a10 	vmov	r1, s16
 8006ade:	f000 fd13 	bl	8007508 <_Bfree>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9800      	ldr	r0, [sp, #0]
 8006ae6:	702b      	strb	r3, [r5, #0]
 8006ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aea:	3001      	adds	r0, #1
 8006aec:	6018      	str	r0, [r3, #0]
 8006aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f43f acf1 	beq.w	80064d8 <_dtoa_r+0xa0>
 8006af6:	601d      	str	r5, [r3, #0]
 8006af8:	e4ee      	b.n	80064d8 <_dtoa_r+0xa0>
 8006afa:	9f00      	ldr	r7, [sp, #0]
 8006afc:	462b      	mov	r3, r5
 8006afe:	461d      	mov	r5, r3
 8006b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b04:	2a39      	cmp	r2, #57	; 0x39
 8006b06:	d106      	bne.n	8006b16 <_dtoa_r+0x6de>
 8006b08:	9a01      	ldr	r2, [sp, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d1f7      	bne.n	8006afe <_dtoa_r+0x6c6>
 8006b0e:	9901      	ldr	r1, [sp, #4]
 8006b10:	2230      	movs	r2, #48	; 0x30
 8006b12:	3701      	adds	r7, #1
 8006b14:	700a      	strb	r2, [r1, #0]
 8006b16:	781a      	ldrb	r2, [r3, #0]
 8006b18:	3201      	adds	r2, #1
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	e790      	b.n	8006a40 <_dtoa_r+0x608>
 8006b1e:	4ba6      	ldr	r3, [pc, #664]	; (8006db8 <_dtoa_r+0x980>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	f7f9 fd69 	bl	80005f8 <__aeabi_dmul>
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	f7f9 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d09d      	beq.n	8006a72 <_dtoa_r+0x63a>
 8006b36:	e7cf      	b.n	8006ad8 <_dtoa_r+0x6a0>
 8006b38:	9a08      	ldr	r2, [sp, #32]
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	f000 80d7 	beq.w	8006cee <_dtoa_r+0x8b6>
 8006b40:	9a06      	ldr	r2, [sp, #24]
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	f300 80ba 	bgt.w	8006cbc <_dtoa_r+0x884>
 8006b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	f000 80b2 	beq.w	8006cb4 <_dtoa_r+0x87c>
 8006b50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b54:	9e07      	ldr	r6, [sp, #28]
 8006b56:	9d04      	ldr	r5, [sp, #16]
 8006b58:	9a04      	ldr	r2, [sp, #16]
 8006b5a:	441a      	add	r2, r3
 8006b5c:	9204      	str	r2, [sp, #16]
 8006b5e:	9a05      	ldr	r2, [sp, #20]
 8006b60:	2101      	movs	r1, #1
 8006b62:	441a      	add	r2, r3
 8006b64:	4620      	mov	r0, r4
 8006b66:	9205      	str	r2, [sp, #20]
 8006b68:	f000 fd86 	bl	8007678 <__i2b>
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	dd0c      	ble.n	8006b8c <_dtoa_r+0x754>
 8006b72:	9b05      	ldr	r3, [sp, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd09      	ble.n	8006b8c <_dtoa_r+0x754>
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	9a04      	ldr	r2, [sp, #16]
 8006b7c:	bfa8      	it	ge
 8006b7e:	462b      	movge	r3, r5
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	9204      	str	r2, [sp, #16]
 8006b84:	9a05      	ldr	r2, [sp, #20]
 8006b86:	1aed      	subs	r5, r5, r3
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	9305      	str	r3, [sp, #20]
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	b31b      	cbz	r3, 8006bd8 <_dtoa_r+0x7a0>
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 80af 	beq.w	8006cf6 <_dtoa_r+0x8be>
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	dd13      	ble.n	8006bc4 <_dtoa_r+0x78c>
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 fe29 	bl	80077f8 <__pow5mult>
 8006ba6:	ee18 2a10 	vmov	r2, s16
 8006baa:	4601      	mov	r1, r0
 8006bac:	4607      	mov	r7, r0
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 fd78 	bl	80076a4 <__multiply>
 8006bb4:	ee18 1a10 	vmov	r1, s16
 8006bb8:	4680      	mov	r8, r0
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fca4 	bl	8007508 <_Bfree>
 8006bc0:	ee08 8a10 	vmov	s16, r8
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	1b9a      	subs	r2, r3, r6
 8006bc8:	d006      	beq.n	8006bd8 <_dtoa_r+0x7a0>
 8006bca:	ee18 1a10 	vmov	r1, s16
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fe12 	bl	80077f8 <__pow5mult>
 8006bd4:	ee08 0a10 	vmov	s16, r0
 8006bd8:	2101      	movs	r1, #1
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fd4c 	bl	8007678 <__i2b>
 8006be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	4606      	mov	r6, r0
 8006be6:	f340 8088 	ble.w	8006cfa <_dtoa_r+0x8c2>
 8006bea:	461a      	mov	r2, r3
 8006bec:	4601      	mov	r1, r0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 fe02 	bl	80077f8 <__pow5mult>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	f340 8081 	ble.w	8006d00 <_dtoa_r+0x8c8>
 8006bfe:	f04f 0800 	mov.w	r8, #0
 8006c02:	6933      	ldr	r3, [r6, #16]
 8006c04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c08:	6918      	ldr	r0, [r3, #16]
 8006c0a:	f000 fce5 	bl	80075d8 <__hi0bits>
 8006c0e:	f1c0 0020 	rsb	r0, r0, #32
 8006c12:	9b05      	ldr	r3, [sp, #20]
 8006c14:	4418      	add	r0, r3
 8006c16:	f010 001f 	ands.w	r0, r0, #31
 8006c1a:	f000 8092 	beq.w	8006d42 <_dtoa_r+0x90a>
 8006c1e:	f1c0 0320 	rsb	r3, r0, #32
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	f340 808a 	ble.w	8006d3c <_dtoa_r+0x904>
 8006c28:	f1c0 001c 	rsb	r0, r0, #28
 8006c2c:	9b04      	ldr	r3, [sp, #16]
 8006c2e:	4403      	add	r3, r0
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	9b05      	ldr	r3, [sp, #20]
 8006c34:	4403      	add	r3, r0
 8006c36:	4405      	add	r5, r0
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dd07      	ble.n	8006c50 <_dtoa_r+0x818>
 8006c40:	ee18 1a10 	vmov	r1, s16
 8006c44:	461a      	mov	r2, r3
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 fe30 	bl	80078ac <__lshift>
 8006c4c:	ee08 0a10 	vmov	s16, r0
 8006c50:	9b05      	ldr	r3, [sp, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	dd05      	ble.n	8006c62 <_dtoa_r+0x82a>
 8006c56:	4631      	mov	r1, r6
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fe26 	bl	80078ac <__lshift>
 8006c60:	4606      	mov	r6, r0
 8006c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d06e      	beq.n	8006d46 <_dtoa_r+0x90e>
 8006c68:	ee18 0a10 	vmov	r0, s16
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	f000 fe8d 	bl	800798c <__mcmp>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	da67      	bge.n	8006d46 <_dtoa_r+0x90e>
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	ee18 1a10 	vmov	r1, s16
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	220a      	movs	r2, #10
 8006c82:	2300      	movs	r3, #0
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fc61 	bl	800754c <__multadd>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	ee08 0a10 	vmov	s16, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 81b1 	beq.w	8006ff8 <_dtoa_r+0xbc0>
 8006c96:	2300      	movs	r3, #0
 8006c98:	4639      	mov	r1, r7
 8006c9a:	220a      	movs	r2, #10
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fc55 	bl	800754c <__multadd>
 8006ca2:	9b02      	ldr	r3, [sp, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	f300 808e 	bgt.w	8006dc8 <_dtoa_r+0x990>
 8006cac:	9b06      	ldr	r3, [sp, #24]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	dc51      	bgt.n	8006d56 <_dtoa_r+0x91e>
 8006cb2:	e089      	b.n	8006dc8 <_dtoa_r+0x990>
 8006cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cba:	e74b      	b.n	8006b54 <_dtoa_r+0x71c>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	1e5e      	subs	r6, r3, #1
 8006cc0:	9b07      	ldr	r3, [sp, #28]
 8006cc2:	42b3      	cmp	r3, r6
 8006cc4:	bfbf      	itttt	lt
 8006cc6:	9b07      	ldrlt	r3, [sp, #28]
 8006cc8:	9607      	strlt	r6, [sp, #28]
 8006cca:	1af2      	sublt	r2, r6, r3
 8006ccc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cce:	bfb6      	itet	lt
 8006cd0:	189b      	addlt	r3, r3, r2
 8006cd2:	1b9e      	subge	r6, r3, r6
 8006cd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	bfb8      	it	lt
 8006cda:	2600      	movlt	r6, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfb7      	itett	lt
 8006ce0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006ce4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ce8:	1a9d      	sublt	r5, r3, r2
 8006cea:	2300      	movlt	r3, #0
 8006cec:	e734      	b.n	8006b58 <_dtoa_r+0x720>
 8006cee:	9e07      	ldr	r6, [sp, #28]
 8006cf0:	9d04      	ldr	r5, [sp, #16]
 8006cf2:	9f08      	ldr	r7, [sp, #32]
 8006cf4:	e73b      	b.n	8006b6e <_dtoa_r+0x736>
 8006cf6:	9a07      	ldr	r2, [sp, #28]
 8006cf8:	e767      	b.n	8006bca <_dtoa_r+0x792>
 8006cfa:	9b06      	ldr	r3, [sp, #24]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	dc18      	bgt.n	8006d32 <_dtoa_r+0x8fa>
 8006d00:	f1ba 0f00 	cmp.w	sl, #0
 8006d04:	d115      	bne.n	8006d32 <_dtoa_r+0x8fa>
 8006d06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d0a:	b993      	cbnz	r3, 8006d32 <_dtoa_r+0x8fa>
 8006d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d10:	0d1b      	lsrs	r3, r3, #20
 8006d12:	051b      	lsls	r3, r3, #20
 8006d14:	b183      	cbz	r3, 8006d38 <_dtoa_r+0x900>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	9b05      	ldr	r3, [sp, #20]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	f04f 0801 	mov.w	r8, #1
 8006d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f af6a 	bne.w	8006c02 <_dtoa_r+0x7ca>
 8006d2e:	2001      	movs	r0, #1
 8006d30:	e76f      	b.n	8006c12 <_dtoa_r+0x7da>
 8006d32:	f04f 0800 	mov.w	r8, #0
 8006d36:	e7f6      	b.n	8006d26 <_dtoa_r+0x8ee>
 8006d38:	4698      	mov	r8, r3
 8006d3a:	e7f4      	b.n	8006d26 <_dtoa_r+0x8ee>
 8006d3c:	f43f af7d 	beq.w	8006c3a <_dtoa_r+0x802>
 8006d40:	4618      	mov	r0, r3
 8006d42:	301c      	adds	r0, #28
 8006d44:	e772      	b.n	8006c2c <_dtoa_r+0x7f4>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dc37      	bgt.n	8006dbc <_dtoa_r+0x984>
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	dd34      	ble.n	8006dbc <_dtoa_r+0x984>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	9302      	str	r3, [sp, #8]
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	b96b      	cbnz	r3, 8006d76 <_dtoa_r+0x93e>
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fbf4 	bl	800754c <__multadd>
 8006d64:	4601      	mov	r1, r0
 8006d66:	4606      	mov	r6, r0
 8006d68:	ee18 0a10 	vmov	r0, s16
 8006d6c:	f000 fe0e 	bl	800798c <__mcmp>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f73f adbb 	bgt.w	80068ec <_dtoa_r+0x4b4>
 8006d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d78:	9d01      	ldr	r5, [sp, #4]
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	4631      	mov	r1, r6
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 fbbf 	bl	8007508 <_Bfree>
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	f43f aea4 	beq.w	8006ad8 <_dtoa_r+0x6a0>
 8006d90:	f1b8 0f00 	cmp.w	r8, #0
 8006d94:	d005      	beq.n	8006da2 <_dtoa_r+0x96a>
 8006d96:	45b8      	cmp	r8, r7
 8006d98:	d003      	beq.n	8006da2 <_dtoa_r+0x96a>
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 fbb3 	bl	8007508 <_Bfree>
 8006da2:	4639      	mov	r1, r7
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 fbaf 	bl	8007508 <_Bfree>
 8006daa:	e695      	b.n	8006ad8 <_dtoa_r+0x6a0>
 8006dac:	2600      	movs	r6, #0
 8006dae:	4637      	mov	r7, r6
 8006db0:	e7e1      	b.n	8006d76 <_dtoa_r+0x93e>
 8006db2:	9700      	str	r7, [sp, #0]
 8006db4:	4637      	mov	r7, r6
 8006db6:	e599      	b.n	80068ec <_dtoa_r+0x4b4>
 8006db8:	40240000 	.word	0x40240000
 8006dbc:	9b08      	ldr	r3, [sp, #32]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80ca 	beq.w	8006f58 <_dtoa_r+0xb20>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	dd05      	ble.n	8006dd8 <_dtoa_r+0x9a0>
 8006dcc:	4639      	mov	r1, r7
 8006dce:	462a      	mov	r2, r5
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fd6b 	bl	80078ac <__lshift>
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	f1b8 0f00 	cmp.w	r8, #0
 8006ddc:	d05b      	beq.n	8006e96 <_dtoa_r+0xa5e>
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fb51 	bl	8007488 <_Balloc>
 8006de6:	4605      	mov	r5, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <_dtoa_r+0x9be>
 8006dea:	4b87      	ldr	r3, [pc, #540]	; (8007008 <_dtoa_r+0xbd0>)
 8006dec:	4602      	mov	r2, r0
 8006dee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006df2:	f7ff bb3b 	b.w	800646c <_dtoa_r+0x34>
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	3202      	adds	r2, #2
 8006dfa:	0092      	lsls	r2, r2, #2
 8006dfc:	f107 010c 	add.w	r1, r7, #12
 8006e00:	300c      	adds	r0, #12
 8006e02:	f000 fb33 	bl	800746c <memcpy>
 8006e06:	2201      	movs	r2, #1
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 fd4e 	bl	80078ac <__lshift>
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	f103 0901 	add.w	r9, r3, #1
 8006e16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	f00a 0301 	and.w	r3, sl, #1
 8006e22:	46b8      	mov	r8, r7
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	4607      	mov	r7, r0
 8006e28:	4631      	mov	r1, r6
 8006e2a:	ee18 0a10 	vmov	r0, s16
 8006e2e:	f7ff fa77 	bl	8006320 <quorem>
 8006e32:	4641      	mov	r1, r8
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e3a:	ee18 0a10 	vmov	r0, s16
 8006e3e:	f000 fda5 	bl	800798c <__mcmp>
 8006e42:	463a      	mov	r2, r7
 8006e44:	9003      	str	r0, [sp, #12]
 8006e46:	4631      	mov	r1, r6
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 fdbb 	bl	80079c4 <__mdiff>
 8006e4e:	68c2      	ldr	r2, [r0, #12]
 8006e50:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e54:	4605      	mov	r5, r0
 8006e56:	bb02      	cbnz	r2, 8006e9a <_dtoa_r+0xa62>
 8006e58:	4601      	mov	r1, r0
 8006e5a:	ee18 0a10 	vmov	r0, s16
 8006e5e:	f000 fd95 	bl	800798c <__mcmp>
 8006e62:	4602      	mov	r2, r0
 8006e64:	4629      	mov	r1, r5
 8006e66:	4620      	mov	r0, r4
 8006e68:	9207      	str	r2, [sp, #28]
 8006e6a:	f000 fb4d 	bl	8007508 <_Bfree>
 8006e6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e72:	ea43 0102 	orr.w	r1, r3, r2
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	464d      	mov	r5, r9
 8006e7c:	d10f      	bne.n	8006e9e <_dtoa_r+0xa66>
 8006e7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e82:	d02a      	beq.n	8006eda <_dtoa_r+0xaa2>
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dd02      	ble.n	8006e90 <_dtoa_r+0xa58>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e90:	f88b a000 	strb.w	sl, [fp]
 8006e94:	e775      	b.n	8006d82 <_dtoa_r+0x94a>
 8006e96:	4638      	mov	r0, r7
 8006e98:	e7ba      	b.n	8006e10 <_dtoa_r+0x9d8>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	e7e2      	b.n	8006e64 <_dtoa_r+0xa2c>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	db04      	blt.n	8006eae <_dtoa_r+0xa76>
 8006ea4:	9906      	ldr	r1, [sp, #24]
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	9904      	ldr	r1, [sp, #16]
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	d122      	bne.n	8006ef4 <_dtoa_r+0xabc>
 8006eae:	2a00      	cmp	r2, #0
 8006eb0:	ddee      	ble.n	8006e90 <_dtoa_r+0xa58>
 8006eb2:	ee18 1a10 	vmov	r1, s16
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 fcf7 	bl	80078ac <__lshift>
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	ee08 0a10 	vmov	s16, r0
 8006ec4:	f000 fd62 	bl	800798c <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dc03      	bgt.n	8006ed4 <_dtoa_r+0xa9c>
 8006ecc:	d1e0      	bne.n	8006e90 <_dtoa_r+0xa58>
 8006ece:	f01a 0f01 	tst.w	sl, #1
 8006ed2:	d0dd      	beq.n	8006e90 <_dtoa_r+0xa58>
 8006ed4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ed8:	d1d7      	bne.n	8006e8a <_dtoa_r+0xa52>
 8006eda:	2339      	movs	r3, #57	; 0x39
 8006edc:	f88b 3000 	strb.w	r3, [fp]
 8006ee0:	462b      	mov	r3, r5
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006eea:	2a39      	cmp	r2, #57	; 0x39
 8006eec:	d071      	beq.n	8006fd2 <_dtoa_r+0xb9a>
 8006eee:	3201      	adds	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e746      	b.n	8006d82 <_dtoa_r+0x94a>
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	dd07      	ble.n	8006f08 <_dtoa_r+0xad0>
 8006ef8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006efc:	d0ed      	beq.n	8006eda <_dtoa_r+0xaa2>
 8006efe:	f10a 0301 	add.w	r3, sl, #1
 8006f02:	f88b 3000 	strb.w	r3, [fp]
 8006f06:	e73c      	b.n	8006d82 <_dtoa_r+0x94a>
 8006f08:	9b05      	ldr	r3, [sp, #20]
 8006f0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f0e:	4599      	cmp	r9, r3
 8006f10:	d047      	beq.n	8006fa2 <_dtoa_r+0xb6a>
 8006f12:	ee18 1a10 	vmov	r1, s16
 8006f16:	2300      	movs	r3, #0
 8006f18:	220a      	movs	r2, #10
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fb16 	bl	800754c <__multadd>
 8006f20:	45b8      	cmp	r8, r7
 8006f22:	ee08 0a10 	vmov	s16, r0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	f04f 020a 	mov.w	r2, #10
 8006f2e:	4641      	mov	r1, r8
 8006f30:	4620      	mov	r0, r4
 8006f32:	d106      	bne.n	8006f42 <_dtoa_r+0xb0a>
 8006f34:	f000 fb0a 	bl	800754c <__multadd>
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	f109 0901 	add.w	r9, r9, #1
 8006f40:	e772      	b.n	8006e28 <_dtoa_r+0x9f0>
 8006f42:	f000 fb03 	bl	800754c <__multadd>
 8006f46:	4639      	mov	r1, r7
 8006f48:	4680      	mov	r8, r0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	220a      	movs	r2, #10
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 fafc 	bl	800754c <__multadd>
 8006f54:	4607      	mov	r7, r0
 8006f56:	e7f1      	b.n	8006f3c <_dtoa_r+0xb04>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	9302      	str	r3, [sp, #8]
 8006f5c:	9d01      	ldr	r5, [sp, #4]
 8006f5e:	ee18 0a10 	vmov	r0, s16
 8006f62:	4631      	mov	r1, r6
 8006f64:	f7ff f9dc 	bl	8006320 <quorem>
 8006f68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	f805 ab01 	strb.w	sl, [r5], #1
 8006f72:	1aea      	subs	r2, r5, r3
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	dd09      	ble.n	8006f8e <_dtoa_r+0xb56>
 8006f7a:	ee18 1a10 	vmov	r1, s16
 8006f7e:	2300      	movs	r3, #0
 8006f80:	220a      	movs	r2, #10
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 fae2 	bl	800754c <__multadd>
 8006f88:	ee08 0a10 	vmov	s16, r0
 8006f8c:	e7e7      	b.n	8006f5e <_dtoa_r+0xb26>
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bfc8      	it	gt
 8006f94:	461d      	movgt	r5, r3
 8006f96:	9b01      	ldr	r3, [sp, #4]
 8006f98:	bfd8      	it	le
 8006f9a:	2501      	movle	r5, #1
 8006f9c:	441d      	add	r5, r3
 8006f9e:	f04f 0800 	mov.w	r8, #0
 8006fa2:	ee18 1a10 	vmov	r1, s16
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fc7f 	bl	80078ac <__lshift>
 8006fae:	4631      	mov	r1, r6
 8006fb0:	ee08 0a10 	vmov	s16, r0
 8006fb4:	f000 fcea 	bl	800798c <__mcmp>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	dc91      	bgt.n	8006ee0 <_dtoa_r+0xaa8>
 8006fbc:	d102      	bne.n	8006fc4 <_dtoa_r+0xb8c>
 8006fbe:	f01a 0f01 	tst.w	sl, #1
 8006fc2:	d18d      	bne.n	8006ee0 <_dtoa_r+0xaa8>
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fcc:	2a30      	cmp	r2, #48	; 0x30
 8006fce:	d0fa      	beq.n	8006fc6 <_dtoa_r+0xb8e>
 8006fd0:	e6d7      	b.n	8006d82 <_dtoa_r+0x94a>
 8006fd2:	9a01      	ldr	r2, [sp, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d184      	bne.n	8006ee2 <_dtoa_r+0xaaa>
 8006fd8:	9b00      	ldr	r3, [sp, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	2331      	movs	r3, #49	; 0x31
 8006fe0:	7013      	strb	r3, [r2, #0]
 8006fe2:	e6ce      	b.n	8006d82 <_dtoa_r+0x94a>
 8006fe4:	4b09      	ldr	r3, [pc, #36]	; (800700c <_dtoa_r+0xbd4>)
 8006fe6:	f7ff ba95 	b.w	8006514 <_dtoa_r+0xdc>
 8006fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f aa6e 	bne.w	80064ce <_dtoa_r+0x96>
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <_dtoa_r+0xbd8>)
 8006ff4:	f7ff ba8e 	b.w	8006514 <_dtoa_r+0xdc>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	dcae      	bgt.n	8006f5c <_dtoa_r+0xb24>
 8006ffe:	9b06      	ldr	r3, [sp, #24]
 8007000:	2b02      	cmp	r3, #2
 8007002:	f73f aea8 	bgt.w	8006d56 <_dtoa_r+0x91e>
 8007006:	e7a9      	b.n	8006f5c <_dtoa_r+0xb24>
 8007008:	080085bb 	.word	0x080085bb
 800700c:	08008518 	.word	0x08008518
 8007010:	0800853c 	.word	0x0800853c

08007014 <__sflush_r>:
 8007014:	898a      	ldrh	r2, [r1, #12]
 8007016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	0710      	lsls	r0, r2, #28
 800701e:	460c      	mov	r4, r1
 8007020:	d458      	bmi.n	80070d4 <__sflush_r+0xc0>
 8007022:	684b      	ldr	r3, [r1, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	dc05      	bgt.n	8007034 <__sflush_r+0x20>
 8007028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	dc02      	bgt.n	8007034 <__sflush_r+0x20>
 800702e:	2000      	movs	r0, #0
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007036:	2e00      	cmp	r6, #0
 8007038:	d0f9      	beq.n	800702e <__sflush_r+0x1a>
 800703a:	2300      	movs	r3, #0
 800703c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007040:	682f      	ldr	r7, [r5, #0]
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	d032      	beq.n	80070ac <__sflush_r+0x98>
 8007046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	075a      	lsls	r2, r3, #29
 800704c:	d505      	bpl.n	800705a <__sflush_r+0x46>
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	1ac0      	subs	r0, r0, r3
 8007052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007054:	b10b      	cbz	r3, 800705a <__sflush_r+0x46>
 8007056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007058:	1ac0      	subs	r0, r0, r3
 800705a:	2300      	movs	r3, #0
 800705c:	4602      	mov	r2, r0
 800705e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	4628      	mov	r0, r5
 8007064:	47b0      	blx	r6
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	d106      	bne.n	800707a <__sflush_r+0x66>
 800706c:	6829      	ldr	r1, [r5, #0]
 800706e:	291d      	cmp	r1, #29
 8007070:	d82c      	bhi.n	80070cc <__sflush_r+0xb8>
 8007072:	4a2a      	ldr	r2, [pc, #168]	; (800711c <__sflush_r+0x108>)
 8007074:	40ca      	lsrs	r2, r1
 8007076:	07d6      	lsls	r6, r2, #31
 8007078:	d528      	bpl.n	80070cc <__sflush_r+0xb8>
 800707a:	2200      	movs	r2, #0
 800707c:	6062      	str	r2, [r4, #4]
 800707e:	04d9      	lsls	r1, r3, #19
 8007080:	6922      	ldr	r2, [r4, #16]
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	d504      	bpl.n	8007090 <__sflush_r+0x7c>
 8007086:	1c42      	adds	r2, r0, #1
 8007088:	d101      	bne.n	800708e <__sflush_r+0x7a>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	b903      	cbnz	r3, 8007090 <__sflush_r+0x7c>
 800708e:	6560      	str	r0, [r4, #84]	; 0x54
 8007090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007092:	602f      	str	r7, [r5, #0]
 8007094:	2900      	cmp	r1, #0
 8007096:	d0ca      	beq.n	800702e <__sflush_r+0x1a>
 8007098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800709c:	4299      	cmp	r1, r3
 800709e:	d002      	beq.n	80070a6 <__sflush_r+0x92>
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 fd8b 	bl	8007bbc <_free_r>
 80070a6:	2000      	movs	r0, #0
 80070a8:	6360      	str	r0, [r4, #52]	; 0x34
 80070aa:	e7c1      	b.n	8007030 <__sflush_r+0x1c>
 80070ac:	6a21      	ldr	r1, [r4, #32]
 80070ae:	2301      	movs	r3, #1
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b0      	blx	r6
 80070b4:	1c41      	adds	r1, r0, #1
 80070b6:	d1c7      	bne.n	8007048 <__sflush_r+0x34>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0c4      	beq.n	8007048 <__sflush_r+0x34>
 80070be:	2b1d      	cmp	r3, #29
 80070c0:	d001      	beq.n	80070c6 <__sflush_r+0xb2>
 80070c2:	2b16      	cmp	r3, #22
 80070c4:	d101      	bne.n	80070ca <__sflush_r+0xb6>
 80070c6:	602f      	str	r7, [r5, #0]
 80070c8:	e7b1      	b.n	800702e <__sflush_r+0x1a>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	e7ad      	b.n	8007030 <__sflush_r+0x1c>
 80070d4:	690f      	ldr	r7, [r1, #16]
 80070d6:	2f00      	cmp	r7, #0
 80070d8:	d0a9      	beq.n	800702e <__sflush_r+0x1a>
 80070da:	0793      	lsls	r3, r2, #30
 80070dc:	680e      	ldr	r6, [r1, #0]
 80070de:	bf08      	it	eq
 80070e0:	694b      	ldreq	r3, [r1, #20]
 80070e2:	600f      	str	r7, [r1, #0]
 80070e4:	bf18      	it	ne
 80070e6:	2300      	movne	r3, #0
 80070e8:	eba6 0807 	sub.w	r8, r6, r7
 80070ec:	608b      	str	r3, [r1, #8]
 80070ee:	f1b8 0f00 	cmp.w	r8, #0
 80070f2:	dd9c      	ble.n	800702e <__sflush_r+0x1a>
 80070f4:	6a21      	ldr	r1, [r4, #32]
 80070f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070f8:	4643      	mov	r3, r8
 80070fa:	463a      	mov	r2, r7
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b0      	blx	r6
 8007100:	2800      	cmp	r0, #0
 8007102:	dc06      	bgt.n	8007112 <__sflush_r+0xfe>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e78e      	b.n	8007030 <__sflush_r+0x1c>
 8007112:	4407      	add	r7, r0
 8007114:	eba8 0800 	sub.w	r8, r8, r0
 8007118:	e7e9      	b.n	80070ee <__sflush_r+0xda>
 800711a:	bf00      	nop
 800711c:	20400001 	.word	0x20400001

08007120 <_fflush_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	690b      	ldr	r3, [r1, #16]
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b913      	cbnz	r3, 8007130 <_fflush_r+0x10>
 800712a:	2500      	movs	r5, #0
 800712c:	4628      	mov	r0, r5
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	b118      	cbz	r0, 800713a <_fflush_r+0x1a>
 8007132:	6983      	ldr	r3, [r0, #24]
 8007134:	b90b      	cbnz	r3, 800713a <_fflush_r+0x1a>
 8007136:	f000 f887 	bl	8007248 <__sinit>
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <_fflush_r+0x6c>)
 800713c:	429c      	cmp	r4, r3
 800713e:	d11b      	bne.n	8007178 <_fflush_r+0x58>
 8007140:	686c      	ldr	r4, [r5, #4]
 8007142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0ef      	beq.n	800712a <_fflush_r+0xa>
 800714a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800714c:	07d0      	lsls	r0, r2, #31
 800714e:	d404      	bmi.n	800715a <_fflush_r+0x3a>
 8007150:	0599      	lsls	r1, r3, #22
 8007152:	d402      	bmi.n	800715a <_fflush_r+0x3a>
 8007154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007156:	f000 f91a 	bl	800738e <__retarget_lock_acquire_recursive>
 800715a:	4628      	mov	r0, r5
 800715c:	4621      	mov	r1, r4
 800715e:	f7ff ff59 	bl	8007014 <__sflush_r>
 8007162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007164:	07da      	lsls	r2, r3, #31
 8007166:	4605      	mov	r5, r0
 8007168:	d4e0      	bmi.n	800712c <_fflush_r+0xc>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	059b      	lsls	r3, r3, #22
 800716e:	d4dd      	bmi.n	800712c <_fflush_r+0xc>
 8007170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007172:	f000 f90d 	bl	8007390 <__retarget_lock_release_recursive>
 8007176:	e7d9      	b.n	800712c <_fflush_r+0xc>
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <_fflush_r+0x70>)
 800717a:	429c      	cmp	r4, r3
 800717c:	d101      	bne.n	8007182 <_fflush_r+0x62>
 800717e:	68ac      	ldr	r4, [r5, #8]
 8007180:	e7df      	b.n	8007142 <_fflush_r+0x22>
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <_fflush_r+0x74>)
 8007184:	429c      	cmp	r4, r3
 8007186:	bf08      	it	eq
 8007188:	68ec      	ldreq	r4, [r5, #12]
 800718a:	e7da      	b.n	8007142 <_fflush_r+0x22>
 800718c:	080085ec 	.word	0x080085ec
 8007190:	0800860c 	.word	0x0800860c
 8007194:	080085cc 	.word	0x080085cc

08007198 <std>:
 8007198:	2300      	movs	r3, #0
 800719a:	b510      	push	{r4, lr}
 800719c:	4604      	mov	r4, r0
 800719e:	e9c0 3300 	strd	r3, r3, [r0]
 80071a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071a6:	6083      	str	r3, [r0, #8]
 80071a8:	8181      	strh	r1, [r0, #12]
 80071aa:	6643      	str	r3, [r0, #100]	; 0x64
 80071ac:	81c2      	strh	r2, [r0, #14]
 80071ae:	6183      	str	r3, [r0, #24]
 80071b0:	4619      	mov	r1, r3
 80071b2:	2208      	movs	r2, #8
 80071b4:	305c      	adds	r0, #92	; 0x5c
 80071b6:	f7fe faf3 	bl	80057a0 <memset>
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <std+0x38>)
 80071bc:	6263      	str	r3, [r4, #36]	; 0x24
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <std+0x3c>)
 80071c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <std+0x40>)
 80071c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <std+0x44>)
 80071c8:	6224      	str	r4, [r4, #32]
 80071ca:	6323      	str	r3, [r4, #48]	; 0x30
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop
 80071d0:	08008051 	.word	0x08008051
 80071d4:	08008073 	.word	0x08008073
 80071d8:	080080ab 	.word	0x080080ab
 80071dc:	080080cf 	.word	0x080080cf

080071e0 <_cleanup_r>:
 80071e0:	4901      	ldr	r1, [pc, #4]	; (80071e8 <_cleanup_r+0x8>)
 80071e2:	f000 b8af 	b.w	8007344 <_fwalk_reent>
 80071e6:	bf00      	nop
 80071e8:	08007121 	.word	0x08007121

080071ec <__sfmoreglue>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	2268      	movs	r2, #104	; 0x68
 80071f0:	1e4d      	subs	r5, r1, #1
 80071f2:	4355      	muls	r5, r2
 80071f4:	460e      	mov	r6, r1
 80071f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071fa:	f000 fd4b 	bl	8007c94 <_malloc_r>
 80071fe:	4604      	mov	r4, r0
 8007200:	b140      	cbz	r0, 8007214 <__sfmoreglue+0x28>
 8007202:	2100      	movs	r1, #0
 8007204:	e9c0 1600 	strd	r1, r6, [r0]
 8007208:	300c      	adds	r0, #12
 800720a:	60a0      	str	r0, [r4, #8]
 800720c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007210:	f7fe fac6 	bl	80057a0 <memset>
 8007214:	4620      	mov	r0, r4
 8007216:	bd70      	pop	{r4, r5, r6, pc}

08007218 <__sfp_lock_acquire>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__sfp_lock_acquire+0x8>)
 800721a:	f000 b8b8 	b.w	800738e <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	200002f5 	.word	0x200002f5

08007224 <__sfp_lock_release>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__sfp_lock_release+0x8>)
 8007226:	f000 b8b3 	b.w	8007390 <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	200002f5 	.word	0x200002f5

08007230 <__sinit_lock_acquire>:
 8007230:	4801      	ldr	r0, [pc, #4]	; (8007238 <__sinit_lock_acquire+0x8>)
 8007232:	f000 b8ac 	b.w	800738e <__retarget_lock_acquire_recursive>
 8007236:	bf00      	nop
 8007238:	200002f6 	.word	0x200002f6

0800723c <__sinit_lock_release>:
 800723c:	4801      	ldr	r0, [pc, #4]	; (8007244 <__sinit_lock_release+0x8>)
 800723e:	f000 b8a7 	b.w	8007390 <__retarget_lock_release_recursive>
 8007242:	bf00      	nop
 8007244:	200002f6 	.word	0x200002f6

08007248 <__sinit>:
 8007248:	b510      	push	{r4, lr}
 800724a:	4604      	mov	r4, r0
 800724c:	f7ff fff0 	bl	8007230 <__sinit_lock_acquire>
 8007250:	69a3      	ldr	r3, [r4, #24]
 8007252:	b11b      	cbz	r3, 800725c <__sinit+0x14>
 8007254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007258:	f7ff bff0 	b.w	800723c <__sinit_lock_release>
 800725c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007260:	6523      	str	r3, [r4, #80]	; 0x50
 8007262:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <__sinit+0x68>)
 8007264:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <__sinit+0x6c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	62a2      	str	r2, [r4, #40]	; 0x28
 800726a:	42a3      	cmp	r3, r4
 800726c:	bf04      	itt	eq
 800726e:	2301      	moveq	r3, #1
 8007270:	61a3      	streq	r3, [r4, #24]
 8007272:	4620      	mov	r0, r4
 8007274:	f000 f820 	bl	80072b8 <__sfp>
 8007278:	6060      	str	r0, [r4, #4]
 800727a:	4620      	mov	r0, r4
 800727c:	f000 f81c 	bl	80072b8 <__sfp>
 8007280:	60a0      	str	r0, [r4, #8]
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f818 	bl	80072b8 <__sfp>
 8007288:	2200      	movs	r2, #0
 800728a:	60e0      	str	r0, [r4, #12]
 800728c:	2104      	movs	r1, #4
 800728e:	6860      	ldr	r0, [r4, #4]
 8007290:	f7ff ff82 	bl	8007198 <std>
 8007294:	68a0      	ldr	r0, [r4, #8]
 8007296:	2201      	movs	r2, #1
 8007298:	2109      	movs	r1, #9
 800729a:	f7ff ff7d 	bl	8007198 <std>
 800729e:	68e0      	ldr	r0, [r4, #12]
 80072a0:	2202      	movs	r2, #2
 80072a2:	2112      	movs	r1, #18
 80072a4:	f7ff ff78 	bl	8007198 <std>
 80072a8:	2301      	movs	r3, #1
 80072aa:	61a3      	str	r3, [r4, #24]
 80072ac:	e7d2      	b.n	8007254 <__sinit+0xc>
 80072ae:	bf00      	nop
 80072b0:	08008504 	.word	0x08008504
 80072b4:	080071e1 	.word	0x080071e1

080072b8 <__sfp>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	4607      	mov	r7, r0
 80072bc:	f7ff ffac 	bl	8007218 <__sfp_lock_acquire>
 80072c0:	4b1e      	ldr	r3, [pc, #120]	; (800733c <__sfp+0x84>)
 80072c2:	681e      	ldr	r6, [r3, #0]
 80072c4:	69b3      	ldr	r3, [r6, #24]
 80072c6:	b913      	cbnz	r3, 80072ce <__sfp+0x16>
 80072c8:	4630      	mov	r0, r6
 80072ca:	f7ff ffbd 	bl	8007248 <__sinit>
 80072ce:	3648      	adds	r6, #72	; 0x48
 80072d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	d503      	bpl.n	80072e0 <__sfp+0x28>
 80072d8:	6833      	ldr	r3, [r6, #0]
 80072da:	b30b      	cbz	r3, 8007320 <__sfp+0x68>
 80072dc:	6836      	ldr	r6, [r6, #0]
 80072de:	e7f7      	b.n	80072d0 <__sfp+0x18>
 80072e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072e4:	b9d5      	cbnz	r5, 800731c <__sfp+0x64>
 80072e6:	4b16      	ldr	r3, [pc, #88]	; (8007340 <__sfp+0x88>)
 80072e8:	60e3      	str	r3, [r4, #12]
 80072ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072ee:	6665      	str	r5, [r4, #100]	; 0x64
 80072f0:	f000 f84c 	bl	800738c <__retarget_lock_init_recursive>
 80072f4:	f7ff ff96 	bl	8007224 <__sfp_lock_release>
 80072f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007300:	6025      	str	r5, [r4, #0]
 8007302:	61a5      	str	r5, [r4, #24]
 8007304:	2208      	movs	r2, #8
 8007306:	4629      	mov	r1, r5
 8007308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800730c:	f7fe fa48 	bl	80057a0 <memset>
 8007310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007318:	4620      	mov	r0, r4
 800731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800731c:	3468      	adds	r4, #104	; 0x68
 800731e:	e7d9      	b.n	80072d4 <__sfp+0x1c>
 8007320:	2104      	movs	r1, #4
 8007322:	4638      	mov	r0, r7
 8007324:	f7ff ff62 	bl	80071ec <__sfmoreglue>
 8007328:	4604      	mov	r4, r0
 800732a:	6030      	str	r0, [r6, #0]
 800732c:	2800      	cmp	r0, #0
 800732e:	d1d5      	bne.n	80072dc <__sfp+0x24>
 8007330:	f7ff ff78 	bl	8007224 <__sfp_lock_release>
 8007334:	230c      	movs	r3, #12
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	e7ee      	b.n	8007318 <__sfp+0x60>
 800733a:	bf00      	nop
 800733c:	08008504 	.word	0x08008504
 8007340:	ffff0001 	.word	0xffff0001

08007344 <_fwalk_reent>:
 8007344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007348:	4606      	mov	r6, r0
 800734a:	4688      	mov	r8, r1
 800734c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007350:	2700      	movs	r7, #0
 8007352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007356:	f1b9 0901 	subs.w	r9, r9, #1
 800735a:	d505      	bpl.n	8007368 <_fwalk_reent+0x24>
 800735c:	6824      	ldr	r4, [r4, #0]
 800735e:	2c00      	cmp	r4, #0
 8007360:	d1f7      	bne.n	8007352 <_fwalk_reent+0xe>
 8007362:	4638      	mov	r0, r7
 8007364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007368:	89ab      	ldrh	r3, [r5, #12]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d907      	bls.n	800737e <_fwalk_reent+0x3a>
 800736e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007372:	3301      	adds	r3, #1
 8007374:	d003      	beq.n	800737e <_fwalk_reent+0x3a>
 8007376:	4629      	mov	r1, r5
 8007378:	4630      	mov	r0, r6
 800737a:	47c0      	blx	r8
 800737c:	4307      	orrs	r7, r0
 800737e:	3568      	adds	r5, #104	; 0x68
 8007380:	e7e9      	b.n	8007356 <_fwalk_reent+0x12>
	...

08007384 <_localeconv_r>:
 8007384:	4800      	ldr	r0, [pc, #0]	; (8007388 <_localeconv_r+0x4>)
 8007386:	4770      	bx	lr
 8007388:	20000160 	.word	0x20000160

0800738c <__retarget_lock_init_recursive>:
 800738c:	4770      	bx	lr

0800738e <__retarget_lock_acquire_recursive>:
 800738e:	4770      	bx	lr

08007390 <__retarget_lock_release_recursive>:
 8007390:	4770      	bx	lr

08007392 <__swhatbuf_r>:
 8007392:	b570      	push	{r4, r5, r6, lr}
 8007394:	460e      	mov	r6, r1
 8007396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739a:	2900      	cmp	r1, #0
 800739c:	b096      	sub	sp, #88	; 0x58
 800739e:	4614      	mov	r4, r2
 80073a0:	461d      	mov	r5, r3
 80073a2:	da08      	bge.n	80073b6 <__swhatbuf_r+0x24>
 80073a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	602a      	str	r2, [r5, #0]
 80073ac:	061a      	lsls	r2, r3, #24
 80073ae:	d410      	bmi.n	80073d2 <__swhatbuf_r+0x40>
 80073b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b4:	e00e      	b.n	80073d4 <__swhatbuf_r+0x42>
 80073b6:	466a      	mov	r2, sp
 80073b8:	f000 fee0 	bl	800817c <_fstat_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	dbf1      	blt.n	80073a4 <__swhatbuf_r+0x12>
 80073c0:	9a01      	ldr	r2, [sp, #4]
 80073c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073ca:	425a      	negs	r2, r3
 80073cc:	415a      	adcs	r2, r3
 80073ce:	602a      	str	r2, [r5, #0]
 80073d0:	e7ee      	b.n	80073b0 <__swhatbuf_r+0x1e>
 80073d2:	2340      	movs	r3, #64	; 0x40
 80073d4:	2000      	movs	r0, #0
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	b016      	add	sp, #88	; 0x58
 80073da:	bd70      	pop	{r4, r5, r6, pc}

080073dc <__smakebuf_r>:
 80073dc:	898b      	ldrh	r3, [r1, #12]
 80073de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073e0:	079d      	lsls	r5, r3, #30
 80073e2:	4606      	mov	r6, r0
 80073e4:	460c      	mov	r4, r1
 80073e6:	d507      	bpl.n	80073f8 <__smakebuf_r+0x1c>
 80073e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	2301      	movs	r3, #1
 80073f2:	6163      	str	r3, [r4, #20]
 80073f4:	b002      	add	sp, #8
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	ab01      	add	r3, sp, #4
 80073fa:	466a      	mov	r2, sp
 80073fc:	f7ff ffc9 	bl	8007392 <__swhatbuf_r>
 8007400:	9900      	ldr	r1, [sp, #0]
 8007402:	4605      	mov	r5, r0
 8007404:	4630      	mov	r0, r6
 8007406:	f000 fc45 	bl	8007c94 <_malloc_r>
 800740a:	b948      	cbnz	r0, 8007420 <__smakebuf_r+0x44>
 800740c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007410:	059a      	lsls	r2, r3, #22
 8007412:	d4ef      	bmi.n	80073f4 <__smakebuf_r+0x18>
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	f043 0302 	orr.w	r3, r3, #2
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	e7e3      	b.n	80073e8 <__smakebuf_r+0xc>
 8007420:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <__smakebuf_r+0x7c>)
 8007422:	62b3      	str	r3, [r6, #40]	; 0x28
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	6020      	str	r0, [r4, #0]
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	6163      	str	r3, [r4, #20]
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	6120      	str	r0, [r4, #16]
 8007436:	b15b      	cbz	r3, 8007450 <__smakebuf_r+0x74>
 8007438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 feaf 	bl	80081a0 <_isatty_r>
 8007442:	b128      	cbz	r0, 8007450 <__smakebuf_r+0x74>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	89a0      	ldrh	r0, [r4, #12]
 8007452:	4305      	orrs	r5, r0
 8007454:	81a5      	strh	r5, [r4, #12]
 8007456:	e7cd      	b.n	80073f4 <__smakebuf_r+0x18>
 8007458:	080071e1 	.word	0x080071e1

0800745c <malloc>:
 800745c:	4b02      	ldr	r3, [pc, #8]	; (8007468 <malloc+0xc>)
 800745e:	4601      	mov	r1, r0
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	f000 bc17 	b.w	8007c94 <_malloc_r>
 8007466:	bf00      	nop
 8007468:	2000000c 	.word	0x2000000c

0800746c <memcpy>:
 800746c:	440a      	add	r2, r1
 800746e:	4291      	cmp	r1, r2
 8007470:	f100 33ff 	add.w	r3, r0, #4294967295
 8007474:	d100      	bne.n	8007478 <memcpy+0xc>
 8007476:	4770      	bx	lr
 8007478:	b510      	push	{r4, lr}
 800747a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800747e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007482:	4291      	cmp	r1, r2
 8007484:	d1f9      	bne.n	800747a <memcpy+0xe>
 8007486:	bd10      	pop	{r4, pc}

08007488 <_Balloc>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800748c:	4604      	mov	r4, r0
 800748e:	460d      	mov	r5, r1
 8007490:	b976      	cbnz	r6, 80074b0 <_Balloc+0x28>
 8007492:	2010      	movs	r0, #16
 8007494:	f7ff ffe2 	bl	800745c <malloc>
 8007498:	4602      	mov	r2, r0
 800749a:	6260      	str	r0, [r4, #36]	; 0x24
 800749c:	b920      	cbnz	r0, 80074a8 <_Balloc+0x20>
 800749e:	4b18      	ldr	r3, [pc, #96]	; (8007500 <_Balloc+0x78>)
 80074a0:	4818      	ldr	r0, [pc, #96]	; (8007504 <_Balloc+0x7c>)
 80074a2:	2166      	movs	r1, #102	; 0x66
 80074a4:	f000 fe2a 	bl	80080fc <__assert_func>
 80074a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074ac:	6006      	str	r6, [r0, #0]
 80074ae:	60c6      	str	r6, [r0, #12]
 80074b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074b2:	68f3      	ldr	r3, [r6, #12]
 80074b4:	b183      	cbz	r3, 80074d8 <_Balloc+0x50>
 80074b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074be:	b9b8      	cbnz	r0, 80074f0 <_Balloc+0x68>
 80074c0:	2101      	movs	r1, #1
 80074c2:	fa01 f605 	lsl.w	r6, r1, r5
 80074c6:	1d72      	adds	r2, r6, #5
 80074c8:	0092      	lsls	r2, r2, #2
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 fb60 	bl	8007b90 <_calloc_r>
 80074d0:	b160      	cbz	r0, 80074ec <_Balloc+0x64>
 80074d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074d6:	e00e      	b.n	80074f6 <_Balloc+0x6e>
 80074d8:	2221      	movs	r2, #33	; 0x21
 80074da:	2104      	movs	r1, #4
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 fb57 	bl	8007b90 <_calloc_r>
 80074e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074e4:	60f0      	str	r0, [r6, #12]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e4      	bne.n	80074b6 <_Balloc+0x2e>
 80074ec:	2000      	movs	r0, #0
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	6802      	ldr	r2, [r0, #0]
 80074f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074f6:	2300      	movs	r3, #0
 80074f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074fc:	e7f7      	b.n	80074ee <_Balloc+0x66>
 80074fe:	bf00      	nop
 8007500:	08008549 	.word	0x08008549
 8007504:	0800862c 	.word	0x0800862c

08007508 <_Bfree>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800750c:	4605      	mov	r5, r0
 800750e:	460c      	mov	r4, r1
 8007510:	b976      	cbnz	r6, 8007530 <_Bfree+0x28>
 8007512:	2010      	movs	r0, #16
 8007514:	f7ff ffa2 	bl	800745c <malloc>
 8007518:	4602      	mov	r2, r0
 800751a:	6268      	str	r0, [r5, #36]	; 0x24
 800751c:	b920      	cbnz	r0, 8007528 <_Bfree+0x20>
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <_Bfree+0x3c>)
 8007520:	4809      	ldr	r0, [pc, #36]	; (8007548 <_Bfree+0x40>)
 8007522:	218a      	movs	r1, #138	; 0x8a
 8007524:	f000 fdea 	bl	80080fc <__assert_func>
 8007528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800752c:	6006      	str	r6, [r0, #0]
 800752e:	60c6      	str	r6, [r0, #12]
 8007530:	b13c      	cbz	r4, 8007542 <_Bfree+0x3a>
 8007532:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007534:	6862      	ldr	r2, [r4, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800753c:	6021      	str	r1, [r4, #0]
 800753e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	08008549 	.word	0x08008549
 8007548:	0800862c 	.word	0x0800862c

0800754c <__multadd>:
 800754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007550:	690d      	ldr	r5, [r1, #16]
 8007552:	4607      	mov	r7, r0
 8007554:	460c      	mov	r4, r1
 8007556:	461e      	mov	r6, r3
 8007558:	f101 0c14 	add.w	ip, r1, #20
 800755c:	2000      	movs	r0, #0
 800755e:	f8dc 3000 	ldr.w	r3, [ip]
 8007562:	b299      	uxth	r1, r3
 8007564:	fb02 6101 	mla	r1, r2, r1, r6
 8007568:	0c1e      	lsrs	r6, r3, #16
 800756a:	0c0b      	lsrs	r3, r1, #16
 800756c:	fb02 3306 	mla	r3, r2, r6, r3
 8007570:	b289      	uxth	r1, r1
 8007572:	3001      	adds	r0, #1
 8007574:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007578:	4285      	cmp	r5, r0
 800757a:	f84c 1b04 	str.w	r1, [ip], #4
 800757e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007582:	dcec      	bgt.n	800755e <__multadd+0x12>
 8007584:	b30e      	cbz	r6, 80075ca <__multadd+0x7e>
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	42ab      	cmp	r3, r5
 800758a:	dc19      	bgt.n	80075c0 <__multadd+0x74>
 800758c:	6861      	ldr	r1, [r4, #4]
 800758e:	4638      	mov	r0, r7
 8007590:	3101      	adds	r1, #1
 8007592:	f7ff ff79 	bl	8007488 <_Balloc>
 8007596:	4680      	mov	r8, r0
 8007598:	b928      	cbnz	r0, 80075a6 <__multadd+0x5a>
 800759a:	4602      	mov	r2, r0
 800759c:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <__multadd+0x84>)
 800759e:	480d      	ldr	r0, [pc, #52]	; (80075d4 <__multadd+0x88>)
 80075a0:	21b5      	movs	r1, #181	; 0xb5
 80075a2:	f000 fdab 	bl	80080fc <__assert_func>
 80075a6:	6922      	ldr	r2, [r4, #16]
 80075a8:	3202      	adds	r2, #2
 80075aa:	f104 010c 	add.w	r1, r4, #12
 80075ae:	0092      	lsls	r2, r2, #2
 80075b0:	300c      	adds	r0, #12
 80075b2:	f7ff ff5b 	bl	800746c <memcpy>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4638      	mov	r0, r7
 80075ba:	f7ff ffa5 	bl	8007508 <_Bfree>
 80075be:	4644      	mov	r4, r8
 80075c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075c4:	3501      	adds	r5, #1
 80075c6:	615e      	str	r6, [r3, #20]
 80075c8:	6125      	str	r5, [r4, #16]
 80075ca:	4620      	mov	r0, r4
 80075cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d0:	080085bb 	.word	0x080085bb
 80075d4:	0800862c 	.word	0x0800862c

080075d8 <__hi0bits>:
 80075d8:	0c03      	lsrs	r3, r0, #16
 80075da:	041b      	lsls	r3, r3, #16
 80075dc:	b9d3      	cbnz	r3, 8007614 <__hi0bits+0x3c>
 80075de:	0400      	lsls	r0, r0, #16
 80075e0:	2310      	movs	r3, #16
 80075e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075e6:	bf04      	itt	eq
 80075e8:	0200      	lsleq	r0, r0, #8
 80075ea:	3308      	addeq	r3, #8
 80075ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075f0:	bf04      	itt	eq
 80075f2:	0100      	lsleq	r0, r0, #4
 80075f4:	3304      	addeq	r3, #4
 80075f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075fa:	bf04      	itt	eq
 80075fc:	0080      	lsleq	r0, r0, #2
 80075fe:	3302      	addeq	r3, #2
 8007600:	2800      	cmp	r0, #0
 8007602:	db05      	blt.n	8007610 <__hi0bits+0x38>
 8007604:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007608:	f103 0301 	add.w	r3, r3, #1
 800760c:	bf08      	it	eq
 800760e:	2320      	moveq	r3, #32
 8007610:	4618      	mov	r0, r3
 8007612:	4770      	bx	lr
 8007614:	2300      	movs	r3, #0
 8007616:	e7e4      	b.n	80075e2 <__hi0bits+0xa>

08007618 <__lo0bits>:
 8007618:	6803      	ldr	r3, [r0, #0]
 800761a:	f013 0207 	ands.w	r2, r3, #7
 800761e:	4601      	mov	r1, r0
 8007620:	d00b      	beq.n	800763a <__lo0bits+0x22>
 8007622:	07da      	lsls	r2, r3, #31
 8007624:	d423      	bmi.n	800766e <__lo0bits+0x56>
 8007626:	0798      	lsls	r0, r3, #30
 8007628:	bf49      	itett	mi
 800762a:	085b      	lsrmi	r3, r3, #1
 800762c:	089b      	lsrpl	r3, r3, #2
 800762e:	2001      	movmi	r0, #1
 8007630:	600b      	strmi	r3, [r1, #0]
 8007632:	bf5c      	itt	pl
 8007634:	600b      	strpl	r3, [r1, #0]
 8007636:	2002      	movpl	r0, #2
 8007638:	4770      	bx	lr
 800763a:	b298      	uxth	r0, r3
 800763c:	b9a8      	cbnz	r0, 800766a <__lo0bits+0x52>
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	2010      	movs	r0, #16
 8007642:	b2da      	uxtb	r2, r3
 8007644:	b90a      	cbnz	r2, 800764a <__lo0bits+0x32>
 8007646:	3008      	adds	r0, #8
 8007648:	0a1b      	lsrs	r3, r3, #8
 800764a:	071a      	lsls	r2, r3, #28
 800764c:	bf04      	itt	eq
 800764e:	091b      	lsreq	r3, r3, #4
 8007650:	3004      	addeq	r0, #4
 8007652:	079a      	lsls	r2, r3, #30
 8007654:	bf04      	itt	eq
 8007656:	089b      	lsreq	r3, r3, #2
 8007658:	3002      	addeq	r0, #2
 800765a:	07da      	lsls	r2, r3, #31
 800765c:	d403      	bmi.n	8007666 <__lo0bits+0x4e>
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	f100 0001 	add.w	r0, r0, #1
 8007664:	d005      	beq.n	8007672 <__lo0bits+0x5a>
 8007666:	600b      	str	r3, [r1, #0]
 8007668:	4770      	bx	lr
 800766a:	4610      	mov	r0, r2
 800766c:	e7e9      	b.n	8007642 <__lo0bits+0x2a>
 800766e:	2000      	movs	r0, #0
 8007670:	4770      	bx	lr
 8007672:	2020      	movs	r0, #32
 8007674:	4770      	bx	lr
	...

08007678 <__i2b>:
 8007678:	b510      	push	{r4, lr}
 800767a:	460c      	mov	r4, r1
 800767c:	2101      	movs	r1, #1
 800767e:	f7ff ff03 	bl	8007488 <_Balloc>
 8007682:	4602      	mov	r2, r0
 8007684:	b928      	cbnz	r0, 8007692 <__i2b+0x1a>
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <__i2b+0x24>)
 8007688:	4805      	ldr	r0, [pc, #20]	; (80076a0 <__i2b+0x28>)
 800768a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800768e:	f000 fd35 	bl	80080fc <__assert_func>
 8007692:	2301      	movs	r3, #1
 8007694:	6144      	str	r4, [r0, #20]
 8007696:	6103      	str	r3, [r0, #16]
 8007698:	bd10      	pop	{r4, pc}
 800769a:	bf00      	nop
 800769c:	080085bb 	.word	0x080085bb
 80076a0:	0800862c 	.word	0x0800862c

080076a4 <__multiply>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	4691      	mov	r9, r2
 80076aa:	690a      	ldr	r2, [r1, #16]
 80076ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	bfb8      	it	lt
 80076b4:	460b      	movlt	r3, r1
 80076b6:	460c      	mov	r4, r1
 80076b8:	bfbc      	itt	lt
 80076ba:	464c      	movlt	r4, r9
 80076bc:	4699      	movlt	r9, r3
 80076be:	6927      	ldr	r7, [r4, #16]
 80076c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076c4:	68a3      	ldr	r3, [r4, #8]
 80076c6:	6861      	ldr	r1, [r4, #4]
 80076c8:	eb07 060a 	add.w	r6, r7, sl
 80076cc:	42b3      	cmp	r3, r6
 80076ce:	b085      	sub	sp, #20
 80076d0:	bfb8      	it	lt
 80076d2:	3101      	addlt	r1, #1
 80076d4:	f7ff fed8 	bl	8007488 <_Balloc>
 80076d8:	b930      	cbnz	r0, 80076e8 <__multiply+0x44>
 80076da:	4602      	mov	r2, r0
 80076dc:	4b44      	ldr	r3, [pc, #272]	; (80077f0 <__multiply+0x14c>)
 80076de:	4845      	ldr	r0, [pc, #276]	; (80077f4 <__multiply+0x150>)
 80076e0:	f240 115d 	movw	r1, #349	; 0x15d
 80076e4:	f000 fd0a 	bl	80080fc <__assert_func>
 80076e8:	f100 0514 	add.w	r5, r0, #20
 80076ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076f0:	462b      	mov	r3, r5
 80076f2:	2200      	movs	r2, #0
 80076f4:	4543      	cmp	r3, r8
 80076f6:	d321      	bcc.n	800773c <__multiply+0x98>
 80076f8:	f104 0314 	add.w	r3, r4, #20
 80076fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007700:	f109 0314 	add.w	r3, r9, #20
 8007704:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007708:	9202      	str	r2, [sp, #8]
 800770a:	1b3a      	subs	r2, r7, r4
 800770c:	3a15      	subs	r2, #21
 800770e:	f022 0203 	bic.w	r2, r2, #3
 8007712:	3204      	adds	r2, #4
 8007714:	f104 0115 	add.w	r1, r4, #21
 8007718:	428f      	cmp	r7, r1
 800771a:	bf38      	it	cc
 800771c:	2204      	movcc	r2, #4
 800771e:	9201      	str	r2, [sp, #4]
 8007720:	9a02      	ldr	r2, [sp, #8]
 8007722:	9303      	str	r3, [sp, #12]
 8007724:	429a      	cmp	r2, r3
 8007726:	d80c      	bhi.n	8007742 <__multiply+0x9e>
 8007728:	2e00      	cmp	r6, #0
 800772a:	dd03      	ble.n	8007734 <__multiply+0x90>
 800772c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007730:	2b00      	cmp	r3, #0
 8007732:	d05a      	beq.n	80077ea <__multiply+0x146>
 8007734:	6106      	str	r6, [r0, #16]
 8007736:	b005      	add	sp, #20
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	f843 2b04 	str.w	r2, [r3], #4
 8007740:	e7d8      	b.n	80076f4 <__multiply+0x50>
 8007742:	f8b3 a000 	ldrh.w	sl, [r3]
 8007746:	f1ba 0f00 	cmp.w	sl, #0
 800774a:	d024      	beq.n	8007796 <__multiply+0xf2>
 800774c:	f104 0e14 	add.w	lr, r4, #20
 8007750:	46a9      	mov	r9, r5
 8007752:	f04f 0c00 	mov.w	ip, #0
 8007756:	f85e 2b04 	ldr.w	r2, [lr], #4
 800775a:	f8d9 1000 	ldr.w	r1, [r9]
 800775e:	fa1f fb82 	uxth.w	fp, r2
 8007762:	b289      	uxth	r1, r1
 8007764:	fb0a 110b 	mla	r1, sl, fp, r1
 8007768:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800776c:	f8d9 2000 	ldr.w	r2, [r9]
 8007770:	4461      	add	r1, ip
 8007772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007776:	fb0a c20b 	mla	r2, sl, fp, ip
 800777a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800777e:	b289      	uxth	r1, r1
 8007780:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007784:	4577      	cmp	r7, lr
 8007786:	f849 1b04 	str.w	r1, [r9], #4
 800778a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800778e:	d8e2      	bhi.n	8007756 <__multiply+0xb2>
 8007790:	9a01      	ldr	r2, [sp, #4]
 8007792:	f845 c002 	str.w	ip, [r5, r2]
 8007796:	9a03      	ldr	r2, [sp, #12]
 8007798:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800779c:	3304      	adds	r3, #4
 800779e:	f1b9 0f00 	cmp.w	r9, #0
 80077a2:	d020      	beq.n	80077e6 <__multiply+0x142>
 80077a4:	6829      	ldr	r1, [r5, #0]
 80077a6:	f104 0c14 	add.w	ip, r4, #20
 80077aa:	46ae      	mov	lr, r5
 80077ac:	f04f 0a00 	mov.w	sl, #0
 80077b0:	f8bc b000 	ldrh.w	fp, [ip]
 80077b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077b8:	fb09 220b 	mla	r2, r9, fp, r2
 80077bc:	4492      	add	sl, r2
 80077be:	b289      	uxth	r1, r1
 80077c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077c4:	f84e 1b04 	str.w	r1, [lr], #4
 80077c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077cc:	f8be 1000 	ldrh.w	r1, [lr]
 80077d0:	0c12      	lsrs	r2, r2, #16
 80077d2:	fb09 1102 	mla	r1, r9, r2, r1
 80077d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077da:	4567      	cmp	r7, ip
 80077dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077e0:	d8e6      	bhi.n	80077b0 <__multiply+0x10c>
 80077e2:	9a01      	ldr	r2, [sp, #4]
 80077e4:	50a9      	str	r1, [r5, r2]
 80077e6:	3504      	adds	r5, #4
 80077e8:	e79a      	b.n	8007720 <__multiply+0x7c>
 80077ea:	3e01      	subs	r6, #1
 80077ec:	e79c      	b.n	8007728 <__multiply+0x84>
 80077ee:	bf00      	nop
 80077f0:	080085bb 	.word	0x080085bb
 80077f4:	0800862c 	.word	0x0800862c

080077f8 <__pow5mult>:
 80077f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077fc:	4615      	mov	r5, r2
 80077fe:	f012 0203 	ands.w	r2, r2, #3
 8007802:	4606      	mov	r6, r0
 8007804:	460f      	mov	r7, r1
 8007806:	d007      	beq.n	8007818 <__pow5mult+0x20>
 8007808:	4c25      	ldr	r4, [pc, #148]	; (80078a0 <__pow5mult+0xa8>)
 800780a:	3a01      	subs	r2, #1
 800780c:	2300      	movs	r3, #0
 800780e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007812:	f7ff fe9b 	bl	800754c <__multadd>
 8007816:	4607      	mov	r7, r0
 8007818:	10ad      	asrs	r5, r5, #2
 800781a:	d03d      	beq.n	8007898 <__pow5mult+0xa0>
 800781c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800781e:	b97c      	cbnz	r4, 8007840 <__pow5mult+0x48>
 8007820:	2010      	movs	r0, #16
 8007822:	f7ff fe1b 	bl	800745c <malloc>
 8007826:	4602      	mov	r2, r0
 8007828:	6270      	str	r0, [r6, #36]	; 0x24
 800782a:	b928      	cbnz	r0, 8007838 <__pow5mult+0x40>
 800782c:	4b1d      	ldr	r3, [pc, #116]	; (80078a4 <__pow5mult+0xac>)
 800782e:	481e      	ldr	r0, [pc, #120]	; (80078a8 <__pow5mult+0xb0>)
 8007830:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007834:	f000 fc62 	bl	80080fc <__assert_func>
 8007838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800783c:	6004      	str	r4, [r0, #0]
 800783e:	60c4      	str	r4, [r0, #12]
 8007840:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007848:	b94c      	cbnz	r4, 800785e <__pow5mult+0x66>
 800784a:	f240 2171 	movw	r1, #625	; 0x271
 800784e:	4630      	mov	r0, r6
 8007850:	f7ff ff12 	bl	8007678 <__i2b>
 8007854:	2300      	movs	r3, #0
 8007856:	f8c8 0008 	str.w	r0, [r8, #8]
 800785a:	4604      	mov	r4, r0
 800785c:	6003      	str	r3, [r0, #0]
 800785e:	f04f 0900 	mov.w	r9, #0
 8007862:	07eb      	lsls	r3, r5, #31
 8007864:	d50a      	bpl.n	800787c <__pow5mult+0x84>
 8007866:	4639      	mov	r1, r7
 8007868:	4622      	mov	r2, r4
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ff1a 	bl	80076a4 <__multiply>
 8007870:	4639      	mov	r1, r7
 8007872:	4680      	mov	r8, r0
 8007874:	4630      	mov	r0, r6
 8007876:	f7ff fe47 	bl	8007508 <_Bfree>
 800787a:	4647      	mov	r7, r8
 800787c:	106d      	asrs	r5, r5, #1
 800787e:	d00b      	beq.n	8007898 <__pow5mult+0xa0>
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	b938      	cbnz	r0, 8007894 <__pow5mult+0x9c>
 8007884:	4622      	mov	r2, r4
 8007886:	4621      	mov	r1, r4
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff ff0b 	bl	80076a4 <__multiply>
 800788e:	6020      	str	r0, [r4, #0]
 8007890:	f8c0 9000 	str.w	r9, [r0]
 8007894:	4604      	mov	r4, r0
 8007896:	e7e4      	b.n	8007862 <__pow5mult+0x6a>
 8007898:	4638      	mov	r0, r7
 800789a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789e:	bf00      	nop
 80078a0:	08008778 	.word	0x08008778
 80078a4:	08008549 	.word	0x08008549
 80078a8:	0800862c 	.word	0x0800862c

080078ac <__lshift>:
 80078ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	460c      	mov	r4, r1
 80078b2:	6849      	ldr	r1, [r1, #4]
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	4607      	mov	r7, r0
 80078be:	4691      	mov	r9, r2
 80078c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c4:	f108 0601 	add.w	r6, r8, #1
 80078c8:	42b3      	cmp	r3, r6
 80078ca:	db0b      	blt.n	80078e4 <__lshift+0x38>
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff fddb 	bl	8007488 <_Balloc>
 80078d2:	4605      	mov	r5, r0
 80078d4:	b948      	cbnz	r0, 80078ea <__lshift+0x3e>
 80078d6:	4602      	mov	r2, r0
 80078d8:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <__lshift+0xd8>)
 80078da:	482b      	ldr	r0, [pc, #172]	; (8007988 <__lshift+0xdc>)
 80078dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078e0:	f000 fc0c 	bl	80080fc <__assert_func>
 80078e4:	3101      	adds	r1, #1
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	e7ee      	b.n	80078c8 <__lshift+0x1c>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f100 0114 	add.w	r1, r0, #20
 80078f0:	f100 0210 	add.w	r2, r0, #16
 80078f4:	4618      	mov	r0, r3
 80078f6:	4553      	cmp	r3, sl
 80078f8:	db37      	blt.n	800796a <__lshift+0xbe>
 80078fa:	6920      	ldr	r0, [r4, #16]
 80078fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007900:	f104 0314 	add.w	r3, r4, #20
 8007904:	f019 091f 	ands.w	r9, r9, #31
 8007908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800790c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007910:	d02f      	beq.n	8007972 <__lshift+0xc6>
 8007912:	f1c9 0e20 	rsb	lr, r9, #32
 8007916:	468a      	mov	sl, r1
 8007918:	f04f 0c00 	mov.w	ip, #0
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	fa02 f209 	lsl.w	r2, r2, r9
 8007922:	ea42 020c 	orr.w	r2, r2, ip
 8007926:	f84a 2b04 	str.w	r2, [sl], #4
 800792a:	f853 2b04 	ldr.w	r2, [r3], #4
 800792e:	4298      	cmp	r0, r3
 8007930:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007934:	d8f2      	bhi.n	800791c <__lshift+0x70>
 8007936:	1b03      	subs	r3, r0, r4
 8007938:	3b15      	subs	r3, #21
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	3304      	adds	r3, #4
 8007940:	f104 0215 	add.w	r2, r4, #21
 8007944:	4290      	cmp	r0, r2
 8007946:	bf38      	it	cc
 8007948:	2304      	movcc	r3, #4
 800794a:	f841 c003 	str.w	ip, [r1, r3]
 800794e:	f1bc 0f00 	cmp.w	ip, #0
 8007952:	d001      	beq.n	8007958 <__lshift+0xac>
 8007954:	f108 0602 	add.w	r6, r8, #2
 8007958:	3e01      	subs	r6, #1
 800795a:	4638      	mov	r0, r7
 800795c:	612e      	str	r6, [r5, #16]
 800795e:	4621      	mov	r1, r4
 8007960:	f7ff fdd2 	bl	8007508 <_Bfree>
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	f842 0f04 	str.w	r0, [r2, #4]!
 800796e:	3301      	adds	r3, #1
 8007970:	e7c1      	b.n	80078f6 <__lshift+0x4a>
 8007972:	3904      	subs	r1, #4
 8007974:	f853 2b04 	ldr.w	r2, [r3], #4
 8007978:	f841 2f04 	str.w	r2, [r1, #4]!
 800797c:	4298      	cmp	r0, r3
 800797e:	d8f9      	bhi.n	8007974 <__lshift+0xc8>
 8007980:	e7ea      	b.n	8007958 <__lshift+0xac>
 8007982:	bf00      	nop
 8007984:	080085bb 	.word	0x080085bb
 8007988:	0800862c 	.word	0x0800862c

0800798c <__mcmp>:
 800798c:	b530      	push	{r4, r5, lr}
 800798e:	6902      	ldr	r2, [r0, #16]
 8007990:	690c      	ldr	r4, [r1, #16]
 8007992:	1b12      	subs	r2, r2, r4
 8007994:	d10e      	bne.n	80079b4 <__mcmp+0x28>
 8007996:	f100 0314 	add.w	r3, r0, #20
 800799a:	3114      	adds	r1, #20
 800799c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079ac:	42a5      	cmp	r5, r4
 80079ae:	d003      	beq.n	80079b8 <__mcmp+0x2c>
 80079b0:	d305      	bcc.n	80079be <__mcmp+0x32>
 80079b2:	2201      	movs	r2, #1
 80079b4:	4610      	mov	r0, r2
 80079b6:	bd30      	pop	{r4, r5, pc}
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d3f3      	bcc.n	80079a4 <__mcmp+0x18>
 80079bc:	e7fa      	b.n	80079b4 <__mcmp+0x28>
 80079be:	f04f 32ff 	mov.w	r2, #4294967295
 80079c2:	e7f7      	b.n	80079b4 <__mcmp+0x28>

080079c4 <__mdiff>:
 80079c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	4606      	mov	r6, r0
 80079cc:	4611      	mov	r1, r2
 80079ce:	4620      	mov	r0, r4
 80079d0:	4690      	mov	r8, r2
 80079d2:	f7ff ffdb 	bl	800798c <__mcmp>
 80079d6:	1e05      	subs	r5, r0, #0
 80079d8:	d110      	bne.n	80079fc <__mdiff+0x38>
 80079da:	4629      	mov	r1, r5
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff fd53 	bl	8007488 <_Balloc>
 80079e2:	b930      	cbnz	r0, 80079f2 <__mdiff+0x2e>
 80079e4:	4b3a      	ldr	r3, [pc, #232]	; (8007ad0 <__mdiff+0x10c>)
 80079e6:	4602      	mov	r2, r0
 80079e8:	f240 2132 	movw	r1, #562	; 0x232
 80079ec:	4839      	ldr	r0, [pc, #228]	; (8007ad4 <__mdiff+0x110>)
 80079ee:	f000 fb85 	bl	80080fc <__assert_func>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	bfa4      	itt	ge
 80079fe:	4643      	movge	r3, r8
 8007a00:	46a0      	movge	r8, r4
 8007a02:	4630      	mov	r0, r6
 8007a04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a08:	bfa6      	itte	ge
 8007a0a:	461c      	movge	r4, r3
 8007a0c:	2500      	movge	r5, #0
 8007a0e:	2501      	movlt	r5, #1
 8007a10:	f7ff fd3a 	bl	8007488 <_Balloc>
 8007a14:	b920      	cbnz	r0, 8007a20 <__mdiff+0x5c>
 8007a16:	4b2e      	ldr	r3, [pc, #184]	; (8007ad0 <__mdiff+0x10c>)
 8007a18:	4602      	mov	r2, r0
 8007a1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a1e:	e7e5      	b.n	80079ec <__mdiff+0x28>
 8007a20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a24:	6926      	ldr	r6, [r4, #16]
 8007a26:	60c5      	str	r5, [r0, #12]
 8007a28:	f104 0914 	add.w	r9, r4, #20
 8007a2c:	f108 0514 	add.w	r5, r8, #20
 8007a30:	f100 0e14 	add.w	lr, r0, #20
 8007a34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a3c:	f108 0210 	add.w	r2, r8, #16
 8007a40:	46f2      	mov	sl, lr
 8007a42:	2100      	movs	r1, #0
 8007a44:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a4c:	fa1f f883 	uxth.w	r8, r3
 8007a50:	fa11 f18b 	uxtah	r1, r1, fp
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	eba1 0808 	sub.w	r8, r1, r8
 8007a5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a62:	fa1f f888 	uxth.w	r8, r8
 8007a66:	1419      	asrs	r1, r3, #16
 8007a68:	454e      	cmp	r6, r9
 8007a6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a6e:	f84a 3b04 	str.w	r3, [sl], #4
 8007a72:	d8e7      	bhi.n	8007a44 <__mdiff+0x80>
 8007a74:	1b33      	subs	r3, r6, r4
 8007a76:	3b15      	subs	r3, #21
 8007a78:	f023 0303 	bic.w	r3, r3, #3
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	3415      	adds	r4, #21
 8007a80:	42a6      	cmp	r6, r4
 8007a82:	bf38      	it	cc
 8007a84:	2304      	movcc	r3, #4
 8007a86:	441d      	add	r5, r3
 8007a88:	4473      	add	r3, lr
 8007a8a:	469e      	mov	lr, r3
 8007a8c:	462e      	mov	r6, r5
 8007a8e:	4566      	cmp	r6, ip
 8007a90:	d30e      	bcc.n	8007ab0 <__mdiff+0xec>
 8007a92:	f10c 0203 	add.w	r2, ip, #3
 8007a96:	1b52      	subs	r2, r2, r5
 8007a98:	f022 0203 	bic.w	r2, r2, #3
 8007a9c:	3d03      	subs	r5, #3
 8007a9e:	45ac      	cmp	ip, r5
 8007aa0:	bf38      	it	cc
 8007aa2:	2200      	movcc	r2, #0
 8007aa4:	441a      	add	r2, r3
 8007aa6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007aaa:	b17b      	cbz	r3, 8007acc <__mdiff+0x108>
 8007aac:	6107      	str	r7, [r0, #16]
 8007aae:	e7a3      	b.n	80079f8 <__mdiff+0x34>
 8007ab0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ab4:	fa11 f288 	uxtah	r2, r1, r8
 8007ab8:	1414      	asrs	r4, r2, #16
 8007aba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007abe:	b292      	uxth	r2, r2
 8007ac0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ac4:	f84e 2b04 	str.w	r2, [lr], #4
 8007ac8:	1421      	asrs	r1, r4, #16
 8007aca:	e7e0      	b.n	8007a8e <__mdiff+0xca>
 8007acc:	3f01      	subs	r7, #1
 8007ace:	e7ea      	b.n	8007aa6 <__mdiff+0xe2>
 8007ad0:	080085bb 	.word	0x080085bb
 8007ad4:	0800862c 	.word	0x0800862c

08007ad8 <__d2b>:
 8007ad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4689      	mov	r9, r1
 8007ade:	2101      	movs	r1, #1
 8007ae0:	ec57 6b10 	vmov	r6, r7, d0
 8007ae4:	4690      	mov	r8, r2
 8007ae6:	f7ff fccf 	bl	8007488 <_Balloc>
 8007aea:	4604      	mov	r4, r0
 8007aec:	b930      	cbnz	r0, 8007afc <__d2b+0x24>
 8007aee:	4602      	mov	r2, r0
 8007af0:	4b25      	ldr	r3, [pc, #148]	; (8007b88 <__d2b+0xb0>)
 8007af2:	4826      	ldr	r0, [pc, #152]	; (8007b8c <__d2b+0xb4>)
 8007af4:	f240 310a 	movw	r1, #778	; 0x30a
 8007af8:	f000 fb00 	bl	80080fc <__assert_func>
 8007afc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b04:	bb35      	cbnz	r5, 8007b54 <__d2b+0x7c>
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	d028      	beq.n	8007b5e <__d2b+0x86>
 8007b0c:	4668      	mov	r0, sp
 8007b0e:	9600      	str	r6, [sp, #0]
 8007b10:	f7ff fd82 	bl	8007618 <__lo0bits>
 8007b14:	9900      	ldr	r1, [sp, #0]
 8007b16:	b300      	cbz	r0, 8007b5a <__d2b+0x82>
 8007b18:	9a01      	ldr	r2, [sp, #4]
 8007b1a:	f1c0 0320 	rsb	r3, r0, #32
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	430b      	orrs	r3, r1
 8007b24:	40c2      	lsrs	r2, r0
 8007b26:	6163      	str	r3, [r4, #20]
 8007b28:	9201      	str	r2, [sp, #4]
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	61a3      	str	r3, [r4, #24]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf14      	ite	ne
 8007b32:	2202      	movne	r2, #2
 8007b34:	2201      	moveq	r2, #1
 8007b36:	6122      	str	r2, [r4, #16]
 8007b38:	b1d5      	cbz	r5, 8007b70 <__d2b+0x98>
 8007b3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b3e:	4405      	add	r5, r0
 8007b40:	f8c9 5000 	str.w	r5, [r9]
 8007b44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b48:	f8c8 0000 	str.w	r0, [r8]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b58:	e7d5      	b.n	8007b06 <__d2b+0x2e>
 8007b5a:	6161      	str	r1, [r4, #20]
 8007b5c:	e7e5      	b.n	8007b2a <__d2b+0x52>
 8007b5e:	a801      	add	r0, sp, #4
 8007b60:	f7ff fd5a 	bl	8007618 <__lo0bits>
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	6163      	str	r3, [r4, #20]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	6122      	str	r2, [r4, #16]
 8007b6c:	3020      	adds	r0, #32
 8007b6e:	e7e3      	b.n	8007b38 <__d2b+0x60>
 8007b70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b78:	f8c9 0000 	str.w	r0, [r9]
 8007b7c:	6918      	ldr	r0, [r3, #16]
 8007b7e:	f7ff fd2b 	bl	80075d8 <__hi0bits>
 8007b82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b86:	e7df      	b.n	8007b48 <__d2b+0x70>
 8007b88:	080085bb 	.word	0x080085bb
 8007b8c:	0800862c 	.word	0x0800862c

08007b90 <_calloc_r>:
 8007b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b92:	fba1 2402 	umull	r2, r4, r1, r2
 8007b96:	b94c      	cbnz	r4, 8007bac <_calloc_r+0x1c>
 8007b98:	4611      	mov	r1, r2
 8007b9a:	9201      	str	r2, [sp, #4]
 8007b9c:	f000 f87a 	bl	8007c94 <_malloc_r>
 8007ba0:	9a01      	ldr	r2, [sp, #4]
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	b930      	cbnz	r0, 8007bb4 <_calloc_r+0x24>
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	b003      	add	sp, #12
 8007baa:	bd30      	pop	{r4, r5, pc}
 8007bac:	220c      	movs	r2, #12
 8007bae:	6002      	str	r2, [r0, #0]
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	e7f8      	b.n	8007ba6 <_calloc_r+0x16>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	f7fd fdf3 	bl	80057a0 <memset>
 8007bba:	e7f4      	b.n	8007ba6 <_calloc_r+0x16>

08007bbc <_free_r>:
 8007bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d044      	beq.n	8007c4c <_free_r+0x90>
 8007bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f1a1 0404 	sub.w	r4, r1, #4
 8007bce:	bfb8      	it	lt
 8007bd0:	18e4      	addlt	r4, r4, r3
 8007bd2:	f000 fb19 	bl	8008208 <__malloc_lock>
 8007bd6:	4a1e      	ldr	r2, [pc, #120]	; (8007c50 <_free_r+0x94>)
 8007bd8:	9801      	ldr	r0, [sp, #4]
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	b933      	cbnz	r3, 8007bec <_free_r+0x30>
 8007bde:	6063      	str	r3, [r4, #4]
 8007be0:	6014      	str	r4, [r2, #0]
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007be8:	f000 bb14 	b.w	8008214 <__malloc_unlock>
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	d908      	bls.n	8007c02 <_free_r+0x46>
 8007bf0:	6825      	ldr	r5, [r4, #0]
 8007bf2:	1961      	adds	r1, r4, r5
 8007bf4:	428b      	cmp	r3, r1
 8007bf6:	bf01      	itttt	eq
 8007bf8:	6819      	ldreq	r1, [r3, #0]
 8007bfa:	685b      	ldreq	r3, [r3, #4]
 8007bfc:	1949      	addeq	r1, r1, r5
 8007bfe:	6021      	streq	r1, [r4, #0]
 8007c00:	e7ed      	b.n	8007bde <_free_r+0x22>
 8007c02:	461a      	mov	r2, r3
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	b10b      	cbz	r3, 8007c0c <_free_r+0x50>
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d9fa      	bls.n	8007c02 <_free_r+0x46>
 8007c0c:	6811      	ldr	r1, [r2, #0]
 8007c0e:	1855      	adds	r5, r2, r1
 8007c10:	42a5      	cmp	r5, r4
 8007c12:	d10b      	bne.n	8007c2c <_free_r+0x70>
 8007c14:	6824      	ldr	r4, [r4, #0]
 8007c16:	4421      	add	r1, r4
 8007c18:	1854      	adds	r4, r2, r1
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	6011      	str	r1, [r2, #0]
 8007c1e:	d1e0      	bne.n	8007be2 <_free_r+0x26>
 8007c20:	681c      	ldr	r4, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	6053      	str	r3, [r2, #4]
 8007c26:	4421      	add	r1, r4
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	e7da      	b.n	8007be2 <_free_r+0x26>
 8007c2c:	d902      	bls.n	8007c34 <_free_r+0x78>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	6003      	str	r3, [r0, #0]
 8007c32:	e7d6      	b.n	8007be2 <_free_r+0x26>
 8007c34:	6825      	ldr	r5, [r4, #0]
 8007c36:	1961      	adds	r1, r4, r5
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	bf04      	itt	eq
 8007c3c:	6819      	ldreq	r1, [r3, #0]
 8007c3e:	685b      	ldreq	r3, [r3, #4]
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	bf04      	itt	eq
 8007c44:	1949      	addeq	r1, r1, r5
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	6054      	str	r4, [r2, #4]
 8007c4a:	e7ca      	b.n	8007be2 <_free_r+0x26>
 8007c4c:	b003      	add	sp, #12
 8007c4e:	bd30      	pop	{r4, r5, pc}
 8007c50:	200002f8 	.word	0x200002f8

08007c54 <sbrk_aligned>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4e0e      	ldr	r6, [pc, #56]	; (8007c90 <sbrk_aligned+0x3c>)
 8007c58:	460c      	mov	r4, r1
 8007c5a:	6831      	ldr	r1, [r6, #0]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b911      	cbnz	r1, 8007c66 <sbrk_aligned+0x12>
 8007c60:	f000 f9e6 	bl	8008030 <_sbrk_r>
 8007c64:	6030      	str	r0, [r6, #0]
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f9e1 	bl	8008030 <_sbrk_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	d00a      	beq.n	8007c88 <sbrk_aligned+0x34>
 8007c72:	1cc4      	adds	r4, r0, #3
 8007c74:	f024 0403 	bic.w	r4, r4, #3
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	d007      	beq.n	8007c8c <sbrk_aligned+0x38>
 8007c7c:	1a21      	subs	r1, r4, r0
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 f9d6 	bl	8008030 <_sbrk_r>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d101      	bne.n	8007c8c <sbrk_aligned+0x38>
 8007c88:	f04f 34ff 	mov.w	r4, #4294967295
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	200002fc 	.word	0x200002fc

08007c94 <_malloc_r>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	1ccd      	adds	r5, r1, #3
 8007c9a:	f025 0503 	bic.w	r5, r5, #3
 8007c9e:	3508      	adds	r5, #8
 8007ca0:	2d0c      	cmp	r5, #12
 8007ca2:	bf38      	it	cc
 8007ca4:	250c      	movcc	r5, #12
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	4607      	mov	r7, r0
 8007caa:	db01      	blt.n	8007cb0 <_malloc_r+0x1c>
 8007cac:	42a9      	cmp	r1, r5
 8007cae:	d905      	bls.n	8007cbc <_malloc_r+0x28>
 8007cb0:	230c      	movs	r3, #12
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbc:	4e2e      	ldr	r6, [pc, #184]	; (8007d78 <_malloc_r+0xe4>)
 8007cbe:	f000 faa3 	bl	8008208 <__malloc_lock>
 8007cc2:	6833      	ldr	r3, [r6, #0]
 8007cc4:	461c      	mov	r4, r3
 8007cc6:	bb34      	cbnz	r4, 8007d16 <_malloc_r+0x82>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f7ff ffc2 	bl	8007c54 <sbrk_aligned>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	d14d      	bne.n	8007d72 <_malloc_r+0xde>
 8007cd6:	6834      	ldr	r4, [r6, #0]
 8007cd8:	4626      	mov	r6, r4
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	d140      	bne.n	8007d60 <_malloc_r+0xcc>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	eb04 0803 	add.w	r8, r4, r3
 8007ce8:	f000 f9a2 	bl	8008030 <_sbrk_r>
 8007cec:	4580      	cmp	r8, r0
 8007cee:	d13a      	bne.n	8007d66 <_malloc_r+0xd2>
 8007cf0:	6821      	ldr	r1, [r4, #0]
 8007cf2:	3503      	adds	r5, #3
 8007cf4:	1a6d      	subs	r5, r5, r1
 8007cf6:	f025 0503 	bic.w	r5, r5, #3
 8007cfa:	3508      	adds	r5, #8
 8007cfc:	2d0c      	cmp	r5, #12
 8007cfe:	bf38      	it	cc
 8007d00:	250c      	movcc	r5, #12
 8007d02:	4629      	mov	r1, r5
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff ffa5 	bl	8007c54 <sbrk_aligned>
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d02b      	beq.n	8007d66 <_malloc_r+0xd2>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	442b      	add	r3, r5
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	e00e      	b.n	8007d34 <_malloc_r+0xa0>
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	1b52      	subs	r2, r2, r5
 8007d1a:	d41e      	bmi.n	8007d5a <_malloc_r+0xc6>
 8007d1c:	2a0b      	cmp	r2, #11
 8007d1e:	d916      	bls.n	8007d4e <_malloc_r+0xba>
 8007d20:	1961      	adds	r1, r4, r5
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	bf18      	it	ne
 8007d28:	6059      	strne	r1, [r3, #4]
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	bf08      	it	eq
 8007d2e:	6031      	streq	r1, [r6, #0]
 8007d30:	5162      	str	r2, [r4, r5]
 8007d32:	604b      	str	r3, [r1, #4]
 8007d34:	4638      	mov	r0, r7
 8007d36:	f104 060b 	add.w	r6, r4, #11
 8007d3a:	f000 fa6b 	bl	8008214 <__malloc_unlock>
 8007d3e:	f026 0607 	bic.w	r6, r6, #7
 8007d42:	1d23      	adds	r3, r4, #4
 8007d44:	1af2      	subs	r2, r6, r3
 8007d46:	d0b6      	beq.n	8007cb6 <_malloc_r+0x22>
 8007d48:	1b9b      	subs	r3, r3, r6
 8007d4a:	50a3      	str	r3, [r4, r2]
 8007d4c:	e7b3      	b.n	8007cb6 <_malloc_r+0x22>
 8007d4e:	6862      	ldr	r2, [r4, #4]
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	bf0c      	ite	eq
 8007d54:	6032      	streq	r2, [r6, #0]
 8007d56:	605a      	strne	r2, [r3, #4]
 8007d58:	e7ec      	b.n	8007d34 <_malloc_r+0xa0>
 8007d5a:	4623      	mov	r3, r4
 8007d5c:	6864      	ldr	r4, [r4, #4]
 8007d5e:	e7b2      	b.n	8007cc6 <_malloc_r+0x32>
 8007d60:	4634      	mov	r4, r6
 8007d62:	6876      	ldr	r6, [r6, #4]
 8007d64:	e7b9      	b.n	8007cda <_malloc_r+0x46>
 8007d66:	230c      	movs	r3, #12
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f000 fa52 	bl	8008214 <__malloc_unlock>
 8007d70:	e7a1      	b.n	8007cb6 <_malloc_r+0x22>
 8007d72:	6025      	str	r5, [r4, #0]
 8007d74:	e7de      	b.n	8007d34 <_malloc_r+0xa0>
 8007d76:	bf00      	nop
 8007d78:	200002f8 	.word	0x200002f8

08007d7c <__sfputc_r>:
 8007d7c:	6893      	ldr	r3, [r2, #8]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	b410      	push	{r4}
 8007d84:	6093      	str	r3, [r2, #8]
 8007d86:	da08      	bge.n	8007d9a <__sfputc_r+0x1e>
 8007d88:	6994      	ldr	r4, [r2, #24]
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	db01      	blt.n	8007d92 <__sfputc_r+0x16>
 8007d8e:	290a      	cmp	r1, #10
 8007d90:	d103      	bne.n	8007d9a <__sfputc_r+0x1e>
 8007d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d96:	f7fe ba03 	b.w	80061a0 <__swbuf_r>
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	1c58      	adds	r0, r3, #1
 8007d9e:	6010      	str	r0, [r2, #0]
 8007da0:	7019      	strb	r1, [r3, #0]
 8007da2:	4608      	mov	r0, r1
 8007da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <__sfputs_r>:
 8007daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dac:	4606      	mov	r6, r0
 8007dae:	460f      	mov	r7, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	18d5      	adds	r5, r2, r3
 8007db4:	42ac      	cmp	r4, r5
 8007db6:	d101      	bne.n	8007dbc <__sfputs_r+0x12>
 8007db8:	2000      	movs	r0, #0
 8007dba:	e007      	b.n	8007dcc <__sfputs_r+0x22>
 8007dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc0:	463a      	mov	r2, r7
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ffda 	bl	8007d7c <__sfputc_r>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d1f3      	bne.n	8007db4 <__sfputs_r+0xa>
 8007dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dd0 <_vfiprintf_r>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	b09d      	sub	sp, #116	; 0x74
 8007dd8:	4614      	mov	r4, r2
 8007dda:	4698      	mov	r8, r3
 8007ddc:	4606      	mov	r6, r0
 8007dde:	b118      	cbz	r0, 8007de8 <_vfiprintf_r+0x18>
 8007de0:	6983      	ldr	r3, [r0, #24]
 8007de2:	b90b      	cbnz	r3, 8007de8 <_vfiprintf_r+0x18>
 8007de4:	f7ff fa30 	bl	8007248 <__sinit>
 8007de8:	4b89      	ldr	r3, [pc, #548]	; (8008010 <_vfiprintf_r+0x240>)
 8007dea:	429d      	cmp	r5, r3
 8007dec:	d11b      	bne.n	8007e26 <_vfiprintf_r+0x56>
 8007dee:	6875      	ldr	r5, [r6, #4]
 8007df0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df2:	07d9      	lsls	r1, r3, #31
 8007df4:	d405      	bmi.n	8007e02 <_vfiprintf_r+0x32>
 8007df6:	89ab      	ldrh	r3, [r5, #12]
 8007df8:	059a      	lsls	r2, r3, #22
 8007dfa:	d402      	bmi.n	8007e02 <_vfiprintf_r+0x32>
 8007dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dfe:	f7ff fac6 	bl	800738e <__retarget_lock_acquire_recursive>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	071b      	lsls	r3, r3, #28
 8007e06:	d501      	bpl.n	8007e0c <_vfiprintf_r+0x3c>
 8007e08:	692b      	ldr	r3, [r5, #16]
 8007e0a:	b9eb      	cbnz	r3, 8007e48 <_vfiprintf_r+0x78>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7fe fa18 	bl	8006244 <__swsetup_r>
 8007e14:	b1c0      	cbz	r0, 8007e48 <_vfiprintf_r+0x78>
 8007e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e18:	07dc      	lsls	r4, r3, #31
 8007e1a:	d50e      	bpl.n	8007e3a <_vfiprintf_r+0x6a>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	b01d      	add	sp, #116	; 0x74
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	4b7b      	ldr	r3, [pc, #492]	; (8008014 <_vfiprintf_r+0x244>)
 8007e28:	429d      	cmp	r5, r3
 8007e2a:	d101      	bne.n	8007e30 <_vfiprintf_r+0x60>
 8007e2c:	68b5      	ldr	r5, [r6, #8]
 8007e2e:	e7df      	b.n	8007df0 <_vfiprintf_r+0x20>
 8007e30:	4b79      	ldr	r3, [pc, #484]	; (8008018 <_vfiprintf_r+0x248>)
 8007e32:	429d      	cmp	r5, r3
 8007e34:	bf08      	it	eq
 8007e36:	68f5      	ldreq	r5, [r6, #12]
 8007e38:	e7da      	b.n	8007df0 <_vfiprintf_r+0x20>
 8007e3a:	89ab      	ldrh	r3, [r5, #12]
 8007e3c:	0598      	lsls	r0, r3, #22
 8007e3e:	d4ed      	bmi.n	8007e1c <_vfiprintf_r+0x4c>
 8007e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e42:	f7ff faa5 	bl	8007390 <__retarget_lock_release_recursive>
 8007e46:	e7e9      	b.n	8007e1c <_vfiprintf_r+0x4c>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e52:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e56:	2330      	movs	r3, #48	; 0x30
 8007e58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800801c <_vfiprintf_r+0x24c>
 8007e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e60:	f04f 0901 	mov.w	r9, #1
 8007e64:	4623      	mov	r3, r4
 8007e66:	469a      	mov	sl, r3
 8007e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e6c:	b10a      	cbz	r2, 8007e72 <_vfiprintf_r+0xa2>
 8007e6e:	2a25      	cmp	r2, #37	; 0x25
 8007e70:	d1f9      	bne.n	8007e66 <_vfiprintf_r+0x96>
 8007e72:	ebba 0b04 	subs.w	fp, sl, r4
 8007e76:	d00b      	beq.n	8007e90 <_vfiprintf_r+0xc0>
 8007e78:	465b      	mov	r3, fp
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ff93 	bl	8007daa <__sfputs_r>
 8007e84:	3001      	adds	r0, #1
 8007e86:	f000 80aa 	beq.w	8007fde <_vfiprintf_r+0x20e>
 8007e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e8c:	445a      	add	r2, fp
 8007e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e90:	f89a 3000 	ldrb.w	r3, [sl]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80a2 	beq.w	8007fde <_vfiprintf_r+0x20e>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea4:	f10a 0a01 	add.w	sl, sl, #1
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	9307      	str	r3, [sp, #28]
 8007eac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eb0:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb2:	4654      	mov	r4, sl
 8007eb4:	2205      	movs	r2, #5
 8007eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eba:	4858      	ldr	r0, [pc, #352]	; (800801c <_vfiprintf_r+0x24c>)
 8007ebc:	f7f8 f990 	bl	80001e0 <memchr>
 8007ec0:	9a04      	ldr	r2, [sp, #16]
 8007ec2:	b9d8      	cbnz	r0, 8007efc <_vfiprintf_r+0x12c>
 8007ec4:	06d1      	lsls	r1, r2, #27
 8007ec6:	bf44      	itt	mi
 8007ec8:	2320      	movmi	r3, #32
 8007eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ece:	0713      	lsls	r3, r2, #28
 8007ed0:	bf44      	itt	mi
 8007ed2:	232b      	movmi	r3, #43	; 0x2b
 8007ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8007edc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ede:	d015      	beq.n	8007f0c <_vfiprintf_r+0x13c>
 8007ee0:	9a07      	ldr	r2, [sp, #28]
 8007ee2:	4654      	mov	r4, sl
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f04f 0c0a 	mov.w	ip, #10
 8007eea:	4621      	mov	r1, r4
 8007eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef0:	3b30      	subs	r3, #48	; 0x30
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d94e      	bls.n	8007f94 <_vfiprintf_r+0x1c4>
 8007ef6:	b1b0      	cbz	r0, 8007f26 <_vfiprintf_r+0x156>
 8007ef8:	9207      	str	r2, [sp, #28]
 8007efa:	e014      	b.n	8007f26 <_vfiprintf_r+0x156>
 8007efc:	eba0 0308 	sub.w	r3, r0, r8
 8007f00:	fa09 f303 	lsl.w	r3, r9, r3
 8007f04:	4313      	orrs	r3, r2
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	46a2      	mov	sl, r4
 8007f0a:	e7d2      	b.n	8007eb2 <_vfiprintf_r+0xe2>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	1d19      	adds	r1, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	9103      	str	r1, [sp, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	bfbb      	ittet	lt
 8007f18:	425b      	neglt	r3, r3
 8007f1a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f1e:	9307      	strge	r3, [sp, #28]
 8007f20:	9307      	strlt	r3, [sp, #28]
 8007f22:	bfb8      	it	lt
 8007f24:	9204      	strlt	r2, [sp, #16]
 8007f26:	7823      	ldrb	r3, [r4, #0]
 8007f28:	2b2e      	cmp	r3, #46	; 0x2e
 8007f2a:	d10c      	bne.n	8007f46 <_vfiprintf_r+0x176>
 8007f2c:	7863      	ldrb	r3, [r4, #1]
 8007f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f30:	d135      	bne.n	8007f9e <_vfiprintf_r+0x1ce>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	1d1a      	adds	r2, r3, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	9203      	str	r2, [sp, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfb8      	it	lt
 8007f3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f42:	3402      	adds	r4, #2
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800802c <_vfiprintf_r+0x25c>
 8007f4a:	7821      	ldrb	r1, [r4, #0]
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	4650      	mov	r0, sl
 8007f50:	f7f8 f946 	bl	80001e0 <memchr>
 8007f54:	b140      	cbz	r0, 8007f68 <_vfiprintf_r+0x198>
 8007f56:	2340      	movs	r3, #64	; 0x40
 8007f58:	eba0 000a 	sub.w	r0, r0, sl
 8007f5c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f60:	9b04      	ldr	r3, [sp, #16]
 8007f62:	4303      	orrs	r3, r0
 8007f64:	3401      	adds	r4, #1
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6c:	482c      	ldr	r0, [pc, #176]	; (8008020 <_vfiprintf_r+0x250>)
 8007f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f72:	2206      	movs	r2, #6
 8007f74:	f7f8 f934 	bl	80001e0 <memchr>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d03f      	beq.n	8007ffc <_vfiprintf_r+0x22c>
 8007f7c:	4b29      	ldr	r3, [pc, #164]	; (8008024 <_vfiprintf_r+0x254>)
 8007f7e:	bb1b      	cbnz	r3, 8007fc8 <_vfiprintf_r+0x1f8>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	3307      	adds	r3, #7
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	3308      	adds	r3, #8
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	443b      	add	r3, r7
 8007f90:	9309      	str	r3, [sp, #36]	; 0x24
 8007f92:	e767      	b.n	8007e64 <_vfiprintf_r+0x94>
 8007f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f98:	460c      	mov	r4, r1
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	e7a5      	b.n	8007eea <_vfiprintf_r+0x11a>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	3401      	adds	r4, #1
 8007fa2:	9305      	str	r3, [sp, #20]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	f04f 0c0a 	mov.w	ip, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fb0:	3a30      	subs	r2, #48	; 0x30
 8007fb2:	2a09      	cmp	r2, #9
 8007fb4:	d903      	bls.n	8007fbe <_vfiprintf_r+0x1ee>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0c5      	beq.n	8007f46 <_vfiprintf_r+0x176>
 8007fba:	9105      	str	r1, [sp, #20]
 8007fbc:	e7c3      	b.n	8007f46 <_vfiprintf_r+0x176>
 8007fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e7f0      	b.n	8007faa <_vfiprintf_r+0x1da>
 8007fc8:	ab03      	add	r3, sp, #12
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	462a      	mov	r2, r5
 8007fce:	4b16      	ldr	r3, [pc, #88]	; (8008028 <_vfiprintf_r+0x258>)
 8007fd0:	a904      	add	r1, sp, #16
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7fd fc8c 	bl	80058f0 <_printf_float>
 8007fd8:	4607      	mov	r7, r0
 8007fda:	1c78      	adds	r0, r7, #1
 8007fdc:	d1d6      	bne.n	8007f8c <_vfiprintf_r+0x1bc>
 8007fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe0:	07d9      	lsls	r1, r3, #31
 8007fe2:	d405      	bmi.n	8007ff0 <_vfiprintf_r+0x220>
 8007fe4:	89ab      	ldrh	r3, [r5, #12]
 8007fe6:	059a      	lsls	r2, r3, #22
 8007fe8:	d402      	bmi.n	8007ff0 <_vfiprintf_r+0x220>
 8007fea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fec:	f7ff f9d0 	bl	8007390 <__retarget_lock_release_recursive>
 8007ff0:	89ab      	ldrh	r3, [r5, #12]
 8007ff2:	065b      	lsls	r3, r3, #25
 8007ff4:	f53f af12 	bmi.w	8007e1c <_vfiprintf_r+0x4c>
 8007ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ffa:	e711      	b.n	8007e20 <_vfiprintf_r+0x50>
 8007ffc:	ab03      	add	r3, sp, #12
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	462a      	mov	r2, r5
 8008002:	4b09      	ldr	r3, [pc, #36]	; (8008028 <_vfiprintf_r+0x258>)
 8008004:	a904      	add	r1, sp, #16
 8008006:	4630      	mov	r0, r6
 8008008:	f7fd ff16 	bl	8005e38 <_printf_i>
 800800c:	e7e4      	b.n	8007fd8 <_vfiprintf_r+0x208>
 800800e:	bf00      	nop
 8008010:	080085ec 	.word	0x080085ec
 8008014:	0800860c 	.word	0x0800860c
 8008018:	080085cc 	.word	0x080085cc
 800801c:	08008784 	.word	0x08008784
 8008020:	0800878e 	.word	0x0800878e
 8008024:	080058f1 	.word	0x080058f1
 8008028:	08007dab 	.word	0x08007dab
 800802c:	0800878a 	.word	0x0800878a

08008030 <_sbrk_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d06      	ldr	r5, [pc, #24]	; (800804c <_sbrk_r+0x1c>)
 8008034:	2300      	movs	r3, #0
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	f7fa ffee 	bl	800301c <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_sbrk_r+0x1a>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_sbrk_r+0x1a>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	20000300 	.word	0x20000300

08008050 <__sread>:
 8008050:	b510      	push	{r4, lr}
 8008052:	460c      	mov	r4, r1
 8008054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008058:	f000 f8e2 	bl	8008220 <_read_r>
 800805c:	2800      	cmp	r0, #0
 800805e:	bfab      	itete	ge
 8008060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008062:	89a3      	ldrhlt	r3, [r4, #12]
 8008064:	181b      	addge	r3, r3, r0
 8008066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800806a:	bfac      	ite	ge
 800806c:	6563      	strge	r3, [r4, #84]	; 0x54
 800806e:	81a3      	strhlt	r3, [r4, #12]
 8008070:	bd10      	pop	{r4, pc}

08008072 <__swrite>:
 8008072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	461f      	mov	r7, r3
 8008078:	898b      	ldrh	r3, [r1, #12]
 800807a:	05db      	lsls	r3, r3, #23
 800807c:	4605      	mov	r5, r0
 800807e:	460c      	mov	r4, r1
 8008080:	4616      	mov	r6, r2
 8008082:	d505      	bpl.n	8008090 <__swrite+0x1e>
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2302      	movs	r3, #2
 800808a:	2200      	movs	r2, #0
 800808c:	f000 f898 	bl	80081c0 <_lseek_r>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	4632      	mov	r2, r6
 800809e:	463b      	mov	r3, r7
 80080a0:	4628      	mov	r0, r5
 80080a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a6:	f000 b817 	b.w	80080d8 <_write_r>

080080aa <__sseek>:
 80080aa:	b510      	push	{r4, lr}
 80080ac:	460c      	mov	r4, r1
 80080ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b2:	f000 f885 	bl	80081c0 <_lseek_r>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	bf15      	itete	ne
 80080bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80080be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080c6:	81a3      	strheq	r3, [r4, #12]
 80080c8:	bf18      	it	ne
 80080ca:	81a3      	strhne	r3, [r4, #12]
 80080cc:	bd10      	pop	{r4, pc}

080080ce <__sclose>:
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	f000 b831 	b.w	8008138 <_close_r>
	...

080080d8 <_write_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	; (80080f8 <_write_r+0x20>)
 80080dc:	4604      	mov	r4, r0
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	2200      	movs	r2, #0
 80080e4:	602a      	str	r2, [r5, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f7fa fa3e 	bl	8002568 <_write>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_write_r+0x1e>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_write_r+0x1e>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	20000300 	.word	0x20000300

080080fc <__assert_func>:
 80080fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080fe:	4614      	mov	r4, r2
 8008100:	461a      	mov	r2, r3
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <__assert_func+0x2c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4605      	mov	r5, r0
 8008108:	68d8      	ldr	r0, [r3, #12]
 800810a:	b14c      	cbz	r4, 8008120 <__assert_func+0x24>
 800810c:	4b07      	ldr	r3, [pc, #28]	; (800812c <__assert_func+0x30>)
 800810e:	9100      	str	r1, [sp, #0]
 8008110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008114:	4906      	ldr	r1, [pc, #24]	; (8008130 <__assert_func+0x34>)
 8008116:	462b      	mov	r3, r5
 8008118:	f000 f81e 	bl	8008158 <fiprintf>
 800811c:	f000 f89f 	bl	800825e <abort>
 8008120:	4b04      	ldr	r3, [pc, #16]	; (8008134 <__assert_func+0x38>)
 8008122:	461c      	mov	r4, r3
 8008124:	e7f3      	b.n	800810e <__assert_func+0x12>
 8008126:	bf00      	nop
 8008128:	2000000c 	.word	0x2000000c
 800812c:	08008795 	.word	0x08008795
 8008130:	080087a2 	.word	0x080087a2
 8008134:	080087d0 	.word	0x080087d0

08008138 <_close_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d06      	ldr	r5, [pc, #24]	; (8008154 <_close_r+0x1c>)
 800813c:	2300      	movs	r3, #0
 800813e:	4604      	mov	r4, r0
 8008140:	4608      	mov	r0, r1
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	f7fa ff35 	bl	8002fb2 <_close>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_close_r+0x1a>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_close_r+0x1a>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	20000300 	.word	0x20000300

08008158 <fiprintf>:
 8008158:	b40e      	push	{r1, r2, r3}
 800815a:	b503      	push	{r0, r1, lr}
 800815c:	4601      	mov	r1, r0
 800815e:	ab03      	add	r3, sp, #12
 8008160:	4805      	ldr	r0, [pc, #20]	; (8008178 <fiprintf+0x20>)
 8008162:	f853 2b04 	ldr.w	r2, [r3], #4
 8008166:	6800      	ldr	r0, [r0, #0]
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	f7ff fe31 	bl	8007dd0 <_vfiprintf_r>
 800816e:	b002      	add	sp, #8
 8008170:	f85d eb04 	ldr.w	lr, [sp], #4
 8008174:	b003      	add	sp, #12
 8008176:	4770      	bx	lr
 8008178:	2000000c 	.word	0x2000000c

0800817c <_fstat_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d07      	ldr	r5, [pc, #28]	; (800819c <_fstat_r+0x20>)
 8008180:	2300      	movs	r3, #0
 8008182:	4604      	mov	r4, r0
 8008184:	4608      	mov	r0, r1
 8008186:	4611      	mov	r1, r2
 8008188:	602b      	str	r3, [r5, #0]
 800818a:	f7fa ff1e 	bl	8002fca <_fstat>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	d102      	bne.n	8008198 <_fstat_r+0x1c>
 8008192:	682b      	ldr	r3, [r5, #0]
 8008194:	b103      	cbz	r3, 8008198 <_fstat_r+0x1c>
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	bd38      	pop	{r3, r4, r5, pc}
 800819a:	bf00      	nop
 800819c:	20000300 	.word	0x20000300

080081a0 <_isatty_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d06      	ldr	r5, [pc, #24]	; (80081bc <_isatty_r+0x1c>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	f7fa ff1d 	bl	8002fea <_isatty>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_isatty_r+0x1a>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_isatty_r+0x1a>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20000300 	.word	0x20000300

080081c0 <_lseek_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d07      	ldr	r5, [pc, #28]	; (80081e0 <_lseek_r+0x20>)
 80081c4:	4604      	mov	r4, r0
 80081c6:	4608      	mov	r0, r1
 80081c8:	4611      	mov	r1, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	602a      	str	r2, [r5, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f7fa ff16 	bl	8003000 <_lseek>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_lseek_r+0x1e>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_lseek_r+0x1e>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	20000300 	.word	0x20000300

080081e4 <__ascii_mbtowc>:
 80081e4:	b082      	sub	sp, #8
 80081e6:	b901      	cbnz	r1, 80081ea <__ascii_mbtowc+0x6>
 80081e8:	a901      	add	r1, sp, #4
 80081ea:	b142      	cbz	r2, 80081fe <__ascii_mbtowc+0x1a>
 80081ec:	b14b      	cbz	r3, 8008202 <__ascii_mbtowc+0x1e>
 80081ee:	7813      	ldrb	r3, [r2, #0]
 80081f0:	600b      	str	r3, [r1, #0]
 80081f2:	7812      	ldrb	r2, [r2, #0]
 80081f4:	1e10      	subs	r0, r2, #0
 80081f6:	bf18      	it	ne
 80081f8:	2001      	movne	r0, #1
 80081fa:	b002      	add	sp, #8
 80081fc:	4770      	bx	lr
 80081fe:	4610      	mov	r0, r2
 8008200:	e7fb      	b.n	80081fa <__ascii_mbtowc+0x16>
 8008202:	f06f 0001 	mvn.w	r0, #1
 8008206:	e7f8      	b.n	80081fa <__ascii_mbtowc+0x16>

08008208 <__malloc_lock>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__malloc_lock+0x8>)
 800820a:	f7ff b8c0 	b.w	800738e <__retarget_lock_acquire_recursive>
 800820e:	bf00      	nop
 8008210:	200002f4 	.word	0x200002f4

08008214 <__malloc_unlock>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__malloc_unlock+0x8>)
 8008216:	f7ff b8bb 	b.w	8007390 <__retarget_lock_release_recursive>
 800821a:	bf00      	nop
 800821c:	200002f4 	.word	0x200002f4

08008220 <_read_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	; (8008240 <_read_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f7fa fea2 	bl	8002f78 <_read>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_read_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_read_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	20000300 	.word	0x20000300

08008244 <__ascii_wctomb>:
 8008244:	b149      	cbz	r1, 800825a <__ascii_wctomb+0x16>
 8008246:	2aff      	cmp	r2, #255	; 0xff
 8008248:	bf85      	ittet	hi
 800824a:	238a      	movhi	r3, #138	; 0x8a
 800824c:	6003      	strhi	r3, [r0, #0]
 800824e:	700a      	strbls	r2, [r1, #0]
 8008250:	f04f 30ff 	movhi.w	r0, #4294967295
 8008254:	bf98      	it	ls
 8008256:	2001      	movls	r0, #1
 8008258:	4770      	bx	lr
 800825a:	4608      	mov	r0, r1
 800825c:	4770      	bx	lr

0800825e <abort>:
 800825e:	b508      	push	{r3, lr}
 8008260:	2006      	movs	r0, #6
 8008262:	f000 f82b 	bl	80082bc <raise>
 8008266:	2001      	movs	r0, #1
 8008268:	f7fa fe7c 	bl	8002f64 <_exit>

0800826c <_raise_r>:
 800826c:	291f      	cmp	r1, #31
 800826e:	b538      	push	{r3, r4, r5, lr}
 8008270:	4604      	mov	r4, r0
 8008272:	460d      	mov	r5, r1
 8008274:	d904      	bls.n	8008280 <_raise_r+0x14>
 8008276:	2316      	movs	r3, #22
 8008278:	6003      	str	r3, [r0, #0]
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008282:	b112      	cbz	r2, 800828a <_raise_r+0x1e>
 8008284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008288:	b94b      	cbnz	r3, 800829e <_raise_r+0x32>
 800828a:	4620      	mov	r0, r4
 800828c:	f000 f830 	bl	80082f0 <_getpid_r>
 8008290:	462a      	mov	r2, r5
 8008292:	4601      	mov	r1, r0
 8008294:	4620      	mov	r0, r4
 8008296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800829a:	f000 b817 	b.w	80082cc <_kill_r>
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d00a      	beq.n	80082b8 <_raise_r+0x4c>
 80082a2:	1c59      	adds	r1, r3, #1
 80082a4:	d103      	bne.n	80082ae <_raise_r+0x42>
 80082a6:	2316      	movs	r3, #22
 80082a8:	6003      	str	r3, [r0, #0]
 80082aa:	2001      	movs	r0, #1
 80082ac:	e7e7      	b.n	800827e <_raise_r+0x12>
 80082ae:	2400      	movs	r4, #0
 80082b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082b4:	4628      	mov	r0, r5
 80082b6:	4798      	blx	r3
 80082b8:	2000      	movs	r0, #0
 80082ba:	e7e0      	b.n	800827e <_raise_r+0x12>

080082bc <raise>:
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <raise+0xc>)
 80082be:	4601      	mov	r1, r0
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	f7ff bfd3 	b.w	800826c <_raise_r>
 80082c6:	bf00      	nop
 80082c8:	2000000c 	.word	0x2000000c

080082cc <_kill_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	; (80082ec <_kill_r+0x20>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	f7fa fe33 	bl	8002f44 <_kill>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	d102      	bne.n	80082e8 <_kill_r+0x1c>
 80082e2:	682b      	ldr	r3, [r5, #0]
 80082e4:	b103      	cbz	r3, 80082e8 <_kill_r+0x1c>
 80082e6:	6023      	str	r3, [r4, #0]
 80082e8:	bd38      	pop	{r3, r4, r5, pc}
 80082ea:	bf00      	nop
 80082ec:	20000300 	.word	0x20000300

080082f0 <_getpid_r>:
 80082f0:	f7fa be20 	b.w	8002f34 <_getpid>

080082f4 <_init>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr

08008300 <_fini>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	bf00      	nop
 8008304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008306:	bc08      	pop	{r3}
 8008308:	469e      	mov	lr, r3
 800830a:	4770      	bx	lr
