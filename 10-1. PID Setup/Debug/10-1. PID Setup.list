
10-1. PID Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800d770  0800d770  0001d770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df8c  0800df8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800df8c  0800df8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df94  0800df94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df98  0800df98  0001df98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800df9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000328  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000195f7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000441a  00000000  00000000  00039807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  0003dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001528  00000000  00000000  0003f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000080fe  00000000  00000000  00040820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb36  00000000  00000000  0004891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc4fa  00000000  00000000  00064454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014094e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000716c  00000000  00000000  001409a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d754 	.word	0x0800d754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d754 	.word	0x0800d754

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f023 0210 	bic.w	r2, r3, #16
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	605a      	str	r2, [r3, #4]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d101      	bne.n	8000fd0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	330c      	adds	r3, #12
 800100a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	78fa      	ldrb	r2, [r7, #3]
 8001010:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4013      	ands	r3, r2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	bf0c      	ite	eq
 8001036:	2301      	moveq	r3, #1
 8001038:	2300      	movne	r3, #0
 800103a:	b2db      	uxtb	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	619a      	str	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800108e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800109a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40023800 	.word	0x40023800

080010b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40023800 	.word	0x40023800

080010e4 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	; 0x40
 80010e8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	2228      	movs	r2, #40	; 0x28
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f008 ff22 	bl	8009f3c <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001108:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800110c:	f7ff ffd2 	bl	80010b4 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff ffb7 	bl	8001084 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff ffb4 	bl	8001084 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ffb1 	bl	8001084 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001122:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001126:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001128:	2302      	movs	r3, #2
 800112a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001138:	2305      	movs	r3, #5
 800113a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4841      	ldr	r0, [pc, #260]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001142:	f007 fed6 	bl	8008ef2 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800114a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800114e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001154:	2302      	movs	r3, #2
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800115c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001162:	2318      	movs	r3, #24
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800116e:	230a      	movs	r3, #10
 8001170:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4619      	mov	r1, r3
 8001178:	4834      	ldr	r0, [pc, #208]	; (800124c <BNO080_GPIO_SPI_Initialization+0x168>)
 800117a:	f008 f88a 	bl	8009292 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800117e:	2100      	movs	r1, #0
 8001180:	4832      	ldr	r0, [pc, #200]	; (800124c <BNO080_GPIO_SPI_Initialization+0x168>)
 8001182:	f7ff fef3 	bl	8000f6c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118a:	4831      	ldr	r0, [pc, #196]	; (8001250 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800118c:	f7ff ff6a 	bl	8001064 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001196:	f7ff ff65 	bl	8001064 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	482d      	ldr	r0, [pc, #180]	; (8001254 <BNO080_GPIO_SPI_Initialization+0x170>)
 80011a0:	f7ff ff60 	bl	8001064 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011aa:	2301      	movs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80011ba:	463b      	mov	r3, r7
 80011bc:	4619      	mov	r1, r3
 80011be:	4822      	ldr	r0, [pc, #136]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011c0:	f007 fe97 	bl	8008ef2 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80011c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011ca:	2301      	movs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011e0:	f007 fe87 	bl	8008ef2 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011ea:	2301      	movs	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001200:	f007 fe77 	bl	8008ef2 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001208:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800120e:	2301      	movs	r3, #1
 8001210:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	480e      	ldr	r0, [pc, #56]	; (8001250 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001218:	f007 fe6b 	bl	8008ef2 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <BNO080_GPIO_SPI_Initialization+0x168>)
 800121e:	f7ff fe95 	bl	8000f4c <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4808      	ldr	r0, [pc, #32]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001228:	f7ff ff0e 	bl	8001048 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800122c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001232:	f7ff ff09 	bl	8001048 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800123c:	f7ff ff04 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001240:	bf00      	nop
 8001242:	3740      	adds	r7, #64	; 0x40
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40020400 	.word	0x40020400
 800124c:	40003800 	.word	0x40003800
 8001250:	40020800 	.word	0x40020800
 8001254:	40020000 	.word	0x40020000

08001258 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800125e:	f7ff ff41 	bl	80010e4 <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...");
 8001262:	482e      	ldr	r0, [pc, #184]	; (800131c <BNO080_Initialization+0xc4>)
 8001264:	f009 fadc 	bl	800a820 <iprintf>

	CHIP_DESELECT(BNO080);
 8001268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126c:	482c      	ldr	r0, [pc, #176]	; (8001320 <BNO080_Initialization+0xc8>)
 800126e:	f7ff feeb 	bl	8001048 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8001272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001276:	482b      	ldr	r0, [pc, #172]	; (8001324 <BNO080_Initialization+0xcc>)
 8001278:	f7ff fee6 	bl	8001048 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	4829      	ldr	r0, [pc, #164]	; (8001328 <BNO080_Initialization+0xd0>)
 8001282:	f7ff feef 	bl	8001064 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001286:	20c8      	movs	r0, #200	; 0xc8
 8001288:	f004 fd58 	bl	8005d3c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 800128c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001290:	4825      	ldr	r0, [pc, #148]	; (8001328 <BNO080_Initialization+0xd0>)
 8001292:	f7ff fed9 	bl	8001048 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001296:	f000 fc53 	bl	8001b40 <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800129a:	f000 fc51 	bl	8001b40 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800129e:	f000 fc73 	bl	8001b88 <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80012a2:	f000 fc4d 	bl	8001b40 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80012a6:	f000 fc6f 	bl	8001b88 <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <BNO080_Initialization+0xd4>)
 80012ac:	22f9      	movs	r2, #249	; 0xf9
 80012ae:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <BNO080_Initialization+0xd4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80012b6:	2102      	movs	r1, #2
 80012b8:	2002      	movs	r0, #2
 80012ba:	f000 fcd5 	bl	8001c68 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 80012be:	f000 fc3f 	bl	8001b40 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80012c2:	f000 fc61 	bl	8001b88 <BNO080_receivePacket>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d11b      	bne.n	8001304 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <BNO080_Initialization+0xd8>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <BNO080_Initialization+0xd8>)
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <BNO080_Initialization+0xd8>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	4618      	mov	r0, r3
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <BNO080_Initialization+0xd8>)
 80012e0:	78db      	ldrb	r3, [r3, #3]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4603      	mov	r3, r0
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <BNO080_Initialization+0xdc>)
 80012e8:	f009 fa9a 	bl	800a820 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <BNO080_Initialization+0xd4>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2bf8      	cmp	r3, #248	; 0xf8
 80012f2:	d107      	bne.n	8001304 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <BNO080_Initialization+0xd4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	480f      	ldr	r0, [pc, #60]	; (8001338 <BNO080_Initialization+0xe0>)
 80012fc:	f009 fa90 	bl	800a820 <iprintf>
			return (0);
 8001300:	2300      	movs	r3, #0
 8001302:	e007      	b.n	8001314 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <BNO080_Initialization+0xd4>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	22f8      	movs	r2, #248	; 0xf8
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <BNO080_Initialization+0xe4>)
 800130e:	f009 fa87 	bl	800a820 <iprintf>
	return (1); //Something went wrong
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	0800d770 	.word	0x0800d770
 8001320:	40020400 	.word	0x40020400
 8001324:	40020000 	.word	0x40020000
 8001328:	40020800 	.word	0x40020800
 800132c:	20000200 	.word	0x20000200
 8001330:	200001fc 	.word	0x200001fc
 8001334:	0800d784 	.word	0x0800d784
 8001338:	0800d79c 	.word	0x0800d79c
 800133c:	0800d7bc 	.word	0x0800d7bc

08001340 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800134a:	bf00      	nop
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <SPI2_SendByte+0x40>)
 800134e:	f7ff fe33 	bl	8000fb8 <LL_SPI_IsActiveFlag_TXE>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f9      	beq.n	800134c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4619      	mov	r1, r3
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <SPI2_SendByte+0x40>)
 800135e:	f7ff fe4c 	bl	8000ffa <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8001362:	bf00      	nop
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <SPI2_SendByte+0x40>)
 8001366:	f7ff fe14 	bl	8000f92 <LL_SPI_IsActiveFlag_RXNE>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f9      	beq.n	8001364 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <SPI2_SendByte+0x40>)
 8001372:	f7ff fe34 	bl	8000fde <LL_SPI_ReceiveData8>
 8001376:	4603      	mov	r3, r0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40003800 	.word	0x40003800

08001384 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <BNO080_dataAvailable+0x50>)
 800138e:	f7ff fe46 	bl	800101e <LL_GPIO_IsInputPinSet>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <BNO080_dataAvailable+0x18>
		return (0);
 8001398:	2300      	movs	r3, #0
 800139a:	e019      	b.n	80013d0 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 800139c:	f000 fbf4 	bl	8001b88 <BNO080_receivePacket>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d113      	bne.n	80013ce <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <BNO080_dataAvailable+0x54>)
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d107      	bne.n	80013be <BNO080_dataAvailable+0x3a>
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <BNO080_dataAvailable+0x58>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2bfb      	cmp	r3, #251	; 0xfb
 80013b4:	d103      	bne.n	80013be <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80013b6:	f000 f82f 	bl	8001418 <BNO080_parseInputReport>
			return (1);
 80013ba:	2301      	movs	r3, #1
 80013bc:	e008      	b.n	80013d0 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <BNO080_dataAvailable+0x54>)
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d103      	bne.n	80013ce <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80013c6:	f000 f80b 	bl	80013e0 <BNO080_parseCommandReport>
			return (1);
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020800 	.word	0x40020800
 80013d8:	200001fc 	.word	0x200001fc
 80013dc:	20000200 	.word	0x20000200

080013e0 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <BNO080_parseCommandReport+0x30>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2bf1      	cmp	r3, #241	; 0xf1
 80013ec:	d109      	bne.n	8001402 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <BNO080_parseCommandReport+0x30>)
 80013f0:	789b      	ldrb	r3, [r3, #2]
 80013f2:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d103      	bne.n	8001402 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <BNO080_parseCommandReport+0x30>)
 80013fc:	795a      	ldrb	r2, [r3, #5]
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <BNO080_parseCommandReport+0x34>)
 8001400:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000200 	.word	0x20000200
 8001414:	200002c4 	.word	0x200002c4

08001418 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800141e:	4b98      	ldr	r3, [pc, #608]	; (8001680 <BNO080_parseInputReport+0x268>)
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b96      	ldr	r3, [pc, #600]	; (8001680 <BNO080_parseInputReport+0x268>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001430:	8a3b      	ldrh	r3, [r7, #16]
 8001432:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001436:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001438:	8a3b      	ldrh	r3, [r7, #16]
 800143a:	3b04      	subs	r3, #4
 800143c:	b29b      	uxth	r3, r3
 800143e:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001440:	4b90      	ldr	r3, [pc, #576]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	061b      	lsls	r3, r3, #24
 8001446:	4a8f      	ldr	r2, [pc, #572]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001448:	78d2      	ldrb	r2, [r2, #3]
 800144a:	0412      	lsls	r2, r2, #16
 800144c:	4313      	orrs	r3, r2
 800144e:	4a8d      	ldr	r2, [pc, #564]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001450:	7892      	ldrb	r2, [r2, #2]
 8001452:	0212      	lsls	r2, r2, #8
 8001454:	4313      	orrs	r3, r2
 8001456:	4a8b      	ldr	r2, [pc, #556]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001458:	7852      	ldrb	r2, [r2, #1]
 800145a:	4313      	orrs	r3, r2
 800145c:	4a8a      	ldr	r2, [pc, #552]	; (8001688 <BNO080_parseInputReport+0x270>)
 800145e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001460:	4b88      	ldr	r3, [pc, #544]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001462:	79db      	ldrb	r3, [r3, #7]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 800146a:	4b86      	ldr	r3, [pc, #536]	; (8001684 <BNO080_parseInputReport+0x26c>)
 800146c:	7a9b      	ldrb	r3, [r3, #10]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b84      	ldr	r3, [pc, #528]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001474:	7a5b      	ldrb	r3, [r3, #9]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21b      	sxth	r3, r3
 800147c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800147e:	4b81      	ldr	r3, [pc, #516]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001480:	7b1b      	ldrb	r3, [r3, #12]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b7f      	ldr	r3, [pc, #508]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001488:	7adb      	ldrb	r3, [r3, #11]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21b      	sxth	r3, r3
 8001490:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001492:	4b7c      	ldr	r3, [pc, #496]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001494:	7b9b      	ldrb	r3, [r3, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <BNO080_parseInputReport+0x26c>)
 800149c:	7b5b      	ldrb	r3, [r3, #13]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80014ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014b2:	2b0e      	cmp	r3, #14
 80014b4:	dd09      	ble.n	80014ca <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80014b6:	4b73      	ldr	r3, [pc, #460]	; (8001684 <BNO080_parseInputReport+0x26c>)
 80014b8:	7c1b      	ldrb	r3, [r3, #16]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	4b71      	ldr	r3, [pc, #452]	; (8001684 <BNO080_parseInputReport+0x26c>)
 80014c0:	7bdb      	ldrb	r3, [r3, #15]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80014ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	dd09      	ble.n	80014e6 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <BNO080_parseInputReport+0x26c>)
 80014d4:	7c9b      	ldrb	r3, [r3, #18]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <BNO080_parseInputReport+0x26c>)
 80014dc:	7c5b      	ldrb	r3, [r3, #17]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80014e6:	4b67      	ldr	r3, [pc, #412]	; (8001684 <BNO080_parseInputReport+0x26c>)
 80014e8:	795b      	ldrb	r3, [r3, #5]
 80014ea:	2b1e      	cmp	r3, #30
 80014ec:	dc46      	bgt.n	800157c <BNO080_parseInputReport+0x164>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f340 80bf 	ble.w	8001672 <BNO080_parseInputReport+0x25a>
 80014f4:	3b01      	subs	r3, #1
 80014f6:	2b1d      	cmp	r3, #29
 80014f8:	f200 80bb 	bhi.w	8001672 <BNO080_parseInputReport+0x25a>
 80014fc:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <BNO080_parseInputReport+0xec>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001583 	.word	0x08001583
 8001508:	080015bb 	.word	0x080015bb
 800150c:	080015d7 	.word	0x080015d7
 8001510:	0800159f 	.word	0x0800159f
 8001514:	080015f3 	.word	0x080015f3
 8001518:	08001673 	.word	0x08001673
 800151c:	08001673 	.word	0x08001673
 8001520:	080015f3 	.word	0x080015f3
 8001524:	08001673 	.word	0x08001673
 8001528:	08001673 	.word	0x08001673
 800152c:	08001673 	.word	0x08001673
 8001530:	08001673 	.word	0x08001673
 8001534:	08001673 	.word	0x08001673
 8001538:	08001673 	.word	0x08001673
 800153c:	08001673 	.word	0x08001673
 8001540:	08001673 	.word	0x08001673
 8001544:	0800161b 	.word	0x0800161b
 8001548:	08001673 	.word	0x08001673
 800154c:	08001623 	.word	0x08001623
 8001550:	08001673 	.word	0x08001673
 8001554:	08001673 	.word	0x08001673
 8001558:	08001673 	.word	0x08001673
 800155c:	08001673 	.word	0x08001673
 8001560:	08001673 	.word	0x08001673
 8001564:	08001673 	.word	0x08001673
 8001568:	08001673 	.word	0x08001673
 800156c:	08001673 	.word	0x08001673
 8001570:	08001673 	.word	0x08001673
 8001574:	08001673 	.word	0x08001673
 8001578:	0800162d 	.word	0x0800162d
 800157c:	2bf1      	cmp	r3, #241	; 0xf1
 800157e:	d06d      	beq.n	800165c <BNO080_parseInputReport+0x244>
		//See reference manual to add additional feature reports as needed
	}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001580:	e077      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		accelAccuracy = status;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <BNO080_parseInputReport+0x274>)
 8001588:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 800158a:	4a41      	ldr	r2, [pc, #260]	; (8001690 <BNO080_parseInputReport+0x278>)
 800158c:	89bb      	ldrh	r3, [r7, #12]
 800158e:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001590:	4a40      	ldr	r2, [pc, #256]	; (8001694 <BNO080_parseInputReport+0x27c>)
 8001592:	897b      	ldrh	r3, [r7, #10]
 8001594:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001596:	4a40      	ldr	r2, [pc, #256]	; (8001698 <BNO080_parseInputReport+0x280>)
 8001598:	893b      	ldrh	r3, [r7, #8]
 800159a:	8013      	strh	r3, [r2, #0]
		break;
 800159c:	e069      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		accelLinAccuracy = status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <BNO080_parseInputReport+0x284>)
 80015a4:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 80015a6:	4a3e      	ldr	r2, [pc, #248]	; (80016a0 <BNO080_parseInputReport+0x288>)
 80015a8:	89bb      	ldrh	r3, [r7, #12]
 80015aa:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 80015ac:	4a3d      	ldr	r2, [pc, #244]	; (80016a4 <BNO080_parseInputReport+0x28c>)
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 80015b2:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <BNO080_parseInputReport+0x290>)
 80015b4:	893b      	ldrh	r3, [r7, #8]
 80015b6:	8013      	strh	r3, [r2, #0]
		break;
 80015b8:	e05b      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		gyroAccuracy = status;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <BNO080_parseInputReport+0x294>)
 80015c0:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 80015c2:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <BNO080_parseInputReport+0x298>)
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 80015c8:	4a3a      	ldr	r2, [pc, #232]	; (80016b4 <BNO080_parseInputReport+0x29c>)
 80015ca:	897b      	ldrh	r3, [r7, #10]
 80015cc:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 80015ce:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <BNO080_parseInputReport+0x2a0>)
 80015d0:	893b      	ldrh	r3, [r7, #8]
 80015d2:	8013      	strh	r3, [r2, #0]
		break;
 80015d4:	e04d      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		magAccuracy = status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <BNO080_parseInputReport+0x2a4>)
 80015dc:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 80015de:	4a38      	ldr	r2, [pc, #224]	; (80016c0 <BNO080_parseInputReport+0x2a8>)
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 80015e4:	4a37      	ldr	r2, [pc, #220]	; (80016c4 <BNO080_parseInputReport+0x2ac>)
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 80015ea:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <BNO080_parseInputReport+0x2b0>)
 80015ec:	893b      	ldrh	r3, [r7, #8]
 80015ee:	8013      	strh	r3, [r2, #0]
		break;
 80015f0:	e03f      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		quatAccuracy = status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <BNO080_parseInputReport+0x2b4>)
 80015f8:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 80015fa:	4a35      	ldr	r2, [pc, #212]	; (80016d0 <BNO080_parseInputReport+0x2b8>)
 80015fc:	89bb      	ldrh	r3, [r7, #12]
 80015fe:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001600:	4a34      	ldr	r2, [pc, #208]	; (80016d4 <BNO080_parseInputReport+0x2bc>)
 8001602:	897b      	ldrh	r3, [r7, #10]
 8001604:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001606:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <BNO080_parseInputReport+0x2c0>)
 8001608:	893b      	ldrh	r3, [r7, #8]
 800160a:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 800160c:	4a33      	ldr	r2, [pc, #204]	; (80016dc <BNO080_parseInputReport+0x2c4>)
 800160e:	8afb      	ldrh	r3, [r7, #22]
 8001610:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001612:	4a33      	ldr	r2, [pc, #204]	; (80016e0 <BNO080_parseInputReport+0x2c8>)
 8001614:	8abb      	ldrh	r3, [r7, #20]
 8001616:	8013      	strh	r3, [r2, #0]
		break;
 8001618:	e02b      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		stepCount = data3; //Bytes 8/9
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <BNO080_parseInputReport+0x2cc>)
 800161c:	893b      	ldrh	r3, [r7, #8]
 800161e:	8013      	strh	r3, [r2, #0]
		break;
 8001620:	e027      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <BNO080_parseInputReport+0x26c>)
 8001624:	7a5a      	ldrb	r2, [r3, #9]
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <BNO080_parseInputReport+0x2d0>)
 8001628:	701a      	strb	r2, [r3, #0]
		break;
 800162a:	e022      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <BNO080_parseInputReport+0x26c>)
 800162e:	7a9a      	ldrb	r2, [r3, #10]
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <BNO080_parseInputReport+0x2d4>)
 8001632:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001634:	2300      	movs	r3, #0
 8001636:	74fb      	strb	r3, [r7, #19]
 8001638:	e00c      	b.n	8001654 <BNO080_parseInputReport+0x23c>
			_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	f103 020b 	add.w	r2, r3, #11
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <BNO080_parseInputReport+0x2d8>)
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	7cfb      	ldrb	r3, [r7, #19]
 8001646:	440b      	add	r3, r1
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <BNO080_parseInputReport+0x26c>)
 800164a:	5c8a      	ldrb	r2, [r1, r2]
 800164c:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800164e:	7cfb      	ldrb	r3, [r7, #19]
 8001650:	3301      	adds	r3, #1
 8001652:	74fb      	strb	r3, [r7, #19]
 8001654:	7cfb      	ldrb	r3, [r7, #19]
 8001656:	2b08      	cmp	r3, #8
 8001658:	d9ef      	bls.n	800163a <BNO080_parseInputReport+0x222>
		break;
 800165a:	e00a      	b.n	8001672 <BNO080_parseInputReport+0x25a>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <BNO080_parseInputReport+0x26c>)
 800165e:	79db      	ldrb	r3, [r3, #7]
 8001660:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b07      	cmp	r3, #7
 8001666:	d103      	bne.n	8001670 <BNO080_parseInputReport+0x258>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <BNO080_parseInputReport+0x26c>)
 800166a:	7a9a      	ldrb	r2, [r3, #10]
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <BNO080_parseInputReport+0x2dc>)
 800166e:	701a      	strb	r2, [r3, #0]
		break;
 8001670:	bf00      	nop
}
 8001672:	bf00      	nop
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200001fc 	.word	0x200001fc
 8001684:	20000200 	.word	0x20000200
 8001688:	200002b8 	.word	0x200002b8
 800168c:	2000028e 	.word	0x2000028e
 8001690:	20000288 	.word	0x20000288
 8001694:	2000028a 	.word	0x2000028a
 8001698:	2000028c 	.word	0x2000028c
 800169c:	20000296 	.word	0x20000296
 80016a0:	20000290 	.word	0x20000290
 80016a4:	20000292 	.word	0x20000292
 80016a8:	20000294 	.word	0x20000294
 80016ac:	2000029e 	.word	0x2000029e
 80016b0:	20000298 	.word	0x20000298
 80016b4:	2000029a 	.word	0x2000029a
 80016b8:	2000029c 	.word	0x2000029c
 80016bc:	200002a6 	.word	0x200002a6
 80016c0:	200002a0 	.word	0x200002a0
 80016c4:	200002a2 	.word	0x200002a2
 80016c8:	200002a4 	.word	0x200002a4
 80016cc:	200002b2 	.word	0x200002b2
 80016d0:	200002a8 	.word	0x200002a8
 80016d4:	200002aa 	.word	0x200002aa
 80016d8:	200002ac 	.word	0x200002ac
 80016dc:	200002ae 	.word	0x200002ae
 80016e0:	200002b0 	.word	0x200002b0
 80016e4:	200002b4 	.word	0x200002b4
 80016e8:	200002bc 	.word	0x200002bc
 80016ec:	200002bd 	.word	0x200002bd
 80016f0:	200002c0 	.word	0x200002c0
 80016f4:	200002c4 	.word	0x200002c4

080016f8 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <BNO080_getQuatI+0x24>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b21b      	sxth	r3, r3
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <BNO080_getQuatI+0x28>)
 8001704:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8bb 	bl	8001888 <BNO080_qToFloat>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
}
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002a8 	.word	0x200002a8
 8001720:	20000000 	.word	0x20000000

08001724 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <BNO080_getQuatJ+0x24>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <BNO080_getQuatJ+0x28>)
 8001730:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f8a5 	bl	8001888 <BNO080_qToFloat>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002aa 	.word	0x200002aa
 800174c:	20000000 	.word	0x20000000

08001750 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <BNO080_getQuatK+0x24>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b21b      	sxth	r3, r3
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <BNO080_getQuatK+0x28>)
 800175c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f88f 	bl	8001888 <BNO080_qToFloat>
 800176a:	eef0 7a40 	vmov.f32	s15, s0
}
 800176e:	eeb0 0a67 	vmov.f32	s0, s15
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200002ac 	.word	0x200002ac
 8001778:	20000000 	.word	0x20000000

0800177c <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <BNO080_getQuatReal+0x24>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <BNO080_getQuatReal+0x28>)
 8001788:	f9b2 2000 	ldrsh.w	r2, [r2]
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f879 	bl	8001888 <BNO080_qToFloat>
 8001796:	eef0 7a40 	vmov.f32	s15, s0
}
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200002ae 	.word	0x200002ae
 80017a4:	20000000 	.word	0x20000000

080017a8 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <BNO080_getQuatRadianAccuracy+0x24>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <BNO080_getQuatRadianAccuracy+0x28>)
 80017b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f863 	bl	8001888 <BNO080_qToFloat>
 80017c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200002b0 	.word	0x200002b0
 80017d0:	20000000 	.word	0x20000000

080017d4 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <BNO080_getQuatAccuracy+0x14>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	200002b2 	.word	0x200002b2

080017ec <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <BNO080_getMagX+0x24>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <BNO080_getMagX+0x28>)
 80017f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f841 	bl	8001888 <BNO080_qToFloat>
 8001806:	eef0 7a40 	vmov.f32	s15, s0
}
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200002a0 	.word	0x200002a0
 8001814:	20000002 	.word	0x20000002

08001818 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <BNO080_getMagY+0x24>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	b21b      	sxth	r3, r3
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <BNO080_getMagY+0x28>)
 8001824:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f82b 	bl	8001888 <BNO080_qToFloat>
 8001832:	eef0 7a40 	vmov.f32	s15, s0
}
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200002a2 	.word	0x200002a2
 8001840:	20000002 	.word	0x20000002

08001844 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <BNO080_getMagZ+0x24>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <BNO080_getMagZ+0x28>)
 8001850:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f815 	bl	8001888 <BNO080_qToFloat>
 800185e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001862:	eeb0 0a67 	vmov.f32	s0, s15
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200002a4 	.word	0x200002a4
 800186c:	20000002 	.word	0x20000002

08001870 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <BNO080_getMagAccuracy+0x14>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	200002a6 	.word	0x200002a6

08001888 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	ed2d 8b02 	vpush	{d8}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	4613      	mov	r3, r2
 800189a:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 800189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80018a8:	797b      	ldrb	r3, [r7, #5]
 80018aa:	425b      	negs	r3, r3
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b4:	eef0 0a67 	vmov.f32	s1, s15
 80018b8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80018bc:	f00b f918 	bl	800caf0 <powf>
 80018c0:	eef0 7a40 	vmov.f32	s15, s0
 80018c4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	ecbd 8b02 	vpop	{d8}
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	2005      	movs	r0, #5
 80018e8:	f000 f83a 	bl	8001960 <BNO080_setFeatureCommand>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	2008      	movs	r0, #8
 8001906:	f000 f82b 	bl	8001960 <BNO080_setFeatureCommand>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f81c 	bl	8001960 <BNO080_setFeatureCommand>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001934:	2004      	movs	r0, #4
 8001936:	f000 f885 	bl	8001a44 <BNO080_sendCalibrateCommand>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <BNO080_calibrationComplete+0x1c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <BNO080_calibrationComplete+0x10>
		return (1);
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <BNO080_calibrationComplete+0x12>
	return (0);
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200002c4 	.word	0x200002c4

08001960 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 8001970:	22fd      	movs	r2, #253	; 0xfd
 8001972:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 800197c:	2200      	movs	r2, #0
 800197e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 8001982:	2200      	movs	r2, #0
 8001984:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 8001988:	2200      	movs	r2, #0
 800198a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 8001992:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 800199c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019a6:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	0e1b      	lsrs	r3, r3, #24
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019b0:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019d0:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019da:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019e4:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0e1b      	lsrs	r3, r3, #24
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <BNO080_setFeatureCommand+0xa0>)
 80019ee:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 80019f0:	2111      	movs	r1, #17
 80019f2:	2002      	movs	r0, #2
 80019f4:	f000 f938 	bl	8001c68 <BNO080_sendPacket>
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000200 	.word	0x20000200

08001a04 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <BNO080_sendCommand+0x38>)
 8001a10:	22f2      	movs	r2, #242	; 0xf2
 8001a12:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <BNO080_sendCommand+0x3c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	b2d1      	uxtb	r1, r2
 8001a1c:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <BNO080_sendCommand+0x3c>)
 8001a1e:	7011      	strb	r1, [r2, #0]
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <BNO080_sendCommand+0x38>)
 8001a22:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <BNO080_sendCommand+0x38>)
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001a2a:	210c      	movs	r1, #12
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f000 f91b 	bl	8001c68 <BNO080_sendPacket>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000200 	.word	0x20000200
 8001a40:	20000286 	.word	0x20000286

08001a44 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a4e:	2303      	movs	r3, #3
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e006      	b.n	8001a62 <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b0b      	cmp	r3, #11
 8001a66:	d9f5      	bls.n	8001a54 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	70da      	strb	r2, [r3, #3]
 8001a74:	e020      	b.n	8001ab8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d103      	bne.n	8001a84 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	711a      	strb	r2, [r3, #4]
 8001a82:	e019      	b.n	8001ab8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d103      	bne.n	8001a92 <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	715a      	strb	r2, [r3, #5]
 8001a90:	e012      	b.n	8001ab8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d103      	bne.n	8001aa0 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	71da      	strb	r2, [r3, #7]
 8001a9e:	e00b      	b.n	8001ab8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d108      	bne.n	8001ab8 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <BNO080_sendCalibrateCommand+0x88>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <BNO080_sendCalibrateCommand+0x8c>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001abe:	2007      	movs	r0, #7
 8001ac0:	f7ff ffa0 	bl	8001a04 <BNO080_sendCommand>
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000200 	.word	0x20000200
 8001ad0:	200002c4 	.word	0x200002c4

08001ad4 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001ada:	2303      	movs	r3, #3
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e006      	b.n	8001aee <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <BNO080_requestCalibrationStatus+0x34>)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	3301      	adds	r3, #1
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b0b      	cmp	r3, #11
 8001af2:	d9f5      	bls.n	8001ae0 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <BNO080_requestCalibrationStatus+0x34>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001afa:	2007      	movs	r0, #7
 8001afc:	f7ff ff82 	bl	8001a04 <BNO080_sendCommand>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000200 	.word	0x20000200

08001b0c <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001b12:	2303      	movs	r3, #3
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	e006      	b.n	8001b26 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <BNO080_saveCalibration+0x30>)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	3301      	adds	r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b0b      	cmp	r3, #11
 8001b2a:	d9f5      	bls.n	8001b18 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001b2c:	2006      	movs	r0, #6
 8001b2e:	f7ff ff69 	bl	8001a04 <BNO080_sendCommand>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000200 	.word	0x20000200

08001b40 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	e00c      	b.n	8001b66 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <BNO080_waitForSPI+0x40>)
 8001b52:	f7ff fa64 	bl	800101e <LL_GPIO_IsInputPinSet>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e00a      	b.n	8001b76 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d1ee      	bne.n	8001b4c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <BNO080_waitForSPI+0x44>)
 8001b70:	f008 fedc 	bl	800a92c <puts>
	return (0);
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020800 	.word	0x40020800
 8001b84:	0800d808 	.word	0x0800d808

08001b88 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b92:	4831      	ldr	r0, [pc, #196]	; (8001c58 <BNO080_receivePacket+0xd0>)
 8001b94:	f7ff fa43 	bl	800101e <LL_GPIO_IsInputPinSet>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e056      	b.n	8001c50 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba6:	482d      	ldr	r0, [pc, #180]	; (8001c5c <BNO080_receivePacket+0xd4>)
 8001ba8:	f7ff fa5c 	bl	8001064 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fbc7 	bl	8001340 <SPI2_SendByte>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff fbc2 	bl	8001340 <SPI2_SendByte>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fbbd 	bl	8001340 <SPI2_SendByte>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fbb8 	bl	8001340 <SPI2_SendByte>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <BNO080_receivePacket+0xd8>)
 8001bd6:	7b7b      	ldrb	r3, [r7, #13]
 8001bd8:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <BNO080_receivePacket+0xd8>)
 8001bdc:	7b3b      	ldrb	r3, [r7, #12]
 8001bde:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001be0:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <BNO080_receivePacket+0xd8>)
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <BNO080_receivePacket+0xd8>)
 8001be8:	7abb      	ldrb	r3, [r7, #10]
 8001bea:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001bec:	7b3b      	ldrb	r3, [r7, #12]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	7b7b      	ldrb	r3, [r7, #13]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001bfa:	893b      	ldrh	r3, [r7, #8]
 8001bfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c00:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001c02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e020      	b.n	8001c50 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001c0e:	893b      	ldrh	r3, [r7, #8]
 8001c10:	3b04      	subs	r3, #4
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	81fb      	strh	r3, [r7, #14]
 8001c1a:	e00e      	b.n	8001c3a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001c1c:	20ff      	movs	r0, #255	; 0xff
 8001c1e:	f7ff fb8f 	bl	8001340 <SPI2_SendByte>
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001c26:	89fb      	ldrh	r3, [r7, #14]
 8001c28:	2b7f      	cmp	r3, #127	; 0x7f
 8001c2a:	d803      	bhi.n	8001c34 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <BNO080_receivePacket+0xdc>)
 8001c30:	79fa      	ldrb	r2, [r7, #7]
 8001c32:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001c34:	89fb      	ldrh	r3, [r7, #14]
 8001c36:	3301      	adds	r3, #1
 8001c38:	81fb      	strh	r3, [r7, #14]
 8001c3a:	89fa      	ldrh	r2, [r7, #14]
 8001c3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbeb      	blt.n	8001c1c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <BNO080_receivePacket+0xd4>)
 8001c4a:	f7ff f9fd 	bl	8001048 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	200001fc 	.word	0x200001fc
 8001c64:	20000200 	.word	0x20000200

08001c68 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001c78:	79bb      	ldrb	r3, [r7, #6]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001c7e:	f7ff ff5f 	bl	8001b40 <BNO080_waitForSPI>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e032      	b.n	8001cf2 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c90:	481a      	ldr	r0, [pc, #104]	; (8001cfc <BNO080_sendPacket+0x94>)
 8001c92:	f7ff f9e7 	bl	8001064 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001c96:	7bbb      	ldrb	r3, [r7, #14]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fb51 	bl	8001340 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	121b      	asrs	r3, r3, #8
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fb4b 	bl	8001340 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fb47 	bl	8001340 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <BNO080_sendPacket+0x98>)
 8001cb6:	5cd2      	ldrb	r2, [r2, r3]
 8001cb8:	1c51      	adds	r1, r2, #1
 8001cba:	b2c8      	uxtb	r0, r1
 8001cbc:	4910      	ldr	r1, [pc, #64]	; (8001d00 <BNO080_sendPacket+0x98>)
 8001cbe:	54c8      	strb	r0, [r1, r3]
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f7ff fb3d 	bl	8001340 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e008      	b.n	8001cde <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <BNO080_sendPacket+0x9c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fb34 	bl	8001340 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d3f2      	bcc.n	8001ccc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <BNO080_sendPacket+0x94>)
 8001cec:	f7ff f9ac 	bl	8001048 <LL_GPIO_SetOutputPin>

	return (1);
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	20000280 	.word	0x20000280
 8001d04:	20000200 	.word	0x20000200

08001d08 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8001d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d18:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	e00a      	b.n	8001d36 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	89fa      	ldrh	r2, [r7, #14]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	3b02      	subs	r3, #2
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbef      	blt.n	8001d20 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	321e      	adds	r2, #30
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10a      	bne.n	8001d64 <iBus_Check_CHKSUM+0x5c>
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	331f      	adds	r3, #31
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d101      	bne.n	8001d64 <iBus_Check_CHKSUM+0x5c>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <iBus_Check_CHKSUM+0x5e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3302      	adds	r3, #2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3303      	adds	r3, #3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3305      	adds	r3, #5
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3306      	adds	r3, #6
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3307      	adds	r3, #7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3308      	adds	r3, #8
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3309      	adds	r3, #9
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	330a      	adds	r3, #10
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	330b      	adds	r3, #11
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	330c      	adds	r3, #12
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	330d      	adds	r3, #13
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	819a      	strh	r2, [r3, #12]

	//CH6의 값이 변하지 않아서 failsafe 발생 X -> CH5로 대체하여 failsafe 진행
	iBus->FailSafe = (data[11] >> 4);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	330b      	adds	r3, #11
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	751a      	strb	r2, [r3, #20]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <iBus_isActive_Failsafe>:

unsigned char iBus_isActive_Failsafe(FSiA6B_iBus* iBus) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7d1b      	ldrb	r3, [r3, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_SPI_Enable>:
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_SPI_SetStandard>:
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 0210 	bic.w	r2, r3, #16
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	605a      	str	r2, [r3, #4]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_SPI_IsActiveFlag_RXNE>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_SPI_IsActiveFlag_TXE>:
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d101      	bne.n	8001f0a <LL_SPI_IsActiveFlag_TXE+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_SPI_ReceiveData8>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	330c      	adds	r3, #12
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_SPI_TransmitData8>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	330c      	adds	r3, #12
 8001f44:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	701a      	strb	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_GPIO_IsInputPinSet>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_GPIO_SetOutputPin>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_GPIO_ResetOutputPin>:
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	041a      	lsls	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_AHB1_GRP1_EnableClock>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc8:	4907      	ldr	r1, [pc, #28]	; (8001fe8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40023800 	.word	0x40023800

08001fec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40023800 	.word	0x40023800

0800201c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b090      	sub	sp, #64	; 0x40
 8002020:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	2228      	movs	r2, #40	; 0x28
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f007 ff86 	bl	8009f3c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]
 800203e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002040:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002044:	f7ff ffd2 	bl	8001fec <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002048:	2001      	movs	r0, #1
 800204a:	f7ff ffb7 	bl	8001fbc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800204e:	2004      	movs	r0, #4
 8002050:	f7ff ffb4 	bl	8001fbc <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002054:	23e0      	movs	r3, #224	; 0xe0
 8002056:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002058:	2302      	movs	r3, #2
 800205a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002068:	2305      	movs	r3, #5
 800206a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	463b      	mov	r3, r7
 800206e:	4619      	mov	r1, r3
 8002070:	4825      	ldr	r0, [pc, #148]	; (8002108 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002072:	f006 ff3e 	bl	8008ef2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800207a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800207e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002084:	2302      	movs	r3, #2
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002088:	2301      	movs	r3, #1
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800208c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002092:	2310      	movs	r3, #16
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800209e:	230a      	movs	r3, #10
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	4619      	mov	r1, r3
 80020a8:	4818      	ldr	r0, [pc, #96]	; (800210c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80020aa:	f007 f8f2 	bl	8009292 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80020ae:	2100      	movs	r1, #0
 80020b0:	4816      	ldr	r0, [pc, #88]	; (800210c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80020b2:	f7ff fef8 	bl	8001ea6 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80020b6:	2110      	movs	r1, #16
 80020b8:	4815      	ldr	r0, [pc, #84]	; (8002110 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80020ba:	f7ff ff70 	bl	8001f9e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80020be:	2310      	movs	r3, #16
 80020c0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020c2:	2301      	movs	r3, #1
 80020c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80020d2:	463b      	mov	r3, r7
 80020d4:	4619      	mov	r1, r3
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80020d8:	f006 ff0b 	bl	8008ef2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80020dc:	2320      	movs	r3, #32
 80020de:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80020e8:	463b      	mov	r3, r7
 80020ea:	4619      	mov	r1, r3
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80020ee:	f006 ff00 	bl	8008ef2 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80020f4:	f7ff fec7 	bl	8001e86 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80020f8:	2110      	movs	r1, #16
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80020fc:	f7ff ff41 	bl	8001f82 <LL_GPIO_SetOutputPin>
}
 8002100:	bf00      	nop
 8002102:	3740      	adds	r7, #64	; 0x40
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40020000 	.word	0x40020000
 800210c:	40013000 	.word	0x40013000
 8002110:	40020800 	.word	0x40020800

08002114 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800211e:	bf00      	nop
 8002120:	480c      	ldr	r0, [pc, #48]	; (8002154 <SPI1_SendByte+0x40>)
 8002122:	f7ff fee6 	bl	8001ef2 <LL_SPI_IsActiveFlag_TXE>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f9      	beq.n	8002120 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	4619      	mov	r1, r3
 8002130:	4808      	ldr	r0, [pc, #32]	; (8002154 <SPI1_SendByte+0x40>)
 8002132:	f7ff feff 	bl	8001f34 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002136:	bf00      	nop
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <SPI1_SendByte+0x40>)
 800213a:	f7ff fec7 	bl	8001ecc <LL_SPI_IsActiveFlag_RXNE>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f9      	beq.n	8002138 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <SPI1_SendByte+0x40>)
 8002146:	f7ff fee7 	bl	8001f18 <LL_SPI_ReceiveData8>
 800214a:	4603      	mov	r3, r0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013000 	.word	0x40013000

08002158 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002162:	2110      	movs	r1, #16
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <ICM20602_Readbyte+0x3c>)
 8002166:	f7ff ff1a 	bl	8001f9e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ffce 	bl	8002114 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002178:	2000      	movs	r0, #0
 800217a:	f7ff ffcb 	bl	8002114 <SPI1_SendByte>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002182:	2110      	movs	r1, #16
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <ICM20602_Readbyte+0x3c>)
 8002186:	f7ff fefc 	bl	8001f82 <LL_GPIO_SetOutputPin>
	
	return val;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40020800 	.word	0x40020800

08002198 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	603a      	str	r2, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	460b      	mov	r3, r1
 80021a6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80021ac:	2110      	movs	r1, #16
 80021ae:	4810      	ldr	r0, [pc, #64]	; (80021f0 <ICM20602_Readbytes+0x58>)
 80021b0:	f7ff fef5 	bl	8001f9e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ffa9 	bl	8002114 <SPI1_SendByte>
	while(i < len)
 80021c2:	e009      	b.n	80021d8 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60fa      	str	r2, [r7, #12]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	18d4      	adds	r4, r2, r3
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff ffa0 	bl	8002114 <SPI1_SendByte>
 80021d4:	4603      	mov	r3, r0
 80021d6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80021d8:	79bb      	ldrb	r3, [r7, #6]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3f1      	bcc.n	80021c4 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80021e0:	2110      	movs	r1, #16
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <ICM20602_Readbytes+0x58>)
 80021e4:	f7ff fecd 	bl	8001f82 <LL_GPIO_SetOutputPin>
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}
 80021f0:	40020800 	.word	0x40020800

080021f4 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002204:	2110      	movs	r1, #16
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <ICM20602_Writebyte+0x40>)
 8002208:	f7ff fec9 	bl	8001f9e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff7d 	bl	8002114 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff79 	bl	8002114 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002222:	2110      	movs	r1, #16
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <ICM20602_Writebyte+0x40>)
 8002226:	f7ff feac 	bl	8001f82 <LL_GPIO_SetOutputPin>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020800 	.word	0x40020800

08002238 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800224c:	463b      	mov	r3, r7
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002254:	f7ff fee2 	bl	800201c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8002258:	4833      	ldr	r0, [pc, #204]	; (8002328 <ICM20602_Initialization+0xf0>)
 800225a:	f008 fae1 	bl	800a820 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800225e:	2075      	movs	r0, #117	; 0x75
 8002260:	f7ff ff7a 	bl	8002158 <ICM20602_Readbyte>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b12      	cmp	r3, #18
 800226c:	d105      	bne.n	800227a <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	4619      	mov	r1, r3
 8002272:	482e      	ldr	r0, [pc, #184]	; (800232c <ICM20602_Initialization+0xf4>)
 8002274:	f008 fad4 	bl	800a820 <iprintf>
 8002278:	e012      	b.n	80022a0 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b12      	cmp	r3, #18
 800227e:	d00f      	beq.n	80022a0 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002280:	2075      	movs	r0, #117	; 0x75
 8002282:	f7ff ff69 	bl	8002158 <ICM20602_Readbyte>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b12      	cmp	r3, #18
 800228e:	d007      	beq.n	80022a0 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2212      	movs	r2, #18
 8002294:	4619      	mov	r1, r3
 8002296:	4826      	ldr	r0, [pc, #152]	; (8002330 <ICM20602_Initialization+0xf8>)
 8002298:	f008 fac2 	bl	800a820 <iprintf>
			return 1; //ERROR
 800229c:	2301      	movs	r3, #1
 800229e:	e03f      	b.n	8002320 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	206b      	movs	r0, #107	; 0x6b
 80022a4:	f7ff ffa6 	bl	80021f4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022a8:	2032      	movs	r0, #50	; 0x32
 80022aa:	f003 fd47 	bl	8005d3c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80022ae:	2101      	movs	r1, #1
 80022b0:	206b      	movs	r0, #107	; 0x6b
 80022b2:	f7ff ff9f 	bl	80021f4 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80022b6:	2032      	movs	r0, #50	; 0x32
 80022b8:	f003 fd40 	bl	8005d3c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 80022bc:	2138      	movs	r1, #56	; 0x38
 80022be:	206c      	movs	r0, #108	; 0x6c
 80022c0:	f7ff ff98 	bl	80021f4 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80022c4:	2032      	movs	r0, #50	; 0x32
 80022c6:	f003 fd39 	bl	8005d3c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80022ca:	2100      	movs	r1, #0
 80022cc:	2019      	movs	r0, #25
 80022ce:	f7ff ff91 	bl	80021f4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022d2:	2032      	movs	r0, #50	; 0x32
 80022d4:	f003 fd32 	bl	8005d3c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80022d8:	2105      	movs	r1, #5
 80022da:	201a      	movs	r0, #26
 80022dc:	f7ff ff8a 	bl	80021f4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022e0:	2032      	movs	r0, #50	; 0x32
 80022e2:	f003 fd2b 	bl	8005d3c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80022e6:	2118      	movs	r1, #24
 80022e8:	201b      	movs	r0, #27
 80022ea:	f7ff ff83 	bl	80021f4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022ee:	2032      	movs	r0, #50	; 0x32
 80022f0:	f003 fd24 	bl	8005d3c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80022f4:	2118      	movs	r1, #24
 80022f6:	201c      	movs	r0, #28
 80022f8:	f7ff ff7c 	bl	80021f4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022fc:	2032      	movs	r0, #50	; 0x32
 80022fe:	f003 fd1d 	bl	8005d3c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002302:	2103      	movs	r1, #3
 8002304:	201d      	movs	r0, #29
 8002306:	f7ff ff75 	bl	80021f4 <ICM20602_Writebyte>
	HAL_Delay(50);
 800230a:	2032      	movs	r0, #50	; 0x32
 800230c:	f003 fd16 	bl	8005d3c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002310:	2101      	movs	r1, #1
 8002312:	2038      	movs	r0, #56	; 0x38
 8002314:	f7ff ff6e 	bl	80021f4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002318:	2032      	movs	r0, #50	; 0x32
 800231a:	f003 fd0f 	bl	8005d3c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	0800d81c 	.word	0x0800d81c
 800232c:	0800d834 	.word	0x0800d834
 8002330:	0800d858 	.word	0x0800d858

08002334 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	461a      	mov	r2, r3
 8002342:	2106      	movs	r1, #6
 8002344:	2043      	movs	r0, #67	; 0x43
 8002346:	f7ff ff27 	bl	8002198 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 800234a:	7a3b      	ldrb	r3, [r7, #8]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b21a      	sxth	r2, r3
 8002350:	7a7b      	ldrb	r3, [r7, #9]
 8002352:	b21b      	sxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b21a      	sxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 800235c:	7abb      	ldrb	r3, [r7, #10]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	b219      	sxth	r1, r3
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	b21a      	sxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3302      	adds	r3, #2
 800236a:	430a      	orrs	r2, r1
 800236c:	b212      	sxth	r2, r2
 800236e:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8002370:	7b3b      	ldrb	r3, [r7, #12]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b219      	sxth	r1, r3
 8002376:	7b7b      	ldrb	r3, [r7, #13]
 8002378:	b21a      	sxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	430a      	orrs	r2, r1
 8002380:	b212      	sxth	r2, r2
 8002382:	801a      	strh	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002390:	2120      	movs	r1, #32
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <ICM20602_DataReady+0x14>)
 8002394:	f7ff fde0 	bl	8001f58 <LL_GPIO_IsInputPinSet>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40020800 	.word	0x40020800

080023a4 <LL_SPI_Enable>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_SPI_SetStandard>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f023 0210 	bic.w	r2, r3, #16
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_SPI_IsActiveFlag_RXNE>:
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_SPI_IsActiveFlag_TXE>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d101      	bne.n	8002428 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_SPI_ReceiveData8>:
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	330c      	adds	r3, #12
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_SPI_TransmitData8>:
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	330c      	adds	r3, #12
 8002462:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	701a      	strb	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_GPIO_IsInputPinSet>:
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4013      	ands	r3, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_GPIO_SetOutputPin>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	619a      	str	r2, [r3, #24]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_GPIO_ResetOutputPin>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	619a      	str	r2, [r3, #24]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <LL_AHB1_GRP1_EnableClock>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4013      	ands	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40023800 	.word	0x40023800

0800250c <LL_APB1_GRP1_EnableClock>:
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <LL_APB1_GRP1_EnableClock+0x2c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4313      	orrs	r3, r2
 800251e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4013      	ands	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40023800 	.word	0x40023800

0800253c <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b090      	sub	sp, #64	; 0x40
 8002540:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002542:	f107 0318 	add.w	r3, r7, #24
 8002546:	2228      	movs	r2, #40	; 0x28
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f007 fcf6 	bl	8009f3c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	463b      	mov	r3, r7
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	611a      	str	r2, [r3, #16]
 800255e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002560:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002564:	f7ff ffd2 	bl	800250c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002568:	2002      	movs	r0, #2
 800256a:	f7ff ffb7 	bl	80024dc <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800256e:	2338      	movs	r3, #56	; 0x38
 8002570:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002572:	2302      	movs	r3, #2
 8002574:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002582:	2306      	movs	r3, #6
 8002584:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	463b      	mov	r3, r7
 8002588:	4619      	mov	r1, r3
 800258a:	4826      	ldr	r0, [pc, #152]	; (8002624 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800258c:	f006 fcb1 	bl	8008ef2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002594:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002598:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800259e:	2302      	movs	r3, #2
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80025a2:	2301      	movs	r3, #1
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80025a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80025ac:	2308      	movs	r3, #8
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80025b8:	230a      	movs	r3, #10
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80025bc:	f107 0318 	add.w	r3, r7, #24
 80025c0:	4619      	mov	r1, r3
 80025c2:	4819      	ldr	r0, [pc, #100]	; (8002628 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80025c4:	f006 fe65 	bl	8009292 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80025c8:	2100      	movs	r1, #0
 80025ca:	4817      	ldr	r0, [pc, #92]	; (8002628 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80025cc:	f7ff fefa 	bl	80023c4 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80025d0:	2140      	movs	r1, #64	; 0x40
 80025d2:	4814      	ldr	r0, [pc, #80]	; (8002624 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80025d4:	f7ff ff72 	bl	80024bc <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80025d8:	2340      	movs	r3, #64	; 0x40
 80025da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025dc:	2301      	movs	r3, #1
 80025de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80025ec:	463b      	mov	r3, r7
 80025ee:	4619      	mov	r1, r3
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80025f2:	f006 fc7e 	bl	8008ef2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025fe:	2301      	movs	r3, #1
 8002600:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8002602:	463b      	mov	r3, r7
 8002604:	4619      	mov	r1, r3
 8002606:	4807      	ldr	r0, [pc, #28]	; (8002624 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002608:	f006 fc73 	bl	8008ef2 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 800260c:	4806      	ldr	r0, [pc, #24]	; (8002628 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800260e:	f7ff fec9 	bl	80023a4 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8002612:	2140      	movs	r1, #64	; 0x40
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002616:	f7ff ff43 	bl	80024a0 <LL_GPIO_SetOutputPin>
}
 800261a:	bf00      	nop
 800261c:	3740      	adds	r7, #64	; 0x40
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40020400 	.word	0x40020400
 8002628:	40003c00 	.word	0x40003c00

0800262c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8002636:	bf00      	nop
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <SPI3_SendByte+0x40>)
 800263a:	f7ff fee9 	bl	8002410 <LL_SPI_IsActiveFlag_TXE>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f9      	beq.n	8002638 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	4619      	mov	r1, r3
 8002648:	4808      	ldr	r0, [pc, #32]	; (800266c <SPI3_SendByte+0x40>)
 800264a:	f7ff ff02 	bl	8002452 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800264e:	bf00      	nop
 8002650:	4806      	ldr	r0, [pc, #24]	; (800266c <SPI3_SendByte+0x40>)
 8002652:	f7ff feca 	bl	80023ea <LL_SPI_IsActiveFlag_RXNE>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f9      	beq.n	8002650 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 800265c:	4803      	ldr	r0, [pc, #12]	; (800266c <SPI3_SendByte+0x40>)
 800265e:	f7ff feea 	bl	8002436 <LL_SPI_ReceiveData8>
 8002662:	4603      	mov	r3, r0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40003c00 	.word	0x40003c00

08002670 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800267a:	2140      	movs	r1, #64	; 0x40
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <LPS22HH_Readbyte+0x3c>)
 800267e:	f7ff ff1d 	bl	80024bc <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ffce 	bl	800262c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff ffcb 	bl	800262c <SPI3_SendByte>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800269a:	2140      	movs	r1, #64	; 0x40
 800269c:	4803      	ldr	r0, [pc, #12]	; (80026ac <LPS22HH_Readbyte+0x3c>)
 800269e:	f7ff feff 	bl	80024a0 <LL_GPIO_SetOutputPin>
	
	return val;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40020400 	.word	0x40020400

080026b0 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	603a      	str	r2, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	460b      	mov	r3, r1
 80026be:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	4810      	ldr	r0, [pc, #64]	; (8002708 <LPS22HH_Readbytes+0x58>)
 80026c8:	f7ff fef8 	bl	80024bc <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ffa9 	bl	800262c <SPI3_SendByte>
	while(i < len)
 80026da:	e009      	b.n	80026f0 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	60fa      	str	r2, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	18d4      	adds	r4, r2, r3
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff ffa0 	bl	800262c <SPI3_SendByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80026f0:	79bb      	ldrb	r3, [r7, #6]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3f1      	bcc.n	80026dc <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4803      	ldr	r0, [pc, #12]	; (8002708 <LPS22HH_Readbytes+0x58>)
 80026fc:	f7ff fed0 	bl	80024a0 <LL_GPIO_SetOutputPin>
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bd90      	pop	{r4, r7, pc}
 8002708:	40020400 	.word	0x40020400

0800270c <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 800271c:	2140      	movs	r1, #64	; 0x40
 800271e:	480b      	ldr	r0, [pc, #44]	; (800274c <LPS22HH_Writebyte+0x40>)
 8002720:	f7ff fecc 	bl	80024bc <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff7d 	bl	800262c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8002732:	79bb      	ldrb	r3, [r7, #6]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff79 	bl	800262c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	4803      	ldr	r0, [pc, #12]	; (800274c <LPS22HH_Writebyte+0x40>)
 800273e:	f7ff feaf 	bl	80024a0 <LL_GPIO_SetOutputPin>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40020400 	.word	0x40020400

08002750 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 800275a:	f7ff feef 	bl	800253c <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 800275e:	4841      	ldr	r0, [pc, #260]	; (8002864 <LPS22HH_Initialization+0x114>)
 8002760:	f008 f85e 	bl	800a820 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002764:	200f      	movs	r0, #15
 8002766:	f7ff ff83 	bl	8002670 <LPS22HH_Readbyte>
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	2bb3      	cmp	r3, #179	; 0xb3
 8002772:	d105      	bne.n	8002780 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4619      	mov	r1, r3
 8002778:	483b      	ldr	r0, [pc, #236]	; (8002868 <LPS22HH_Initialization+0x118>)
 800277a:	f008 f851 	bl	800a820 <iprintf>
 800277e:	e012      	b.n	80027a6 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2bb3      	cmp	r3, #179	; 0xb3
 8002784:	d00f      	beq.n	80027a6 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002786:	200f      	movs	r0, #15
 8002788:	f7ff ff72 	bl	8002670 <LPS22HH_Readbyte>
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2bb3      	cmp	r3, #179	; 0xb3
 8002794:	d007      	beq.n	80027a6 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	22b3      	movs	r2, #179	; 0xb3
 800279a:	4619      	mov	r1, r3
 800279c:	4833      	ldr	r0, [pc, #204]	; (800286c <LPS22HH_Initialization+0x11c>)
 800279e:	f008 f83f 	bl	800a820 <iprintf>
			return 1; //ERROR
 80027a2:	2301      	movs	r3, #1
 80027a4:	e059      	b.n	800285a <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80027a6:	2104      	movs	r1, #4
 80027a8:	2011      	movs	r0, #17
 80027aa:	f7ff ffaf 	bl	800270c <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80027ae:	2011      	movs	r0, #17
 80027b0:	f7ff ff5e 	bl	8002670 <LPS22HH_Readbyte>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f7      	bne.n	80027ae <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80027be:	2010      	movs	r0, #16
 80027c0:	f7ff ff56 	bl	8002670 <LPS22HH_Readbyte>
 80027c4:	4603      	mov	r3, r0
 80027c6:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80027c8:	79bb      	ldrb	r3, [r7, #6]
 80027ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ce:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80027d0:	79bb      	ldrb	r3, [r7, #6]
 80027d2:	4619      	mov	r1, r3
 80027d4:	2010      	movs	r0, #16
 80027d6:	f7ff ff99 	bl	800270c <LPS22HH_Writebyte>
	temp_reg = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80027de:	2010      	movs	r0, #16
 80027e0:	f7ff ff46 	bl	8002670 <LPS22HH_Readbyte>
 80027e4:	4603      	mov	r3, r0
 80027e6:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80027e8:	2010      	movs	r0, #16
 80027ea:	f7ff ff41 	bl	8002670 <LPS22HH_Readbyte>
 80027ee:	4603      	mov	r3, r0
 80027f0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	f043 030c 	orr.w	r3, r3, #12
 80027f8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80027fa:	79bb      	ldrb	r3, [r7, #6]
 80027fc:	4619      	mov	r1, r3
 80027fe:	2010      	movs	r0, #16
 8002800:	f7ff ff84 	bl	800270c <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002804:	2010      	movs	r0, #16
 8002806:	f7ff ff33 	bl	8002670 <LPS22HH_Readbyte>
 800280a:	4603      	mov	r3, r0
 800280c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	4619      	mov	r1, r3
 800281a:	2010      	movs	r0, #16
 800281c:	f7ff ff76 	bl	800270c <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002820:	2011      	movs	r0, #17
 8002822:	f7ff ff25 	bl	8002670 <LPS22HH_Readbyte>
 8002826:	4603      	mov	r3, r0
 8002828:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800282a:	79bb      	ldrb	r3, [r7, #6]
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	4619      	mov	r1, r3
 8002836:	2011      	movs	r0, #17
 8002838:	f7ff ff68 	bl	800270c <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 800283c:	2012      	movs	r0, #18
 800283e:	f7ff ff17 	bl	8002670 <LPS22HH_Readbyte>
 8002842:	4603      	mov	r3, r0
 8002844:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 800284e:	79bb      	ldrb	r3, [r7, #6]
 8002850:	4619      	mov	r1, r3
 8002852:	2012      	movs	r0, #18
 8002854:	f7ff ff5a 	bl	800270c <LPS22HH_Writebyte>
	
	return 0; //OK
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	0800d884 	.word	0x0800d884
 8002868:	0800d898 	.word	0x0800d898
 800286c:	0800d8bc 	.word	0x0800d8bc

08002870 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <LPS22HH_DataReady+0x14>)
 8002878:	f7ff fdfd 	bl	8002476 <LL_GPIO_IsInputPinSet>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40020400 	.word	0x40020400

08002888 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	2103      	movs	r1, #3
 8002894:	2028      	movs	r0, #40	; 0x28
 8002896:	f7ff ff0b 	bl	80026b0 <LPS22HH_Readbytes>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	2102      	movs	r1, #2
 80028ae:	202b      	movs	r0, #43	; 0x2b
 80028b0:	f7ff fefe 	bl	80026b0 <LPS22HH_Readbytes>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80028c6:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 80028ca:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002914 <getAltitude2+0x58>
 80028ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80028d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028d6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002918 <getAltitude2+0x5c>
 80028da:	eeb0 0a47 	vmov.f32	s0, s14
 80028de:	f00a f907 	bl	800caf0 <powf>
 80028e2:	eef0 7a40 	vmov.f32	s15, s0
 80028e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028ee:	edd7 7a00 	vldr	s15, [r7]
 80028f2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800291c <getAltitude2+0x60>
 80028f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002920 <getAltitude2+0x64>
 8002902:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002906:	eef0 7a66 	vmov.f32	s15, s13
}
 800290a:	eeb0 0a67 	vmov.f32	s0, s15
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	447d5000 	.word	0x447d5000
 8002918:	3e42c9b7 	.word	0x3e42c9b7
 800291c:	43889333 	.word	0x43889333
 8002920:	3bd4fdf4 	.word	0x3bd4fdf4

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60da      	str	r2, [r3, #12]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	615a      	str	r2, [r3, #20]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	605a      	str	r2, [r3, #4]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <LL_AHB1_GRP1_EnableClock>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad4:	4907      	ldr	r1, [pc, #28]	; (8002af4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40023800 	.word	0x40023800

08002af8 <LL_APB1_GRP1_EnableClock>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4013      	ands	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40023800 	.word	0x40023800

08002b28 <M8N_TransmitDATA>:
	0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitDATA(unsigned char* data, unsigned char len) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < len; i++) {
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e011      	b.n	8002b5e <M8N_TransmitDATA+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002b3a:	bf00      	nop
 8002b3c:	480c      	ldr	r0, [pc, #48]	; (8002b70 <M8N_TransmitDATA+0x48>)
 8002b3e:	f7ff ffa0 	bl	8002a82 <LL_USART_IsActiveFlag_TXE>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f9      	beq.n	8002b3c <M8N_TransmitDATA+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <M8N_TransmitDATA+0x48>)
 8002b54:	f7ff ffa8 	bl	8002aa8 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++) {
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dbe9      	blt.n	8002b3a <M8N_TransmitDATA+0x12>
	}
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40004c00 	.word	0x40004c00

08002b74 <M8N_UART4_Initialzation>:

void M8N_UART4_Initialzation(void){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */

	  /* USER CODE END UART4_Init 0 */

	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
 8002b9c:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002b9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ba2:	f7ff ffa9 	bl	8002af8 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002ba6:	2004      	movs	r0, #4
 8002ba8:	f7ff ff8e 	bl	8002ac8 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002bac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bb0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4819      	ldr	r0, [pc, #100]	; (8002c30 <M8N_UART4_Initialzation+0xbc>)
 8002bcc:	f006 f991 	bl	8008ef2 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002bd0:	f7ff fea8 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fef8 	bl	80029d0 <NVIC_EncodePriority>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4619      	mov	r1, r3
 8002be4:	2034      	movs	r0, #52	; 0x34
 8002be6:	f7ff fec9 	bl	800297c <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002bea:	2034      	movs	r0, #52	; 0x34
 8002bec:	f7ff fea8 	bl	8002940 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002bf0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002bf4:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c02:	230c      	movs	r3, #12
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <M8N_UART4_Initialzation+0xc0>)
 8002c16:	f007 f8e7 	bl	8009de8 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002c1a:	4806      	ldr	r0, [pc, #24]	; (8002c34 <M8N_UART4_Initialzation+0xc0>)
 8002c1c:	f7ff ff1b 	bl	8002a56 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002c20:	4804      	ldr	r0, [pc, #16]	; (8002c34 <M8N_UART4_Initialzation+0xc0>)
 8002c22:	f7ff ff08 	bl	8002a36 <LL_USART_Enable>
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */
}
 8002c26:	bf00      	nop
 8002c28:	3738      	adds	r7, #56	; 0x38
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40004c00 	.word	0x40004c00

08002c38 <M8N_Initialzation>:

void M8N_Initialzation(void) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	M8N_UART4_Initialzation();
 8002c3c:	f7ff ff9a 	bl	8002b74 <M8N_UART4_Initialzation>

	M8N_TransmitDATA(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002c40:	211c      	movs	r1, #28
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <M8N_Initialzation+0x40>)
 8002c44:	f7ff ff70 	bl	8002b28 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002c48:	2064      	movs	r0, #100	; 0x64
 8002c4a:	f003 f877 	bl	8005d3c <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002c4e:	2110      	movs	r1, #16
 8002c50:	480a      	ldr	r0, [pc, #40]	; (8002c7c <M8N_Initialzation+0x44>)
 8002c52:	f7ff ff69 	bl	8002b28 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002c56:	2064      	movs	r0, #100	; 0x64
 8002c58:	f003 f870 	bl	8005d3c <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002c5c:	210e      	movs	r1, #14
 8002c5e:	4808      	ldr	r0, [pc, #32]	; (8002c80 <M8N_Initialzation+0x48>)
 8002c60:	f7ff ff62 	bl	8002b28 <M8N_TransmitDATA>
	HAL_Delay(100);
 8002c64:	2064      	movs	r0, #100	; 0x64
 8002c66:	f003 f869 	bl	8005d3c <HAL_Delay>
	M8N_TransmitDATA(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002c6a:	2115      	movs	r1, #21
 8002c6c:	4805      	ldr	r0, [pc, #20]	; (8002c84 <M8N_Initialzation+0x4c>)
 8002c6e:	f7ff ff5b 	bl	8002b28 <M8N_TransmitDATA>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	0800dae0 	.word	0x0800dae0
 8002c7c:	0800dafc 	.word	0x0800dafc
 8002c80:	0800db0c 	.word	0x0800db0c
 8002c84:	0800db1c 	.word	0x0800db1c

08002c88 <M8N_UBX_CHKSUM_Check>:
unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len) {
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73bb      	strb	r3, [r7, #14]

	for(int i = 2; i< len-2; i++) {
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	e00d      	b.n	8002cbe <M8N_UBX_CHKSUM_Check+0x36>
		CK_A = CK_A + data[i];
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	4413      	add	r3, r2
 8002cae:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002cb0:	7bba      	ldrb	r2, [r7, #14]
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	73bb      	strb	r3, [r7, #14]
	for(int i = 2; i< len-2; i++) {
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	3b02      	subs	r3, #2
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	dbec      	blt.n	8002ca2 <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return(CK_A == data[len-2] && CK_B == data[len-1]);
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	3b02      	subs	r3, #2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d109      	bne.n	8002cec <M8N_UBX_CHKSUM_Check+0x64>
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	7bba      	ldrb	r2, [r7, #14]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d101      	bne.n	8002cec <M8N_UBX_CHKSUM_Check+0x64>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <M8N_UBX_CHKSUM_Check+0x66>
 8002cec:	2300      	movs	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <M8N_UBX_NAV_POSLLH_Pasing>:

void M8N_UBX_NAV_POSLLH_Pasing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh){
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	789a      	ldrb	r2, [r3, #2]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	78da      	ldrb	r2, [r3, #3]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data[5]<<8;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b21a      	sxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3305      	adds	r3, #5
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3306      	adds	r3, #6
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3307      	adds	r3, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3308      	adds	r3, #8
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3309      	adds	r3, #9
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	4313      	orrs	r3, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	330a      	adds	r3, #10
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	330b      	adds	r3, #11
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	330c      	adds	r3, #12
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	330d      	adds	r3, #13
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	431a      	orrs	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	330e      	adds	r3, #14
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	330f      	adds	r3, #15
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3310      	adds	r3, #16
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3311      	adds	r3, #17
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	061b      	lsls	r3, r3, #24
 8002dac:	431a      	orrs	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3312      	adds	r3, #18
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3313      	adds	r3, #19
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3314      	adds	r3, #20
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3315      	adds	r3, #21
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3316      	adds	r3, #22
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3317      	adds	r3, #23
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3318      	adds	r3, #24
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3319      	adds	r3, #25
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	061b      	lsls	r3, r3, #24
 8002e00:	431a      	orrs	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	331a      	adds	r3, #26
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	331b      	adds	r3, #27
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	331c      	adds	r3, #28
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	331d      	adds	r3, #29
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	331e      	adds	r3, #30
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	331f      	adds	r3, #31
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3320      	adds	r3, #32
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3321      	adds	r3, #33	; 0x21
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	4313      	orrs	r3, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;
//	posllh->lat_f64 = posllh->lat / 10000000.;
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	edd3 6a00 	vldr	s13, [r3]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	edd3 6a00 	vldr	s13, [r3]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	edd3 6a00 	vldr	s13, [r3]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed0:	f000 f90e 	bl	80030f0 <invSqrt>
 8002ed4:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3308      	adds	r3, #8
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	330c      	adds	r3, #12
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002f26:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f32:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f42:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f46:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f72:	eef0 0a67 	vmov.f32	s1, s15
 8002f76:	eeb0 0a66 	vmov.f32	s0, s13
 8002f7a:	f009 fdb7 	bl	800caec <atan2f>
 8002f7e:	eef0 7a40 	vmov.f32	s15, s0
 8002f82:	4b55      	ldr	r3, [pc, #340]	; (80030d8 <Quaternion_Update+0x26c>)
 8002f84:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002f88:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f94:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fac:	f009 fd72 	bl	800ca94 <asinf>
 8002fb0:	eef0 7a40 	vmov.f32	s15, s0
 8002fb4:	eef1 7a67 	vneg.f32	s15, s15
 8002fb8:	4b48      	ldr	r3, [pc, #288]	; (80030dc <Quaternion_Update+0x270>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002fbe:	ed97 7a06 	vldr	s14, [r7, #24]
 8002fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fca:	edd7 6a04 	vldr	s13, [r7, #16]
 8002fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fda:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002fde:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fe2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003002:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300a:	eef0 0a67 	vmov.f32	s1, s15
 800300e:	eeb0 0a66 	vmov.f32	s0, s13
 8003012:	f009 fd6b 	bl	800caec <atan2f>
 8003016:	eef0 7a40 	vmov.f32	s15, s0
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <Quaternion_Update+0x274>)
 800301c:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <Quaternion_Update+0x26c>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80030e4 <Quaternion_Update+0x278>
 800302a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302e:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <Quaternion_Update+0x26c>)
 8003030:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <Quaternion_Update+0x270>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80030e4 <Quaternion_Update+0x278>
 800303e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <Quaternion_Update+0x270>)
 8003044:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <Quaternion_Update+0x274>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80030e4 <Quaternion_Update+0x278>
 8003052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <Quaternion_Update+0x274>)
 8003058:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <Quaternion_Update+0x274>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306a:	db0a      	blt.n	8003082 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 800306c:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <Quaternion_Update+0x274>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80030e8 <Quaternion_Update+0x27c>
 8003076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <Quaternion_Update+0x274>)
 800307c:	edc3 7a00 	vstr	s15, [r3]
 8003080:	e007      	b.n	8003092 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <Quaternion_Update+0x274>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	eef1 7a67 	vneg.f32	s15, s15
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <Quaternion_Update+0x274>)
 800308e:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <Quaternion_Update+0x26c>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	db0a      	blt.n	80030b8 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <Quaternion_Update+0x26c>)
 80030a4:	edd3 7a00 	vldr	s15, [r3]
 80030a8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80030ec <Quaternion_Update+0x280>
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <Quaternion_Update+0x26c>)
 80030b2:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 80030b6:	e00b      	b.n	80030d0 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <Quaternion_Update+0x26c>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80030ec <Quaternion_Update+0x280>
 80030c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030c6:	eef1 7a67 	vneg.f32	s15, s15
 80030ca:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <Quaternion_Update+0x26c>)
 80030cc:	edc3 7a00 	vstr	s15, [r3]
}
 80030d0:	bf00      	nop
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	2000034c 	.word	0x2000034c
 80030dc:	20000348 	.word	0x20000348
 80030e0:	20000350 	.word	0x20000350
 80030e4:	42652ee1 	.word	0x42652ee1
 80030e8:	43b40000 	.word	0x43b40000
 80030ec:	43340000 	.word	0x43340000

080030f0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80030fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003106:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800310e:	f107 0310 	add.w	r3, r7, #16
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	105a      	asrs	r2, r3, #1
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <invSqrt+0x74>)
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003120:	f107 030c 	add.w	r3, r7, #12
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003128:	ed97 7a04 	vldr	s14, [r7, #16]
 800312c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003134:	edd7 7a04 	vldr	s15, [r7, #16]
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003140:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003144:	edd7 7a04 	vldr	s15, [r7, #16]
 8003148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	ee07 3a90 	vmov	s15, r3
}
 8003156:	eeb0 0a67 	vmov.f32	s0, s15
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	5f3759df 	.word	0x5f3759df

08003168 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800316e:	463b      	mov	r3, r7
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <MX_ADC1_Init+0x98>)
 800317c:	4a21      	ldr	r2, [pc, #132]	; (8003204 <MX_ADC1_Init+0x9c>)
 800317e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003180:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <MX_ADC1_Init+0x98>)
 8003182:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003186:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <MX_ADC1_Init+0x98>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800318e:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <MX_ADC1_Init+0x98>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <MX_ADC1_Init+0x98>)
 8003196:	2201      	movs	r2, #1
 8003198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <MX_ADC1_Init+0x98>)
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <MX_ADC1_Init+0x98>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <MX_ADC1_Init+0x98>)
 80031aa:	4a17      	ldr	r2, [pc, #92]	; (8003208 <MX_ADC1_Init+0xa0>)
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <MX_ADC1_Init+0x98>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <MX_ADC1_Init+0x98>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <MX_ADC1_Init+0x98>)
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <MX_ADC1_Init+0x98>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <MX_ADC1_Init+0x98>)
 80031ca:	f002 fddb 	bl	8005d84 <HAL_ADC_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031d4:	f001 fb64 	bl	80048a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80031d8:	2308      	movs	r3, #8
 80031da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031dc:	2301      	movs	r3, #1
 80031de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031e0:	2307      	movs	r3, #7
 80031e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031e4:	463b      	mov	r3, r7
 80031e6:	4619      	mov	r1, r3
 80031e8:	4805      	ldr	r0, [pc, #20]	; (8003200 <MX_ADC1_Init+0x98>)
 80031ea:	f002 ff3d 	bl	8006068 <HAL_ADC_ConfigChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80031f4:	f001 fb54 	bl	80048a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000354 	.word	0x20000354
 8003204:	40012000 	.word	0x40012000
 8003208:	0f000001 	.word	0x0f000001

0800320c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <HAL_ADC_MspInit+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d156      	bne.n	80032dc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_ADC_MspInit+0xdc>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <HAL_ADC_MspInit+0xdc>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6453      	str	r3, [r2, #68]	; 0x44
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_ADC_MspInit+0xdc>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <HAL_ADC_MspInit+0xdc>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a25      	ldr	r2, [pc, #148]	; (80032e8 <HAL_ADC_MspInit+0xdc>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_ADC_MspInit+0xdc>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800326a:	2303      	movs	r3, #3
 800326c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	481c      	ldr	r0, [pc, #112]	; (80032ec <HAL_ADC_MspInit+0xe0>)
 800327a:	f003 fea9 	bl	8006fd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_ADC_MspInit+0xe8>)
 8003282:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003284:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 8003286:	2200      	movs	r2, #0
 8003288:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 800329e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 80032a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 80032ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 80032bc:	2200      	movs	r2, #0
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032c0:	480b      	ldr	r0, [pc, #44]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 80032c2:	f003 fa83 	bl	80067cc <HAL_DMA_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80032cc:	f001 fae8 	bl	80048a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38
 80032d6:	4a06      	ldr	r2, [pc, #24]	; (80032f0 <HAL_ADC_MspInit+0xe4>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032dc:	bf00      	nop
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40012000 	.word	0x40012000
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020400 	.word	0x40020400
 80032f0:	2000039c 	.word	0x2000039c
 80032f4:	40026410 	.word	0x40026410

080032f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <MX_DMA_Init+0x3c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <MX_DMA_Init+0x3c>)
 8003308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <MX_DMA_Init+0x3c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2038      	movs	r0, #56	; 0x38
 8003320:	f003 fa1d 	bl	800675e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003324:	2038      	movs	r0, #56	; 0x38
 8003326:	f003 fa36 	bl	8006796 <HAL_NVIC_EnableIRQ>

}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <LL_GPIO_SetOutputPin>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	619a      	str	r2, [r3, #24]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_GPIO_ResetOutputPin>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <LL_AHB1_GRP1_EnableClock>:
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800337e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003380:	4907      	ldr	r1, [pc, #28]	; (80033a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4313      	orrs	r3, r2
 8003386:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800338a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40023800 	.word	0x40023800

080033a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033aa:	463b      	mov	r3, r7
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
 80033b8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80033ba:	2004      	movs	r0, #4
 80033bc:	f7ff ffda 	bl	8003374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80033c0:	2080      	movs	r0, #128	; 0x80
 80033c2:	f7ff ffd7 	bl	8003374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f7ff ffd4 	bl	8003374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80033cc:	2002      	movs	r0, #2
 80033ce:	f7ff ffd1 	bl	8003374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80033d2:	2008      	movs	r0, #8
 80033d4:	f7ff ffce 	bl	8003374 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80033d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033dc:	482e      	ldr	r0, [pc, #184]	; (8003498 <MX_GPIO_Init+0xf4>)
 80033de:	f7ff ffab 	bl	8003338 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80033e2:	f240 2117 	movw	r1, #535	; 0x217
 80033e6:	482c      	ldr	r0, [pc, #176]	; (8003498 <MX_GPIO_Init+0xf4>)
 80033e8:	f7ff ffb4 	bl	8003354 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 80033ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80033f0:	482a      	ldr	r0, [pc, #168]	; (800349c <MX_GPIO_Init+0xf8>)
 80033f2:	f7ff ffaf 	bl	8003354 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80033f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033fa:	4829      	ldr	r0, [pc, #164]	; (80034a0 <MX_GPIO_Init+0xfc>)
 80033fc:	f7ff ffaa 	bl	8003354 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8003400:	f242 2317 	movw	r3, #8727	; 0x2217
 8003404:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003406:	2301      	movs	r3, #1
 8003408:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003416:	463b      	mov	r3, r7
 8003418:	4619      	mov	r1, r3
 800341a:	481f      	ldr	r0, [pc, #124]	; (8003498 <MX_GPIO_Init+0xf4>)
 800341c:	f005 fd69 	bl	8008ef2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8003420:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003424:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342e:	463b      	mov	r3, r7
 8003430:	4619      	mov	r1, r3
 8003432:	4819      	ldr	r0, [pc, #100]	; (8003498 <MX_GPIO_Init+0xf4>)
 8003434:	f005 fd5d 	bl	8008ef2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8003438:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800343c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800343e:	2301      	movs	r3, #1
 8003440:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344e:	463b      	mov	r3, r7
 8003450:	4619      	mov	r1, r3
 8003452:	4812      	ldr	r0, [pc, #72]	; (800349c <MX_GPIO_Init+0xf8>)
 8003454:	f005 fd4d 	bl	8008ef2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800345c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800345e:	2301      	movs	r3, #1
 8003460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	463b      	mov	r3, r7
 8003470:	4619      	mov	r1, r3
 8003472:	480b      	ldr	r0, [pc, #44]	; (80034a0 <MX_GPIO_Init+0xfc>)
 8003474:	f005 fd3d 	bl	8008ef2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800347c:	2300      	movs	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003484:	463b      	mov	r3, r7
 8003486:	4619      	mov	r1, r3
 8003488:	4804      	ldr	r0, [pc, #16]	; (800349c <MX_GPIO_Init+0xf8>)
 800348a:	f005 fd32 	bl	8008ef2 <LL_GPIO_Init>

}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40020800 	.word	0x40020800
 800349c:	40020400 	.word	0x40020400
 80034a0:	40020000 	.word	0x40020000

080034a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <MX_I2C1_Init+0x54>)
 80034ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <MX_I2C1_Init+0x58>)
 80034b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <MX_I2C1_Init+0x50>)
 80034e2:	f003 ff11 	bl	8007308 <HAL_I2C_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034ec:	f001 f9d8 	bl	80048a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200003fc 	.word	0x200003fc
 80034f8:	40005400 	.word	0x40005400
 80034fc:	00061a80 	.word	0x00061a80

08003500 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_I2C_MspInit+0x84>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12c      	bne.n	800357c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b18      	ldr	r3, [pc, #96]	; (8003588 <HAL_I2C_MspInit+0x88>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a17      	ldr	r2, [pc, #92]	; (8003588 <HAL_I2C_MspInit+0x88>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_I2C_MspInit+0x88>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800353e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003544:	2312      	movs	r3, #18
 8003546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003550:	2304      	movs	r3, #4
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	480c      	ldr	r0, [pc, #48]	; (800358c <HAL_I2C_MspInit+0x8c>)
 800355c:	f003 fd38 	bl	8006fd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_I2C_MspInit+0x88>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <HAL_I2C_MspInit+0x88>)
 800356a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800356e:	6413      	str	r3, [r2, #64]	; 0x40
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_I2C_MspInit+0x88>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800357c:	bf00      	nop
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40005400 	.word	0x40005400
 8003588:	40023800 	.word	0x40023800
 800358c:	40020400 	.word	0x40020400

08003590 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	601a      	str	r2, [r3, #0]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1a      	ldr	r2, [r3, #32]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	401a      	ands	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60da      	str	r2, [r3, #12]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_USART_IsActiveFlag_TXE>:
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_USART_EnableIT_RXNE>:
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	330c      	adds	r3, #12
 8003648:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	60bb      	str	r3, [r7, #8]
   return(result);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f043 0320 	orr.w	r3, r3, #32
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	330c      	adds	r3, #12
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	61ba      	str	r2, [r7, #24]
 8003662:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6979      	ldr	r1, [r7, #20]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	613b      	str	r3, [r7, #16]
   return(result);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e7      	bne.n	8003644 <LL_USART_EnableIT_RXNE+0x8>
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_USART_TransmitData8>:
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	605a      	str	r2, [r3, #4]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_GPIO_SetOutputPin>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	619a      	str	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_GPIO_ResetOutputPin>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4013      	ands	r3, r2
 80036f0:	041a      	lsls	r2, r3, #16
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	43d9      	mvns	r1, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	400b      	ands	r3, r1
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	619a      	str	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <_write>:
#include "AT24C08.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len){
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e011      	b.n	8003742 <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 800371e:	bf00      	nop
 8003720:	480c      	ldr	r0, [pc, #48]	; (8003754 <_write+0x48>)
 8003722:	f7ff ff78 	bl	8003616 <LL_USART_IsActiveFlag_TXE>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f9      	beq.n	8003720 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p + i));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4413      	add	r3, r2
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	4807      	ldr	r0, [pc, #28]	; (8003754 <_write+0x48>)
 8003738:	f7ff ffa3 	bl	8003682 <LL_USART_TransmitData8>
	for(int i = 0; i < len; i++){
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbe9      	blt.n	800371e <_write+0x12>
	}
	return len;
 800374a:	687b      	ldr	r3, [r7, #4]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40011400 	.word	0x40011400

08003758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003758:	b5b0      	push	{r4, r5, r7, lr}
 800375a:	b0a6      	sub	sp, #152	; 0x98
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float Q[4];
	float quatRadianAccuracy;
   	unsigned char buf_read[16] = {0};
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	f107 0318 	add.w	r3, r7, #24
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800376e:	4bce      	ldr	r3, [pc, #824]	; (8003aa8 <main+0x350>)
 8003770:	1d3c      	adds	r4, r7, #4
 8003772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short adcVal;
	float batvol;
	short gyro_x_offset =12, gyro_y_offset = 16, gyro_z_offset = 9;
 8003778:	230c      	movs	r3, #12
 800377a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800377e:	2310      	movs	r3, #16
 8003780:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8003784:	2309      	movs	r3, #9
 8003786:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	unsigned char motor_arming_flag = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	unsigned short iBus_SwA_Prev = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	unsigned char iBus_rx_cnt = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	unsigned short ccr1, ccr2, ccr3, ccr4;
	float pitch_reference;
	float pitch_p;
	float pitch_error;
	float pitch_i;
	float pitch_error_sum = 0;
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float pitch_pid;
	float pitch_rate_reference;
	float pitch_rate_p;
	float pitch_rate_error;
	float pitch_rate_i;
	float pitch_rate_error_sum = 0;
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ac:	f002 fa54 	bl	8005c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037b0:	f000 fe2a 	bl	8004408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037b4:	f7ff fdf6 	bl	80033a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80037b8:	f7ff fd9e 	bl	80032f8 <MX_DMA_Init>
  MX_TIM3_Init();
 80037bc:	f001 fe28 	bl	8005410 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80037c0:	f002 f970 	bl	8005aa4 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80037c4:	f001 f91e 	bl	8004a04 <MX_SPI2_Init>
  MX_SPI1_Init();
 80037c8:	f001 f8ca 	bl	8004960 <MX_SPI1_Init>
  MX_SPI3_Init();
 80037cc:	f001 f96e 	bl	8004aac <MX_SPI3_Init>
  MX_UART4_Init();
 80037d0:	f002 f864 	bl	800589c <MX_UART4_Init>
  MX_UART5_Init();
 80037d4:	f002 f8c4 	bl	8005960 <MX_UART5_Init>
  MX_TIM5_Init();
 80037d8:	f001 fe8c 	bl	80054f4 <MX_TIM5_Init>
  MX_I2C1_Init();
 80037dc:	f7ff fe62 	bl	80034a4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80037e0:	f7ff fcc2 	bl	8003168 <MX_ADC1_Init>
  MX_TIM7_Init();
 80037e4:	f001 ff28 	bl	8005638 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80037e8:	f002 f932 	bl	8005a50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);//Buzzer
 80037ec:	48af      	ldr	r0, [pc, #700]	; (8003aac <main+0x354>)
 80037ee:	f7ff fecf 	bl	8003590 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM7);
 80037f2:	48af      	ldr	r0, [pc, #700]	; (8003ab0 <main+0x358>)
 80037f4:	f7ff fecc 	bl	8003590 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 80037f8:	48ad      	ldr	r0, [pc, #692]	; (8003ab0 <main+0x358>)
 80037fa:	f7ff fefc 	bl	80035f6 <LL_TIM_EnableIT_UPDATE>

  LL_USART_EnableIT_RXNE(USART6);//Debug UART
 80037fe:	48ad      	ldr	r0, [pc, #692]	; (8003ab4 <main+0x35c>)
 8003800:	f7ff ff1c 	bl	800363c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);//GPS
 8003804:	48ac      	ldr	r0, [pc, #688]	; (8003ab8 <main+0x360>)
 8003806:	f7ff ff19 	bl	800363c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);//FS-iA6B
 800380a:	48ac      	ldr	r0, [pc, #688]	; (8003abc <main+0x364>)
 800380c:	f7ff ff16 	bl	800363c <LL_USART_EnableIT_RXNE>

  LL_TIM_EnableCounter(TIM5);//Motor ADC
 8003810:	48ab      	ldr	r0, [pc, #684]	; (8003ac0 <main+0x368>)
 8003812:	f7ff febd 	bl	8003590 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8003816:	2101      	movs	r1, #1
 8003818:	48a9      	ldr	r0, [pc, #676]	; (8003ac0 <main+0x368>)
 800381a:	f7ff fec9 	bl	80035b0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 800381e:	2110      	movs	r1, #16
 8003820:	48a7      	ldr	r0, [pc, #668]	; (8003ac0 <main+0x368>)
 8003822:	f7ff fec5 	bl	80035b0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800382a:	48a5      	ldr	r0, [pc, #660]	; (8003ac0 <main+0x368>)
 800382c:	f7ff fec0 	bl	80035b0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003834:	48a2      	ldr	r0, [pc, #648]	; (8003ac0 <main+0x368>)
 8003836:	f7ff febb 	bl	80035b0 <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);//Battery ADC
 800383a:	1cbb      	adds	r3, r7, #2
 800383c:	2201      	movs	r2, #1
 800383e:	4619      	mov	r1, r3
 8003840:	48a0      	ldr	r0, [pc, #640]	; (8003ac4 <main+0x36c>)
 8003842:	f002 fae3 	bl	8005e0c <HAL_ADC_Start_DMA>

  TIM3->PSC = 1000;
 8003846:	4b99      	ldr	r3, [pc, #612]	; (8003aac <main+0x354>)
 8003848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800384e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003852:	4896      	ldr	r0, [pc, #600]	; (8003aac <main+0x354>)
 8003854:	f7ff feac 	bl	80035b0 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 8003858:	203c      	movs	r0, #60	; 0x3c
 800385a:	f002 fa6f 	bl	8005d3c <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800385e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003862:	4892      	ldr	r0, [pc, #584]	; (8003aac <main+0x354>)
 8003864:	f7ff feb5 	bl	80035d2 <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 8003868:	203c      	movs	r0, #60	; 0x3c
 800386a:	f002 fa67 	bl	8005d3c <HAL_Delay>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800386e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003872:	488e      	ldr	r0, [pc, #568]	; (8003aac <main+0x354>)
 8003874:	f7ff fe9c 	bl	80035b0 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 8003878:	203c      	movs	r0, #60	; 0x3c
 800387a:	f002 fa5f 	bl	8005d3c <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800387e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003882:	488a      	ldr	r0, [pc, #552]	; (8003aac <main+0x354>)
 8003884:	f7ff fea5 	bl	80035d2 <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 8003888:	203c      	movs	r0, #60	; 0x3c
 800388a:	f002 fa57 	bl	8005d3c <HAL_Delay>
  printf("Checking Sensor connection.\n");
 800388e:	488e      	ldr	r0, [pc, #568]	; (8003ac8 <main+0x370>)
 8003890:	f007 f84c 	bl	800a92c <puts>

  if(BNO080_Initialization() != 0)
 8003894:	f7fd fce0 	bl	8001258 <BNO080_Initialization>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03a      	beq.n	8003914 <main+0x1bc>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800389e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038a2:	4882      	ldr	r0, [pc, #520]	; (8003aac <main+0x354>)
 80038a4:	f7ff fe84 	bl	80035b0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 80038a8:	4b80      	ldr	r3, [pc, #512]	; (8003aac <main+0x354>)
 80038aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80038b0:	2064      	movs	r0, #100	; 0x64
 80038b2:	f002 fa43 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 1500;
 80038b6:	4b7d      	ldr	r3, [pc, #500]	; (8003aac <main+0x354>)
 80038b8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80038be:	2064      	movs	r0, #100	; 0x64
 80038c0:	f002 fa3c 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 2000;
 80038c4:	4b79      	ldr	r3, [pc, #484]	; (8003aac <main+0x354>)
 80038c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80038cc:	2064      	movs	r0, #100	; 0x64
 80038ce:	f002 fa35 	bl	8005d3c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80038d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038d6:	4875      	ldr	r0, [pc, #468]	; (8003aac <main+0x354>)
 80038d8:	f7ff fe7b 	bl	80035d2 <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...");
 80038dc:	487b      	ldr	r0, [pc, #492]	; (8003acc <main+0x374>)
 80038de:	f006 ff9f 	bl	800a820 <iprintf>

	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80038e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038e6:	4871      	ldr	r0, [pc, #452]	; (8003aac <main+0x354>)
 80038e8:	f7ff fe73 	bl	80035d2 <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 80038ec:	2101      	movs	r1, #1
 80038ee:	4878      	ldr	r0, [pc, #480]	; (8003ad0 <main+0x378>)
 80038f0:	f7ff fef3 	bl	80036da <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 80038f4:	20c8      	movs	r0, #200	; 0xc8
 80038f6:	f002 fa21 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80038fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038fe:	486b      	ldr	r0, [pc, #428]	; (8003aac <main+0x354>)
 8003900:	f7ff fe56 	bl	80035b0 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003904:	2101      	movs	r1, #1
 8003906:	4872      	ldr	r0, [pc, #456]	; (8003ad0 <main+0x378>)
 8003908:	f7ff fee7 	bl	80036da <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800390c:	20c8      	movs	r0, #200	; 0xc8
 800390e:	f002 fa15 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003912:	e7e6      	b.n	80038e2 <main+0x18a>
	  }
  }
  BNO080_enableRotationVector(2500);
 8003914:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003918:	f7fd ffdd 	bl	80018d6 <BNO080_enableRotationVector>

  if(ICM20602_Initialization() != 0)
 800391c:	f7fe fc8c 	bl	8002238 <ICM20602_Initialization>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d03a      	beq.n	800399c <main+0x244>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800392a:	4860      	ldr	r0, [pc, #384]	; (8003aac <main+0x354>)
 800392c:	f7ff fe40 	bl	80035b0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 8003930:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <main+0x354>)
 8003932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8003938:	2064      	movs	r0, #100	; 0x64
 800393a:	f002 f9ff 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 1500;
 800393e:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <main+0x354>)
 8003940:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8003946:	2064      	movs	r0, #100	; 0x64
 8003948:	f002 f9f8 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 2000;
 800394c:	4b57      	ldr	r3, [pc, #348]	; (8003aac <main+0x354>)
 800394e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003952:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8003954:	2064      	movs	r0, #100	; 0x64
 8003956:	f002 f9f1 	bl	8005d3c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800395a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800395e:	4853      	ldr	r0, [pc, #332]	; (8003aac <main+0x354>)
 8003960:	f7ff fe37 	bl	80035d2 <LL_TIM_CC_DisableChannel>

	  printf("\nICM-20602 failed. Program shutting down...");
 8003964:	485b      	ldr	r0, [pc, #364]	; (8003ad4 <main+0x37c>)
 8003966:	f006 ff5b 	bl	800a820 <iprintf>

	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800396a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800396e:	484f      	ldr	r0, [pc, #316]	; (8003aac <main+0x354>)
 8003970:	f7ff fe2f 	bl	80035d2 <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003974:	2102      	movs	r1, #2
 8003976:	4856      	ldr	r0, [pc, #344]	; (8003ad0 <main+0x378>)
 8003978:	f7ff feaf 	bl	80036da <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800397c:	20c8      	movs	r0, #200	; 0xc8
 800397e:	f002 f9dd 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003986:	4849      	ldr	r0, [pc, #292]	; (8003aac <main+0x354>)
 8003988:	f7ff fe12 	bl	80035b0 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 800398c:	2102      	movs	r1, #2
 800398e:	4850      	ldr	r0, [pc, #320]	; (8003ad0 <main+0x378>)
 8003990:	f7ff fea3 	bl	80036da <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003994:	20c8      	movs	r0, #200	; 0xc8
 8003996:	f002 f9d1 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800399a:	e7e6      	b.n	800396a <main+0x212>
	  }
  }

  if(LPS22HH_Initialization() != 0)
 800399c:	f7fe fed8 	bl	8002750 <LPS22HH_Initialization>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d03a      	beq.n	8003a1c <main+0x2c4>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039aa:	4840      	ldr	r0, [pc, #256]	; (8003aac <main+0x354>)
 80039ac:	f7ff fe00 	bl	80035b0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 80039b0:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <main+0x354>)
 80039b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	f002 f9bf 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 1500;
 80039be:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <main+0x354>)
 80039c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80039c6:	2064      	movs	r0, #100	; 0x64
 80039c8:	f002 f9b8 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 2000;
 80039cc:	4b37      	ldr	r3, [pc, #220]	; (8003aac <main+0x354>)
 80039ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80039d4:	2064      	movs	r0, #100	; 0x64
 80039d6:	f002 f9b1 	bl	8005d3c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039de:	4833      	ldr	r0, [pc, #204]	; (8003aac <main+0x354>)
 80039e0:	f7ff fdf7 	bl	80035d2 <LL_TIM_CC_DisableChannel>

	  printf("\nLPS22HH failed. Program shutting down...");
 80039e4:	483c      	ldr	r0, [pc, #240]	; (8003ad8 <main+0x380>)
 80039e6:	f006 ff1b 	bl	800a820 <iprintf>

	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ee:	482f      	ldr	r0, [pc, #188]	; (8003aac <main+0x354>)
 80039f0:	f7ff fdef 	bl	80035d2 <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80039f4:	2104      	movs	r1, #4
 80039f6:	4836      	ldr	r0, [pc, #216]	; (8003ad0 <main+0x378>)
 80039f8:	f7ff fe6f 	bl	80036da <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 80039fc:	20c8      	movs	r0, #200	; 0xc8
 80039fe:	f002 f99d 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a06:	4829      	ldr	r0, [pc, #164]	; (8003aac <main+0x354>)
 8003a08:	f7ff fdd2 	bl	80035b0 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003a0c:	2104      	movs	r1, #4
 8003a0e:	4830      	ldr	r0, [pc, #192]	; (8003ad0 <main+0x378>)
 8003a10:	f7ff fe63 	bl	80036da <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003a14:	20c8      	movs	r0, #200	; 0xc8
 8003a16:	f002 f991 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a1a:	e7e6      	b.n	80039ea <main+0x292>
	  }
  }
  printf("All Sensor OK!\n");
 8003a1c:	482f      	ldr	r0, [pc, #188]	; (8003adc <main+0x384>)
 8003a1e:	f006 ff85 	bl	800a92c <puts>
  M8N_Initialzation();
 8003a22:	f7ff f909 	bl	8002c38 <M8N_Initialzation>

  ICM20602_Writebyte(0x13, (gyro_x_offset * -2)>>8);
 8003a26:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	07db      	lsls	r3, r3, #31
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	121b      	asrs	r3, r3, #8
 8003a34:	4619      	mov	r1, r3
 8003a36:	2013      	movs	r0, #19
 8003a38:	f7fe fbdc 	bl	80021f4 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 8003a3c:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8003a40:	4613      	mov	r3, r2
 8003a42:	07db      	lsls	r3, r3, #31
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4619      	mov	r1, r3
 8003a4a:	2014      	movs	r0, #20
 8003a4c:	f7fe fbd2 	bl	80021f4 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset * -2)>>8);
 8003a50:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 8003a54:	4613      	mov	r3, r2
 8003a56:	07db      	lsls	r3, r3, #31
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	121b      	asrs	r3, r3, #8
 8003a5e:	4619      	mov	r1, r3
 8003a60:	2015      	movs	r0, #21
 8003a62:	f7fe fbc7 	bl	80021f4 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 8003a66:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	07db      	lsls	r3, r3, #31
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4619      	mov	r1, r3
 8003a74:	2016      	movs	r0, #22
 8003a76:	f7fe fbbd 	bl	80021f4 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset * -2)>>8);
 8003a7a:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8003a7e:	4613      	mov	r3, r2
 8003a80:	07db      	lsls	r3, r3, #31
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	121b      	asrs	r3, r3, #8
 8003a88:	4619      	mov	r1, r3
 8003a8a:	2017      	movs	r0, #23
 8003a8c:	f7fe fbb2 	bl	80021f4 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset * -2));
 8003a90:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8003a94:	4613      	mov	r3, r2
 8003a96:	07db      	lsls	r3, r3, #31
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	2018      	movs	r0, #24
 8003aa0:	f7fe fba8 	bl	80021f4 <ICM20602_Writebyte>


  while(Is_iBus_Received() == 0){
 8003aa4:	e030      	b.n	8003b08 <main+0x3b0>
 8003aa6:	bf00      	nop
 8003aa8:	0800d9a0 	.word	0x0800d9a0
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40001400 	.word	0x40001400
 8003ab4:	40011400 	.word	0x40011400
 8003ab8:	40004c00 	.word	0x40004c00
 8003abc:	40005000 	.word	0x40005000
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	20000354 	.word	0x20000354
 8003ac8:	0800d8e8 	.word	0x0800d8e8
 8003acc:	0800d904 	.word	0x0800d904
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	0800d930 	.word	0x0800d930
 8003ad8:	0800d95c 	.word	0x0800d95c
 8003adc:	0800d988 	.word	0x0800d988
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ae4:	4856      	ldr	r0, [pc, #344]	; (8003c40 <main+0x4e8>)
 8003ae6:	f7ff fd63 	bl	80035b0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 3000;
 8003aea:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <main+0x4e8>)
 8003aec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003af2:	20c8      	movs	r0, #200	; 0xc8
 8003af4:	f002 f922 	bl	8005d3c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003afc:	4850      	ldr	r0, [pc, #320]	; (8003c40 <main+0x4e8>)
 8003afe:	f7ff fd68 	bl	80035d2 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8003b02:	20c8      	movs	r0, #200	; 0xc8
 8003b04:	f002 f91a 	bl	8005d3c <HAL_Delay>
  while(Is_iBus_Received() == 0){
 8003b08:	f000 fd3c 	bl	8004584 <Is_iBus_Received>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0e6      	beq.n	8003ae0 <main+0x388>
  }
  if(iBus.SwC == 2000)
 8003b12:	4b4c      	ldr	r3, [pc, #304]	; (8003c44 <main+0x4ec>)
 8003b14:	899b      	ldrh	r3, [r3, #12]
 8003b16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b1a:	d145      	bne.n	8003ba8 <main+0x450>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b20:	4847      	ldr	r0, [pc, #284]	; (8003c40 <main+0x4e8>)
 8003b22:	f7ff fd45 	bl	80035b0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8003b26:	4b46      	ldr	r3, [pc, #280]	; (8003c40 <main+0x4e8>)
 8003b28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003b2e:	20c8      	movs	r0, #200	; 0xc8
 8003b30:	f002 f904 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 2000;
 8003b34:	4b42      	ldr	r3, [pc, #264]	; (8003c40 <main+0x4e8>)
 8003b36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003b3c:	20c8      	movs	r0, #200	; 0xc8
 8003b3e:	f002 f8fd 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 1500;
 8003b42:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <main+0x4e8>)
 8003b44:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003b4a:	20c8      	movs	r0, #200	; 0xc8
 8003b4c:	f002 f8f6 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 2000;
 8003b50:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <main+0x4e8>)
 8003b52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b5c:	4838      	ldr	r0, [pc, #224]	; (8003c40 <main+0x4e8>)
 8003b5e:	f7ff fd38 	bl	80035d2 <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 8003b62:	f000 fce1 	bl	8004528 <ESC_Calibration>
	  while(iBus.SwC != 1000) {
 8003b66:	e019      	b.n	8003b9c <main+0x444>
		  Is_iBus_Received();
 8003b68:	f000 fd0c 	bl	8004584 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b70:	4833      	ldr	r0, [pc, #204]	; (8003c40 <main+0x4e8>)
 8003b72:	f7ff fd1d 	bl	80035b0 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8003b76:	4b32      	ldr	r3, [pc, #200]	; (8003c40 <main+0x4e8>)
 8003b78:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8003b7e:	20c8      	movs	r0, #200	; 0xc8
 8003b80:	f002 f8dc 	bl	8005d3c <HAL_Delay>
		  TIM3->PSC = 2000;
 8003b84:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <main+0x4e8>)
 8003b86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8003b8c:	20c8      	movs	r0, #200	; 0xc8
 8003b8e:	f002 f8d5 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b96:	482a      	ldr	r0, [pc, #168]	; (8003c40 <main+0x4e8>)
 8003b98:	f7ff fd1b 	bl	80035d2 <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000) {
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <main+0x4ec>)
 8003b9e:	899b      	ldrh	r3, [r3, #12]
 8003ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba4:	d1e0      	bne.n	8003b68 <main+0x410>
 8003ba6:	e063      	b.n	8003c70 <main+0x518>
	  }
  }
  else if(iBus.SwC == 1500)
 8003ba8:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <main+0x4ec>)
 8003baa:	899b      	ldrh	r3, [r3, #12]
 8003bac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d15d      	bne.n	8003c70 <main+0x518>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bb8:	4821      	ldr	r0, [pc, #132]	; (8003c40 <main+0x4e8>)
 8003bba:	f7ff fcf9 	bl	80035b0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <main+0x4e8>)
 8003bc0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003bc6:	20c8      	movs	r0, #200	; 0xc8
 8003bc8:	f002 f8b8 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 2000;
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <main+0x4e8>)
 8003bce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003bd4:	20c8      	movs	r0, #200	; 0xc8
 8003bd6:	f002 f8b1 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 1500;
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <main+0x4e8>)
 8003bdc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8003be2:	20c8      	movs	r0, #200	; 0xc8
 8003be4:	f002 f8aa 	bl	8005d3c <HAL_Delay>
	  TIM3->PSC = 2000;
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <main+0x4e8>)
 8003bea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bf4:	4812      	ldr	r0, [pc, #72]	; (8003c40 <main+0x4e8>)
 8003bf6:	f7ff fcec 	bl	80035d2 <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 8003bfa:	f000 fce3 	bl	80045c4 <BNO080_Calibration>
	  while(iBus.SwC != 1000) {
 8003bfe:	e019      	b.n	8003c34 <main+0x4dc>
		  Is_iBus_Received();
 8003c00:	f000 fcc0 	bl	8004584 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c08:	480d      	ldr	r0, [pc, #52]	; (8003c40 <main+0x4e8>)
 8003c0a:	f7ff fcd1 	bl	80035b0 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <main+0x4e8>)
 8003c10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8003c16:	20c8      	movs	r0, #200	; 0xc8
 8003c18:	f002 f890 	bl	8005d3c <HAL_Delay>
		  TIM3->PSC = 2000;
 8003c1c:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <main+0x4e8>)
 8003c1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8003c24:	20c8      	movs	r0, #200	; 0xc8
 8003c26:	f002 f889 	bl	8005d3c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c2e:	4804      	ldr	r0, [pc, #16]	; (8003c40 <main+0x4e8>)
 8003c30:	f7ff fccf 	bl	80035d2 <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000) {
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <main+0x4ec>)
 8003c36:	899b      	ldrh	r3, [r3, #12]
 8003c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3c:	d1e0      	bne.n	8003c00 <main+0x4a8>
	  }
  }

  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8003c3e:	e017      	b.n	8003c70 <main+0x518>
 8003c40:	40000400 	.word	0x40000400
 8003c44:	200002c8 	.word	0x200002c8
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c4c:	48c3      	ldr	r0, [pc, #780]	; (8003f5c <main+0x804>)
 8003c4e:	f7ff fcaf 	bl	80035b0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 8003c52:	4bc2      	ldr	r3, [pc, #776]	; (8003f5c <main+0x804>)
 8003c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(70);
 8003c5a:	2046      	movs	r0, #70	; 0x46
 8003c5c:	f002 f86e 	bl	8005d3c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c64:	48bd      	ldr	r0, [pc, #756]	; (8003f5c <main+0x804>)
 8003c66:	f7ff fcb4 	bl	80035d2 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 8003c6a:	2046      	movs	r0, #70	; 0x46
 8003c6c:	f002 f866 	bl	8005d3c <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8003c70:	f000 fc34 	bl	80044dc <Is_iBus_Throttle_Min>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0e6      	beq.n	8003c48 <main+0x4f0>
 8003c7a:	4bb9      	ldr	r3, [pc, #740]	; (8003f60 <main+0x808>)
 8003c7c:	891b      	ldrh	r3, [r3, #8]
 8003c7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c82:	d0e1      	beq.n	8003c48 <main+0x4f0>
  }

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c88:	48b4      	ldr	r0, [pc, #720]	; (8003f5c <main+0x804>)
 8003c8a:	f7ff fc91 	bl	80035b0 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000;
 8003c8e:	4bb3      	ldr	r3, [pc, #716]	; (8003f5c <main+0x804>)
 8003c90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8003c96:	2064      	movs	r0, #100	; 0x64
 8003c98:	f002 f850 	bl	8005d3c <HAL_Delay>
  TIM3->PSC = 1500;
 8003c9c:	4baf      	ldr	r3, [pc, #700]	; (8003f5c <main+0x804>)
 8003c9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8003ca4:	2064      	movs	r0, #100	; 0x64
 8003ca6:	f002 f849 	bl	8005d3c <HAL_Delay>
  TIM3->PSC = 1000;
 8003caa:	4bac      	ldr	r3, [pc, #688]	; (8003f5c <main+0x804>)
 8003cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8003cb2:	2064      	movs	r0, #100	; 0x64
 8003cb4:	f002 f842 	bl	8005d3c <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003cb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cbc:	48a7      	ldr	r0, [pc, #668]	; (8003f5c <main+0x804>)
 8003cbe:	f7ff fc88 	bl	80035d2 <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 8003cc2:	48a8      	ldr	r0, [pc, #672]	; (8003f64 <main+0x80c>)
 8003cc4:	f006 fe32 	bl	800a92c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(BNO080_dataAvailable() == 1){
 8003cc8:	f7fd fb5c 	bl	8001384 <BNO080_dataAvailable>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d134      	bne.n	8003d3c <main+0x5e4>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	48a4      	ldr	r0, [pc, #656]	; (8003f68 <main+0x810>)
 8003cd6:	f7ff fd00 	bl	80036da <LL_GPIO_TogglePin>
		  Q[0] = BNO080_getQuatI();
 8003cda:	f7fd fd0d 	bl	80016f8 <BNO080_getQuatI>
 8003cde:	eef0 7a40 	vmov.f32	s15, s0
 8003ce2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  Q[1] = BNO080_getQuatJ();
 8003ce6:	f7fd fd1d 	bl	8001724 <BNO080_getQuatJ>
 8003cea:	eef0 7a40 	vmov.f32	s15, s0
 8003cee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		  Q[2] = BNO080_getQuatK();
 8003cf2:	f7fd fd2d 	bl	8001750 <BNO080_getQuatK>
 8003cf6:	eef0 7a40 	vmov.f32	s15, s0
 8003cfa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  Q[3] = BNO080_getQuatReal();
 8003cfe:	f7fd fd3d 	bl	800177c <BNO080_getQuatReal>
 8003d02:	eef0 7a40 	vmov.f32	s15, s0
 8003d06:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8003d0a:	f7fd fd4d 	bl	80017a8 <BNO080_getQuatRadianAccuracy>
 8003d0e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70

		  Quaternion_Update(&Q[0]);
 8003d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff f8a8 	bl	8002e6c <Quaternion_Update>

		  BNO080_Roll = -BNO080_Roll;
 8003d1c:	4b93      	ldr	r3, [pc, #588]	; (8003f6c <main+0x814>)
 8003d1e:	edd3 7a00 	vldr	s15, [r3]
 8003d22:	eef1 7a67 	vneg.f32	s15, s15
 8003d26:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <main+0x814>)
 8003d28:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch;
 8003d2c:	4b90      	ldr	r3, [pc, #576]	; (8003f70 <main+0x818>)
 8003d2e:	edd3 7a00 	vldr	s15, [r3]
 8003d32:	eef1 7a67 	vneg.f32	s15, s15
 8003d36:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <main+0x818>)
 8003d38:	edc3 7a00 	vstr	s15, [r3]
		  //printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
		  //printf("%.2f\n", BNO080_Yaw);
	  }


	  if(ICM20602_DataReady() == 1){
 8003d3c:	f7fe fb26 	bl	800238c <ICM20602_DataReady>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d14c      	bne.n	8003de0 <main+0x688>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003d46:	2102      	movs	r1, #2
 8003d48:	4887      	ldr	r0, [pc, #540]	; (8003f68 <main+0x810>)
 8003d4a:	f7ff fcc6 	bl	80036da <LL_GPIO_TogglePin>
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8003d4e:	4889      	ldr	r0, [pc, #548]	; (8003f74 <main+0x81c>)
 8003d50:	f7fe faf0 	bl	8002334 <ICM20602_Get3AxisGyroRawData>
		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8003d54:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <main+0x820>)
 8003d56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d62:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003f7c <main+0x824>
 8003d66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d6a:	eddf 6a85 	vldr	s13, [pc, #532]	; 8003f80 <main+0x828>
 8003d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d72:	4b81      	ldr	r3, [pc, #516]	; (8003f78 <main+0x820>)
 8003d74:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8003d78:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <main+0x820>)
 8003d7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d86:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003f7c <main+0x824>
 8003d8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d8e:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003f80 <main+0x828>
 8003d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d96:	4b78      	ldr	r3, [pc, #480]	; (8003f78 <main+0x820>)
 8003d98:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8003d9c:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <main+0x820>)
 8003d9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003daa:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003f7c <main+0x824>
 8003dae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003db2:	eddf 6a73 	vldr	s13, [pc, #460]	; 8003f80 <main+0x828>
 8003db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dba:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <main+0x820>)
 8003dbc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.gyro_x = -ICM20602.gyro_x;
 8003dc0:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <main+0x820>)
 8003dc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8003dc6:	eef1 7a67 	vneg.f32	s15, s15
 8003dca:	4b6b      	ldr	r3, [pc, #428]	; (8003f78 <main+0x820>)
 8003dcc:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 8003dd0:	4b69      	ldr	r3, [pc, #420]	; (8003f78 <main+0x820>)
 8003dd2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003dd6:	eef1 7a67 	vneg.f32	s15, s15
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <main+0x820>)
 8003ddc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		 //printf("%d, %d, %d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
	  }


	  if(LPS22HH_DataReady() == 1) {
 8003de0:	f7fe fd46 	bl	8002870 <LPS22HH_DataReady>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d138      	bne.n	8003e5c <main+0x704>
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8003dea:	4866      	ldr	r0, [pc, #408]	; (8003f84 <main+0x82c>)
 8003dec:	f7fe fd4c 	bl	8002888 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8003df0:	4865      	ldr	r0, [pc, #404]	; (8003f88 <main+0x830>)
 8003df2:	f7fe fd56 	bl	80028a2 <LPS22HH_GetTemperature>
		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 8003df6:	4b63      	ldr	r3, [pc, #396]	; (8003f84 <main+0x82c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e02:	eddf 6a62 	vldr	s13, [pc, #392]	; 8003f8c <main+0x834>
 8003e06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e0a:	4b5e      	ldr	r3, [pc, #376]	; (8003f84 <main+0x82c>)
 8003e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e18:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8003f90 <main+0x838>
 8003e1c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003e20:	eef0 0a66 	vmov.f32	s1, s13
 8003e24:	eeb0 0a47 	vmov.f32	s0, s14
 8003e28:	f7fe fd48 	bl	80028bc <getAltitude2>
 8003e2c:	eef0 7a40 	vmov.f32	s15, s0
 8003e30:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <main+0x82c>)
 8003e32:	edc3 7a02 	vstr	s15, [r3, #8]
#define X 0.90f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f -X);
 8003e36:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <main+0x82c>)
 8003e38:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e3c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003f94 <main+0x83c>
 8003e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e44:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <main+0x82c>)
 8003e46:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e4a:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003f98 <main+0x840>
 8003e4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e56:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <main+0x82c>)
 8003e58:	edc3 7a03 	vstr	s15, [r3, #12]

		  //printf("%d, %d\n", (int)(LPS22HH.baroAlt * 100), (int)(LPS22HH.baroAltFilt * 100));
	  }


	  if(m8n_rx_cplt_flag == 1) {
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	; (8003f9c <main+0x844>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d111      	bne.n	8003e88 <main+0x730>
		  m8n_rx_cplt_flag = 0;
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <main+0x844>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1){
 8003e6a:	2124      	movs	r1, #36	; 0x24
 8003e6c:	484c      	ldr	r0, [pc, #304]	; (8003fa0 <main+0x848>)
 8003e6e:	f7fe ff0b 	bl	8002c88 <M8N_UBX_CHKSUM_Check>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <main+0x730>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003e78:	2104      	movs	r1, #4
 8003e7a:	483b      	ldr	r0, [pc, #236]	; (8003f68 <main+0x810>)
 8003e7c:	f7ff fc2d 	bl	80036da <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Pasing(&m8n_rx_buf[0], &posllh);
 8003e80:	4948      	ldr	r1, [pc, #288]	; (8003fa4 <main+0x84c>)
 8003e82:	4847      	ldr	r0, [pc, #284]	; (8003fa0 <main+0x848>)
 8003e84:	f7fe ff3a 	bl	8002cfc <M8N_UBX_NAV_POSLLH_Pasing>

			  //printf("LAT: %d\tLOT: %d\tLength: %d\t\n", posllh.lon, posllh.lat, posllh.length);
		  }
	  }
	  if(ibus_rx_cplt_flag == 1){
 8003e88:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <main+0x850>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d123      	bne.n	8003ed8 <main+0x780>
		  ibus_rx_cplt_flag = 0;
 8003e90:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <main+0x850>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8003e96:	2120      	movs	r1, #32
 8003e98:	4844      	ldr	r0, [pc, #272]	; (8003fac <main+0x854>)
 8003e9a:	f7fd ff35 	bl	8001d08 <iBus_Check_CHKSUM>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d119      	bne.n	8003ed8 <main+0x780>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	4830      	ldr	r0, [pc, #192]	; (8003f68 <main+0x810>)
 8003ea8:	f7ff fc17 	bl	80036da <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003eac:	492c      	ldr	r1, [pc, #176]	; (8003f60 <main+0x808>)
 8003eae:	483f      	ldr	r0, [pc, #252]	; (8003fac <main+0x854>)
 8003eb0:	f7fd ff60 	bl	8001d74 <iBus_Parsing>
			  iBus_rx_cnt++;
 8003eb4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

			  if(iBus_isActive_Failsafe(&iBus) == 1)
 8003ebe:	4828      	ldr	r0, [pc, #160]	; (8003f60 <main+0x808>)
 8003ec0:	f7fd ffd0 	bl	8001e64 <iBus_isActive_Failsafe>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d103      	bne.n	8003ed2 <main+0x77a>
			  {
				  failsafe_flag = 1;
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <main+0x858>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	e002      	b.n	8003ed8 <main+0x780>
			  }
			  else
			  {
				  failsafe_flag = 0;
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <main+0x858>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
			  //printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC, iBus.FailSafe);
			  //HAL_Delay(50);
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 8003ed8:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <main+0x85c>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d109      	bne.n	8003ef4 <main+0x79c>
	  {
		  tim7_1000ms_flag = 0;
 8003ee0:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <main+0x85c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 8003ee6:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <main+0x79c>
		  {
			  failsafe_flag = 2;
 8003eee:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <main+0x858>)
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <main+0x858>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d00c      	beq.n	8003f16 <main+0x7be>
 8003efc:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <main+0x858>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d008      	beq.n	8003f16 <main+0x7be>
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <main+0x860>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d004      	beq.n	8003f16 <main+0x7be>
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <main+0x808>)
 8003f0e:	899b      	ldrh	r3, [r3, #12]
 8003f10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f14:	d105      	bne.n	8003f22 <main+0x7ca>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f1a:	4810      	ldr	r0, [pc, #64]	; (8003f5c <main+0x804>)
 8003f1c:	f7ff fb48 	bl	80035b0 <LL_TIM_CC_EnableChannel>
 8003f20:	e004      	b.n	8003f2c <main+0x7d4>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f26:	480d      	ldr	r0, [pc, #52]	; (8003f5c <main+0x804>)
 8003f28:	f7ff fb53 	bl	80035d2 <LL_TIM_CC_DisableChannel>
	  }

	  batvol = adcVal * 0.003619f;
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f36:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003fbc <main+0x864>
 8003f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f3e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	  //printf("%d\t %f\n", adcVal, batvol);
	  if(batvol < 10.0f)
 8003f42:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003f46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f52:	d535      	bpl.n	8003fc0 <main+0x868>
	  {
		  low_bat_flag = 1;
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <main+0x860>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e034      	b.n	8003fc6 <main+0x86e>
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	200002c8 	.word	0x200002c8
 8003f64:	0800d998 	.word	0x0800d998
 8003f68:	40020800 	.word	0x40020800
 8003f6c:	20000348 	.word	0x20000348
 8003f70:	2000034c 	.word	0x2000034c
 8003f74:	200002e8 	.word	0x200002e8
 8003f78:	200002e0 	.word	0x200002e0
 8003f7c:	44fa0000 	.word	0x44fa0000
 8003f80:	47000000 	.word	0x47000000
 8003f84:	20000308 	.word	0x20000308
 8003f88:	2000030c 	.word	0x2000030c
 8003f8c:	45800000 	.word	0x45800000
 8003f90:	42c80000 	.word	0x42c80000
 8003f94:	3f666666 	.word	0x3f666666
 8003f98:	3dccccd0 	.word	0x3dccccd0
 8003f9c:	2000047c 	.word	0x2000047c
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	20000318 	.word	0x20000318
 8003fa8:	200004a0 	.word	0x200004a0
 8003fac:	20000480 	.word	0x20000480
 8003fb0:	20000450 	.word	0x20000450
 8003fb4:	200004a3 	.word	0x200004a3
 8003fb8:	20000451 	.word	0x20000451
 8003fbc:	3b6d2cbf 	.word	0x3b6d2cbf
	  }
	  else
		  low_bat_flag = 0;
 8003fc0:	4b53      	ldr	r3, [pc, #332]	; (8004110 <main+0x9b8>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]



	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8003fc6:	4b53      	ldr	r3, [pc, #332]	; (8004114 <main+0x9bc>)
 8003fc8:	891b      	ldrh	r3, [r3, #8]
 8003fca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003fce:	d12c      	bne.n	800402a <main+0x8d2>
 8003fd0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003fd4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003fd8:	d027      	beq.n	800402a <main+0x8d2>
	  {
		  if(iBus.LV < 1010)
 8003fda:	4b4e      	ldr	r3, [pc, #312]	; (8004114 <main+0x9bc>)
 8003fdc:	889b      	ldrh	r3, [r3, #4]
 8003fde:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d817      	bhi.n	8004016 <main+0x8be>
		  {
			  motor_arming_flag = 1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003fec:	e01d      	b.n	800402a <main+0x8d2>
		  }
		  else
		  {
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff2:	4849      	ldr	r0, [pc, #292]	; (8004118 <main+0x9c0>)
 8003ff4:	f7ff fadc 	bl	80035b0 <LL_TIM_CC_EnableChannel>
				  TIM3->PSC = 1000;
 8003ff8:	4b47      	ldr	r3, [pc, #284]	; (8004118 <main+0x9c0>)
 8003ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(70);
 8004000:	2046      	movs	r0, #70	; 0x46
 8004002:	f001 fe9b 	bl	8005d3c <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800400a:	4843      	ldr	r0, [pc, #268]	; (8004118 <main+0x9c0>)
 800400c:	f7ff fae1 	bl	80035d2 <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 8004010:	2046      	movs	r0, #70	; 0x46
 8004012:	f001 fe93 	bl	8005d3c <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 8004016:	f000 fa61 	bl	80044dc <Is_iBus_Throttle_Min>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0e6      	beq.n	8003fee <main+0x896>
 8004020:	4b3c      	ldr	r3, [pc, #240]	; (8004114 <main+0x9bc>)
 8004022:	891b      	ldrh	r3, [r3, #8]
 8004024:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004028:	d0e1      	beq.n	8003fee <main+0x896>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 800402a:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <main+0x9bc>)
 800402c:	891b      	ldrh	r3, [r3, #8]
 800402e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	  if(iBus.SwA != 2000)
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <main+0x9bc>)
 8004034:	891b      	ldrh	r3, [r3, #8]
 8004036:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800403a:	d002      	beq.n	8004042 <main+0x8ea>
	  {
		  motor_arming_flag = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	  }
	  if(motor_arming_flag == 1)
 8004042:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004046:	2b01      	cmp	r3, #1
 8004048:	d16c      	bne.n	8004124 <main+0x9cc>
	  {
		  if(failsafe_flag == 0)
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <main+0x9c4>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d14c      	bne.n	80040ec <main+0x994>
		  {
			  TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 8004052:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8004056:	f245 2208 	movw	r2, #21000	; 0x5208
 800405a:	4293      	cmp	r3, r2
 800405c:	d808      	bhi.n	8004070 <main+0x918>
 800405e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8004062:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004066:	4293      	cmp	r3, r2
 8004068:	bf38      	it	cc
 800406a:	4613      	movcc	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	e001      	b.n	8004074 <main+0x91c>
 8004070:	f245 2308 	movw	r3, #21000	; 0x5208
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <main+0x9c8>)
 8004076:	6353      	str	r3, [r2, #52]	; 0x34
			  TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 8004078:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800407c:	f245 2208 	movw	r2, #21000	; 0x5208
 8004080:	4293      	cmp	r3, r2
 8004082:	d808      	bhi.n	8004096 <main+0x93e>
 8004084:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004088:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800408c:	4293      	cmp	r3, r2
 800408e:	bf38      	it	cc
 8004090:	4613      	movcc	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	e001      	b.n	800409a <main+0x942>
 8004096:	f245 2308 	movw	r3, #21000	; 0x5208
 800409a:	4a21      	ldr	r2, [pc, #132]	; (8004120 <main+0x9c8>)
 800409c:	6393      	str	r3, [r2, #56]	; 0x38
			  TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 800409e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040a2:	f245 2208 	movw	r2, #21000	; 0x5208
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d808      	bhi.n	80040bc <main+0x964>
 80040aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040ae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80040b2:	4293      	cmp	r3, r2
 80040b4:	bf38      	it	cc
 80040b6:	4613      	movcc	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	e001      	b.n	80040c0 <main+0x968>
 80040bc:	f245 2308 	movw	r3, #21000	; 0x5208
 80040c0:	4a17      	ldr	r2, [pc, #92]	; (8004120 <main+0x9c8>)
 80040c2:	63d3      	str	r3, [r2, #60]	; 0x3c
			  TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 80040c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040c8:	f245 2208 	movw	r2, #21000	; 0x5208
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d808      	bhi.n	80040e2 <main+0x98a>
 80040d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040d4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80040d8:	4293      	cmp	r3, r2
 80040da:	bf38      	it	cc
 80040dc:	4613      	movcc	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	e001      	b.n	80040e6 <main+0x98e>
 80040e2:	f245 2308 	movw	r3, #21000	; 0x5208
 80040e6:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <main+0x9c8>)
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	e02b      	b.n	8004144 <main+0x9ec>
		  }
		  else
		  {
			  TIM5->CCR1 = 10500;
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <main+0x9c8>)
 80040ee:	f642 1204 	movw	r2, #10500	; 0x2904
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM5->CCR2 = 10500;
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <main+0x9c8>)
 80040f6:	f642 1204 	movw	r2, #10500	; 0x2904
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM5->CCR3 = 10500;
 80040fc:	4b08      	ldr	r3, [pc, #32]	; (8004120 <main+0x9c8>)
 80040fe:	f642 1204 	movw	r2, #10500	; 0x2904
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM5->CCR4 = 10500;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <main+0x9c8>)
 8004106:	f642 1204 	movw	r2, #10500	; 0x2904
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
 800410c:	e01a      	b.n	8004144 <main+0x9ec>
 800410e:	bf00      	nop
 8004110:	20000451 	.word	0x20000451
 8004114:	200002c8 	.word	0x200002c8
 8004118:	40000400 	.word	0x40000400
 800411c:	20000450 	.word	0x20000450
 8004120:	40000c00 	.word	0x40000c00
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 10500;
 8004124:	4bb0      	ldr	r3, [pc, #704]	; (80043e8 <main+0xc90>)
 8004126:	f642 1204 	movw	r2, #10500	; 0x2904
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 10500;
 800412c:	4bae      	ldr	r3, [pc, #696]	; (80043e8 <main+0xc90>)
 800412e:	f642 1204 	movw	r2, #10500	; 0x2904
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR3 = 10500;
 8004134:	4bac      	ldr	r3, [pc, #688]	; (80043e8 <main+0xc90>)
 8004136:	f642 1204 	movw	r2, #10500	; 0x2904
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM5->CCR4 = 10500;
 800413c:	4baa      	ldr	r3, [pc, #680]	; (80043e8 <main+0xc90>)
 800413e:	f642 1204 	movw	r2, #10500	; 0x2904
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
	  }

	  if(tim7_1ms_flag == 1)
 8004144:	4ba9      	ldr	r3, [pc, #676]	; (80043ec <main+0xc94>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	f47f adbd 	bne.w	8003cc8 <main+0x570>
	  {
		  tim7_1ms_flag = 0;
 800414e:	4ba7      	ldr	r3, [pc, #668]	; (80043ec <main+0xc94>)
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]

		  pitch_reference = (iBus.RV - 1500) * 0.1f;
 8004154:	4ba6      	ldr	r3, [pc, #664]	; (80043f0 <main+0xc98>)
 8004156:	885b      	ldrh	r3, [r3, #2]
 8004158:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004164:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80043f4 <main+0xc9c>
 8004168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800416c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		  pitch_error = pitch_reference - BNO080_Pitch;
 8004170:	4ba1      	ldr	r3, [pc, #644]	; (80043f8 <main+0xca0>)
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800417a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800417e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		  pitch_p = pitch_error * 45;
 8004182:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004186:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80043fc <main+0xca4>
 800418a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800418e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

		  pitch_error_sum = pitch_error_sum + pitch_error * 0.001;
 8004192:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004196:	f7fc f9d7 	bl	8000548 <__aeabi_f2d>
 800419a:	4604      	mov	r4, r0
 800419c:	460d      	mov	r5, r1
 800419e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80041a0:	f7fc f9d2 	bl	8000548 <__aeabi_f2d>
 80041a4:	a38e      	add	r3, pc, #568	; (adr r3, 80043e0 <main+0xc88>)
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f7fc fa25 	bl	80005f8 <__aeabi_dmul>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7fc f869 	bl	800028c <__adddf3>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	f7fc fcf1 	bl	8000ba8 <__aeabi_d2f>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  if(motor_arming_flag == 0 || iBus.LV < 1030) pitch_error_sum = 0;
 80041cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <main+0xa88>
 80041d4:	4b86      	ldr	r3, [pc, #536]	; (80043f0 <main+0xc98>)
 80041d6:	889b      	ldrh	r3, [r3, #4]
 80041d8:	f240 4205 	movw	r2, #1029	; 0x405
 80041dc:	4293      	cmp	r3, r2
 80041de:	d803      	bhi.n	80041e8 <main+0xa90>
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  pitch_i = pitch_error_sum * 3;
 80041e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80041ec:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80041f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		  //pitch_derivative = (BNO080_Pitch - BNO080_Pitch_Prev) / 0.001;
		  //BNO080_Pitch_Prev = BNO080_Pitch;

		  pitch_derivative = ICM20602.gyro_x;
 80041f8:	4b81      	ldr	r3, [pc, #516]	; (8004400 <main+0xca8>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	65bb      	str	r3, [r7, #88]	; 0x58
		  pitch_d = -pitch_derivative * 6.5f;
 80041fe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004202:	eef1 7a67 	vneg.f32	s15, s15
 8004206:	eeb1 7a0a 	vmov.f32	s14, #26	; 0x40d00000  6.5
 800420a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		  pitch_pid = pitch_p + pitch_i + pitch_d;
 8004212:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004216:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800421a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004226:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		  pitch_rate_reference = pitch_pid;
 800422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  pitch_rate_error = pitch_rate_reference - ICM20602.gyro_x;
 800422e:	4b74      	ldr	r3, [pc, #464]	; (8004400 <main+0xca8>)
 8004230:	edd3 7a07 	vldr	s15, [r3, #28]
 8004234:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800423c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  pitch_rate_p = pitch_rate_error * 6;
 8004240:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004244:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		  pitch_rate_error_sum = pitch_rate_error_sum + pitch_rate_error* 0.001;
 8004250:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004254:	f7fc f978 	bl	8000548 <__aeabi_f2d>
 8004258:	4604      	mov	r4, r0
 800425a:	460d      	mov	r5, r1
 800425c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800425e:	f7fc f973 	bl	8000548 <__aeabi_f2d>
 8004262:	a35f      	add	r3, pc, #380	; (adr r3, 80043e0 <main+0xc88>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f7fc f9c6 	bl	80005f8 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4620      	mov	r0, r4
 8004272:	4629      	mov	r1, r5
 8004274:	f7fc f80a 	bl	800028c <__adddf3>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4610      	mov	r0, r2
 800427e:	4619      	mov	r1, r3
 8004280:	f7fc fc92 	bl	8000ba8 <__aeabi_d2f>
 8004284:	4603      	mov	r3, r0
 8004286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		  if(motor_arming_flag == 0 || iBus.LV < 1030) pitch_error_sum = 0;
 800428a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <main+0xb46>
 8004292:	4b57      	ldr	r3, [pc, #348]	; (80043f0 <main+0xc98>)
 8004294:	889b      	ldrh	r3, [r3, #4]
 8004296:	f240 4205 	movw	r2, #1029	; 0x405
 800429a:	4293      	cmp	r3, r2
 800429c:	d803      	bhi.n	80042a6 <main+0xb4e>
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  pitch_rate_i = pitch_rate_error_sum * 5;
 80042a6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80042aa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80042ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042b2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		  pitch_rate_derivative = (ICM20602.gyro_x - icm20602_gyro_x_prev) / 0.001;
 80042b6:	4b52      	ldr	r3, [pc, #328]	; (8004400 <main+0xca8>)
 80042b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80042bc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80042c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c4:	ee17 0a90 	vmov	r0, s15
 80042c8:	f7fc f93e 	bl	8000548 <__aeabi_f2d>
 80042cc:	a344      	add	r3, pc, #272	; (adr r3, 80043e0 <main+0xc88>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fc fabb 	bl	800084c <__aeabi_ddiv>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	f7fc fc63 	bl	8000ba8 <__aeabi_d2f>
 80042e2:	4603      	mov	r3, r0
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  icm20602_gyro_x_prev = ICM20602.gyro_x;
 80042e6:	4b46      	ldr	r3, [pc, #280]	; (8004400 <main+0xca8>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	67fb      	str	r3, [r7, #124]	; 0x7c
		  pitch_rate_d = pitch_rate_derivative * 1.2f;
 80042ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80042f0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004404 <main+0xcac>
 80042f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		  pitch_rate_pid = pitch_rate_p + pitch_rate_i + pitch_rate_d;
 80042fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004300:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004308:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800430c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004310:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		  ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch_rate_pid;// + (iBus.RH - 1500) * 5 - (iBus.LH - 1500) * 5;
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <main+0xc98>)
 8004316:	889b      	ldrh	r3, [r3, #4]
 8004318:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8004328:	3338      	adds	r3, #56	; 0x38
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004332:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800433a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433e:	ee17 3a90 	vmov	r3, s15
 8004342:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		  ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch_rate_pid;// + (iBus.RH - 1500) * 5 + (iBus.LH - 1500) * 5;
 8004346:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <main+0xc98>)
 8004348:	889b      	ldrh	r3, [r3, #4]
 800434a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 800435a:	3338      	adds	r3, #56	; 0x38
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004364:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004370:	ee17 3a90 	vmov	r3, s15
 8004374:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		  ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch_rate_pid;// - (iBus.RH - 1500) * 5 - (iBus.LH - 1500) * 5;
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <main+0xc98>)
 800437a:	889b      	ldrh	r3, [r3, #4]
 800437c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 800438c:	3338      	adds	r3, #56	; 0x38
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004396:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800439a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800439e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a2:	ee17 3a90 	vmov	r3, s15
 80043a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		  ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch_rate_pid;// - (iBus.RH - 1500) * 5 + (iBus.LH - 1500) * 5;
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <main+0xc98>)
 80043ac:	889b      	ldrh	r3, [r3, #4]
 80043ae:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80043be:	3338      	adds	r3, #56	; 0x38
 80043c0:	ee07 3a90 	vmov	s15, r3
 80043c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80043cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d4:	ee17 3a90 	vmov	r3, s15
 80043d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  if(BNO080_dataAvailable() == 1){
 80043dc:	e474      	b.n	8003cc8 <main+0x570>
 80043de:	bf00      	nop
 80043e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80043e4:	3f50624d 	.word	0x3f50624d
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	200004a4 	.word	0x200004a4
 80043f0:	200002c8 	.word	0x200002c8
 80043f4:	3dcccccd 	.word	0x3dcccccd
 80043f8:	2000034c 	.word	0x2000034c
 80043fc:	42340000 	.word	0x42340000
 8004400:	200002e0 	.word	0x200002e0
 8004404:	3f99999a 	.word	0x3f99999a

08004408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b094      	sub	sp, #80	; 0x50
 800440c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800440e:	f107 0320 	add.w	r3, r7, #32
 8004412:	2230      	movs	r2, #48	; 0x30
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f005 fd90 	bl	8009f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800441c:	f107 030c 	add.w	r3, r7, #12
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	2300      	movs	r3, #0
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <SystemClock_Config+0xcc>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <SystemClock_Config+0xcc>)
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443a:	6413      	str	r3, [r2, #64]	; 0x40
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <SystemClock_Config+0xcc>)
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004448:	2300      	movs	r3, #0
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <SystemClock_Config+0xd0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <SystemClock_Config+0xd0>)
 8004452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <SystemClock_Config+0xd0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004464:	2301      	movs	r3, #1
 8004466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800446e:	2302      	movs	r3, #2
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004478:	2304      	movs	r3, #4
 800447a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800447c:	23a8      	movs	r3, #168	; 0xa8
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004480:	2302      	movs	r3, #2
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004484:	2304      	movs	r3, #4
 8004486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004488:	f107 0320 	add.w	r3, r7, #32
 800448c:	4618      	mov	r0, r3
 800448e:	f003 f87f 	bl	8007590 <HAL_RCC_OscConfig>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004498:	f000 fa02 	bl	80048a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800449c:	230f      	movs	r3, #15
 800449e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044a0:	2302      	movs	r3, #2
 80044a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80044ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80044ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	2105      	movs	r1, #5
 80044ba:	4618      	mov	r0, r3
 80044bc:	f003 fae0 	bl	8007a80 <HAL_RCC_ClockConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80044c6:	f000 f9eb 	bl	80048a0 <Error_Handler>
  }
}
 80044ca:	bf00      	nop
 80044cc:	3750      	adds	r7, #80	; 0x50
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40007000 	.word	0x40007000

080044dc <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <Is_iBus_Throttle_Min+0x40>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d115      	bne.n	8004514 <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <Is_iBus_Throttle_Min+0x40>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 80044ee:	2120      	movs	r1, #32
 80044f0:	480b      	ldr	r0, [pc, #44]	; (8004520 <Is_iBus_Throttle_Min+0x44>)
 80044f2:	f7fd fc09 	bl	8001d08 <iBus_Check_CHKSUM>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10b      	bne.n	8004514 <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80044fc:	4909      	ldr	r1, [pc, #36]	; (8004524 <Is_iBus_Throttle_Min+0x48>)
 80044fe:	4808      	ldr	r0, [pc, #32]	; (8004520 <Is_iBus_Throttle_Min+0x44>)
 8004500:	f7fd fc38 	bl	8001d74 <iBus_Parsing>
			if(iBus.LV < 1010)
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <Is_iBus_Throttle_Min+0x48>)
 8004506:	889b      	ldrh	r3, [r3, #4]
 8004508:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800450c:	4293      	cmp	r3, r2
 800450e:	d801      	bhi.n	8004514 <Is_iBus_Throttle_Min+0x38>
				return 1;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200004a0 	.word	0x200004a0
 8004520:	20000480 	.word	0x20000480
 8004524:	200002c8 	.word	0x200002c8

08004528 <ESC_Calibration>:

void ESC_Calibration(void) {
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	  TIM5->CCR1 = 21000;
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <ESC_Calibration+0x58>)
 800452e:	f245 2208 	movw	r2, #21000	; 0x5208
 8004532:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 21000;
 8004534:	4b12      	ldr	r3, [pc, #72]	; (8004580 <ESC_Calibration+0x58>)
 8004536:	f245 2208 	movw	r2, #21000	; 0x5208
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 21000;
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <ESC_Calibration+0x58>)
 800453e:	f245 2208 	movw	r2, #21000	; 0x5208
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 21000;
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <ESC_Calibration+0x58>)
 8004546:	f245 2208 	movw	r2, #21000	; 0x5208
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 800454c:	f641 3058 	movw	r0, #7000	; 0x1b58
 8004550:	f001 fbf4 	bl	8005d3c <HAL_Delay>

	  TIM5->CCR1 = 10500;
 8004554:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <ESC_Calibration+0x58>)
 8004556:	f642 1204 	movw	r2, #10500	; 0x2904
 800455a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 10500;
 800455c:	4b08      	ldr	r3, [pc, #32]	; (8004580 <ESC_Calibration+0x58>)
 800455e:	f642 1204 	movw	r2, #10500	; 0x2904
 8004562:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 10500;
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <ESC_Calibration+0x58>)
 8004566:	f642 1204 	movw	r2, #10500	; 0x2904
 800456a:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 10500;
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <ESC_Calibration+0x58>)
 800456e:	f642 1204 	movw	r2, #10500	; 0x2904
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(8000);
 8004574:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004578:	f001 fbe0 	bl	8005d3c <HAL_Delay>
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40000c00 	.word	0x40000c00

08004584 <Is_iBus_Received>:
int Is_iBus_Received(void) {
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <Is_iBus_Received+0x34>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10f      	bne.n	80045b0 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <Is_iBus_Received+0x34>)
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8004596:	2120      	movs	r1, #32
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <Is_iBus_Received+0x38>)
 800459a:	f7fd fbb5 	bl	8001d08 <iBus_Check_CHKSUM>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <Is_iBus_Received+0x2c>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80045a4:	4906      	ldr	r1, [pc, #24]	; (80045c0 <Is_iBus_Received+0x3c>)
 80045a6:	4805      	ldr	r0, [pc, #20]	; (80045bc <Is_iBus_Received+0x38>)
 80045a8:	f7fd fbe4 	bl	8001d74 <iBus_Parsing>
			return 1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200004a0 	.word	0x200004a0
 80045bc:	20000480 	.word	0x20000480
 80045c0:	200002c8 	.word	0x200002c8

080045c4 <BNO080_Calibration>:
void BNO080_Calibration(void)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b090      	sub	sp, #64	; 0x40
 80045ca:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 80045cc:	f7fc fe44 	bl	8001258 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 80045d0:	f7fd f9ae 	bl	8001930 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 80045d4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80045d8:	f7fd f98c 	bl	80018f4 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 80045dc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80045e0:	f7fd f997 	bl	8001912 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 80045e4:	489d      	ldr	r0, [pc, #628]	; (800485c <BNO080_Calibration+0x298>)
 80045e6:	f006 f9a1 	bl	800a92c <puts>
	printf("Output in form x, y, z, in uTesla\n\n");
 80045ea:	489d      	ldr	r0, [pc, #628]	; (8004860 <BNO080_Calibration+0x29c>)
 80045ec:	f006 f99e 	bl	800a92c <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 80045f0:	e0b8      	b.n	8004764 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 80045f2:	f7fc fec7 	bl	8001384 <BNO080_dataAvailable>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	f040 80ae 	bne.w	800475a <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 80045fe:	f7fd f8f5 	bl	80017ec <BNO080_getMagX>
 8004602:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 8004606:	f7fd f907 	bl	8001818 <BNO080_getMagY>
 800460a:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 800460e:	f7fd f919 	bl	8001844 <BNO080_getMagZ>
 8004612:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 8004616:	f7fd f92b 	bl	8001870 <BNO080_getMagAccuracy>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 800461e:	f7fd f86b 	bl	80016f8 <BNO080_getQuatI>
 8004622:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 8004626:	f7fd f87d 	bl	8001724 <BNO080_getQuatJ>
 800462a:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 800462e:	f7fd f88f 	bl	8001750 <BNO080_getQuatK>
 8004632:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8004636:	f7fd f8a1 	bl	800177c <BNO080_getQuatReal>
 800463a:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 800463e:	f7fd f8c9 	bl	80017d4 <BNO080_getQuatAccuracy>
 8004642:	4603      	mov	r3, r0
 8004644:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8004646:	6a38      	ldr	r0, [r7, #32]
 8004648:	f7fb ff7e 	bl	8000548 <__aeabi_f2d>
 800464c:	4680      	mov	r8, r0
 800464e:	4689      	mov	r9, r1
 8004650:	69f8      	ldr	r0, [r7, #28]
 8004652:	f7fb ff79 	bl	8000548 <__aeabi_f2d>
 8004656:	4604      	mov	r4, r0
 8004658:	460d      	mov	r5, r1
 800465a:	69b8      	ldr	r0, [r7, #24]
 800465c:	f7fb ff74 	bl	8000548 <__aeabi_f2d>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004668:	e9cd 4500 	strd	r4, r5, [sp]
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	487c      	ldr	r0, [pc, #496]	; (8004864 <BNO080_Calibration+0x2a0>)
 8004672:	f006 f8d5 	bl	800a820 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <BNO080_Calibration+0xc0>
 800467c:	487a      	ldr	r0, [pc, #488]	; (8004868 <BNO080_Calibration+0x2a4>)
 800467e:	f006 f8cf 	bl	800a820 <iprintf>
 8004682:	e013      	b.n	80046ac <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d103      	bne.n	8004692 <BNO080_Calibration+0xce>
 800468a:	4878      	ldr	r0, [pc, #480]	; (800486c <BNO080_Calibration+0x2a8>)
 800468c:	f006 f8c8 	bl	800a820 <iprintf>
 8004690:	e00c      	b.n	80046ac <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d103      	bne.n	80046a0 <BNO080_Calibration+0xdc>
 8004698:	4875      	ldr	r0, [pc, #468]	; (8004870 <BNO080_Calibration+0x2ac>)
 800469a:	f006 f8c1 	bl	800a820 <iprintf>
 800469e:	e005      	b.n	80046ac <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d102      	bne.n	80046ac <BNO080_Calibration+0xe8>
 80046a6:	4873      	ldr	r0, [pc, #460]	; (8004874 <BNO080_Calibration+0x2b0>)
 80046a8:	f006 f8ba 	bl	800a820 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 80046ac:	6938      	ldr	r0, [r7, #16]
 80046ae:	f7fb ff4b 	bl	8000548 <__aeabi_f2d>
 80046b2:	4682      	mov	sl, r0
 80046b4:	468b      	mov	fp, r1
 80046b6:	6938      	ldr	r0, [r7, #16]
 80046b8:	f7fb ff46 	bl	8000548 <__aeabi_f2d>
 80046bc:	4604      	mov	r4, r0
 80046be:	460d      	mov	r5, r1
 80046c0:	6938      	ldr	r0, [r7, #16]
 80046c2:	f7fb ff41 	bl	8000548 <__aeabi_f2d>
 80046c6:	4680      	mov	r8, r0
 80046c8:	4689      	mov	r9, r1
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fb ff3c 	bl	8000548 <__aeabi_f2d>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80046dc:	e9cd 4500 	strd	r4, r5, [sp]
 80046e0:	4652      	mov	r2, sl
 80046e2:	465b      	mov	r3, fp
 80046e4:	4864      	ldr	r0, [pc, #400]	; (8004878 <BNO080_Calibration+0x2b4>)
 80046e6:	f006 f89b 	bl	800a820 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <BNO080_Calibration+0x134>
 80046f0:	4862      	ldr	r0, [pc, #392]	; (800487c <BNO080_Calibration+0x2b8>)
 80046f2:	f006 f91b 	bl	800a92c <puts>
 80046f6:	e013      	b.n	8004720 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d103      	bne.n	8004706 <BNO080_Calibration+0x142>
 80046fe:	4860      	ldr	r0, [pc, #384]	; (8004880 <BNO080_Calibration+0x2bc>)
 8004700:	f006 f914 	bl	800a92c <puts>
 8004704:	e00c      	b.n	8004720 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d103      	bne.n	8004714 <BNO080_Calibration+0x150>
 800470c:	485d      	ldr	r0, [pc, #372]	; (8004884 <BNO080_Calibration+0x2c0>)
 800470e:	f006 f90d 	bl	800a92c <puts>
 8004712:	e005      	b.n	8004720 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d102      	bne.n	8004720 <BNO080_Calibration+0x15c>
 800471a:	485b      	ldr	r0, [pc, #364]	; (8004888 <BNO080_Calibration+0x2c4>)
 800471c:	f006 f906 	bl	800a92c <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d110      	bne.n	8004748 <BNO080_Calibration+0x184>
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d10d      	bne.n	8004748 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800472c:	2107      	movs	r1, #7
 800472e:	4857      	ldr	r0, [pc, #348]	; (800488c <BNO080_Calibration+0x2c8>)
 8004730:	f7fe ffb6 	bl	80036a0 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8004734:	4b56      	ldr	r3, [pc, #344]	; (8004890 <BNO080_Calibration+0x2cc>)
 8004736:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800473c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004740:	4853      	ldr	r0, [pc, #332]	; (8004890 <BNO080_Calibration+0x2cc>)
 8004742:	f7fe ff35 	bl	80035b0 <LL_TIM_CC_EnableChannel>
 8004746:	e008      	b.n	800475a <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8004748:	2107      	movs	r1, #7
 800474a:	4850      	ldr	r0, [pc, #320]	; (800488c <BNO080_Calibration+0x2c8>)
 800474c:	f7fe ffb6 	bl	80036bc <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004754:	484e      	ldr	r0, [pc, #312]	; (8004890 <BNO080_Calibration+0x2cc>)
 8004756:	f7fe ff3c 	bl	80035d2 <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 800475a:	f7ff ff13 	bl	8004584 <Is_iBus_Received>
		HAL_Delay(100);
 800475e:	2064      	movs	r0, #100	; 0x64
 8004760:	f001 faec 	bl	8005d3c <HAL_Delay>
	while(iBus.SwC == 1500)
 8004764:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <BNO080_Calibration+0x2d0>)
 8004766:	899b      	ldrh	r3, [r3, #12]
 8004768:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800476c:	4293      	cmp	r3, r2
 800476e:	f43f af40 	beq.w	80045f2 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8004772:	2107      	movs	r1, #7
 8004774:	4845      	ldr	r0, [pc, #276]	; (800488c <BNO080_Calibration+0x2c8>)
 8004776:	f7fe ffa1 	bl	80036bc <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800477a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800477e:	4844      	ldr	r0, [pc, #272]	; (8004890 <BNO080_Calibration+0x2cc>)
 8004780:	f7fe ff27 	bl	80035d2 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8004784:	f7fd f9c2 	bl	8001b0c <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8004788:	f7fd f9a4 	bl	8001ad4 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 800478c:	2364      	movs	r3, #100	; 0x64
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	3b01      	subs	r3, #1
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02f      	beq.n	80047fc <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 800479c:	f7fc fdf2 	bl	8001384 <BNO080_dataAvailable>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d026      	beq.n	80047f4 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 80047a6:	f7fd f8cb 	bl	8001940 <BNO080_calibrationComplete>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d121      	bne.n	80047f4 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 80047b0:	4839      	ldr	r0, [pc, #228]	; (8004898 <BNO080_Calibration+0x2d4>)
 80047b2:	f006 f8bb 	bl	800a92c <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80047b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ba:	4835      	ldr	r0, [pc, #212]	; (8004890 <BNO080_Calibration+0x2cc>)
 80047bc:	f7fe fef8 	bl	80035b0 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 80047c0:	4b33      	ldr	r3, [pc, #204]	; (8004890 <BNO080_Calibration+0x2cc>)
 80047c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 80047c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047cc:	f001 fab6 	bl	8005d3c <HAL_Delay>
				TIM3->PSC = 1500;
 80047d0:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <BNO080_Calibration+0x2cc>)
 80047d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 80047d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047dc:	f001 faae 	bl	8005d3c <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80047e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047e4:	482a      	ldr	r0, [pc, #168]	; (8004890 <BNO080_Calibration+0x2cc>)
 80047e6:	f7fe fef4 	bl	80035d2 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 80047ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ee:	f001 faa5 	bl	8005d3c <HAL_Delay>
				break;
 80047f2:	e004      	b.n	80047fe <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 80047f4:	200a      	movs	r0, #10
 80047f6:	f001 faa1 	bl	8005d3c <HAL_Delay>
		if(--counter == 0) break;
 80047fa:	e7c9      	b.n	8004790 <BNO080_Calibration+0x1cc>
 80047fc:	bf00      	nop
	}
	if(counter == 0)
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	2b00      	cmp	r3, #0
 8004802:	d120      	bne.n	8004846 <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 8004804:	4825      	ldr	r0, [pc, #148]	; (800489c <BNO080_Calibration+0x2d8>)
 8004806:	f006 f891 	bl	800a92c <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800480a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800480e:	4820      	ldr	r0, [pc, #128]	; (8004890 <BNO080_Calibration+0x2cc>)
 8004810:	f7fe fece 	bl	80035b0 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8004814:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <BNO080_Calibration+0x2cc>)
 8004816:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800481c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004820:	f001 fa8c 	bl	8005d3c <HAL_Delay>
		TIM3->PSC = 2000;
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <BNO080_Calibration+0x2cc>)
 8004826:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800482c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004830:	f001 fa84 	bl	8005d3c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004838:	4815      	ldr	r0, [pc, #84]	; (8004890 <BNO080_Calibration+0x2cc>)
 800483a:	f7fe feca 	bl	80035d2 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 800483e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004842:	f001 fa7b 	bl	8005d3c <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8004846:	f7fc fd07 	bl	8001258 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 800484a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800484e:	f7fd f842 	bl	80018d6 <BNO080_enableRotationVector>
}
 8004852:	bf00      	nop
 8004854:	3728      	adds	r7, #40	; 0x28
 8004856:	46bd      	mov	sp, r7
 8004858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485c:	0800d9b0 	.word	0x0800d9b0
 8004860:	0800d9fc 	.word	0x0800d9fc
 8004864:	0800da20 	.word	0x0800da20
 8004868:	0800da2c 	.word	0x0800da2c
 800486c:	0800da38 	.word	0x0800da38
 8004870:	0800da40 	.word	0x0800da40
 8004874:	0800da48 	.word	0x0800da48
 8004878:	0800da50 	.word	0x0800da50
 800487c:	0800da60 	.word	0x0800da60
 8004880:	0800da6c 	.word	0x0800da6c
 8004884:	0800da70 	.word	0x0800da70
 8004888:	0800da78 	.word	0x0800da78
 800488c:	40020800 	.word	0x40020800
 8004890:	40000400 	.word	0x40000400
 8004894:	200002c8 	.word	0x200002c8
 8004898:	0800da80 	.word	0x0800da80
 800489c:	0800daa8 	.word	0x0800daa8

080048a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80048a4:	b672      	cpsid	i
}
 80048a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048a8:	e7fe      	b.n	80048a8 <Error_Handler+0x8>

080048aa <LL_SPI_SetStandard>:
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 0210 	bic.w	r2, r3, #16
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	605a      	str	r2, [r3, #4]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_AHB1_GRP1_EnableClock>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80048da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048dc:	4907      	ldr	r1, [pc, #28]	; (80048fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80048e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4013      	ands	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048ee:	68fb      	ldr	r3, [r7, #12]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40023800 	.word	0x40023800

08004900 <LL_APB1_GRP1_EnableClock>:
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <LL_APB1_GRP1_EnableClock+0x2c>)
 800490a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800490c:	4907      	ldr	r1, [pc, #28]	; (800492c <LL_APB1_GRP1_EnableClock+0x2c>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4313      	orrs	r3, r2
 8004912:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4013      	ands	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40023800 	.word	0x40023800

08004930 <LL_APB2_GRP1_EnableClock>:
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004938:	4b08      	ldr	r3, [pc, #32]	; (800495c <LL_APB2_GRP1_EnableClock+0x2c>)
 800493a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <LL_APB2_GRP1_EnableClock+0x2c>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4313      	orrs	r3, r2
 8004942:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4013      	ands	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40023800 	.word	0x40023800

08004960 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b090      	sub	sp, #64	; 0x40
 8004964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004966:	f107 0318 	add.w	r3, r7, #24
 800496a:	2228      	movs	r2, #40	; 0x28
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f005 fae4 	bl	8009f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	463b      	mov	r3, r7
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	60da      	str	r2, [r3, #12]
 8004980:	611a      	str	r2, [r3, #16]
 8004982:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004984:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004988:	f7ff ffd2 	bl	8004930 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800498c:	2001      	movs	r0, #1
 800498e:	f7ff ff9f 	bl	80048d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004992:	23e0      	movs	r3, #224	; 0xe0
 8004994:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004996:	2302      	movs	r3, #2
 8004998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800499a:	2303      	movs	r3, #3
 800499c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80049a6:	2305      	movs	r3, #5
 80049a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049aa:	463b      	mov	r3, r7
 80049ac:	4619      	mov	r1, r3
 80049ae:	4813      	ldr	r0, [pc, #76]	; (80049fc <MX_SPI1_Init+0x9c>)
 80049b0:	f004 fa9f 	bl	8008ef2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80049b8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80049bc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80049c2:	2302      	movs	r3, #2
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80049c6:	2301      	movs	r3, #1
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80049ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80049d0:	2310      	movs	r3, #16
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80049d4:	2300      	movs	r3, #0
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80049dc:	230a      	movs	r3, #10
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80049e0:	f107 0318 	add.w	r3, r7, #24
 80049e4:	4619      	mov	r1, r3
 80049e6:	4806      	ldr	r0, [pc, #24]	; (8004a00 <MX_SPI1_Init+0xa0>)
 80049e8:	f004 fc53 	bl	8009292 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80049ec:	2100      	movs	r1, #0
 80049ee:	4804      	ldr	r0, [pc, #16]	; (8004a00 <MX_SPI1_Init+0xa0>)
 80049f0:	f7ff ff5b 	bl	80048aa <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80049f4:	bf00      	nop
 80049f6:	3740      	adds	r7, #64	; 0x40
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40020000 	.word	0x40020000
 8004a00:	40013000 	.word	0x40013000

08004a04 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b090      	sub	sp, #64	; 0x40
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004a0a:	f107 0318 	add.w	r3, r7, #24
 8004a0e:	2228      	movs	r2, #40	; 0x28
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f005 fa92 	bl	8009f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	463b      	mov	r3, r7
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	609a      	str	r2, [r3, #8]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	611a      	str	r2, [r3, #16]
 8004a26:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8004a28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a2c:	f7ff ff68 	bl	8004900 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004a30:	2002      	movs	r0, #2
 8004a32:	f7ff ff4d 	bl	80048d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8004a36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004a40:	2303      	movs	r3, #3
 8004a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004a4c:	2305      	movs	r3, #5
 8004a4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a50:	463b      	mov	r3, r7
 8004a52:	4619      	mov	r1, r3
 8004a54:	4813      	ldr	r0, [pc, #76]	; (8004aa4 <MX_SPI2_Init+0xa0>)
 8004a56:	f004 fa4c 	bl	8008ef2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004a5e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004a62:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004a64:	2300      	movs	r3, #0
 8004a66:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8004a76:	2318      	movs	r3, #24
 8004a78:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004a82:	230a      	movs	r3, #10
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8004a86:	f107 0318 	add.w	r3, r7, #24
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4806      	ldr	r0, [pc, #24]	; (8004aa8 <MX_SPI2_Init+0xa4>)
 8004a8e:	f004 fc00 	bl	8009292 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004a92:	2100      	movs	r1, #0
 8004a94:	4804      	ldr	r0, [pc, #16]	; (8004aa8 <MX_SPI2_Init+0xa4>)
 8004a96:	f7ff ff08 	bl	80048aa <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a9a:	bf00      	nop
 8004a9c:	3740      	adds	r7, #64	; 0x40
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40020400 	.word	0x40020400
 8004aa8:	40003800 	.word	0x40003800

08004aac <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b090      	sub	sp, #64	; 0x40
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004ab2:	f107 0318 	add.w	r3, r7, #24
 8004ab6:	2228      	movs	r2, #40	; 0x28
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f005 fa3e 	bl	8009f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	60da      	str	r2, [r3, #12]
 8004acc:	611a      	str	r2, [r3, #16]
 8004ace:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004ad0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ad4:	f7ff ff14 	bl	8004900 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004ad8:	2002      	movs	r0, #2
 8004ada:	f7ff fef9 	bl	80048d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8004ade:	2338      	movs	r3, #56	; 0x38
 8004ae0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004af2:	2306      	movs	r3, #6
 8004af4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af6:	463b      	mov	r3, r7
 8004af8:	4619      	mov	r1, r3
 8004afa:	4813      	ldr	r0, [pc, #76]	; (8004b48 <MX_SPI3_Init+0x9c>)
 8004afc:	f004 f9f9 	bl	8008ef2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004b04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004b08:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004b20:	2300      	movs	r3, #0
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004b28:	230a      	movs	r3, #10
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004b2c:	f107 0318 	add.w	r3, r7, #24
 8004b30:	4619      	mov	r1, r3
 8004b32:	4806      	ldr	r0, [pc, #24]	; (8004b4c <MX_SPI3_Init+0xa0>)
 8004b34:	f004 fbad 	bl	8009292 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4804      	ldr	r0, [pc, #16]	; (8004b4c <MX_SPI3_Init+0xa0>)
 8004b3c:	f7ff feb5 	bl	80048aa <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b40:	bf00      	nop
 8004b42:	3740      	adds	r7, #64	; 0x40
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40020400 	.word	0x40020400
 8004b4c:	40003c00 	.word	0x40003c00

08004b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_MspInit+0x4c>)
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	4a0f      	ldr	r2, [pc, #60]	; (8004b9c <HAL_MspInit+0x4c>)
 8004b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b64:	6453      	str	r3, [r2, #68]	; 0x44
 8004b66:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <HAL_MspInit+0x4c>)
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <HAL_MspInit+0x4c>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <HAL_MspInit+0x4c>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6413      	str	r3, [r2, #64]	; 0x40
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_MspInit+0x4c>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800

08004ba0 <LL_TIM_ClearFlag_UPDATE>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f06f 0201 	mvn.w	r2, #1
 8004bae:	611a      	str	r2, [r3, #16]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <LL_TIM_IsActiveFlag_UPDATE>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <LL_USART_IsActiveFlag_RXNE>:
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_USART_ClearFlag_RXNE>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f06f 0220 	mvn.w	r2, #32
 8004c16:	601a      	str	r2, [r3, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_USART_ReceiveData8>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	b2db      	uxtb	r3, r3
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c42:	e7fe      	b.n	8004c42 <NMI_Handler+0x4>

08004c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c48:	e7fe      	b.n	8004c48 <HardFault_Handler+0x4>

08004c4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c4e:	e7fe      	b.n	8004c4e <MemManage_Handler+0x4>

08004c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c54:	e7fe      	b.n	8004c54 <BusFault_Handler+0x4>

08004c56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c5a:	e7fe      	b.n	8004c5a <UsageFault_Handler+0x4>

08004c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c8a:	f001 f837 	bl	8005cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c98:	4802      	ldr	r0, [pc, #8]	; (8004ca4 <USART1_IRQHandler+0x10>)
 8004c9a:	f003 f95f 	bl	8007f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	200004b0 	.word	0x200004b0

08004ca8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4)){
 8004cac:	4833      	ldr	r0, [pc, #204]	; (8004d7c <UART4_IRQHandler+0xd4>)
 8004cae:	f7ff ff98 	bl	8004be2 <LL_USART_IsActiveFlag_RXNE>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d05b      	beq.n	8004d70 <UART4_IRQHandler+0xc8>
			LL_USART_ClearFlag_RXNE(UART4);
 8004cb8:	4830      	ldr	r0, [pc, #192]	; (8004d7c <UART4_IRQHandler+0xd4>)
 8004cba:	f7ff ffa5 	bl	8004c08 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8004cbe:	482f      	ldr	r0, [pc, #188]	; (8004d7c <UART4_IRQHandler+0xd4>)
 8004cc0:	f7ff ffb0 	bl	8004c24 <LL_USART_ReceiveData8>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <UART4_IRQHandler+0xd8>)
 8004cca:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 8004ccc:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <UART4_IRQHandler+0xdc>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]

//			LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt){
 8004cd2:	4b2d      	ldr	r3, [pc, #180]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b23      	cmp	r3, #35	; 0x23
 8004cd8:	d02e      	beq.n	8004d38 <UART4_IRQHandler+0x90>
 8004cda:	2b23      	cmp	r3, #35	; 0x23
 8004cdc:	dc3a      	bgt.n	8004d54 <UART4_IRQHandler+0xac>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <UART4_IRQHandler+0x40>
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d012      	beq.n	8004d0c <UART4_IRQHandler+0x64>
 8004ce6:	e035      	b.n	8004d54 <UART4_IRQHandler+0xac>
			case 0:
				if(uart4_rx_data == 0xb5){
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <UART4_IRQHandler+0xd8>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2bb5      	cmp	r3, #181	; 0xb5
 8004cee:	d141      	bne.n	8004d74 <UART4_IRQHandler+0xcc>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8004cf0:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <UART4_IRQHandler+0xd8>)
 8004cf8:	7819      	ldrb	r1, [r3, #0]
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <UART4_IRQHandler+0xe4>)
 8004cfc:	5499      	strb	r1, [r3, r2]
					cnt++;
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d08:	701a      	strb	r2, [r3, #0]
				}
				break;
 8004d0a:	e033      	b.n	8004d74 <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62) {
 8004d0c:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <UART4_IRQHandler+0xd8>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b62      	cmp	r3, #98	; 0x62
 8004d12:	d10d      	bne.n	8004d30 <UART4_IRQHandler+0x88>
					m8n_rx_buf[cnt] = uart4_rx_data;
 8004d14:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <UART4_IRQHandler+0xd8>)
 8004d1c:	7819      	ldrb	r1, [r3, #0]
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <UART4_IRQHandler+0xe4>)
 8004d20:	5499      	strb	r1, [r3, r2]
					cnt++;
 8004d22:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d2c:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8004d2e:	e022      	b.n	8004d76 <UART4_IRQHandler+0xce>
					cnt = 0;
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]
				break;
 8004d36:	e01e      	b.n	8004d76 <UART4_IRQHandler+0xce>
			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8004d38:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <UART4_IRQHandler+0xd8>)
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <UART4_IRQHandler+0xe4>)
 8004d44:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <UART4_IRQHandler+0xe8>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
				break;
 8004d52:	e010      	b.n	8004d76 <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <UART4_IRQHandler+0xd8>)
 8004d5c:	7819      	ldrb	r1, [r3, #0]
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <UART4_IRQHandler+0xe4>)
 8004d60:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <UART4_IRQHandler+0xe0>)
 8004d6c:	701a      	strb	r2, [r3, #0]
				break;
 8004d6e:	e002      	b.n	8004d76 <UART4_IRQHandler+0xce>
			}
	}
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <UART4_IRQHandler+0xce>
				break;
 8004d74:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40004c00 	.word	0x40004c00
 8004d80:	20000455 	.word	0x20000455
 8004d84:	20000454 	.word	0x20000454
 8004d88:	200004a5 	.word	0x200004a5
 8004d8c:	20000458 	.word	0x20000458
 8004d90:	2000047c 	.word	0x2000047c

08004d94 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5)){
 8004d98:	4833      	ldr	r0, [pc, #204]	; (8004e68 <UART5_IRQHandler+0xd4>)
 8004d9a:	f7ff ff22 	bl	8004be2 <LL_USART_IsActiveFlag_RXNE>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d05b      	beq.n	8004e5c <UART5_IRQHandler+0xc8>
		LL_USART_ClearFlag_RXNE(UART5);
 8004da4:	4830      	ldr	r0, [pc, #192]	; (8004e68 <UART5_IRQHandler+0xd4>)
 8004da6:	f7ff ff2f 	bl	8004c08 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8004daa:	482f      	ldr	r0, [pc, #188]	; (8004e68 <UART5_IRQHandler+0xd4>)
 8004dac:	f7ff ff3a 	bl	8004c24 <LL_USART_ReceiveData8>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <UART5_IRQHandler+0xd8>)
 8004db6:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8004db8:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <UART5_IRQHandler+0xdc>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
		/*while(!LL_USART_IsActiveFlag_TXE(USART6));
		LL_USART_TransmitData8(USART6, uart5_rx_data);*/

		switch(cnt){
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b1f      	cmp	r3, #31
 8004dc4:	d02e      	beq.n	8004e24 <UART5_IRQHandler+0x90>
 8004dc6:	2b1f      	cmp	r3, #31
 8004dc8:	dc3a      	bgt.n	8004e40 <UART5_IRQHandler+0xac>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <UART5_IRQHandler+0x40>
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d012      	beq.n	8004df8 <UART5_IRQHandler+0x64>
 8004dd2:	e035      	b.n	8004e40 <UART5_IRQHandler+0xac>
		case 0:
			if(uart5_rx_data == 0x20){
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <UART5_IRQHandler+0xd8>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d141      	bne.n	8004e60 <UART5_IRQHandler+0xcc>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8004ddc:	4b25      	ldr	r3, [pc, #148]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <UART5_IRQHandler+0xd8>)
 8004de4:	7819      	ldrb	r1, [r3, #0]
 8004de6:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <UART5_IRQHandler+0xe4>)
 8004de8:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	3301      	adds	r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004df4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004df6:	e033      	b.n	8004e60 <UART5_IRQHandler+0xcc>

		case 1:
			if(uart5_rx_data == 0x40) {
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <UART5_IRQHandler+0xd8>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d10d      	bne.n	8004e1c <UART5_IRQHandler+0x88>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <UART5_IRQHandler+0xd8>)
 8004e08:	7819      	ldrb	r1, [r3, #0]
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <UART5_IRQHandler+0xe4>)
 8004e0c:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004e0e:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e18:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8004e1a:	e022      	b.n	8004e62 <UART5_IRQHandler+0xce>
				cnt = 0;
 8004e1c:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
			break;
 8004e22:	e01e      	b.n	8004e62 <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8004e24:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <UART5_IRQHandler+0xd8>)
 8004e2c:	7819      	ldrb	r1, [r3, #0]
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <UART5_IRQHandler+0xe4>)
 8004e30:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <UART5_IRQHandler+0xe8>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
			break;
 8004e3e:	e010      	b.n	8004e62 <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <UART5_IRQHandler+0xd8>)
 8004e48:	7819      	ldrb	r1, [r3, #0]
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <UART5_IRQHandler+0xe4>)
 8004e4c:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <UART5_IRQHandler+0xe0>)
 8004e58:	701a      	strb	r2, [r3, #0]
			break;
 8004e5a:	e002      	b.n	8004e62 <UART5_IRQHandler+0xce>
		}
	}
 8004e5c:	bf00      	nop
 8004e5e:	e000      	b.n	8004e62 <UART5_IRQHandler+0xce>
			break;
 8004e60:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40005000 	.word	0x40005000
 8004e6c:	2000047e 	.word	0x2000047e
 8004e70:	2000047d 	.word	0x2000047d
 8004e74:	200004a6 	.word	0x200004a6
 8004e78:	20000480 	.word	0x20000480
 8004e7c:	200004a0 	.word	0x200004a0

08004e80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8004e84:	4822      	ldr	r0, [pc, #136]	; (8004f10 <TIM7_IRQHandler+0x90>)
 8004e86:	f7ff fe99 	bl	8004bbc <LL_TIM_IsActiveFlag_UPDATE>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d03d      	beq.n	8004f0c <TIM7_IRQHandler+0x8c>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8004e90:	481f      	ldr	r0, [pc, #124]	; (8004f10 <TIM7_IRQHandler+0x90>)
 8004e92:	f7ff fe85 	bl	8004ba0 <LL_TIM_ClearFlag_UPDATE>
		tim7_1ms_count++;
 8004e96:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <TIM7_IRQHandler+0x94>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <TIM7_IRQHandler+0x94>)
 8004ea0:	701a      	strb	r2, [r3, #0]

		if(tim7_1ms_count == 1)
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <TIM7_IRQHandler+0x94>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count = 0;
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <TIM7_IRQHandler+0x94>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <TIM7_IRQHandler+0x98>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
		}
		if(tim7_20ms_count == 20)
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <TIM7_IRQHandler+0x9c>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b14      	cmp	r3, #20
 8004ebc:	d105      	bne.n	8004eca <TIM7_IRQHandler+0x4a>
		{
			tim7_20ms_count = 0;
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <TIM7_IRQHandler+0x9c>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8004ec4:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <TIM7_IRQHandler+0xa0>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <TIM7_IRQHandler+0xa4>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <TIM7_IRQHandler+0xa4>)
 8004ed4:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100)
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <TIM7_IRQHandler+0xa4>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d105      	bne.n	8004eea <TIM7_IRQHandler+0x6a>
		{
			tim7_100ms_count = 0;
 8004ede:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <TIM7_IRQHandler+0xa4>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <TIM7_IRQHandler+0xa8>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <TIM7_IRQHandler+0xac>)
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	4b0e      	ldr	r3, [pc, #56]	; (8004f2c <TIM7_IRQHandler+0xac>)
 8004ef4:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000)
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <TIM7_IRQHandler+0xac>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004efe:	d105      	bne.n	8004f0c <TIM7_IRQHandler+0x8c>
		{
			tim7_1000ms_count = 0;
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <TIM7_IRQHandler+0xac>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <TIM7_IRQHandler+0xb0>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40001400 	.word	0x40001400
 8004f14:	200004a7 	.word	0x200004a7
 8004f18:	200004a4 	.word	0x200004a4
 8004f1c:	200004a8 	.word	0x200004a8
 8004f20:	200004a1 	.word	0x200004a1
 8004f24:	200004a9 	.word	0x200004a9
 8004f28:	200004a2 	.word	0x200004a2
 8004f2c:	200004aa 	.word	0x200004aa
 8004f30:	200004a3 	.word	0x200004a3

08004f34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f38:	4802      	ldr	r0, [pc, #8]	; (8004f44 <DMA2_Stream0_IRQHandler+0x10>)
 8004f3a:	f001 fddf 	bl	8006afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000039c 	.word	0x2000039c

08004f48 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)){
 8004f4c:	480a      	ldr	r0, [pc, #40]	; (8004f78 <USART6_IRQHandler+0x30>)
 8004f4e:	f7ff fe48 	bl	8004be2 <LL_USART_IsActiveFlag_RXNE>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8004f58:	4807      	ldr	r0, [pc, #28]	; (8004f78 <USART6_IRQHandler+0x30>)
 8004f5a:	f7ff fe55 	bl	8004c08 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8004f5e:	4806      	ldr	r0, [pc, #24]	; (8004f78 <USART6_IRQHandler+0x30>)
 8004f60:	f7ff fe60 	bl	8004c24 <LL_USART_ReceiveData8>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <USART6_IRQHandler+0x34>)
 8004f6a:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <USART6_IRQHandler+0x38>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40011400 	.word	0x40011400
 8004f7c:	20000453 	.word	0x20000453
 8004f80:	20000452 	.word	0x20000452

08004f84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  return 1;
 8004f88:	2301      	movs	r3, #1
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <_kill>:

int _kill(int pid, int sig)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f9e:	f004 ffa3 	bl	8009ee8 <__errno>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2216      	movs	r2, #22
 8004fa6:	601a      	str	r2, [r3, #0]
  return -1;
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_exit>:

void _exit (int status)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff ffe7 	bl	8004f94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fc6:	e7fe      	b.n	8004fc6 <_exit+0x12>

08004fc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e00a      	b.n	8004ff0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fda:	f3af 8000 	nop.w
 8004fde:	4601      	mov	r1, r0
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	60ba      	str	r2, [r7, #8]
 8004fe6:	b2ca      	uxtb	r2, r1
 8004fe8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	3301      	adds	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	dbf0      	blt.n	8004fda <_read+0x12>
  }

  return len;
 8004ff8:	687b      	ldr	r3, [r7, #4]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800500a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800502a:	605a      	str	r2, [r3, #4]
  return 0;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <_isatty>:

int _isatty(int file)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005042:	2301      	movs	r3, #1
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <_sbrk+0x5c>)
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <_sbrk+0x60>)
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <_sbrk+0x64>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <_sbrk+0x64>)
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <_sbrk+0x68>)
 800508c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800508e:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <_sbrk+0x64>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	429a      	cmp	r2, r3
 800509a:	d207      	bcs.n	80050ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800509c:	f004 ff24 	bl	8009ee8 <__errno>
 80050a0:	4603      	mov	r3, r0
 80050a2:	220c      	movs	r2, #12
 80050a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	e009      	b.n	80050c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <_sbrk+0x64>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <_sbrk+0x64>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <_sbrk+0x64>)
 80050bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050be:	68fb      	ldr	r3, [r7, #12]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20020000 	.word	0x20020000
 80050cc:	00000400 	.word	0x00000400
 80050d0:	200004ac 	.word	0x200004ac
 80050d4:	20000508 	.word	0x20000508

080050d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <SystemInit+0x20>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <SystemInit+0x20>)
 80050e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <__NVIC_GetPriorityGrouping>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <__NVIC_GetPriorityGrouping+0x18>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0a1b      	lsrs	r3, r3, #8
 8005106:	f003 0307 	and.w	r3, r3, #7
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <__NVIC_EnableIRQ>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	db0b      	blt.n	8005142 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	f003 021f 	and.w	r2, r3, #31
 8005130:	4907      	ldr	r1, [pc, #28]	; (8005150 <__NVIC_EnableIRQ+0x38>)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2001      	movs	r0, #1
 800513a:	fa00 f202 	lsl.w	r2, r0, r2
 800513e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000e100 	.word	0xe000e100

08005154 <__NVIC_SetPriority>:
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db0a      	blt.n	800517e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	490c      	ldr	r1, [pc, #48]	; (80051a0 <__NVIC_SetPriority+0x4c>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	0112      	lsls	r2, r2, #4
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	440b      	add	r3, r1
 8005178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800517c:	e00a      	b.n	8005194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4908      	ldr	r1, [pc, #32]	; (80051a4 <__NVIC_SetPriority+0x50>)
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	3b04      	subs	r3, #4
 800518c:	0112      	lsls	r2, r2, #4
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	440b      	add	r3, r1
 8005192:	761a      	strb	r2, [r3, #24]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000e100 	.word	0xe000e100
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <NVIC_EncodePriority>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f1c3 0307 	rsb	r3, r3, #7
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	bf28      	it	cs
 80051c6:	2304      	movcs	r3, #4
 80051c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d902      	bls.n	80051d8 <NVIC_EncodePriority+0x30>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3b03      	subs	r3, #3
 80051d6:	e000      	b.n	80051da <NVIC_EncodePriority+0x32>
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	f04f 32ff 	mov.w	r2, #4294967295
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43da      	mvns	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	401a      	ands	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f0:	f04f 31ff 	mov.w	r1, #4294967295
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	43d9      	mvns	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005200:	4313      	orrs	r3, r2
}
 8005202:	4618      	mov	r0, r3
 8005204:	3724      	adds	r7, #36	; 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <LL_TIM_EnableARRPreload>:
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <LL_TIM_OC_EnableFast>:
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d01c      	beq.n	800527a <LL_TIM_OC_EnableFast+0x4a>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d017      	beq.n	8005276 <LL_TIM_OC_EnableFast+0x46>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b10      	cmp	r3, #16
 800524a:	d012      	beq.n	8005272 <LL_TIM_OC_EnableFast+0x42>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d00d      	beq.n	800526e <LL_TIM_OC_EnableFast+0x3e>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d007      	beq.n	800526a <LL_TIM_OC_EnableFast+0x3a>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005260:	d101      	bne.n	8005266 <LL_TIM_OC_EnableFast+0x36>
 8005262:	2305      	movs	r3, #5
 8005264:	e00a      	b.n	800527c <LL_TIM_OC_EnableFast+0x4c>
 8005266:	2306      	movs	r3, #6
 8005268:	e008      	b.n	800527c <LL_TIM_OC_EnableFast+0x4c>
 800526a:	2304      	movs	r3, #4
 800526c:	e006      	b.n	800527c <LL_TIM_OC_EnableFast+0x4c>
 800526e:	2303      	movs	r3, #3
 8005270:	e004      	b.n	800527c <LL_TIM_OC_EnableFast+0x4c>
 8005272:	2302      	movs	r3, #2
 8005274:	e002      	b.n	800527c <LL_TIM_OC_EnableFast+0x4c>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <LL_TIM_OC_EnableFast+0x4c>
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3318      	adds	r3, #24
 8005282:	4619      	mov	r1, r3
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <LL_TIM_OC_EnableFast+0x80>)
 8005288:	5cd3      	ldrb	r3, [r2, r3]
 800528a:	440b      	add	r3, r1
 800528c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	4907      	ldr	r1, [pc, #28]	; (80052b4 <LL_TIM_OC_EnableFast+0x84>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	4619      	mov	r1, r3
 800529a:	2304      	movs	r3, #4
 800529c:	408b      	lsls	r3, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	0800db4c 	.word	0x0800db4c
 80052b4:	0800db54 	.word	0x0800db54

080052b8 <LL_TIM_OC_EnablePreload>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d01c      	beq.n	8005302 <LL_TIM_OC_EnablePreload+0x4a>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d017      	beq.n	80052fe <LL_TIM_OC_EnablePreload+0x46>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d012      	beq.n	80052fa <LL_TIM_OC_EnablePreload+0x42>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d00d      	beq.n	80052f6 <LL_TIM_OC_EnablePreload+0x3e>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e0:	d007      	beq.n	80052f2 <LL_TIM_OC_EnablePreload+0x3a>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d101      	bne.n	80052ee <LL_TIM_OC_EnablePreload+0x36>
 80052ea:	2305      	movs	r3, #5
 80052ec:	e00a      	b.n	8005304 <LL_TIM_OC_EnablePreload+0x4c>
 80052ee:	2306      	movs	r3, #6
 80052f0:	e008      	b.n	8005304 <LL_TIM_OC_EnablePreload+0x4c>
 80052f2:	2304      	movs	r3, #4
 80052f4:	e006      	b.n	8005304 <LL_TIM_OC_EnablePreload+0x4c>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e004      	b.n	8005304 <LL_TIM_OC_EnablePreload+0x4c>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e002      	b.n	8005304 <LL_TIM_OC_EnablePreload+0x4c>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <LL_TIM_OC_EnablePreload+0x4c>
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3318      	adds	r3, #24
 800530a:	4619      	mov	r1, r3
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <LL_TIM_OC_EnablePreload+0x80>)
 8005310:	5cd3      	ldrb	r3, [r2, r3]
 8005312:	440b      	add	r3, r1
 8005314:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	4907      	ldr	r1, [pc, #28]	; (800533c <LL_TIM_OC_EnablePreload+0x84>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	4619      	mov	r1, r3
 8005322:	2308      	movs	r3, #8
 8005324:	408b      	lsls	r3, r1
 8005326:	431a      	orrs	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	601a      	str	r2, [r3, #0]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	0800db4c 	.word	0x0800db4c
 800533c:	0800db54 	.word	0x0800db54

08005340 <LL_TIM_SetClockSource>:
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	609a      	str	r2, [r3, #8]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <LL_TIM_SetTriggerOutput>:
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_TIM_DisableMasterSlaveMode>:
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <LL_AHB1_GRP1_EnableClock>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80053ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053bc:	4907      	ldr	r1, [pc, #28]	; (80053dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80053c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4013      	ands	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053ce:	68fb      	ldr	r3, [r7, #12]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40023800 	.word	0x40023800

080053e0 <LL_APB1_GRP1_EnableClock>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80053e8:	4b08      	ldr	r3, [pc, #32]	; (800540c <LL_APB1_GRP1_EnableClock+0x2c>)
 80053ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ec:	4907      	ldr	r1, [pc, #28]	; (800540c <LL_APB1_GRP1_EnableClock+0x2c>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <LL_APB1_GRP1_EnableClock+0x2c>)
 80053f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4013      	ands	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40023800 	.word	0x40023800

08005410 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b094      	sub	sp, #80	; 0x50
 8005414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005416:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	605a      	str	r2, [r3, #4]
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	60da      	str	r2, [r3, #12]
 8005424:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005426:	f107 031c 	add.w	r3, r7, #28
 800542a:	2220      	movs	r2, #32
 800542c:	2100      	movs	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f004 fd84 	bl	8009f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005434:	1d3b      	adds	r3, r7, #4
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	605a      	str	r2, [r3, #4]
 800543c:	609a      	str	r2, [r3, #8]
 800543e:	60da      	str	r2, [r3, #12]
 8005440:	611a      	str	r2, [r3, #16]
 8005442:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8005444:	2002      	movs	r0, #2
 8005446:	f7ff ffcb 	bl	80053e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800544a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800544e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005450:	2300      	movs	r3, #0
 8005452:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8005454:	2314      	movs	r3, #20
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005458:	2300      	movs	r3, #0
 800545a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800545c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005460:	4619      	mov	r1, r3
 8005462:	4822      	ldr	r0, [pc, #136]	; (80054ec <MX_TIM3_Init+0xdc>)
 8005464:	f003 ffda 	bl	800941c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8005468:	4820      	ldr	r0, [pc, #128]	; (80054ec <MX_TIM3_Init+0xdc>)
 800546a:	f7ff fed0 	bl	800520e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800546e:	2100      	movs	r1, #0
 8005470:	481e      	ldr	r0, [pc, #120]	; (80054ec <MX_TIM3_Init+0xdc>)
 8005472:	f7ff ff65 	bl	8005340 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8005476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800547a:	481c      	ldr	r0, [pc, #112]	; (80054ec <MX_TIM3_Init+0xdc>)
 800547c:	f7ff ff1c 	bl	80052b8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005480:	2360      	movs	r3, #96	; 0x60
 8005482:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005484:	2300      	movs	r3, #0
 8005486:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005488:	2300      	movs	r3, #0
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800548c:	230a      	movs	r3, #10
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005494:	f107 031c 	add.w	r3, r7, #28
 8005498:	461a      	mov	r2, r3
 800549a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800549e:	4813      	ldr	r0, [pc, #76]	; (80054ec <MX_TIM3_Init+0xdc>)
 80054a0:	f004 f856 	bl	8009550 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80054a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054a8:	4810      	ldr	r0, [pc, #64]	; (80054ec <MX_TIM3_Init+0xdc>)
 80054aa:	f7ff fec1 	bl	8005230 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80054ae:	2100      	movs	r1, #0
 80054b0:	480e      	ldr	r0, [pc, #56]	; (80054ec <MX_TIM3_Init+0xdc>)
 80054b2:	f7ff ff5a 	bl	800536a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80054b6:	480d      	ldr	r0, [pc, #52]	; (80054ec <MX_TIM3_Init+0xdc>)
 80054b8:	f7ff ff6a 	bl	8005390 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80054bc:	2002      	movs	r0, #2
 80054be:	f7ff ff77 	bl	80053b0 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80054c2:	2302      	movs	r3, #2
 80054c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80054c6:	2302      	movs	r3, #2
 80054c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80054d6:	2302      	movs	r3, #2
 80054d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4804      	ldr	r0, [pc, #16]	; (80054f0 <MX_TIM3_Init+0xe0>)
 80054e0:	f003 fd07 	bl	8008ef2 <LL_GPIO_Init>

}
 80054e4:	bf00      	nop
 80054e6:	3750      	adds	r7, #80	; 0x50
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40020400 	.word	0x40020400

080054f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b094      	sub	sp, #80	; 0x50
 80054f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80054fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	609a      	str	r2, [r3, #8]
 8005506:	60da      	str	r2, [r3, #12]
 8005508:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800550a:	f107 031c 	add.w	r3, r7, #28
 800550e:	2220      	movs	r2, #32
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f004 fd12 	bl	8009f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005518:	1d3b      	adds	r3, r7, #4
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	609a      	str	r2, [r3, #8]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	611a      	str	r2, [r3, #16]
 8005526:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8005528:	2008      	movs	r0, #8
 800552a:	f7ff ff59 	bl	80053e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005532:	2300      	movs	r3, #0
 8005534:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 8005536:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800553c:	2300      	movs	r3, #0
 800553e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8005540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005544:	4619      	mov	r1, r3
 8005546:	483a      	ldr	r0, [pc, #232]	; (8005630 <MX_TIM5_Init+0x13c>)
 8005548:	f003 ff68 	bl	800941c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 800554c:	4838      	ldr	r0, [pc, #224]	; (8005630 <MX_TIM5_Init+0x13c>)
 800554e:	f7ff fe5e 	bl	800520e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005552:	2100      	movs	r1, #0
 8005554:	4836      	ldr	r0, [pc, #216]	; (8005630 <MX_TIM5_Init+0x13c>)
 8005556:	f7ff fef3 	bl	8005340 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 800555a:	2101      	movs	r1, #1
 800555c:	4834      	ldr	r0, [pc, #208]	; (8005630 <MX_TIM5_Init+0x13c>)
 800555e:	f7ff feab 	bl	80052b8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005562:	2360      	movs	r3, #96	; 0x60
 8005564:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005572:	2300      	movs	r3, #0
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005576:	f107 031c 	add.w	r3, r7, #28
 800557a:	461a      	mov	r2, r3
 800557c:	2101      	movs	r1, #1
 800557e:	482c      	ldr	r0, [pc, #176]	; (8005630 <MX_TIM5_Init+0x13c>)
 8005580:	f003 ffe6 	bl	8009550 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8005584:	2101      	movs	r1, #1
 8005586:	482a      	ldr	r0, [pc, #168]	; (8005630 <MX_TIM5_Init+0x13c>)
 8005588:	f7ff fe52 	bl	8005230 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800558c:	2110      	movs	r1, #16
 800558e:	4828      	ldr	r0, [pc, #160]	; (8005630 <MX_TIM5_Init+0x13c>)
 8005590:	f7ff fe92 	bl	80052b8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005594:	f107 031c 	add.w	r3, r7, #28
 8005598:	461a      	mov	r2, r3
 800559a:	2110      	movs	r1, #16
 800559c:	4824      	ldr	r0, [pc, #144]	; (8005630 <MX_TIM5_Init+0x13c>)
 800559e:	f003 ffd7 	bl	8009550 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 80055a2:	2110      	movs	r1, #16
 80055a4:	4822      	ldr	r0, [pc, #136]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055a6:	f7ff fe43 	bl	8005230 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80055aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ae:	4820      	ldr	r0, [pc, #128]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055b0:	f7ff fe82 	bl	80052b8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80055b4:	f107 031c 	add.w	r3, r7, #28
 80055b8:	461a      	mov	r2, r3
 80055ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055be:	481c      	ldr	r0, [pc, #112]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055c0:	f003 ffc6 	bl	8009550 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 80055c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c8:	4819      	ldr	r0, [pc, #100]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055ca:	f7ff fe31 	bl	8005230 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80055ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055d2:	4817      	ldr	r0, [pc, #92]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055d4:	f7ff fe70 	bl	80052b8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80055d8:	f107 031c 	add.w	r3, r7, #28
 80055dc:	461a      	mov	r2, r3
 80055de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055e2:	4813      	ldr	r0, [pc, #76]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055e4:	f003 ffb4 	bl	8009550 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 80055e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055ec:	4810      	ldr	r0, [pc, #64]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055ee:	f7ff fe1f 	bl	8005230 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80055f2:	2100      	movs	r1, #0
 80055f4:	480e      	ldr	r0, [pc, #56]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055f6:	f7ff feb8 	bl	800536a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80055fa:	480d      	ldr	r0, [pc, #52]	; (8005630 <MX_TIM5_Init+0x13c>)
 80055fc:	f7ff fec8 	bl	8005390 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005600:	2001      	movs	r0, #1
 8005602:	f7ff fed5 	bl	80053b0 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8005606:	230f      	movs	r3, #15
 8005608:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800560a:	2302      	movs	r3, #2
 800560c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800561a:	2302      	movs	r3, #2
 800561c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561e:	1d3b      	adds	r3, r7, #4
 8005620:	4619      	mov	r1, r3
 8005622:	4804      	ldr	r0, [pc, #16]	; (8005634 <MX_TIM5_Init+0x140>)
 8005624:	f003 fc65 	bl	8008ef2 <LL_GPIO_Init>

}
 8005628:	bf00      	nop
 800562a:	3750      	adds	r7, #80	; 0x50
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40000c00 	.word	0x40000c00
 8005634:	40020000 	.word	0x40020000

08005638 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800564c:	2020      	movs	r0, #32
 800564e:	f7ff fec7 	bl	80053e0 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005652:	f7ff fd53 	bl	80050fc <__NVIC_GetPriorityGrouping>
 8005656:	4603      	mov	r3, r0
 8005658:	2200      	movs	r2, #0
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fda3 	bl	80051a8 <NVIC_EncodePriority>
 8005662:	4603      	mov	r3, r0
 8005664:	4619      	mov	r1, r3
 8005666:	2037      	movs	r0, #55	; 0x37
 8005668:	f7ff fd74 	bl	8005154 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 800566c:	2037      	movs	r0, #55	; 0x37
 800566e:	f7ff fd53 	bl	8005118 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8005672:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8005676:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005678:	2300      	movs	r3, #0
 800567a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 800567c:	2301      	movs	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	4619      	mov	r1, r3
 8005684:	4808      	ldr	r0, [pc, #32]	; (80056a8 <MX_TIM7_Init+0x70>)
 8005686:	f003 fec9 	bl	800941c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 800568a:	4807      	ldr	r0, [pc, #28]	; (80056a8 <MX_TIM7_Init+0x70>)
 800568c:	f7ff fdbf 	bl	800520e <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8005690:	2100      	movs	r1, #0
 8005692:	4805      	ldr	r0, [pc, #20]	; (80056a8 <MX_TIM7_Init+0x70>)
 8005694:	f7ff fe69 	bl	800536a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8005698:	4803      	ldr	r0, [pc, #12]	; (80056a8 <MX_TIM7_Init+0x70>)
 800569a:	f7ff fe79 	bl	8005390 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40001400 	.word	0x40001400

080056ac <__NVIC_GetPriorityGrouping>:
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <__NVIC_GetPriorityGrouping+0x18>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	0a1b      	lsrs	r3, r3, #8
 80056b6:	f003 0307 	and.w	r3, r3, #7
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	e000ed00 	.word	0xe000ed00

080056c8 <__NVIC_EnableIRQ>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	db0b      	blt.n	80056f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	f003 021f 	and.w	r2, r3, #31
 80056e0:	4907      	ldr	r1, [pc, #28]	; (8005700 <__NVIC_EnableIRQ+0x38>)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	2001      	movs	r0, #1
 80056ea:	fa00 f202 	lsl.w	r2, r0, r2
 80056ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	e000e100 	.word	0xe000e100

08005704 <__NVIC_SetPriority>:
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	6039      	str	r1, [r7, #0]
 800570e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005714:	2b00      	cmp	r3, #0
 8005716:	db0a      	blt.n	800572e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	490c      	ldr	r1, [pc, #48]	; (8005750 <__NVIC_SetPriority+0x4c>)
 800571e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005722:	0112      	lsls	r2, r2, #4
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	440b      	add	r3, r1
 8005728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800572c:	e00a      	b.n	8005744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	4908      	ldr	r1, [pc, #32]	; (8005754 <__NVIC_SetPriority+0x50>)
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	3b04      	subs	r3, #4
 800573c:	0112      	lsls	r2, r2, #4
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	440b      	add	r3, r1
 8005742:	761a      	strb	r2, [r3, #24]
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	e000e100 	.word	0xe000e100
 8005754:	e000ed00 	.word	0xe000ed00

08005758 <NVIC_EncodePriority>:
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f1c3 0307 	rsb	r3, r3, #7
 8005772:	2b04      	cmp	r3, #4
 8005774:	bf28      	it	cs
 8005776:	2304      	movcs	r3, #4
 8005778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3304      	adds	r3, #4
 800577e:	2b06      	cmp	r3, #6
 8005780:	d902      	bls.n	8005788 <NVIC_EncodePriority+0x30>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3b03      	subs	r3, #3
 8005786:	e000      	b.n	800578a <NVIC_EncodePriority+0x32>
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800578c:	f04f 32ff 	mov.w	r2, #4294967295
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43da      	mvns	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	401a      	ands	r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057a0:	f04f 31ff 	mov.w	r1, #4294967295
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	fa01 f303 	lsl.w	r3, r1, r3
 80057aa:	43d9      	mvns	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b0:	4313      	orrs	r3, r2
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3724      	adds	r7, #36	; 0x24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <LL_USART_Enable>:
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60da      	str	r2, [r3, #12]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_USART_ConfigAsyncMode>:
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	615a      	str	r2, [r3, #20]
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <LL_AHB1_GRP1_EnableClock>:
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005818:	4907      	ldr	r1, [pc, #28]	; (8005838 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4313      	orrs	r3, r2
 800581e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4013      	ands	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800582a:	68fb      	ldr	r3, [r7, #12]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40023800 	.word	0x40023800

0800583c <LL_APB1_GRP1_EnableClock>:
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005848:	4907      	ldr	r1, [pc, #28]	; (8005868 <LL_APB1_GRP1_EnableClock+0x2c>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4313      	orrs	r3, r2
 800584e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4013      	ands	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800585a:	68fb      	ldr	r3, [r7, #12]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40023800 	.word	0x40023800

0800586c <LL_APB2_GRP1_EnableClock>:
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005878:	4907      	ldr	r1, [pc, #28]	; (8005898 <LL_APB2_GRP1_EnableClock+0x2c>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4313      	orrs	r3, r2
 800587e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4013      	ands	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800588a:	68fb      	ldr	r3, [r7, #12]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	40023800 	.word	0x40023800

0800589c <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08e      	sub	sp, #56	; 0x38
 80058a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80058a2:	f107 031c 	add.w	r3, r7, #28
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	611a      	str	r2, [r3, #16]
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b6:	1d3b      	adds	r3, r7, #4
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	609a      	str	r2, [r3, #8]
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	611a      	str	r2, [r3, #16]
 80058c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80058c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058ca:	f7ff ffb7 	bl	800583c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80058ce:	2004      	movs	r0, #4
 80058d0:	f7ff ff9c 	bl	800580c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80058d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80058da:	2302      	movs	r3, #2
 80058dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80058de:	2303      	movs	r3, #3
 80058e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80058ea:	2308      	movs	r3, #8
 80058ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4819      	ldr	r0, [pc, #100]	; (8005958 <MX_UART4_Init+0xbc>)
 80058f4:	f003 fafd 	bl	8008ef2 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80058f8:	f7ff fed8 	bl	80056ac <__NVIC_GetPriorityGrouping>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2200      	movs	r2, #0
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff ff28 	bl	8005758 <NVIC_EncodePriority>
 8005908:	4603      	mov	r3, r0
 800590a:	4619      	mov	r1, r3
 800590c:	2034      	movs	r0, #52	; 0x34
 800590e:	f7ff fef9 	bl	8005704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8005912:	2034      	movs	r0, #52	; 0x34
 8005914:	f7ff fed8 	bl	80056c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8005918:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800591c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005922:	2300      	movs	r3, #0
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005926:	2300      	movs	r3, #0
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800592a:	230c      	movs	r3, #12
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800592e:	2300      	movs	r3, #0
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8005936:	f107 031c 	add.w	r3, r7, #28
 800593a:	4619      	mov	r1, r3
 800593c:	4807      	ldr	r0, [pc, #28]	; (800595c <MX_UART4_Init+0xc0>)
 800593e:	f004 fa53 	bl	8009de8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8005942:	4806      	ldr	r0, [pc, #24]	; (800595c <MX_UART4_Init+0xc0>)
 8005944:	f7ff ff4b 	bl	80057de <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8005948:	4804      	ldr	r0, [pc, #16]	; (800595c <MX_UART4_Init+0xc0>)
 800594a:	f7ff ff38 	bl	80057be <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800594e:	bf00      	nop
 8005950:	3738      	adds	r7, #56	; 0x38
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40020800 	.word	0x40020800
 800595c:	40004c00 	.word	0x40004c00

08005960 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08e      	sub	sp, #56	; 0x38
 8005964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005966:	f107 031c 	add.w	r3, r7, #28
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	60da      	str	r2, [r3, #12]
 8005974:	611a      	str	r2, [r3, #16]
 8005976:	615a      	str	r2, [r3, #20]
 8005978:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	609a      	str	r2, [r3, #8]
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800598a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800598e:	f7ff ff55 	bl	800583c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005992:	2004      	movs	r0, #4
 8005994:	f7ff ff3a 	bl	800580c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005998:	2008      	movs	r0, #8
 800599a:	f7ff ff37 	bl	800580c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800599e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80059a4:	2302      	movs	r3, #2
 80059a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80059a8:	2303      	movs	r3, #3
 80059aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80059b4:	2308      	movs	r3, #8
 80059b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	4619      	mov	r1, r3
 80059bc:	4821      	ldr	r0, [pc, #132]	; (8005a44 <MX_UART5_Init+0xe4>)
 80059be:	f003 fa98 	bl	8008ef2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80059c2:	2304      	movs	r3, #4
 80059c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80059c6:	2302      	movs	r3, #2
 80059c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80059ca:	2303      	movs	r3, #3
 80059cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80059d6:	2308      	movs	r3, #8
 80059d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	481a      	ldr	r0, [pc, #104]	; (8005a48 <MX_UART5_Init+0xe8>)
 80059e0:	f003 fa87 	bl	8008ef2 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80059e4:	f7ff fe62 	bl	80056ac <__NVIC_GetPriorityGrouping>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2200      	movs	r2, #0
 80059ec:	2100      	movs	r1, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff feb2 	bl	8005758 <NVIC_EncodePriority>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4619      	mov	r1, r3
 80059f8:	2035      	movs	r0, #53	; 0x35
 80059fa:	f7ff fe83 	bl	8005704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80059fe:	2035      	movs	r0, #53	; 0x35
 8005a00:	f7ff fe62 	bl	80056c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8005a04:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005a08:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8005a16:	2304      	movs	r3, #4
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8005a22:	f107 031c 	add.w	r3, r7, #28
 8005a26:	4619      	mov	r1, r3
 8005a28:	4808      	ldr	r0, [pc, #32]	; (8005a4c <MX_UART5_Init+0xec>)
 8005a2a:	f004 f9dd 	bl	8009de8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8005a2e:	4807      	ldr	r0, [pc, #28]	; (8005a4c <MX_UART5_Init+0xec>)
 8005a30:	f7ff fed5 	bl	80057de <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8005a34:	4805      	ldr	r0, [pc, #20]	; (8005a4c <MX_UART5_Init+0xec>)
 8005a36:	f7ff fec2 	bl	80057be <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005a3a:	bf00      	nop
 8005a3c:	3738      	adds	r7, #56	; 0x38
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40020800 	.word	0x40020800
 8005a48:	40020c00 	.word	0x40020c00
 8005a4c:	40005000 	.word	0x40005000

08005a50 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a56:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <MX_USART1_UART_Init+0x50>)
 8005a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005a5a:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005a62:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005a74:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a76:	220c      	movs	r2, #12
 8005a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a7a:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005a86:	4805      	ldr	r0, [pc, #20]	; (8005a9c <MX_USART1_UART_Init+0x4c>)
 8005a88:	f002 fa1a 	bl	8007ec0 <HAL_UART_Init>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005a92:	f7fe ff05 	bl	80048a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a96:	bf00      	nop
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200004b0 	.word	0x200004b0
 8005aa0:	40011000 	.word	0x40011000

08005aa4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08e      	sub	sp, #56	; 0x38
 8005aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005aaa:	f107 031c 	add.w	r3, r7, #28
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	609a      	str	r2, [r3, #8]
 8005ab6:	60da      	str	r2, [r3, #12]
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	615a      	str	r2, [r3, #20]
 8005abc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	609a      	str	r2, [r3, #8]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	611a      	str	r2, [r3, #16]
 8005acc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8005ace:	2020      	movs	r0, #32
 8005ad0:	f7ff fecc 	bl	800586c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005ad4:	2004      	movs	r0, #4
 8005ad6:	f7ff fe99 	bl	800580c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005ada:	23c0      	movs	r3, #192	; 0xc0
 8005adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005aee:	2308      	movs	r3, #8
 8005af0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4819      	ldr	r0, [pc, #100]	; (8005b5c <MX_USART6_UART_Init+0xb8>)
 8005af8:	f003 f9fb 	bl	8008ef2 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005afc:	f7ff fdd6 	bl	80056ac <__NVIC_GetPriorityGrouping>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2200      	movs	r2, #0
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fe26 	bl	8005758 <NVIC_EncodePriority>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4619      	mov	r1, r3
 8005b10:	2047      	movs	r0, #71	; 0x47
 8005b12:	f7ff fdf7 	bl	8005704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8005b16:	2047      	movs	r0, #71	; 0x47
 8005b18:	f7ff fdd6 	bl	80056c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8005b1c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005b20:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005b22:	2300      	movs	r3, #0
 8005b24:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005b2e:	230c      	movs	r3, #12
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005b36:	2300      	movs	r3, #0
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8005b3a:	f107 031c 	add.w	r3, r7, #28
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4807      	ldr	r0, [pc, #28]	; (8005b60 <MX_USART6_UART_Init+0xbc>)
 8005b42:	f004 f951 	bl	8009de8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8005b46:	4806      	ldr	r0, [pc, #24]	; (8005b60 <MX_USART6_UART_Init+0xbc>)
 8005b48:	f7ff fe49 	bl	80057de <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8005b4c:	4804      	ldr	r0, [pc, #16]	; (8005b60 <MX_USART6_UART_Init+0xbc>)
 8005b4e:	f7ff fe36 	bl	80057be <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005b52:	bf00      	nop
 8005b54:	3738      	adds	r7, #56	; 0x38
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40020800 	.word	0x40020800
 8005b60:	40011400 	.word	0x40011400

08005b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	; 0x28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6c:	f107 0314 	add.w	r3, r7, #20
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	609a      	str	r2, [r3, #8]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <HAL_UART_MspInit+0x94>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d134      	bne.n	8005bf0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	4b1c      	ldr	r3, [pc, #112]	; (8005bfc <HAL_UART_MspInit+0x98>)
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_UART_MspInit+0x98>)
 8005b90:	f043 0310 	orr.w	r3, r3, #16
 8005b94:	6453      	str	r3, [r2, #68]	; 0x44
 8005b96:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <HAL_UART_MspInit+0x98>)
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <HAL_UART_MspInit+0x98>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <HAL_UART_MspInit+0x98>)
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <HAL_UART_MspInit+0x98>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005bbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4809      	ldr	r0, [pc, #36]	; (8005c00 <HAL_UART_MspInit+0x9c>)
 8005bdc:	f001 f9f8 	bl	8006fd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005be0:	2200      	movs	r2, #0
 8005be2:	2100      	movs	r1, #0
 8005be4:	2025      	movs	r0, #37	; 0x25
 8005be6:	f000 fdba 	bl	800675e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005bea:	2025      	movs	r0, #37	; 0x25
 8005bec:	f000 fdd3 	bl	8006796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3728      	adds	r7, #40	; 0x28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40011000 	.word	0x40011000
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	40020000 	.word	0x40020000

08005c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c08:	480d      	ldr	r0, [pc, #52]	; (8005c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005c0a:	490e      	ldr	r1, [pc, #56]	; (8005c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005c0c:	4a0e      	ldr	r2, [pc, #56]	; (8005c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c10:	e002      	b.n	8005c18 <LoopCopyDataInit>

08005c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c16:	3304      	adds	r3, #4

08005c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c1c:	d3f9      	bcc.n	8005c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c1e:	4a0b      	ldr	r2, [pc, #44]	; (8005c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005c20:	4c0b      	ldr	r4, [pc, #44]	; (8005c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c24:	e001      	b.n	8005c2a <LoopFillZerobss>

08005c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c28:	3204      	adds	r2, #4

08005c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c2c:	d3fb      	bcc.n	8005c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c2e:	f7ff fa53 	bl	80050d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c32:	f004 f95f 	bl	8009ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c36:	f7fd fd8f 	bl	8003758 <main>
  bx  lr    
 8005c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c44:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8005c48:	0800df9c 	.word	0x0800df9c
  ldr r2, =_sbss
 8005c4c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005c50:	20000508 	.word	0x20000508

08005c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c54:	e7fe      	b.n	8005c54 <ADC_IRQHandler>
	...

08005c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <HAL_Init+0x40>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0d      	ldr	r2, [pc, #52]	; (8005c98 <HAL_Init+0x40>)
 8005c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_Init+0x40>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <HAL_Init+0x40>)
 8005c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <HAL_Init+0x40>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a07      	ldr	r2, [pc, #28]	; (8005c98 <HAL_Init+0x40>)
 8005c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c80:	2003      	movs	r0, #3
 8005c82:	f000 fd61 	bl	8006748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c86:	200f      	movs	r0, #15
 8005c88:	f000 f808 	bl	8005c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c8c:	f7fe ff60 	bl	8004b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023c00 	.word	0x40023c00

08005c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ca4:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <HAL_InitTick+0x54>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_InitTick+0x58>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	4619      	mov	r1, r3
 8005cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fd79 	bl	80067b2 <HAL_SYSTICK_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e00e      	b.n	8005ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	d80a      	bhi.n	8005ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	f000 fd41 	bl	800675e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cdc:	4a06      	ldr	r2, [pc, #24]	; (8005cf8 <HAL_InitTick+0x5c>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e000      	b.n	8005ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000004 	.word	0x20000004
 8005cf4:	2000000c 	.word	0x2000000c
 8005cf8:	20000008 	.word	0x20000008

08005cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_IncTick+0x20>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <HAL_IncTick+0x24>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <HAL_IncTick+0x24>)
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	200004f4 	.word	0x200004f4

08005d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return uwTick;
 8005d28:	4b03      	ldr	r3, [pc, #12]	; (8005d38 <HAL_GetTick+0x14>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	200004f4 	.word	0x200004f4

08005d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d44:	f7ff ffee 	bl	8005d24 <HAL_GetTick>
 8005d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d005      	beq.n	8005d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d56:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_Delay+0x44>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d62:	bf00      	nop
 8005d64:	f7ff ffde 	bl	8005d24 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d8f7      	bhi.n	8005d64 <HAL_Delay+0x28>
  {
  }
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2000000c 	.word	0x2000000c

08005d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e033      	b.n	8005e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fd fa32 	bl	800320c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d118      	bne.n	8005df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005dca:	f023 0302 	bic.w	r3, r3, #2
 8005dce:	f043 0202 	orr.w	r2, r3, #2
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa68 	bl	80062ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	f043 0201 	orr.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
 8005df2:	e001      	b.n	8005df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_ADC_Start_DMA+0x1e>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e0e9      	b.n	8005ffe <HAL_ADC_Start_DMA+0x1f2>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d018      	beq.n	8005e72 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e50:	4b6d      	ldr	r3, [pc, #436]	; (8006008 <HAL_ADC_Start_DMA+0x1fc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6d      	ldr	r2, [pc, #436]	; (800600c <HAL_ADC_Start_DMA+0x200>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	0c9a      	lsrs	r2, r3, #18
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	4413      	add	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005e64:	e002      	b.n	8005e6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f9      	bne.n	8005e66 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e80:	d107      	bne.n	8005e92 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	f040 80a1 	bne.w	8005fe4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ecc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee0:	d106      	bne.n	8005ef0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	f023 0206 	bic.w	r2, r3, #6
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
 8005eee:	e002      	b.n	8005ef6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <HAL_ADC_Start_DMA+0x204>)
 8005f00:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	4a43      	ldr	r2, [pc, #268]	; (8006014 <HAL_ADC_Start_DMA+0x208>)
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	4a42      	ldr	r2, [pc, #264]	; (8006018 <HAL_ADC_Start_DMA+0x20c>)
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	4a41      	ldr	r2, [pc, #260]	; (800601c <HAL_ADC_Start_DMA+0x210>)
 8005f18:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005f22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005f32:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f42:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	334c      	adds	r3, #76	; 0x4c
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f000 fce8 	bl	8006928 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d12a      	bne.n	8005fba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2d      	ldr	r2, [pc, #180]	; (8006020 <HAL_ADC_Start_DMA+0x214>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d015      	beq.n	8005f9a <HAL_ADC_Start_DMA+0x18e>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2c      	ldr	r2, [pc, #176]	; (8006024 <HAL_ADC_Start_DMA+0x218>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d105      	bne.n	8005f84 <HAL_ADC_Start_DMA+0x178>
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_ADC_Start_DMA+0x204>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a27      	ldr	r2, [pc, #156]	; (8006028 <HAL_ADC_Start_DMA+0x21c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d136      	bne.n	8005ffc <HAL_ADC_Start_DMA+0x1f0>
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_ADC_Start_DMA+0x204>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d130      	bne.n	8005ffc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d129      	bne.n	8005ffc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	e020      	b.n	8005ffc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a18      	ldr	r2, [pc, #96]	; (8006020 <HAL_ADC_Start_DMA+0x214>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d11b      	bne.n	8005ffc <HAL_ADC_Start_DMA+0x1f0>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d114      	bne.n	8005ffc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	e00b      	b.n	8005ffc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f043 0210 	orr.w	r2, r3, #16
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff4:	f043 0201 	orr.w	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000004 	.word	0x20000004
 800600c:	431bde83 	.word	0x431bde83
 8006010:	40012300 	.word	0x40012300
 8006014:	080064a5 	.word	0x080064a5
 8006018:	0800655f 	.word	0x0800655f
 800601c:	0800657b 	.word	0x0800657b
 8006020:	40012000 	.word	0x40012000
 8006024:	40012100 	.word	0x40012100
 8006028:	40012200 	.word	0x40012200

0800602c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x1c>
 8006080:	2302      	movs	r3, #2
 8006082:	e105      	b.n	8006290 <HAL_ADC_ConfigChannel+0x228>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b09      	cmp	r3, #9
 8006092:	d925      	bls.n	80060e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68d9      	ldr	r1, [r3, #12]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	4613      	mov	r3, r2
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	4413      	add	r3, r2
 80060a8:	3b1e      	subs	r3, #30
 80060aa:	2207      	movs	r2, #7
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43da      	mvns	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	400a      	ands	r2, r1
 80060b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68d9      	ldr	r1, [r3, #12]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4618      	mov	r0, r3
 80060cc:	4603      	mov	r3, r0
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4403      	add	r3, r0
 80060d2:	3b1e      	subs	r3, #30
 80060d4:	409a      	lsls	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	e022      	b.n	8006126 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6919      	ldr	r1, [r3, #16]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	4613      	mov	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	2207      	movs	r2, #7
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43da      	mvns	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	400a      	ands	r2, r1
 8006102:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6919      	ldr	r1, [r3, #16]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	4618      	mov	r0, r3
 8006116:	4603      	mov	r3, r0
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	4403      	add	r3, r0
 800611c:	409a      	lsls	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b06      	cmp	r3, #6
 800612c:	d824      	bhi.n	8006178 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	3b05      	subs	r3, #5
 8006140:	221f      	movs	r2, #31
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43da      	mvns	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	400a      	ands	r2, r1
 800614e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	4618      	mov	r0, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	3b05      	subs	r3, #5
 800616a:	fa00 f203 	lsl.w	r2, r0, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	635a      	str	r2, [r3, #52]	; 0x34
 8006176:	e04c      	b.n	8006212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d824      	bhi.n	80061ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	3b23      	subs	r3, #35	; 0x23
 8006192:	221f      	movs	r2, #31
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	43da      	mvns	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	400a      	ands	r2, r1
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	4618      	mov	r0, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	3b23      	subs	r3, #35	; 0x23
 80061bc:	fa00 f203 	lsl.w	r2, r0, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
 80061c8:	e023      	b.n	8006212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	3b41      	subs	r3, #65	; 0x41
 80061dc:	221f      	movs	r2, #31
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43da      	mvns	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	400a      	ands	r2, r1
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	4618      	mov	r0, r3
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	3b41      	subs	r3, #65	; 0x41
 8006206:	fa00 f203 	lsl.w	r2, r0, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <HAL_ADC_ConfigChannel+0x234>)
 8006214:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a21      	ldr	r2, [pc, #132]	; (80062a0 <HAL_ADC_ConfigChannel+0x238>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d109      	bne.n	8006234 <HAL_ADC_ConfigChannel+0x1cc>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b12      	cmp	r3, #18
 8006226:	d105      	bne.n	8006234 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a19      	ldr	r2, [pc, #100]	; (80062a0 <HAL_ADC_ConfigChannel+0x238>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d123      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x21e>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b10      	cmp	r3, #16
 8006244:	d003      	beq.n	800624e <HAL_ADC_ConfigChannel+0x1e6>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b11      	cmp	r3, #17
 800624c:	d11b      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b10      	cmp	r3, #16
 8006260:	d111      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <HAL_ADC_ConfigChannel+0x23c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a10      	ldr	r2, [pc, #64]	; (80062a8 <HAL_ADC_ConfigChannel+0x240>)
 8006268:	fba2 2303 	umull	r2, r3, r2, r3
 800626c:	0c9a      	lsrs	r2, r3, #18
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006278:	e002      	b.n	8006280 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	3b01      	subs	r3, #1
 800627e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f9      	bne.n	800627a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	40012300 	.word	0x40012300
 80062a0:	40012000 	.word	0x40012000
 80062a4:	20000004 	.word	0x20000004
 80062a8:	431bde83 	.word	0x431bde83

080062ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062b4:	4b79      	ldr	r3, [pc, #484]	; (800649c <ADC_Init+0x1f0>)
 80062b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	021a      	lsls	r2, r3, #8
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6859      	ldr	r1, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6899      	ldr	r1, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	4a58      	ldr	r2, [pc, #352]	; (80064a0 <ADC_Init+0x1f4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6899      	ldr	r1, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	e00f      	b.n	80063aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0202 	bic.w	r2, r2, #2
 80063b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6899      	ldr	r1, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7e1b      	ldrb	r3, [r3, #24]
 80063c4:	005a      	lsls	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01b      	beq.n	8006410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6859      	ldr	r1, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	3b01      	subs	r3, #1
 8006404:	035a      	lsls	r2, r3, #13
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	e007      	b.n	8006420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800641e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800642e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	3b01      	subs	r3, #1
 800643c:	051a      	lsls	r2, r3, #20
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6899      	ldr	r1, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006462:	025a      	lsls	r2, r3, #9
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	029a      	lsls	r2, r3, #10
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40012300 	.word	0x40012300
 80064a0:	0f000001 	.word	0x0f000001

080064a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d13c      	bne.n	8006538 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d12b      	bne.n	8006530 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d127      	bne.n	8006530 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d006      	beq.n	80064fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d119      	bne.n	8006530 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0220 	bic.w	r2, r2, #32
 800650a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	f043 0201 	orr.w	r2, r3, #1
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff fd7b 	bl	800602c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006536:	e00e      	b.n	8006556 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff fd85 	bl	8006054 <HAL_ADC_ErrorCallback>
}
 800654a:	e004      	b.n	8006556 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fd67 	bl	8006040 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	f043 0204 	orr.w	r2, r3, #4
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fd5a 	bl	8006054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <__NVIC_SetPriorityGrouping>:
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <__NVIC_SetPriorityGrouping+0x44>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065c4:	4013      	ands	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065da:	4a04      	ldr	r2, [pc, #16]	; (80065ec <__NVIC_SetPriorityGrouping+0x44>)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	60d3      	str	r3, [r2, #12]
}
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	e000ed00 	.word	0xe000ed00

080065f0 <__NVIC_GetPriorityGrouping>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <__NVIC_GetPriorityGrouping+0x18>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	0a1b      	lsrs	r3, r3, #8
 80065fa:	f003 0307 	and.w	r3, r3, #7
}
 80065fe:	4618      	mov	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	e000ed00 	.word	0xe000ed00

0800660c <__NVIC_EnableIRQ>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661a:	2b00      	cmp	r3, #0
 800661c:	db0b      	blt.n	8006636 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	f003 021f 	and.w	r2, r3, #31
 8006624:	4907      	ldr	r1, [pc, #28]	; (8006644 <__NVIC_EnableIRQ+0x38>)
 8006626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2001      	movs	r0, #1
 800662e:	fa00 f202 	lsl.w	r2, r0, r2
 8006632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	e000e100 	.word	0xe000e100

08006648 <__NVIC_SetPriority>:
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	6039      	str	r1, [r7, #0]
 8006652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006658:	2b00      	cmp	r3, #0
 800665a:	db0a      	blt.n	8006672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	490c      	ldr	r1, [pc, #48]	; (8006694 <__NVIC_SetPriority+0x4c>)
 8006662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006666:	0112      	lsls	r2, r2, #4
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	440b      	add	r3, r1
 800666c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006670:	e00a      	b.n	8006688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4908      	ldr	r1, [pc, #32]	; (8006698 <__NVIC_SetPriority+0x50>)
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	3b04      	subs	r3, #4
 8006680:	0112      	lsls	r2, r2, #4
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	440b      	add	r3, r1
 8006686:	761a      	strb	r2, [r3, #24]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	e000e100 	.word	0xe000e100
 8006698:	e000ed00 	.word	0xe000ed00

0800669c <NVIC_EncodePriority>:
{
 800669c:	b480      	push	{r7}
 800669e:	b089      	sub	sp, #36	; 0x24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f1c3 0307 	rsb	r3, r3, #7
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	bf28      	it	cs
 80066ba:	2304      	movcs	r3, #4
 80066bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3304      	adds	r3, #4
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	d902      	bls.n	80066cc <NVIC_EncodePriority+0x30>
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	3b03      	subs	r3, #3
 80066ca:	e000      	b.n	80066ce <NVIC_EncodePriority+0x32>
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43da      	mvns	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	401a      	ands	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066e4:	f04f 31ff 	mov.w	r1, #4294967295
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	fa01 f303 	lsl.w	r3, r1, r3
 80066ee:	43d9      	mvns	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f4:	4313      	orrs	r3, r2
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3724      	adds	r7, #36	; 0x24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3b01      	subs	r3, #1
 8006710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006714:	d301      	bcc.n	800671a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006716:	2301      	movs	r3, #1
 8006718:	e00f      	b.n	800673a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800671a:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <SysTick_Config+0x40>)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3b01      	subs	r3, #1
 8006720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006722:	210f      	movs	r1, #15
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	f7ff ff8e 	bl	8006648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <SysTick_Config+0x40>)
 800672e:	2200      	movs	r2, #0
 8006730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006732:	4b04      	ldr	r3, [pc, #16]	; (8006744 <SysTick_Config+0x40>)
 8006734:	2207      	movs	r2, #7
 8006736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	e000e010 	.word	0xe000e010

08006748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff ff29 	bl	80065a8 <__NVIC_SetPriorityGrouping>
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800675e:	b580      	push	{r7, lr}
 8006760:	b086      	sub	sp, #24
 8006762:	af00      	add	r7, sp, #0
 8006764:	4603      	mov	r3, r0
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006770:	f7ff ff3e 	bl	80065f0 <__NVIC_GetPriorityGrouping>
 8006774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	6978      	ldr	r0, [r7, #20]
 800677c:	f7ff ff8e 	bl	800669c <NVIC_EncodePriority>
 8006780:	4602      	mov	r2, r0
 8006782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff ff5d 	bl	8006648 <__NVIC_SetPriority>
}
 800678e:	bf00      	nop
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	4603      	mov	r3, r0
 800679e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff ff31 	bl	800660c <__NVIC_EnableIRQ>
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff ffa2 	bl	8006704 <SysTick_Config>
 80067c0:	4603      	mov	r3, r0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067d8:	f7ff faa4 	bl	8005d24 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e099      	b.n	800691c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0201 	bic.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006808:	e00f      	b.n	800682a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800680a:	f7ff fa8b 	bl	8005d24 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b05      	cmp	r3, #5
 8006816:	d908      	bls.n	800682a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2203      	movs	r2, #3
 8006822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e078      	b.n	800691c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e8      	bne.n	800680a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4b38      	ldr	r3, [pc, #224]	; (8006924 <HAL_DMA_Init+0x158>)
 8006844:	4013      	ands	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800686e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b04      	cmp	r3, #4
 8006882:	d107      	bne.n	8006894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	4313      	orrs	r3, r2
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0307 	bic.w	r3, r3, #7
 80068aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d117      	bne.n	80068ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb01 	bl	8006ed8 <DMA_CheckFifoParam>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2240      	movs	r2, #64	; 0x40
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80068ea:	2301      	movs	r3, #1
 80068ec:	e016      	b.n	800691c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fab8 	bl	8006e6c <DMA_CalcBaseAndBitshift>
 80068fc:	4603      	mov	r3, r0
 80068fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006904:	223f      	movs	r2, #63	; 0x3f
 8006906:	409a      	lsls	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	f010803f 	.word	0xf010803f

08006928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_DMA_Start_IT+0x26>
 800694a:	2302      	movs	r3, #2
 800694c:	e040      	b.n	80069d0 <HAL_DMA_Start_IT+0xa8>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b01      	cmp	r3, #1
 8006960:	d12f      	bne.n	80069c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fa4a 	bl	8006e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006980:	223f      	movs	r2, #63	; 0x3f
 8006982:	409a      	lsls	r2, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0216 	orr.w	r2, r2, #22
 8006996:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0208 	orr.w	r2, r2, #8
 80069ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e005      	b.n	80069ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
 80069cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80069e6:	f7ff f99d 	bl	8005d24 <HAL_GetTick>
 80069ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d008      	beq.n	8006a0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2280      	movs	r2, #128	; 0x80
 80069fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e052      	b.n	8006ab0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0216 	bic.w	r2, r2, #22
 8006a18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695a      	ldr	r2, [r3, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <HAL_DMA_Abort+0x62>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0208 	bic.w	r2, r2, #8
 8006a48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a5a:	e013      	b.n	8006a84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a5c:	f7ff f962 	bl	8005d24 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d90c      	bls.n	8006a84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2203      	movs	r2, #3
 8006a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e015      	b.n	8006ab0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e4      	bne.n	8006a5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a96:	223f      	movs	r2, #63	; 0x3f
 8006a98:	409a      	lsls	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d004      	beq.n	8006ad6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2280      	movs	r2, #128	; 0x80
 8006ad0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00c      	b.n	8006af0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2205      	movs	r2, #5
 8006ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0201 	bic.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b08:	4b8e      	ldr	r3, [pc, #568]	; (8006d44 <HAL_DMA_IRQHandler+0x248>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a8e      	ldr	r2, [pc, #568]	; (8006d48 <HAL_DMA_IRQHandler+0x24c>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0a9b      	lsrs	r3, r3, #10
 8006b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	2208      	movs	r2, #8
 8006b28:	409a      	lsls	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01a      	beq.n	8006b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d013      	beq.n	8006b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0204 	bic.w	r2, r2, #4
 8006b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b54:	2208      	movs	r2, #8
 8006b56:	409a      	lsls	r2, r3
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b60:	f043 0201 	orr.w	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d012      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f043 0202 	orr.w	r2, r3, #2
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	409a      	lsls	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d012      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bcc:	f043 0204 	orr.w	r2, r3, #4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd8:	2210      	movs	r2, #16
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d043      	beq.n	8006c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d03c      	beq.n	8006c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d018      	beq.n	8006c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d108      	bne.n	8006c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d024      	beq.n	8006c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	e01f      	b.n	8006c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01b      	beq.n	8006c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
 8006c3c:	e016      	b.n	8006c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d107      	bne.n	8006c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0208 	bic.w	r2, r2, #8
 8006c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c70:	2220      	movs	r2, #32
 8006c72:	409a      	lsls	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 808f 	beq.w	8006d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8087 	beq.w	8006d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c92:	2220      	movs	r2, #32
 8006c94:	409a      	lsls	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	d136      	bne.n	8006d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0216 	bic.w	r2, r2, #22
 8006cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695a      	ldr	r2, [r3, #20]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <HAL_DMA_IRQHandler+0x1da>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0208 	bic.w	r2, r2, #8
 8006ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cea:	223f      	movs	r2, #63	; 0x3f
 8006cec:	409a      	lsls	r2, r3
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d07e      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
        }
        return;
 8006d12:	e079      	b.n	8006e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01d      	beq.n	8006d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10d      	bne.n	8006d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d031      	beq.n	8006d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
 8006d40:	e02c      	b.n	8006d9c <HAL_DMA_IRQHandler+0x2a0>
 8006d42:	bf00      	nop
 8006d44:	20000004 	.word	0x20000004
 8006d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d023      	beq.n	8006d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
 8006d5c:	e01e      	b.n	8006d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10f      	bne.n	8006d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0210 	bic.w	r2, r2, #16
 8006d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d032      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d022      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2205      	movs	r2, #5
 8006db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d307      	bcc.n	8006de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f2      	bne.n	8006dc8 <HAL_DMA_IRQHandler+0x2cc>
 8006de2:	e000      	b.n	8006de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
 8006e06:	e000      	b.n	8006e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e08:	bf00      	nop
    }
  }
}
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d108      	bne.n	8006e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e4e:	e007      	b.n	8006e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
}
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	3b10      	subs	r3, #16
 8006e7c:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d909      	bls.n	8006eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8006eac:	e007      	b.n	8006ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	aaaaaaab 	.word	0xaaaaaaab
 8006ed4:	0800db5c 	.word	0x0800db5c

08006ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11f      	bne.n	8006f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d856      	bhi.n	8006fa6 <DMA_CheckFifoParam+0xce>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <DMA_CheckFifoParam+0x28>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f23 	.word	0x08006f23
 8006f08:	08006f11 	.word	0x08006f11
 8006f0c:	08006fa7 	.word	0x08006fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d046      	beq.n	8006faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f20:	e043      	b.n	8006faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f2a:	d140      	bne.n	8006fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f30:	e03d      	b.n	8006fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3a:	d121      	bne.n	8006f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d837      	bhi.n	8006fb2 <DMA_CheckFifoParam+0xda>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <DMA_CheckFifoParam+0x70>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f5f 	.word	0x08006f5f
 8006f50:	08006f59 	.word	0x08006f59
 8006f54:	08006f71 	.word	0x08006f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5c:	e030      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d025      	beq.n	8006fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f6e:	e022      	b.n	8006fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f78:	d11f      	bne.n	8006fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f7e:	e01c      	b.n	8006fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d903      	bls.n	8006f8e <DMA_CheckFifoParam+0xb6>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d003      	beq.n	8006f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f8c:	e018      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	73fb      	strb	r3, [r7, #15]
      break;
 8006f92:	e015      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00e      	beq.n	8006fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa4:	e00b      	b.n	8006fbe <DMA_CheckFifoParam+0xe6>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e00a      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006faa:	bf00      	nop
 8006fac:	e008      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e006      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e004      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8006fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop

08006fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	; 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61fb      	str	r3, [r7, #28]
 8006fea:	e16b      	b.n	80072c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fec:	2201      	movs	r2, #1
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	429a      	cmp	r2, r3
 8007006:	f040 815a 	bne.w	80072be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d005      	beq.n	8007022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800701e:	2b02      	cmp	r3, #2
 8007020:	d130      	bne.n	8007084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	2203      	movs	r2, #3
 800702e:	fa02 f303 	lsl.w	r3, r2, r3
 8007032:	43db      	mvns	r3, r3
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	4013      	ands	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	4313      	orrs	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007058:	2201      	movs	r2, #1
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	43db      	mvns	r3, r3
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	4013      	ands	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	091b      	lsrs	r3, r3, #4
 800706e:	f003 0201 	and.w	r2, r3, #1
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	4313      	orrs	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	2b03      	cmp	r3, #3
 800708e:	d017      	beq.n	80070c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	2203      	movs	r2, #3
 800709c:	fa02 f303 	lsl.w	r3, r2, r3
 80070a0:	43db      	mvns	r3, r3
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	4013      	ands	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d123      	bne.n	8007114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	08da      	lsrs	r2, r3, #3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3208      	adds	r2, #8
 80070d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	220f      	movs	r2, #15
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	43db      	mvns	r3, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	4313      	orrs	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	08da      	lsrs	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3208      	adds	r2, #8
 800710e:	69b9      	ldr	r1, [r7, #24]
 8007110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	2203      	movs	r2, #3
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	43db      	mvns	r3, r3
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	4013      	ands	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f003 0203 	and.w	r2, r3, #3
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	4313      	orrs	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80b4 	beq.w	80072be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	4b60      	ldr	r3, [pc, #384]	; (80072dc <HAL_GPIO_Init+0x30c>)
 800715c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715e:	4a5f      	ldr	r2, [pc, #380]	; (80072dc <HAL_GPIO_Init+0x30c>)
 8007160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007164:	6453      	str	r3, [r2, #68]	; 0x44
 8007166:	4b5d      	ldr	r3, [pc, #372]	; (80072dc <HAL_GPIO_Init+0x30c>)
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007172:	4a5b      	ldr	r2, [pc, #364]	; (80072e0 <HAL_GPIO_Init+0x310>)
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	089b      	lsrs	r3, r3, #2
 8007178:	3302      	adds	r3, #2
 800717a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800717e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	220f      	movs	r2, #15
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	43db      	mvns	r3, r3
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	4013      	ands	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a52      	ldr	r2, [pc, #328]	; (80072e4 <HAL_GPIO_Init+0x314>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d02b      	beq.n	80071f6 <HAL_GPIO_Init+0x226>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a51      	ldr	r2, [pc, #324]	; (80072e8 <HAL_GPIO_Init+0x318>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d025      	beq.n	80071f2 <HAL_GPIO_Init+0x222>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a50      	ldr	r2, [pc, #320]	; (80072ec <HAL_GPIO_Init+0x31c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d01f      	beq.n	80071ee <HAL_GPIO_Init+0x21e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a4f      	ldr	r2, [pc, #316]	; (80072f0 <HAL_GPIO_Init+0x320>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d019      	beq.n	80071ea <HAL_GPIO_Init+0x21a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a4e      	ldr	r2, [pc, #312]	; (80072f4 <HAL_GPIO_Init+0x324>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <HAL_GPIO_Init+0x216>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a4d      	ldr	r2, [pc, #308]	; (80072f8 <HAL_GPIO_Init+0x328>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00d      	beq.n	80071e2 <HAL_GPIO_Init+0x212>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a4c      	ldr	r2, [pc, #304]	; (80072fc <HAL_GPIO_Init+0x32c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d007      	beq.n	80071de <HAL_GPIO_Init+0x20e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a4b      	ldr	r2, [pc, #300]	; (8007300 <HAL_GPIO_Init+0x330>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d101      	bne.n	80071da <HAL_GPIO_Init+0x20a>
 80071d6:	2307      	movs	r3, #7
 80071d8:	e00e      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071da:	2308      	movs	r3, #8
 80071dc:	e00c      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071de:	2306      	movs	r3, #6
 80071e0:	e00a      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071e2:	2305      	movs	r3, #5
 80071e4:	e008      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071e6:	2304      	movs	r3, #4
 80071e8:	e006      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071ea:	2303      	movs	r3, #3
 80071ec:	e004      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e002      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <HAL_GPIO_Init+0x228>
 80071f6:	2300      	movs	r3, #0
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	f002 0203 	and.w	r2, r2, #3
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	4093      	lsls	r3, r2
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	4313      	orrs	r3, r2
 8007206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007208:	4935      	ldr	r1, [pc, #212]	; (80072e0 <HAL_GPIO_Init+0x310>)
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	089b      	lsrs	r3, r3, #2
 800720e:	3302      	adds	r3, #2
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007216:	4b3b      	ldr	r3, [pc, #236]	; (8007304 <HAL_GPIO_Init+0x334>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	43db      	mvns	r3, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	4013      	ands	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800723a:	4a32      	ldr	r2, [pc, #200]	; (8007304 <HAL_GPIO_Init+0x334>)
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007240:	4b30      	ldr	r3, [pc, #192]	; (8007304 <HAL_GPIO_Init+0x334>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	43db      	mvns	r3, r3
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	4013      	ands	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007264:	4a27      	ldr	r2, [pc, #156]	; (8007304 <HAL_GPIO_Init+0x334>)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800726a:	4b26      	ldr	r3, [pc, #152]	; (8007304 <HAL_GPIO_Init+0x334>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	43db      	mvns	r3, r3
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	4013      	ands	r3, r2
 8007278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800728e:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_GPIO_Init+0x334>)
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007294:	4b1b      	ldr	r3, [pc, #108]	; (8007304 <HAL_GPIO_Init+0x334>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	43db      	mvns	r3, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072b8:	4a12      	ldr	r2, [pc, #72]	; (8007304 <HAL_GPIO_Init+0x334>)
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	3301      	adds	r3, #1
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	f67f ae90 	bls.w	8006fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	3724      	adds	r7, #36	; 0x24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40023800 	.word	0x40023800
 80072e0:	40013800 	.word	0x40013800
 80072e4:	40020000 	.word	0x40020000
 80072e8:	40020400 	.word	0x40020400
 80072ec:	40020800 	.word	0x40020800
 80072f0:	40020c00 	.word	0x40020c00
 80072f4:	40021000 	.word	0x40021000
 80072f8:	40021400 	.word	0x40021400
 80072fc:	40021800 	.word	0x40021800
 8007300:	40021c00 	.word	0x40021c00
 8007304:	40013c00 	.word	0x40013c00

08007308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e12b      	b.n	8007572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fc f8e6 	bl	8003500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2224      	movs	r2, #36	; 0x24
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0201 	bic.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800735a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800736a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800736c:	f000 fd80 	bl	8007e70 <HAL_RCC_GetPCLK1Freq>
 8007370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4a81      	ldr	r2, [pc, #516]	; (800757c <HAL_I2C_Init+0x274>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d807      	bhi.n	800738c <HAL_I2C_Init+0x84>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a80      	ldr	r2, [pc, #512]	; (8007580 <HAL_I2C_Init+0x278>)
 8007380:	4293      	cmp	r3, r2
 8007382:	bf94      	ite	ls
 8007384:	2301      	movls	r3, #1
 8007386:	2300      	movhi	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e006      	b.n	800739a <HAL_I2C_Init+0x92>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a7d      	ldr	r2, [pc, #500]	; (8007584 <HAL_I2C_Init+0x27c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	bf94      	ite	ls
 8007394:	2301      	movls	r3, #1
 8007396:	2300      	movhi	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e0e7      	b.n	8007572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a78      	ldr	r2, [pc, #480]	; (8007588 <HAL_I2C_Init+0x280>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	0c9b      	lsrs	r3, r3, #18
 80073ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4a6a      	ldr	r2, [pc, #424]	; (800757c <HAL_I2C_Init+0x274>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d802      	bhi.n	80073dc <HAL_I2C_Init+0xd4>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3301      	adds	r3, #1
 80073da:	e009      	b.n	80073f0 <HAL_I2C_Init+0xe8>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	4a69      	ldr	r2, [pc, #420]	; (800758c <HAL_I2C_Init+0x284>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	099b      	lsrs	r3, r3, #6
 80073ee:	3301      	adds	r3, #1
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	495c      	ldr	r1, [pc, #368]	; (800757c <HAL_I2C_Init+0x274>)
 800740c:	428b      	cmp	r3, r1
 800740e:	d819      	bhi.n	8007444 <HAL_I2C_Init+0x13c>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	1e59      	subs	r1, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	fbb1 f3f3 	udiv	r3, r1, r3
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007424:	400b      	ands	r3, r1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_I2C_Init+0x138>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1e59      	subs	r1, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	fbb1 f3f3 	udiv	r3, r1, r3
 8007438:	3301      	adds	r3, #1
 800743a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800743e:	e051      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 8007440:	2304      	movs	r3, #4
 8007442:	e04f      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d111      	bne.n	8007470 <HAL_I2C_Init+0x168>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1e58      	subs	r0, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6859      	ldr	r1, [r3, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	440b      	add	r3, r1
 800745a:	fbb0 f3f3 	udiv	r3, r0, r3
 800745e:	3301      	adds	r3, #1
 8007460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf0c      	ite	eq
 8007468:	2301      	moveq	r3, #1
 800746a:	2300      	movne	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	e012      	b.n	8007496 <HAL_I2C_Init+0x18e>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	1e58      	subs	r0, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6859      	ldr	r1, [r3, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	0099      	lsls	r1, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	fbb0 f3f3 	udiv	r3, r0, r3
 8007486:	3301      	adds	r3, #1
 8007488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <HAL_I2C_Init+0x196>
 800749a:	2301      	movs	r3, #1
 800749c:	e022      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10e      	bne.n	80074c4 <HAL_I2C_Init+0x1bc>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1e58      	subs	r0, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6859      	ldr	r1, [r3, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	440b      	add	r3, r1
 80074b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80074b8:	3301      	adds	r3, #1
 80074ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c2:	e00f      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1e58      	subs	r0, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6859      	ldr	r1, [r3, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	0099      	lsls	r1, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80074da:	3301      	adds	r3, #1
 80074dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	6809      	ldr	r1, [r1, #0]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6911      	ldr	r1, [r2, #16]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68d2      	ldr	r2, [r2, #12]
 800751e:	4311      	orrs	r1, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	430b      	orrs	r3, r1
 8007526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	000186a0 	.word	0x000186a0
 8007580:	001e847f 	.word	0x001e847f
 8007584:	003d08ff 	.word	0x003d08ff
 8007588:	431bde83 	.word	0x431bde83
 800758c:	10624dd3 	.word	0x10624dd3

08007590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e267      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d075      	beq.n	800769a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075ae:	4b88      	ldr	r3, [pc, #544]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 030c 	and.w	r3, r3, #12
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d00c      	beq.n	80075d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075ba:	4b85      	ldr	r3, [pc, #532]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d112      	bne.n	80075ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075c6:	4b82      	ldr	r3, [pc, #520]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075d2:	d10b      	bne.n	80075ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d4:	4b7e      	ldr	r3, [pc, #504]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d05b      	beq.n	8007698 <HAL_RCC_OscConfig+0x108>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d157      	bne.n	8007698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e242      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f4:	d106      	bne.n	8007604 <HAL_RCC_OscConfig+0x74>
 80075f6:	4b76      	ldr	r3, [pc, #472]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a75      	ldr	r2, [pc, #468]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80075fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	e01d      	b.n	8007640 <HAL_RCC_OscConfig+0xb0>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800760c:	d10c      	bne.n	8007628 <HAL_RCC_OscConfig+0x98>
 800760e:	4b70      	ldr	r3, [pc, #448]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a6f      	ldr	r2, [pc, #444]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 8007614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	4b6d      	ldr	r3, [pc, #436]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6c      	ldr	r2, [pc, #432]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 8007620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	e00b      	b.n	8007640 <HAL_RCC_OscConfig+0xb0>
 8007628:	4b69      	ldr	r3, [pc, #420]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a68      	ldr	r2, [pc, #416]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 800762e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4b66      	ldr	r3, [pc, #408]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a65      	ldr	r2, [pc, #404]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 800763a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800763e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d013      	beq.n	8007670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007648:	f7fe fb6c 	bl	8005d24 <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007650:	f7fe fb68 	bl	8005d24 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b64      	cmp	r3, #100	; 0x64
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e207      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007662:	4b5b      	ldr	r3, [pc, #364]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0f0      	beq.n	8007650 <HAL_RCC_OscConfig+0xc0>
 800766e:	e014      	b.n	800769a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007670:	f7fe fb58 	bl	8005d24 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007678:	f7fe fb54 	bl	8005d24 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b64      	cmp	r3, #100	; 0x64
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e1f3      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800768a:	4b51      	ldr	r3, [pc, #324]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_OscConfig+0xe8>
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d063      	beq.n	800776e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076a6:	4b4a      	ldr	r3, [pc, #296]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 030c 	and.w	r3, r3, #12
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076b2:	4b47      	ldr	r3, [pc, #284]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d11c      	bne.n	80076f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076be:	4b44      	ldr	r3, [pc, #272]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d116      	bne.n	80076f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ca:	4b41      	ldr	r3, [pc, #260]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <HAL_RCC_OscConfig+0x152>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d001      	beq.n	80076e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e1c7      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e2:	4b3b      	ldr	r3, [pc, #236]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4937      	ldr	r1, [pc, #220]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076f6:	e03a      	b.n	800776e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d020      	beq.n	8007742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007700:	4b34      	ldr	r3, [pc, #208]	; (80077d4 <HAL_RCC_OscConfig+0x244>)
 8007702:	2201      	movs	r2, #1
 8007704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007706:	f7fe fb0d 	bl	8005d24 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800770e:	f7fe fb09 	bl	8005d24 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e1a8      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007720:	4b2b      	ldr	r3, [pc, #172]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f0      	beq.n	800770e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800772c:	4b28      	ldr	r3, [pc, #160]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4925      	ldr	r1, [pc, #148]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 800773c:	4313      	orrs	r3, r2
 800773e:	600b      	str	r3, [r1, #0]
 8007740:	e015      	b.n	800776e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007742:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <HAL_RCC_OscConfig+0x244>)
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007748:	f7fe faec 	bl	8005d24 <HAL_GetTick>
 800774c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774e:	e008      	b.n	8007762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007750:	f7fe fae8 	bl	8005d24 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e187      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007762:	4b1b      	ldr	r3, [pc, #108]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1f0      	bne.n	8007750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d036      	beq.n	80077e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d016      	beq.n	80077b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007782:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <HAL_RCC_OscConfig+0x248>)
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007788:	f7fe facc 	bl	8005d24 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007790:	f7fe fac8 	bl	8005d24 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e167      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077a2:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <HAL_RCC_OscConfig+0x240>)
 80077a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f0      	beq.n	8007790 <HAL_RCC_OscConfig+0x200>
 80077ae:	e01b      	b.n	80077e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_OscConfig+0x248>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077b6:	f7fe fab5 	bl	8005d24 <HAL_GetTick>
 80077ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077bc:	e00e      	b.n	80077dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077be:	f7fe fab1 	bl	8005d24 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d907      	bls.n	80077dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e150      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
 80077d0:	40023800 	.word	0x40023800
 80077d4:	42470000 	.word	0x42470000
 80077d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077dc:	4b88      	ldr	r3, [pc, #544]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80077de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ea      	bne.n	80077be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8097 	beq.w	8007924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077f6:	2300      	movs	r3, #0
 80077f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077fa:	4b81      	ldr	r3, [pc, #516]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10f      	bne.n	8007826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	4b7d      	ldr	r3, [pc, #500]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	4a7c      	ldr	r2, [pc, #496]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007814:	6413      	str	r3, [r2, #64]	; 0x40
 8007816:	4b7a      	ldr	r3, [pc, #488]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800781e:	60bb      	str	r3, [r7, #8]
 8007820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007822:	2301      	movs	r3, #1
 8007824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007826:	4b77      	ldr	r3, [pc, #476]	; (8007a04 <HAL_RCC_OscConfig+0x474>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782e:	2b00      	cmp	r3, #0
 8007830:	d118      	bne.n	8007864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007832:	4b74      	ldr	r3, [pc, #464]	; (8007a04 <HAL_RCC_OscConfig+0x474>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a73      	ldr	r2, [pc, #460]	; (8007a04 <HAL_RCC_OscConfig+0x474>)
 8007838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800783c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800783e:	f7fe fa71 	bl	8005d24 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007846:	f7fe fa6d 	bl	8005d24 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e10c      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007858:	4b6a      	ldr	r3, [pc, #424]	; (8007a04 <HAL_RCC_OscConfig+0x474>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d106      	bne.n	800787a <HAL_RCC_OscConfig+0x2ea>
 800786c:	4b64      	ldr	r3, [pc, #400]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 800786e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007870:	4a63      	ldr	r2, [pc, #396]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6713      	str	r3, [r2, #112]	; 0x70
 8007878:	e01c      	b.n	80078b4 <HAL_RCC_OscConfig+0x324>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b05      	cmp	r3, #5
 8007880:	d10c      	bne.n	800789c <HAL_RCC_OscConfig+0x30c>
 8007882:	4b5f      	ldr	r3, [pc, #380]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007886:	4a5e      	ldr	r2, [pc, #376]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	6713      	str	r3, [r2, #112]	; 0x70
 800788e:	4b5c      	ldr	r3, [pc, #368]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007892:	4a5b      	ldr	r2, [pc, #364]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007894:	f043 0301 	orr.w	r3, r3, #1
 8007898:	6713      	str	r3, [r2, #112]	; 0x70
 800789a:	e00b      	b.n	80078b4 <HAL_RCC_OscConfig+0x324>
 800789c:	4b58      	ldr	r3, [pc, #352]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 800789e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a0:	4a57      	ldr	r2, [pc, #348]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80078a2:	f023 0301 	bic.w	r3, r3, #1
 80078a6:	6713      	str	r3, [r2, #112]	; 0x70
 80078a8:	4b55      	ldr	r3, [pc, #340]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	4a54      	ldr	r2, [pc, #336]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80078ae:	f023 0304 	bic.w	r3, r3, #4
 80078b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d015      	beq.n	80078e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078bc:	f7fe fa32 	bl	8005d24 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c2:	e00a      	b.n	80078da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078c4:	f7fe fa2e 	bl	8005d24 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e0cb      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078da:	4b49      	ldr	r3, [pc, #292]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0ee      	beq.n	80078c4 <HAL_RCC_OscConfig+0x334>
 80078e6:	e014      	b.n	8007912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078e8:	f7fe fa1c 	bl	8005d24 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ee:	e00a      	b.n	8007906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078f0:	f7fe fa18 	bl	8005d24 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e0b5      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007906:	4b3e      	ldr	r3, [pc, #248]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1ee      	bne.n	80078f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d105      	bne.n	8007924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007918:	4b39      	ldr	r3, [pc, #228]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	4a38      	ldr	r2, [pc, #224]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 800791e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 80a1 	beq.w	8007a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800792e:	4b34      	ldr	r3, [pc, #208]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 030c 	and.w	r3, r3, #12
 8007936:	2b08      	cmp	r3, #8
 8007938:	d05c      	beq.n	80079f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d141      	bne.n	80079c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007942:	4b31      	ldr	r3, [pc, #196]	; (8007a08 <HAL_RCC_OscConfig+0x478>)
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007948:	f7fe f9ec 	bl	8005d24 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007950:	f7fe f9e8 	bl	8005d24 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e087      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007962:	4b27      	ldr	r3, [pc, #156]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f0      	bne.n	8007950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69da      	ldr	r2, [r3, #28]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	019b      	lsls	r3, r3, #6
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	085b      	lsrs	r3, r3, #1
 8007986:	3b01      	subs	r3, #1
 8007988:	041b      	lsls	r3, r3, #16
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	061b      	lsls	r3, r3, #24
 8007992:	491b      	ldr	r1, [pc, #108]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 8007994:	4313      	orrs	r3, r2
 8007996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <HAL_RCC_OscConfig+0x478>)
 800799a:	2201      	movs	r2, #1
 800799c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799e:	f7fe f9c1 	bl	8005d24 <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a6:	f7fe f9bd 	bl	8005d24 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e05c      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b8:	4b11      	ldr	r3, [pc, #68]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0f0      	beq.n	80079a6 <HAL_RCC_OscConfig+0x416>
 80079c4:	e054      	b.n	8007a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c6:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <HAL_RCC_OscConfig+0x478>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079cc:	f7fe f9aa 	bl	8005d24 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079d4:	f7fe f9a6 	bl	8005d24 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e045      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e6:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <HAL_RCC_OscConfig+0x470>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <HAL_RCC_OscConfig+0x444>
 80079f2:	e03d      	b.n	8007a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d107      	bne.n	8007a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e038      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
 8007a00:	40023800 	.word	0x40023800
 8007a04:	40007000 	.word	0x40007000
 8007a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a0c:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <HAL_RCC_OscConfig+0x4ec>)
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d028      	beq.n	8007a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d121      	bne.n	8007a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d11a      	bne.n	8007a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d111      	bne.n	8007a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	3b01      	subs	r3, #1
 8007a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d107      	bne.n	8007a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d001      	beq.n	8007a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e000      	b.n	8007a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40023800 	.word	0x40023800

08007a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0cc      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a94:	4b68      	ldr	r3, [pc, #416]	; (8007c38 <HAL_RCC_ClockConfig+0x1b8>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d90c      	bls.n	8007abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa2:	4b65      	ldr	r3, [pc, #404]	; (8007c38 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aaa:	4b63      	ldr	r3, [pc, #396]	; (8007c38 <HAL_RCC_ClockConfig+0x1b8>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0b8      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d020      	beq.n	8007b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ad4:	4b59      	ldr	r3, [pc, #356]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	4a58      	ldr	r2, [pc, #352]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007aec:	4b53      	ldr	r3, [pc, #332]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	4a52      	ldr	r2, [pc, #328]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af8:	4b50      	ldr	r3, [pc, #320]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	494d      	ldr	r1, [pc, #308]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d044      	beq.n	8007ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1e:	4b47      	ldr	r3, [pc, #284]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d119      	bne.n	8007b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e07f      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d003      	beq.n	8007b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d107      	bne.n	8007b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b3e:	4b3f      	ldr	r3, [pc, #252]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d109      	bne.n	8007b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e06f      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b4e:	4b3b      	ldr	r3, [pc, #236]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e067      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b5e:	4b37      	ldr	r3, [pc, #220]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f023 0203 	bic.w	r2, r3, #3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4934      	ldr	r1, [pc, #208]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b70:	f7fe f8d8 	bl	8005d24 <HAL_GetTick>
 8007b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b76:	e00a      	b.n	8007b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b78:	f7fe f8d4 	bl	8005d24 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e04f      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b8e:	4b2b      	ldr	r3, [pc, #172]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 020c 	and.w	r2, r3, #12
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d1eb      	bne.n	8007b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0307 	and.w	r3, r3, #7
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d20c      	bcs.n	8007bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bae:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb6:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d001      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e032      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d008      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bd4:	4b19      	ldr	r3, [pc, #100]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4916      	ldr	r1, [pc, #88]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bf2:	4b12      	ldr	r3, [pc, #72]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	490e      	ldr	r1, [pc, #56]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c06:	f000 f821 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <HAL_RCC_ClockConfig+0x1bc>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	490a      	ldr	r1, [pc, #40]	; (8007c40 <HAL_RCC_ClockConfig+0x1c0>)
 8007c18:	5ccb      	ldrb	r3, [r1, r3]
 8007c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1e:	4a09      	ldr	r2, [pc, #36]	; (8007c44 <HAL_RCC_ClockConfig+0x1c4>)
 8007c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <HAL_RCC_ClockConfig+0x1c8>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe f838 	bl	8005c9c <HAL_InitTick>

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40023c00 	.word	0x40023c00
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	0800db34 	.word	0x0800db34
 8007c44:	20000004 	.word	0x20000004
 8007c48:	20000008 	.word	0x20000008

08007c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c50:	b094      	sub	sp, #80	; 0x50
 8007c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	647b      	str	r3, [r7, #68]	; 0x44
 8007c58:	2300      	movs	r3, #0
 8007c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c64:	4b79      	ldr	r3, [pc, #484]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 030c 	and.w	r3, r3, #12
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d00d      	beq.n	8007c8c <HAL_RCC_GetSysClockFreq+0x40>
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	f200 80e1 	bhi.w	8007e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x34>
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d003      	beq.n	8007c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c7e:	e0db      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c80:	4b73      	ldr	r3, [pc, #460]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007c84:	e0db      	b.n	8007e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c86:	4b73      	ldr	r3, [pc, #460]	; (8007e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8007c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c8a:	e0d8      	b.n	8007e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c8c:	4b6f      	ldr	r3, [pc, #444]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c96:	4b6d      	ldr	r3, [pc, #436]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d063      	beq.n	8007d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ca2:	4b6a      	ldr	r3, [pc, #424]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	2200      	movs	r2, #0
 8007caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f04f 0100 	mov.w	r1, #0
 8007cca:	0159      	lsls	r1, r3, #5
 8007ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cd0:	0150      	lsls	r0, r2, #5
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	1a51      	subs	r1, r2, r1
 8007cda:	6139      	str	r1, [r7, #16]
 8007cdc:	4629      	mov	r1, r5
 8007cde:	eb63 0301 	sbc.w	r3, r3, r1
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	018b      	lsls	r3, r1, #6
 8007cf4:	4651      	mov	r1, sl
 8007cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	018a      	lsls	r2, r1, #6
 8007cfe:	4651      	mov	r1, sl
 8007d00:	ebb2 0801 	subs.w	r8, r2, r1
 8007d04:	4659      	mov	r1, fp
 8007d06:	eb63 0901 	sbc.w	r9, r3, r1
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d1e:	4690      	mov	r8, r2
 8007d20:	4699      	mov	r9, r3
 8007d22:	4623      	mov	r3, r4
 8007d24:	eb18 0303 	adds.w	r3, r8, r3
 8007d28:	60bb      	str	r3, [r7, #8]
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	eb49 0303 	adc.w	r3, r9, r3
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	f04f 0300 	mov.w	r3, #0
 8007d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007d3e:	4629      	mov	r1, r5
 8007d40:	024b      	lsls	r3, r1, #9
 8007d42:	4621      	mov	r1, r4
 8007d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d48:	4621      	mov	r1, r4
 8007d4a:	024a      	lsls	r2, r1, #9
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d52:	2200      	movs	r2, #0
 8007d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d5c:	f7f8 ff74 	bl	8000c48 <__aeabi_uldivmod>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4613      	mov	r3, r2
 8007d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d68:	e058      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d6a:	4b38      	ldr	r3, [pc, #224]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	099b      	lsrs	r3, r3, #6
 8007d70:	2200      	movs	r2, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	4611      	mov	r1, r2
 8007d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d7a:	623b      	str	r3, [r7, #32]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	f04f 0000 	mov.w	r0, #0
 8007d8c:	f04f 0100 	mov.w	r1, #0
 8007d90:	0159      	lsls	r1, r3, #5
 8007d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d96:	0150      	lsls	r0, r2, #5
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007da2:	4649      	mov	r1, r9
 8007da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8007dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	00eb      	lsls	r3, r5, #3
 8007dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dd2:	00e2      	lsls	r2, r4, #3
 8007dd4:	4614      	mov	r4, r2
 8007dd6:	461d      	mov	r5, r3
 8007dd8:	4643      	mov	r3, r8
 8007dda:	18e3      	adds	r3, r4, r3
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	464b      	mov	r3, r9
 8007de0:	eb45 0303 	adc.w	r3, r5, r3
 8007de4:	607b      	str	r3, [r7, #4]
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007df2:	4629      	mov	r1, r5
 8007df4:	028b      	lsls	r3, r1, #10
 8007df6:	4621      	mov	r1, r4
 8007df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	028a      	lsls	r2, r1, #10
 8007e00:	4610      	mov	r0, r2
 8007e02:	4619      	mov	r1, r3
 8007e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e06:	2200      	movs	r2, #0
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	61fa      	str	r2, [r7, #28]
 8007e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e10:	f7f8 ff1a 	bl	8000c48 <__aeabi_uldivmod>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4613      	mov	r3, r2
 8007e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	0c1b      	lsrs	r3, r3, #16
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	3301      	adds	r3, #1
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e36:	e002      	b.n	8007e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3750      	adds	r7, #80	; 0x50
 8007e44:	46bd      	mov	sp, r7
 8007e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	00f42400 	.word	0x00f42400
 8007e54:	007a1200 	.word	0x007a1200

08007e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e5c:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000004 	.word	0x20000004

08007e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e74:	f7ff fff0 	bl	8007e58 <HAL_RCC_GetHCLKFreq>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	0a9b      	lsrs	r3, r3, #10
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	4903      	ldr	r1, [pc, #12]	; (8007e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e86:	5ccb      	ldrb	r3, [r1, r3]
 8007e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40023800 	.word	0x40023800
 8007e94:	0800db44 	.word	0x0800db44

08007e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e9c:	f7ff ffdc 	bl	8007e58 <HAL_RCC_GetHCLKFreq>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	0b5b      	lsrs	r3, r3, #13
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	4903      	ldr	r1, [pc, #12]	; (8007ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eae:	5ccb      	ldrb	r3, [r1, r3]
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	0800db44 	.word	0x0800db44

08007ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e03f      	b.n	8007f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7fd fe3c 	bl	8005b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2224      	movs	r2, #36	; 0x24
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc7b 	bl	8008800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695a      	ldr	r2, [r3, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b0ba      	sub	sp, #232	; 0xe8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10f      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x66>
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fb65 	bl	800868a <UART_Receive_IT>
      return;
 8007fc0:	e256      	b.n	8008470 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 80de 	beq.w	8008188 <HAL_UART_IRQHandler+0x22c>
 8007fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 80d1 	beq.w	8008188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_UART_IRQHandler+0xae>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	f043 0201 	orr.w	r2, r3, #1
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800800a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <HAL_UART_IRQHandler+0xd2>
 8008016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f043 0202 	orr.w	r2, r3, #2
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800802e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <HAL_UART_IRQHandler+0xf6>
 800803a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	f043 0204 	orr.w	r2, r3, #4
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d011      	beq.n	8008082 <HAL_UART_IRQHandler+0x126>
 800805e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	f043 0208 	orr.w	r2, r3, #8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 81ed 	beq.w	8008466 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_UART_IRQHandler+0x14e>
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 faf0 	bl	800868a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b4:	2b40      	cmp	r3, #64	; 0x40
 80080b6:	bf0c      	ite	eq
 80080b8:	2301      	moveq	r3, #1
 80080ba:	2300      	movne	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <HAL_UART_IRQHandler+0x17a>
 80080ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d04f      	beq.n	8008176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f9f8 	bl	80084cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d141      	bne.n	800816e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3314      	adds	r3, #20
 80080f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3314      	adds	r3, #20
 8008112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800811a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800812e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1d9      	bne.n	80080ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d013      	beq.n	8008166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	4a7d      	ldr	r2, [pc, #500]	; (8008338 <HAL_UART_IRQHandler+0x3dc>)
 8008144:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe fcb4 	bl	8006ab8 <HAL_DMA_Abort_IT>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008164:	e00e      	b.n	8008184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f99a 	bl	80084a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	e00a      	b.n	8008184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f996 	bl	80084a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008174:	e006      	b.n	8008184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f992 	bl	80084a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008182:	e170      	b.n	8008466 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008184:	bf00      	nop
    return;
 8008186:	e16e      	b.n	8008466 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	2b01      	cmp	r3, #1
 800818e:	f040 814a 	bne.w	8008426 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 8143 	beq.w	8008426 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 813c 	beq.w	8008426 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	60bb      	str	r3, [r7, #8]
 80081c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ce:	2b40      	cmp	r3, #64	; 0x40
 80081d0:	f040 80b4 	bne.w	800833c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8140 	beq.w	800846a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081f2:	429a      	cmp	r2, r3
 80081f4:	f080 8139 	bcs.w	800846a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800820a:	f000 8088 	beq.w	800831e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	330c      	adds	r3, #12
 8008214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800822c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	330c      	adds	r3, #12
 8008236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800823a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800823e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1d9      	bne.n	800820e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3314      	adds	r3, #20
 8008260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800826a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800826c:	f023 0301 	bic.w	r3, r3, #1
 8008270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3314      	adds	r3, #20
 800827a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800827e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e1      	bne.n	800825a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3314      	adds	r3, #20
 800829c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3314      	adds	r3, #20
 80082b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e3      	bne.n	8008296 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	330c      	adds	r3, #12
 80082e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ee:	f023 0310 	bic.w	r3, r3, #16
 80082f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	330c      	adds	r3, #12
 80082fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008300:	65ba      	str	r2, [r7, #88]	; 0x58
 8008302:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800830e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e3      	bne.n	80082dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fb5d 	bl	80069d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008326:	b29b      	uxth	r3, r3
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	b29b      	uxth	r3, r3
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f8c0 	bl	80084b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008334:	e099      	b.n	800846a <HAL_UART_IRQHandler+0x50e>
 8008336:	bf00      	nop
 8008338:	08008593 	.word	0x08008593
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008344:	b29b      	uxth	r3, r3
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 808b 	beq.w	800846e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8086 	beq.w	800846e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	330c      	adds	r3, #12
 8008368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	330c      	adds	r3, #12
 8008382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008386:	647a      	str	r2, [r7, #68]	; 0x44
 8008388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800838c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e3      	bne.n	8008362 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3314      	adds	r3, #20
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	623b      	str	r3, [r7, #32]
   return(result);
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3314      	adds	r3, #20
 80083ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083be:	633a      	str	r2, [r7, #48]	; 0x30
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e3      	bne.n	800839a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0310 	bic.w	r3, r3, #16
 80083f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008404:	61fa      	str	r2, [r7, #28]
 8008406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	69b9      	ldr	r1, [r7, #24]
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	617b      	str	r3, [r7, #20]
   return(result);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e3      	bne.n	80083e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f848 	bl	80084b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008424:	e023      	b.n	800846e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842e:	2b00      	cmp	r3, #0
 8008430:	d009      	beq.n	8008446 <HAL_UART_IRQHandler+0x4ea>
 8008432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8bb 	bl	80085ba <UART_Transmit_IT>
    return;
 8008444:	e014      	b.n	8008470 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00e      	beq.n	8008470 <HAL_UART_IRQHandler+0x514>
 8008452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d008      	beq.n	8008470 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8fb 	bl	800865a <UART_EndTransmit_IT>
    return;
 8008464:	e004      	b.n	8008470 <HAL_UART_IRQHandler+0x514>
    return;
 8008466:	bf00      	nop
 8008468:	e002      	b.n	8008470 <HAL_UART_IRQHandler+0x514>
      return;
 800846a:	bf00      	nop
 800846c:	e000      	b.n	8008470 <HAL_UART_IRQHandler+0x514>
      return;
 800846e:	bf00      	nop
  }
}
 8008470:	37e8      	adds	r7, #232	; 0xe8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b095      	sub	sp, #84	; 0x54
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	330c      	adds	r3, #12
 80084f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084f4:	643a      	str	r2, [r7, #64]	; 0x40
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e5      	bne.n	80084d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3314      	adds	r3, #20
 800850e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	61fb      	str	r3, [r7, #28]
   return(result);
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3314      	adds	r3, #20
 8008526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800852e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e5      	bne.n	8008508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	2b01      	cmp	r3, #1
 8008542:	d119      	bne.n	8008578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	330c      	adds	r3, #12
 800854a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	60bb      	str	r3, [r7, #8]
   return(result);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f023 0310 	bic.w	r3, r3, #16
 800855a:	647b      	str	r3, [r7, #68]	; 0x44
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	330c      	adds	r3, #12
 8008562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008564:	61ba      	str	r2, [r7, #24]
 8008566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6979      	ldr	r1, [r7, #20]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	613b      	str	r3, [r7, #16]
   return(result);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e5      	bne.n	8008544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2220      	movs	r2, #32
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008586:	bf00      	nop
 8008588:	3754      	adds	r7, #84	; 0x54
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f7ff ff77 	bl	80084a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b21      	cmp	r3, #33	; 0x21
 80085cc:	d13e      	bne.n	800864c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d6:	d114      	bne.n	8008602 <UART_Transmit_IT+0x48>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d110      	bne.n	8008602 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	1c9a      	adds	r2, r3, #2
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	621a      	str	r2, [r3, #32]
 8008600:	e008      	b.n	8008614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	1c59      	adds	r1, r3, #1
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6211      	str	r1, [r2, #32]
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b29b      	uxth	r3, r3
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	4619      	mov	r1, r3
 8008622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10f      	bne.n	8008648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7ff fefc 	bl	8008478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b08c      	sub	sp, #48	; 0x30
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b22      	cmp	r3, #34	; 0x22
 800869c:	f040 80ab 	bne.w	80087f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d117      	bne.n	80086da <UART_Receive_IT+0x50>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d113      	bne.n	80086da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	1c9a      	adds	r2, r3, #2
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	629a      	str	r2, [r3, #40]	; 0x28
 80086d8:	e026      	b.n	8008728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ec:	d007      	beq.n	80086fe <UART_Receive_IT+0x74>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <UART_Receive_IT+0x82>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	b2da      	uxtb	r2, r3
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	701a      	strb	r2, [r3, #0]
 800870a:	e008      	b.n	800871e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008718:	b2da      	uxtb	r2, r3
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29b      	uxth	r3, r3
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	4619      	mov	r1, r3
 8008736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008738:	2b00      	cmp	r3, #0
 800873a:	d15a      	bne.n	80087f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0220 	bic.w	r2, r2, #32
 800874a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800875a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0201 	bic.w	r2, r2, #1
 800876a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	2b01      	cmp	r3, #1
 800877a:	d135      	bne.n	80087e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	330c      	adds	r3, #12
 8008788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	613b      	str	r3, [r7, #16]
   return(result);
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f023 0310 	bic.w	r3, r3, #16
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	330c      	adds	r3, #12
 80087a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a2:	623a      	str	r2, [r7, #32]
 80087a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	69f9      	ldr	r1, [r7, #28]
 80087a8:	6a3a      	ldr	r2, [r7, #32]
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e5      	bne.n	8008782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d10a      	bne.n	80087da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff fe67 	bl	80084b4 <HAL_UARTEx_RxEventCallback>
 80087e6:	e002      	b.n	80087ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff fe4f 	bl	800848c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e002      	b.n	80087f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e000      	b.n	80087f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80087f6:	2302      	movs	r3, #2
  }
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3730      	adds	r7, #48	; 0x30
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008804:	b0c0      	sub	sp, #256	; 0x100
 8008806:	af00      	add	r7, sp, #0
 8008808:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800880c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	68d9      	ldr	r1, [r3, #12]
 800881e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	ea40 0301 	orr.w	r3, r0, r1
 8008828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800882a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	431a      	orrs	r2, r3
 8008838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	431a      	orrs	r2, r3
 8008840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	4313      	orrs	r3, r2
 8008848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800884c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008858:	f021 010c 	bic.w	r1, r1, #12
 800885c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008866:	430b      	orrs	r3, r1
 8008868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800886a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887a:	6999      	ldr	r1, [r3, #24]
 800887c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	ea40 0301 	orr.w	r3, r0, r1
 8008886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	4b8f      	ldr	r3, [pc, #572]	; (8008acc <UART_SetConfig+0x2cc>)
 8008890:	429a      	cmp	r2, r3
 8008892:	d005      	beq.n	80088a0 <UART_SetConfig+0xa0>
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	4b8d      	ldr	r3, [pc, #564]	; (8008ad0 <UART_SetConfig+0x2d0>)
 800889c:	429a      	cmp	r2, r3
 800889e:	d104      	bne.n	80088aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088a0:	f7ff fafa 	bl	8007e98 <HAL_RCC_GetPCLK2Freq>
 80088a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80088a8:	e003      	b.n	80088b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088aa:	f7ff fae1 	bl	8007e70 <HAL_RCC_GetPCLK1Freq>
 80088ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088bc:	f040 810c 	bne.w	8008ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80088ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80088d2:	4622      	mov	r2, r4
 80088d4:	462b      	mov	r3, r5
 80088d6:	1891      	adds	r1, r2, r2
 80088d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80088da:	415b      	adcs	r3, r3
 80088dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80088e2:	4621      	mov	r1, r4
 80088e4:	eb12 0801 	adds.w	r8, r2, r1
 80088e8:	4629      	mov	r1, r5
 80088ea:	eb43 0901 	adc.w	r9, r3, r1
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	f04f 0300 	mov.w	r3, #0
 80088f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008902:	4690      	mov	r8, r2
 8008904:	4699      	mov	r9, r3
 8008906:	4623      	mov	r3, r4
 8008908:	eb18 0303 	adds.w	r3, r8, r3
 800890c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008910:	462b      	mov	r3, r5
 8008912:	eb49 0303 	adc.w	r3, r9, r3
 8008916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800891a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800892a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800892e:	460b      	mov	r3, r1
 8008930:	18db      	adds	r3, r3, r3
 8008932:	653b      	str	r3, [r7, #80]	; 0x50
 8008934:	4613      	mov	r3, r2
 8008936:	eb42 0303 	adc.w	r3, r2, r3
 800893a:	657b      	str	r3, [r7, #84]	; 0x54
 800893c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008944:	f7f8 f980 	bl	8000c48 <__aeabi_uldivmod>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4b61      	ldr	r3, [pc, #388]	; (8008ad4 <UART_SetConfig+0x2d4>)
 800894e:	fba3 2302 	umull	r2, r3, r3, r2
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	011c      	lsls	r4, r3, #4
 8008956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800895a:	2200      	movs	r2, #0
 800895c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008960:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008968:	4642      	mov	r2, r8
 800896a:	464b      	mov	r3, r9
 800896c:	1891      	adds	r1, r2, r2
 800896e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008970:	415b      	adcs	r3, r3
 8008972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008978:	4641      	mov	r1, r8
 800897a:	eb12 0a01 	adds.w	sl, r2, r1
 800897e:	4649      	mov	r1, r9
 8008980:	eb43 0b01 	adc.w	fp, r3, r1
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008998:	4692      	mov	sl, r2
 800899a:	469b      	mov	fp, r3
 800899c:	4643      	mov	r3, r8
 800899e:	eb1a 0303 	adds.w	r3, sl, r3
 80089a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089a6:	464b      	mov	r3, r9
 80089a8:	eb4b 0303 	adc.w	r3, fp, r3
 80089ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80089c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80089c4:	460b      	mov	r3, r1
 80089c6:	18db      	adds	r3, r3, r3
 80089c8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ca:	4613      	mov	r3, r2
 80089cc:	eb42 0303 	adc.w	r3, r2, r3
 80089d0:	647b      	str	r3, [r7, #68]	; 0x44
 80089d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80089da:	f7f8 f935 	bl	8000c48 <__aeabi_uldivmod>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4611      	mov	r1, r2
 80089e4:	4b3b      	ldr	r3, [pc, #236]	; (8008ad4 <UART_SetConfig+0x2d4>)
 80089e6:	fba3 2301 	umull	r2, r3, r3, r1
 80089ea:	095b      	lsrs	r3, r3, #5
 80089ec:	2264      	movs	r2, #100	; 0x64
 80089ee:	fb02 f303 	mul.w	r3, r2, r3
 80089f2:	1acb      	subs	r3, r1, r3
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089fa:	4b36      	ldr	r3, [pc, #216]	; (8008ad4 <UART_SetConfig+0x2d4>)
 80089fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a08:	441c      	add	r4, r3
 8008a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a1c:	4642      	mov	r2, r8
 8008a1e:	464b      	mov	r3, r9
 8008a20:	1891      	adds	r1, r2, r2
 8008a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a24:	415b      	adcs	r3, r3
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a2c:	4641      	mov	r1, r8
 8008a2e:	1851      	adds	r1, r2, r1
 8008a30:	6339      	str	r1, [r7, #48]	; 0x30
 8008a32:	4649      	mov	r1, r9
 8008a34:	414b      	adcs	r3, r1
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	f04f 0300 	mov.w	r3, #0
 8008a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a44:	4659      	mov	r1, fp
 8008a46:	00cb      	lsls	r3, r1, #3
 8008a48:	4651      	mov	r1, sl
 8008a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a4e:	4651      	mov	r1, sl
 8008a50:	00ca      	lsls	r2, r1, #3
 8008a52:	4610      	mov	r0, r2
 8008a54:	4619      	mov	r1, r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	4642      	mov	r2, r8
 8008a5a:	189b      	adds	r3, r3, r2
 8008a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a60:	464b      	mov	r3, r9
 8008a62:	460a      	mov	r2, r1
 8008a64:	eb42 0303 	adc.w	r3, r2, r3
 8008a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a80:	460b      	mov	r3, r1
 8008a82:	18db      	adds	r3, r3, r3
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a86:	4613      	mov	r3, r2
 8008a88:	eb42 0303 	adc.w	r3, r2, r3
 8008a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a96:	f7f8 f8d7 	bl	8000c48 <__aeabi_uldivmod>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <UART_SetConfig+0x2d4>)
 8008aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	2164      	movs	r1, #100	; 0x64
 8008aa8:	fb01 f303 	mul.w	r3, r1, r3
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	3332      	adds	r3, #50	; 0x32
 8008ab2:	4a08      	ldr	r2, [pc, #32]	; (8008ad4 <UART_SetConfig+0x2d4>)
 8008ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	f003 0207 	and.w	r2, r3, #7
 8008abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4422      	add	r2, r4
 8008ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ac8:	e105      	b.n	8008cd6 <UART_SetConfig+0x4d6>
 8008aca:	bf00      	nop
 8008acc:	40011000 	.word	0x40011000
 8008ad0:	40011400 	.word	0x40011400
 8008ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008aea:	4642      	mov	r2, r8
 8008aec:	464b      	mov	r3, r9
 8008aee:	1891      	adds	r1, r2, r2
 8008af0:	6239      	str	r1, [r7, #32]
 8008af2:	415b      	adcs	r3, r3
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
 8008af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008afa:	4641      	mov	r1, r8
 8008afc:	1854      	adds	r4, r2, r1
 8008afe:	4649      	mov	r1, r9
 8008b00:	eb43 0501 	adc.w	r5, r3, r1
 8008b04:	f04f 0200 	mov.w	r2, #0
 8008b08:	f04f 0300 	mov.w	r3, #0
 8008b0c:	00eb      	lsls	r3, r5, #3
 8008b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b12:	00e2      	lsls	r2, r4, #3
 8008b14:	4614      	mov	r4, r2
 8008b16:	461d      	mov	r5, r3
 8008b18:	4643      	mov	r3, r8
 8008b1a:	18e3      	adds	r3, r4, r3
 8008b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b20:	464b      	mov	r3, r9
 8008b22:	eb45 0303 	adc.w	r3, r5, r3
 8008b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b3a:	f04f 0200 	mov.w	r2, #0
 8008b3e:	f04f 0300 	mov.w	r3, #0
 8008b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b46:	4629      	mov	r1, r5
 8008b48:	008b      	lsls	r3, r1, #2
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b50:	4621      	mov	r1, r4
 8008b52:	008a      	lsls	r2, r1, #2
 8008b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b58:	f7f8 f876 	bl	8000c48 <__aeabi_uldivmod>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4b60      	ldr	r3, [pc, #384]	; (8008ce4 <UART_SetConfig+0x4e4>)
 8008b62:	fba3 2302 	umull	r2, r3, r3, r2
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	011c      	lsls	r4, r3, #4
 8008b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b7c:	4642      	mov	r2, r8
 8008b7e:	464b      	mov	r3, r9
 8008b80:	1891      	adds	r1, r2, r2
 8008b82:	61b9      	str	r1, [r7, #24]
 8008b84:	415b      	adcs	r3, r3
 8008b86:	61fb      	str	r3, [r7, #28]
 8008b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b8c:	4641      	mov	r1, r8
 8008b8e:	1851      	adds	r1, r2, r1
 8008b90:	6139      	str	r1, [r7, #16]
 8008b92:	4649      	mov	r1, r9
 8008b94:	414b      	adcs	r3, r1
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	f04f 0200 	mov.w	r2, #0
 8008b9c:	f04f 0300 	mov.w	r3, #0
 8008ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ba4:	4659      	mov	r1, fp
 8008ba6:	00cb      	lsls	r3, r1, #3
 8008ba8:	4651      	mov	r1, sl
 8008baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bae:	4651      	mov	r1, sl
 8008bb0:	00ca      	lsls	r2, r1, #3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4642      	mov	r2, r8
 8008bba:	189b      	adds	r3, r3, r2
 8008bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bc0:	464b      	mov	r3, r9
 8008bc2:	460a      	mov	r2, r1
 8008bc4:	eb42 0303 	adc.w	r3, r2, r3
 8008bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008bd8:	f04f 0200 	mov.w	r2, #0
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008be4:	4649      	mov	r1, r9
 8008be6:	008b      	lsls	r3, r1, #2
 8008be8:	4641      	mov	r1, r8
 8008bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bee:	4641      	mov	r1, r8
 8008bf0:	008a      	lsls	r2, r1, #2
 8008bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008bf6:	f7f8 f827 	bl	8000c48 <__aeabi_uldivmod>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4b39      	ldr	r3, [pc, #228]	; (8008ce4 <UART_SetConfig+0x4e4>)
 8008c00:	fba3 1302 	umull	r1, r3, r3, r2
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	2164      	movs	r1, #100	; 0x64
 8008c08:	fb01 f303 	mul.w	r3, r1, r3
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	3332      	adds	r3, #50	; 0x32
 8008c12:	4a34      	ldr	r2, [pc, #208]	; (8008ce4 <UART_SetConfig+0x4e4>)
 8008c14:	fba2 2303 	umull	r2, r3, r2, r3
 8008c18:	095b      	lsrs	r3, r3, #5
 8008c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c1e:	441c      	add	r4, r3
 8008c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c24:	2200      	movs	r2, #0
 8008c26:	673b      	str	r3, [r7, #112]	; 0x70
 8008c28:	677a      	str	r2, [r7, #116]	; 0x74
 8008c2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c2e:	4642      	mov	r2, r8
 8008c30:	464b      	mov	r3, r9
 8008c32:	1891      	adds	r1, r2, r2
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	415b      	adcs	r3, r3
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c3e:	4641      	mov	r1, r8
 8008c40:	1851      	adds	r1, r2, r1
 8008c42:	6039      	str	r1, [r7, #0]
 8008c44:	4649      	mov	r1, r9
 8008c46:	414b      	adcs	r3, r1
 8008c48:	607b      	str	r3, [r7, #4]
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c56:	4659      	mov	r1, fp
 8008c58:	00cb      	lsls	r3, r1, #3
 8008c5a:	4651      	mov	r1, sl
 8008c5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c60:	4651      	mov	r1, sl
 8008c62:	00ca      	lsls	r2, r1, #3
 8008c64:	4610      	mov	r0, r2
 8008c66:	4619      	mov	r1, r3
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c70:	464b      	mov	r3, r9
 8008c72:	460a      	mov	r2, r1
 8008c74:	eb42 0303 	adc.w	r3, r2, r3
 8008c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	663b      	str	r3, [r7, #96]	; 0x60
 8008c84:	667a      	str	r2, [r7, #100]	; 0x64
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	f04f 0300 	mov.w	r3, #0
 8008c8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c92:	4649      	mov	r1, r9
 8008c94:	008b      	lsls	r3, r1, #2
 8008c96:	4641      	mov	r1, r8
 8008c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c9c:	4641      	mov	r1, r8
 8008c9e:	008a      	lsls	r2, r1, #2
 8008ca0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ca4:	f7f7 ffd0 	bl	8000c48 <__aeabi_uldivmod>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4b0d      	ldr	r3, [pc, #52]	; (8008ce4 <UART_SetConfig+0x4e4>)
 8008cae:	fba3 1302 	umull	r1, r3, r3, r2
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	2164      	movs	r1, #100	; 0x64
 8008cb6:	fb01 f303 	mul.w	r3, r1, r3
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	3332      	adds	r3, #50	; 0x32
 8008cc0:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <UART_SetConfig+0x4e4>)
 8008cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc6:	095b      	lsrs	r3, r3, #5
 8008cc8:	f003 020f 	and.w	r2, r3, #15
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4422      	add	r2, r4
 8008cd4:	609a      	str	r2, [r3, #8]
}
 8008cd6:	bf00      	nop
 8008cd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ce2:	bf00      	nop
 8008ce4:	51eb851f 	.word	0x51eb851f

08008ce8 <LL_GPIO_SetPinMode>:
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b089      	sub	sp, #36	; 0x24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	fa93 f3a3 	rbit	r3, r3
 8008d02:	613b      	str	r3, [r7, #16]
  return result;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	fab3 f383 	clz	r3, r3
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	2103      	movs	r1, #3
 8008d10:	fa01 f303 	lsl.w	r3, r1, r3
 8008d14:	43db      	mvns	r3, r3
 8008d16:	401a      	ands	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	fa93 f3a3 	rbit	r3, r3
 8008d22:	61bb      	str	r3, [r7, #24]
  return result;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	fab3 f383 	clz	r3, r3
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	fa01 f303 	lsl.w	r3, r1, r3
 8008d34:	431a      	orrs	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	3724      	adds	r7, #36	; 0x24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <LL_GPIO_SetPinOutputType>:
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	401a      	ands	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	fb01 f303 	mul.w	r3, r1, r3
 8008d64:	431a      	orrs	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	605a      	str	r2, [r3, #4]
}
 8008d6a:	bf00      	nop
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <LL_GPIO_SetPinSpeed>:
{
 8008d76:	b480      	push	{r7}
 8008d78:	b089      	sub	sp, #36	; 0x24
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	fa93 f3a3 	rbit	r3, r3
 8008d90:	613b      	str	r3, [r7, #16]
  return result;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	fab3 f383 	clz	r3, r3
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	2103      	movs	r1, #3
 8008d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008da2:	43db      	mvns	r3, r3
 8008da4:	401a      	ands	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	fa93 f3a3 	rbit	r3, r3
 8008db0:	61bb      	str	r3, [r7, #24]
  return result;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	fab3 f383 	clz	r3, r3
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	609a      	str	r2, [r3, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	3724      	adds	r7, #36	; 0x24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <LL_GPIO_SetPinPull>:
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b089      	sub	sp, #36	; 0x24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	fa93 f3a3 	rbit	r3, r3
 8008dee:	613b      	str	r3, [r7, #16]
  return result;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	fab3 f383 	clz	r3, r3
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	2103      	movs	r1, #3
 8008dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8008e00:	43db      	mvns	r3, r3
 8008e02:	401a      	ands	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	fa93 f3a3 	rbit	r3, r3
 8008e0e:	61bb      	str	r3, [r7, #24]
  return result;
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	fab3 f383 	clz	r3, r3
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e20:	431a      	orrs	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	60da      	str	r2, [r3, #12]
}
 8008e26:	bf00      	nop
 8008e28:	3724      	adds	r7, #36	; 0x24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <LL_GPIO_SetAFPin_0_7>:
{
 8008e32:	b480      	push	{r7}
 8008e34:	b089      	sub	sp, #36	; 0x24
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1a      	ldr	r2, [r3, #32]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	fa93 f3a3 	rbit	r3, r3
 8008e4c:	613b      	str	r3, [r7, #16]
  return result;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	fab3 f383 	clz	r3, r3
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	210f      	movs	r1, #15
 8008e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	401a      	ands	r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	fa93 f3a3 	rbit	r3, r3
 8008e6c:	61bb      	str	r3, [r7, #24]
  return result;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	fab3 f383 	clz	r3, r3
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	621a      	str	r2, [r3, #32]
}
 8008e84:	bf00      	nop
 8008e86:	3724      	adds	r7, #36	; 0x24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <LL_GPIO_SetAFPin_8_15>:
{
 8008e90:	b480      	push	{r7}
 8008e92:	b089      	sub	sp, #36	; 0x24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	0a1b      	lsrs	r3, r3, #8
 8008ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	fa93 f3a3 	rbit	r3, r3
 8008eac:	613b      	str	r3, [r7, #16]
  return result;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	fab3 f383 	clz	r3, r3
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	210f      	movs	r1, #15
 8008eba:	fa01 f303 	lsl.w	r3, r1, r3
 8008ebe:	43db      	mvns	r3, r3
 8008ec0:	401a      	ands	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	0a1b      	lsrs	r3, r3, #8
 8008ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	fa93 f3a3 	rbit	r3, r3
 8008ece:	61bb      	str	r3, [r7, #24]
  return result;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	fab3 f383 	clz	r3, r3
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008ee6:	bf00      	nop
 8008ee8:	3724      	adds	r7, #36	; 0x24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b088      	sub	sp, #32
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	fa93 f3a3 	rbit	r3, r3
 8008f10:	613b      	str	r3, [r7, #16]
  return result;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	fab3 f383 	clz	r3, r3
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008f1c:	e050      	b.n	8008fc0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	2101      	movs	r1, #1
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	fa01 f303 	lsl.w	r3, r1, r3
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d042      	beq.n	8008fba <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d003      	beq.n	8008f44 <LL_GPIO_Init+0x52>
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d10d      	bne.n	8008f60 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	69b9      	ldr	r1, [r7, #24]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ff12 	bl	8008d76 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	461a      	mov	r2, r3
 8008f58:	69b9      	ldr	r1, [r7, #24]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff fef3 	bl	8008d46 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	461a      	mov	r2, r3
 8008f66:	69b9      	ldr	r1, [r7, #24]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ff33 	bl	8008dd4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d11a      	bne.n	8008fac <LL_GPIO_Init+0xba>
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	fa93 f3a3 	rbit	r3, r3
 8008f80:	60bb      	str	r3, [r7, #8]
  return result;
 8008f82:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008f84:	fab3 f383 	clz	r3, r3
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b07      	cmp	r3, #7
 8008f8c:	d807      	bhi.n	8008f9e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	461a      	mov	r2, r3
 8008f94:	69b9      	ldr	r1, [r7, #24]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff ff4b 	bl	8008e32 <LL_GPIO_SetAFPin_0_7>
 8008f9c:	e006      	b.n	8008fac <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	69b9      	ldr	r1, [r7, #24]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff ff72 	bl	8008e90 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	69b9      	ldr	r1, [r7, #24]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff fe97 	bl	8008ce8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1a7      	bne.n	8008f1e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <LL_RCC_GetSysClkSource+0x18>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 030c 	and.w	r3, r3, #12
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40023800 	.word	0x40023800

08008ff4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008ff8:	4b04      	ldr	r3, [pc, #16]	; (800900c <LL_RCC_GetAHBPrescaler+0x18>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009000:	4618      	mov	r0, r3
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	40023800 	.word	0x40023800

08009010 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <LL_RCC_GetAPB1Prescaler+0x18>)
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800901c:	4618      	mov	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40023800 	.word	0x40023800

0800902c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009030:	4b04      	ldr	r3, [pc, #16]	; (8009044 <LL_RCC_GetAPB2Prescaler+0x18>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8009038:	4618      	mov	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	40023800 	.word	0x40023800

08009048 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <LL_RCC_PLL_GetMainSource+0x18>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8009054:	4618      	mov	r0, r3
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	40023800 	.word	0x40023800

08009064 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009068:	4b04      	ldr	r3, [pc, #16]	; (800907c <LL_RCC_PLL_GetN+0x18>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	099b      	lsrs	r3, r3, #6
 800906e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8009072:	4618      	mov	r0, r3
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	40023800 	.word	0x40023800

08009080 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009084:	4b04      	ldr	r3, [pc, #16]	; (8009098 <LL_RCC_PLL_GetP+0x18>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800908c:	4618      	mov	r0, r3
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	40023800 	.word	0x40023800

0800909c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80090a0:	4b04      	ldr	r3, [pc, #16]	; (80090b4 <LL_RCC_PLL_GetDivider+0x18>)
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	40023800 	.word	0x40023800

080090b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80090c0:	f000 f820 	bl	8009104 <RCC_GetSystemClockFreq>
 80090c4:	4602      	mov	r2, r0
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f840 	bl	8009154 <RCC_GetHCLKClockFreq>
 80090d4:	4602      	mov	r2, r0
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f84e 	bl	8009180 <RCC_GetPCLK1ClockFreq>
 80090e4:	4602      	mov	r2, r0
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f85a 	bl	80091a8 <RCC_GetPCLK2ClockFreq>
 80090f4:	4602      	mov	r2, r0
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60da      	str	r2, [r3, #12]
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800910e:	f7ff ff63 	bl	8008fd8 <LL_RCC_GetSysClkSource>
 8009112:	4603      	mov	r3, r0
 8009114:	2b08      	cmp	r3, #8
 8009116:	d00c      	beq.n	8009132 <RCC_GetSystemClockFreq+0x2e>
 8009118:	2b08      	cmp	r3, #8
 800911a:	d80f      	bhi.n	800913c <RCC_GetSystemClockFreq+0x38>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <RCC_GetSystemClockFreq+0x22>
 8009120:	2b04      	cmp	r3, #4
 8009122:	d003      	beq.n	800912c <RCC_GetSystemClockFreq+0x28>
 8009124:	e00a      	b.n	800913c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8009126:	4b09      	ldr	r3, [pc, #36]	; (800914c <RCC_GetSystemClockFreq+0x48>)
 8009128:	607b      	str	r3, [r7, #4]
      break;
 800912a:	e00a      	b.n	8009142 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800912c:	4b08      	ldr	r3, [pc, #32]	; (8009150 <RCC_GetSystemClockFreq+0x4c>)
 800912e:	607b      	str	r3, [r7, #4]
      break;
 8009130:	e007      	b.n	8009142 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8009132:	2008      	movs	r0, #8
 8009134:	f000 f84c 	bl	80091d0 <RCC_PLL_GetFreqDomain_SYS>
 8009138:	6078      	str	r0, [r7, #4]
      break;
 800913a:	e002      	b.n	8009142 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800913c:	4b03      	ldr	r3, [pc, #12]	; (800914c <RCC_GetSystemClockFreq+0x48>)
 800913e:	607b      	str	r3, [r7, #4]
      break;
 8009140:	bf00      	nop
  }

  return frequency;
 8009142:	687b      	ldr	r3, [r7, #4]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	00f42400 	.word	0x00f42400
 8009150:	007a1200 	.word	0x007a1200

08009154 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800915c:	f7ff ff4a 	bl	8008ff4 <LL_RCC_GetAHBPrescaler>
 8009160:	4603      	mov	r3, r0
 8009162:	091b      	lsrs	r3, r3, #4
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	4a04      	ldr	r2, [pc, #16]	; (800917c <RCC_GetHCLKClockFreq+0x28>)
 800916a:	5cd3      	ldrb	r3, [r2, r3]
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	40d3      	lsrs	r3, r2
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	0800db34 	.word	0x0800db34

08009180 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009188:	f7ff ff42 	bl	8009010 <LL_RCC_GetAPB1Prescaler>
 800918c:	4603      	mov	r3, r0
 800918e:	0a9b      	lsrs	r3, r3, #10
 8009190:	4a04      	ldr	r2, [pc, #16]	; (80091a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8009192:	5cd3      	ldrb	r3, [r2, r3]
 8009194:	461a      	mov	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	40d3      	lsrs	r3, r2
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	0800db44 	.word	0x0800db44

080091a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80091b0:	f7ff ff3c 	bl	800902c <LL_RCC_GetAPB2Prescaler>
 80091b4:	4603      	mov	r3, r0
 80091b6:	0b5b      	lsrs	r3, r3, #13
 80091b8:	4a04      	ldr	r2, [pc, #16]	; (80091cc <RCC_GetPCLK2ClockFreq+0x24>)
 80091ba:	5cd3      	ldrb	r3, [r2, r3]
 80091bc:	461a      	mov	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	40d3      	lsrs	r3, r2
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	0800db44 	.word	0x0800db44

080091d0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80091d0:	b590      	push	{r4, r7, lr}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	2300      	movs	r3, #0
 80091e2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80091e4:	f7ff ff30 	bl	8009048 <LL_RCC_PLL_GetMainSource>
 80091e8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091f6:	d003      	beq.n	8009200 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80091f8:	e005      	b.n	8009206 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80091fc:	617b      	str	r3, [r7, #20]
      break;
 80091fe:	e005      	b.n	800920c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009200:	4b11      	ldr	r3, [pc, #68]	; (8009248 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8009202:	617b      	str	r3, [r7, #20]
      break;
 8009204:	e002      	b.n	800920c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8009206:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8009208:	617b      	str	r3, [r7, #20]
      break;
 800920a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b08      	cmp	r3, #8
 8009210:	d113      	bne.n	800923a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009212:	f7ff ff43 	bl	800909c <LL_RCC_PLL_GetDivider>
 8009216:	4602      	mov	r2, r0
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	fbb3 f4f2 	udiv	r4, r3, r2
 800921e:	f7ff ff21 	bl	8009064 <LL_RCC_PLL_GetN>
 8009222:	4603      	mov	r3, r0
 8009224:	fb03 f404 	mul.w	r4, r3, r4
 8009228:	f7ff ff2a 	bl	8009080 <LL_RCC_PLL_GetP>
 800922c:	4603      	mov	r3, r0
 800922e:	0c1b      	lsrs	r3, r3, #16
 8009230:	3301      	adds	r3, #1
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	fbb4 f3f3 	udiv	r3, r4, r3
 8009238:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800923a:	693b      	ldr	r3, [r7, #16]
}
 800923c:	4618      	mov	r0, r3
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	bd90      	pop	{r4, r7, pc}
 8009244:	00f42400 	.word	0x00f42400
 8009248:	007a1200 	.word	0x007a1200

0800924c <LL_SPI_IsEnabled>:
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d101      	bne.n	8009264 <LL_SPI_IsEnabled+0x18>
 8009260:	2301      	movs	r3, #1
 8009262:	e000      	b.n	8009266 <LL_SPI_IsEnabled+0x1a>
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <LL_SPI_SetCRCPolynomial>:
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	b29b      	uxth	r3, r3
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	611a      	str	r2, [r3, #16]
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ffd3 	bl	800924c <LL_SPI_IsEnabled>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d139      	bne.n	8009320 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092b4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	6811      	ldr	r1, [r2, #0]
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	6852      	ldr	r2, [r2, #4]
 80092c0:	4311      	orrs	r1, r2
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	6892      	ldr	r2, [r2, #8]
 80092c6:	4311      	orrs	r1, r2
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	68d2      	ldr	r2, [r2, #12]
 80092cc:	4311      	orrs	r1, r2
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	6912      	ldr	r2, [r2, #16]
 80092d2:	4311      	orrs	r1, r2
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	6952      	ldr	r2, [r2, #20]
 80092d8:	4311      	orrs	r1, r2
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	6992      	ldr	r2, [r2, #24]
 80092de:	4311      	orrs	r1, r2
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	69d2      	ldr	r2, [r2, #28]
 80092e4:	4311      	orrs	r1, r2
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	6a12      	ldr	r2, [r2, #32]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f023 0204 	bic.w	r2, r3, #4
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	0c1b      	lsrs	r3, r3, #16
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930e:	d105      	bne.n	800931c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ffab 	bl	8009272 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	61da      	str	r2, [r3, #28]
  return status;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <LL_TIM_SetPrescaler>:
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <LL_TIM_SetAutoReload>:
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <LL_TIM_SetRepetitionCounter>:
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <LL_TIM_OC_SetCompareCH1>:
{
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	635a      	str	r2, [r3, #52]	; 0x34
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <LL_TIM_OC_SetCompareCH2>:
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <LL_TIM_OC_SetCompareCH3>:
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <LL_TIM_OC_SetCompareCH4>:
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	f043 0201 	orr.w	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	615a      	str	r2, [r3, #20]
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
	...

0800941c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a3d      	ldr	r2, [pc, #244]	; (8009524 <LL_TIM_Init+0x108>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <LL_TIM_Init+0x40>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943a:	d00f      	beq.n	800945c <LL_TIM_Init+0x40>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a3a      	ldr	r2, [pc, #232]	; (8009528 <LL_TIM_Init+0x10c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00b      	beq.n	800945c <LL_TIM_Init+0x40>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a39      	ldr	r2, [pc, #228]	; (800952c <LL_TIM_Init+0x110>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d007      	beq.n	800945c <LL_TIM_Init+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a38      	ldr	r2, [pc, #224]	; (8009530 <LL_TIM_Init+0x114>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d003      	beq.n	800945c <LL_TIM_Init+0x40>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a37      	ldr	r2, [pc, #220]	; (8009534 <LL_TIM_Init+0x118>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d106      	bne.n	800946a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2d      	ldr	r2, [pc, #180]	; (8009524 <LL_TIM_Init+0x108>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d02b      	beq.n	80094ca <LL_TIM_Init+0xae>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009478:	d027      	beq.n	80094ca <LL_TIM_Init+0xae>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2a      	ldr	r2, [pc, #168]	; (8009528 <LL_TIM_Init+0x10c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d023      	beq.n	80094ca <LL_TIM_Init+0xae>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a29      	ldr	r2, [pc, #164]	; (800952c <LL_TIM_Init+0x110>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d01f      	beq.n	80094ca <LL_TIM_Init+0xae>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a28      	ldr	r2, [pc, #160]	; (8009530 <LL_TIM_Init+0x114>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d01b      	beq.n	80094ca <LL_TIM_Init+0xae>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a27      	ldr	r2, [pc, #156]	; (8009534 <LL_TIM_Init+0x118>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d017      	beq.n	80094ca <LL_TIM_Init+0xae>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a26      	ldr	r2, [pc, #152]	; (8009538 <LL_TIM_Init+0x11c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d013      	beq.n	80094ca <LL_TIM_Init+0xae>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a25      	ldr	r2, [pc, #148]	; (800953c <LL_TIM_Init+0x120>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00f      	beq.n	80094ca <LL_TIM_Init+0xae>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a24      	ldr	r2, [pc, #144]	; (8009540 <LL_TIM_Init+0x124>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00b      	beq.n	80094ca <LL_TIM_Init+0xae>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a23      	ldr	r2, [pc, #140]	; (8009544 <LL_TIM_Init+0x128>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d007      	beq.n	80094ca <LL_TIM_Init+0xae>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a22      	ldr	r2, [pc, #136]	; (8009548 <LL_TIM_Init+0x12c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d003      	beq.n	80094ca <LL_TIM_Init+0xae>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a21      	ldr	r2, [pc, #132]	; (800954c <LL_TIM_Init+0x130>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d106      	bne.n	80094d8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ff34 	bl	8009352 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff ff20 	bl	8009336 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a0a      	ldr	r2, [pc, #40]	; (8009524 <LL_TIM_Init+0x108>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d003      	beq.n	8009506 <LL_TIM_Init+0xea>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a0c      	ldr	r2, [pc, #48]	; (8009534 <LL_TIM_Init+0x118>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d105      	bne.n	8009512 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff ff2e 	bl	800936e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff ff71 	bl	80093fa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40010000 	.word	0x40010000
 8009528:	40000400 	.word	0x40000400
 800952c:	40000800 	.word	0x40000800
 8009530:	40000c00 	.word	0x40000c00
 8009534:	40010400 	.word	0x40010400
 8009538:	40014000 	.word	0x40014000
 800953c:	40014400 	.word	0x40014400
 8009540:	40014800 	.word	0x40014800
 8009544:	40001800 	.word	0x40001800
 8009548:	40001c00 	.word	0x40001c00
 800954c:	40002000 	.word	0x40002000

08009550 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009566:	d027      	beq.n	80095b8 <LL_TIM_OC_Init+0x68>
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956e:	d82a      	bhi.n	80095c6 <LL_TIM_OC_Init+0x76>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009576:	d018      	beq.n	80095aa <LL_TIM_OC_Init+0x5a>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800957e:	d822      	bhi.n	80095c6 <LL_TIM_OC_Init+0x76>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d003      	beq.n	800958e <LL_TIM_OC_Init+0x3e>
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b10      	cmp	r3, #16
 800958a:	d007      	beq.n	800959c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800958c:	e01b      	b.n	80095c6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f000 f81f 	bl	80095d4 <OC1Config>
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]
      break;
 800959a:	e015      	b.n	80095c8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 f884 	bl	80096ac <OC2Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	75fb      	strb	r3, [r7, #23]
      break;
 80095a8:	e00e      	b.n	80095c8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f8ed 	bl	800978c <OC3Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	75fb      	strb	r3, [r7, #23]
      break;
 80095b6:	e007      	b.n	80095c8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 f956 	bl	800986c <OC4Config>
 80095c0:	4603      	mov	r3, r0
 80095c2:	75fb      	strb	r3, [r7, #23]
      break;
 80095c4:	e000      	b.n	80095c8 <LL_TIM_OC_Init+0x78>
      break;
 80095c6:	bf00      	nop
  }

  return result;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	f023 0201 	bic.w	r2, r3, #1
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0303 	bic.w	r3, r3, #3
 8009602:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f023 0202 	bic.w	r2, r3, #2
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	4313      	orrs	r3, r2
 800961e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f023 0201 	bic.w	r2, r3, #1
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a1c      	ldr	r2, [pc, #112]	; (80096a4 <OC1Config+0xd0>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <OC1Config+0x6a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a1b      	ldr	r2, [pc, #108]	; (80096a8 <OC1Config+0xd4>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d11e      	bne.n	800967c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f023 0208 	bic.w	r2, r3, #8
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f023 0204 	bic.w	r2, r3, #4
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	4313      	orrs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	4313      	orrs	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff fe7b 	bl	800938a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40010400 	.word	0x40010400

080096ac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	f023 0210 	bic.w	r2, r3, #16
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	021b      	lsls	r3, r3, #8
 80096e8:	4313      	orrs	r3, r2
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f023 0220 	bic.w	r2, r3, #32
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	4313      	orrs	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f023 0210 	bic.w	r2, r3, #16
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	011b      	lsls	r3, r3, #4
 8009708:	4313      	orrs	r3, r2
 800970a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a1d      	ldr	r2, [pc, #116]	; (8009784 <OC2Config+0xd8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d003      	beq.n	800971c <OC2Config+0x70>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a1c      	ldr	r2, [pc, #112]	; (8009788 <OC2Config+0xdc>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d11f      	bne.n	800975c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	019b      	lsls	r3, r3, #6
 8009728:	4313      	orrs	r3, r2
 800972a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	019b      	lsls	r3, r3, #6
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	4313      	orrs	r3, r2
 800975a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fe19 	bl	80093a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40010000 	.word	0x40010000
 8009788:	40010400 	.word	0x40010400

0800978c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	021b      	lsls	r3, r3, #8
 80097e6:	4313      	orrs	r3, r2
 80097e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a1d      	ldr	r2, [pc, #116]	; (8009864 <OC3Config+0xd8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d003      	beq.n	80097fa <OC3Config+0x6e>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a1c      	ldr	r2, [pc, #112]	; (8009868 <OC3Config+0xdc>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d11f      	bne.n	800983a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	029b      	lsls	r3, r3, #10
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	029b      	lsls	r3, r3, #10
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	015b      	lsls	r3, r3, #5
 8009836:	4313      	orrs	r3, r2
 8009838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fdb8 	bl	80093c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	40010000 	.word	0x40010000
 8009868:	40010400 	.word	0x40010400

0800986c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800989a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	4313      	orrs	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	031b      	lsls	r3, r3, #12
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	031b      	lsls	r3, r3, #12
 80098c8:	4313      	orrs	r3, r2
 80098ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a11      	ldr	r2, [pc, #68]	; (8009914 <OC4Config+0xa8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d003      	beq.n	80098dc <OC4Config+0x70>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a10      	ldr	r2, [pc, #64]	; (8009918 <OC4Config+0xac>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d107      	bne.n	80098ec <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	019b      	lsls	r3, r3, #6
 80098e8:	4313      	orrs	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff fd6d 	bl	80093de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	40010000 	.word	0x40010000
 8009918:	40010400 	.word	0x40010400

0800991c <LL_USART_IsEnabled>:
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800992c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009930:	bf0c      	ite	eq
 8009932:	2301      	moveq	r3, #1
 8009934:	2300      	movne	r3, #0
 8009936:	b2db      	uxtb	r3, r3
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <LL_USART_SetStopBitsLength>:
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	611a      	str	r2, [r3, #16]
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <LL_USART_SetHWFlowCtrl>:
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	615a      	str	r2, [r3, #20]
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <LL_USART_SetBaudRate>:
{
 8009990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009994:	b0c0      	sub	sp, #256	; 0x100
 8009996:	af00      	add	r7, sp, #0
 8009998:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800999c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80099a0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80099a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b0:	f040 810c 	bne.w	8009bcc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80099b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099b8:	2200      	movs	r2, #0
 80099ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80099c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	1891      	adds	r1, r2, r2
 80099cc:	6639      	str	r1, [r7, #96]	; 0x60
 80099ce:	415b      	adcs	r3, r3
 80099d0:	667b      	str	r3, [r7, #100]	; 0x64
 80099d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80099d6:	4621      	mov	r1, r4
 80099d8:	eb12 0801 	adds.w	r8, r2, r1
 80099dc:	4629      	mov	r1, r5
 80099de:	eb43 0901 	adc.w	r9, r3, r1
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099f6:	4690      	mov	r8, r2
 80099f8:	4699      	mov	r9, r3
 80099fa:	4623      	mov	r3, r4
 80099fc:	eb18 0303 	adds.w	r3, r8, r3
 8009a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a04:	462b      	mov	r3, r5
 8009a06:	eb49 0303 	adc.w	r3, r9, r3
 8009a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009a12:	2200      	movs	r2, #0
 8009a14:	469a      	mov	sl, r3
 8009a16:	4693      	mov	fp, r2
 8009a18:	eb1a 030a 	adds.w	r3, sl, sl
 8009a1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a1e:	eb4b 030b 	adc.w	r3, fp, fp
 8009a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a2c:	f7f7 f90c 	bl	8000c48 <__aeabi_uldivmod>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4b64      	ldr	r3, [pc, #400]	; (8009bc8 <LL_USART_SetBaudRate+0x238>)
 8009a36:	fba3 2302 	umull	r2, r3, r3, r2
 8009a3a:	095b      	lsrs	r3, r3, #5
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	b29c      	uxth	r4, r3
 8009a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a4c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a50:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8009a54:	4642      	mov	r2, r8
 8009a56:	464b      	mov	r3, r9
 8009a58:	1891      	adds	r1, r2, r2
 8009a5a:	6539      	str	r1, [r7, #80]	; 0x50
 8009a5c:	415b      	adcs	r3, r3
 8009a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a64:	4641      	mov	r1, r8
 8009a66:	1851      	adds	r1, r2, r1
 8009a68:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	414b      	adcs	r3, r1
 8009a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	f04f 0300 	mov.w	r3, #0
 8009a78:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	00cb      	lsls	r3, r1, #3
 8009a80:	4651      	mov	r1, sl
 8009a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a86:	4651      	mov	r1, sl
 8009a88:	00ca      	lsls	r2, r1, #3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4642      	mov	r2, r8
 8009a92:	189b      	adds	r3, r3, r2
 8009a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a98:	464b      	mov	r3, r9
 8009a9a:	460a      	mov	r2, r1
 8009a9c:	eb42 0303 	adc.w	r3, r2, r3
 8009aa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009aa4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009aae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009ab2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	18db      	adds	r3, r3, r3
 8009aba:	643b      	str	r3, [r7, #64]	; 0x40
 8009abc:	4613      	mov	r3, r2
 8009abe:	eb42 0303 	adc.w	r3, r2, r3
 8009ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ac4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009ac8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009acc:	f7f7 f8bc 	bl	8000c48 <__aeabi_uldivmod>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	4b3c      	ldr	r3, [pc, #240]	; (8009bc8 <LL_USART_SetBaudRate+0x238>)
 8009ad8:	fba3 2301 	umull	r2, r3, r3, r1
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	2264      	movs	r2, #100	; 0x64
 8009ae0:	fb02 f303 	mul.w	r3, r2, r3
 8009ae4:	1acb      	subs	r3, r1, r3
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009aec:	4b36      	ldr	r3, [pc, #216]	; (8009bc8 <LL_USART_SetBaudRate+0x238>)
 8009aee:	fba3 2302 	umull	r2, r3, r3, r2
 8009af2:	095b      	lsrs	r3, r3, #5
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	4423      	add	r3, r4
 8009b02:	b29c      	uxth	r4, r3
 8009b04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b0e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009b12:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8009b16:	4642      	mov	r2, r8
 8009b18:	464b      	mov	r3, r9
 8009b1a:	1891      	adds	r1, r2, r2
 8009b1c:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b1e:	415b      	adcs	r3, r3
 8009b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b26:	4641      	mov	r1, r8
 8009b28:	1851      	adds	r1, r2, r1
 8009b2a:	6339      	str	r1, [r7, #48]	; 0x30
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	414b      	adcs	r3, r1
 8009b30:	637b      	str	r3, [r7, #52]	; 0x34
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b3e:	4659      	mov	r1, fp
 8009b40:	00cb      	lsls	r3, r1, #3
 8009b42:	4651      	mov	r1, sl
 8009b44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b48:	4651      	mov	r1, sl
 8009b4a:	00ca      	lsls	r2, r1, #3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4619      	mov	r1, r3
 8009b50:	4603      	mov	r3, r0
 8009b52:	4642      	mov	r2, r8
 8009b54:	189b      	adds	r3, r3, r2
 8009b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b5a:	464b      	mov	r3, r9
 8009b5c:	460a      	mov	r2, r1
 8009b5e:	eb42 0303 	adc.w	r3, r2, r3
 8009b62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009b66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b70:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8009b74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	18db      	adds	r3, r3, r3
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b7e:	4613      	mov	r3, r2
 8009b80:	eb42 0303 	adc.w	r3, r2, r3
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009b8e:	f7f7 f85b 	bl	8000c48 <__aeabi_uldivmod>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <LL_USART_SetBaudRate+0x238>)
 8009b98:	fba3 1302 	umull	r1, r3, r3, r2
 8009b9c:	095b      	lsrs	r3, r3, #5
 8009b9e:	2164      	movs	r1, #100	; 0x64
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	3332      	adds	r3, #50	; 0x32
 8009baa:	4a07      	ldr	r2, [pc, #28]	; (8009bc8 <LL_USART_SetBaudRate+0x238>)
 8009bac:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb0:	095b      	lsrs	r3, r3, #5
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	4423      	add	r3, r4
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bc4:	609a      	str	r2, [r3, #8]
}
 8009bc6:	e107      	b.n	8009dd8 <LL_USART_SetBaudRate+0x448>
 8009bc8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009bcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009bd6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009bda:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8009bde:	4642      	mov	r2, r8
 8009be0:	464b      	mov	r3, r9
 8009be2:	1891      	adds	r1, r2, r2
 8009be4:	6239      	str	r1, [r7, #32]
 8009be6:	415b      	adcs	r3, r3
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bee:	4641      	mov	r1, r8
 8009bf0:	1854      	adds	r4, r2, r1
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	eb43 0501 	adc.w	r5, r3, r1
 8009bf8:	f04f 0200 	mov.w	r2, #0
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	00eb      	lsls	r3, r5, #3
 8009c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c06:	00e2      	lsls	r2, r4, #3
 8009c08:	4614      	mov	r4, r2
 8009c0a:	461d      	mov	r5, r3
 8009c0c:	4643      	mov	r3, r8
 8009c0e:	18e3      	adds	r3, r4, r3
 8009c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c14:	464b      	mov	r3, r9
 8009c16:	eb45 0303 	adc.w	r3, r5, r3
 8009c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8009c38:	4629      	mov	r1, r5
 8009c3a:	008b      	lsls	r3, r1, #2
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c42:	4621      	mov	r1, r4
 8009c44:	008a      	lsls	r2, r1, #2
 8009c46:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009c4a:	f7f6 fffd 	bl	8000c48 <__aeabi_uldivmod>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4b64      	ldr	r3, [pc, #400]	; (8009de4 <LL_USART_SetBaudRate+0x454>)
 8009c54:	fba3 2302 	umull	r2, r3, r3, r2
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	011b      	lsls	r3, r3, #4
 8009c5e:	b29c      	uxth	r4, r3
 8009c60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c6e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8009c72:	4642      	mov	r2, r8
 8009c74:	464b      	mov	r3, r9
 8009c76:	1891      	adds	r1, r2, r2
 8009c78:	61b9      	str	r1, [r7, #24]
 8009c7a:	415b      	adcs	r3, r3
 8009c7c:	61fb      	str	r3, [r7, #28]
 8009c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c82:	4641      	mov	r1, r8
 8009c84:	1851      	adds	r1, r2, r1
 8009c86:	6139      	str	r1, [r7, #16]
 8009c88:	4649      	mov	r1, r9
 8009c8a:	414b      	adcs	r3, r1
 8009c8c:	617b      	str	r3, [r7, #20]
 8009c8e:	f04f 0200 	mov.w	r2, #0
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c9a:	4659      	mov	r1, fp
 8009c9c:	00cb      	lsls	r3, r1, #3
 8009c9e:	4651      	mov	r1, sl
 8009ca0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ca4:	4651      	mov	r1, sl
 8009ca6:	00ca      	lsls	r2, r1, #3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	4619      	mov	r1, r3
 8009cac:	4603      	mov	r3, r0
 8009cae:	4642      	mov	r2, r8
 8009cb0:	189b      	adds	r3, r3, r2
 8009cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	460a      	mov	r2, r1
 8009cba:	eb42 0303 	adc.w	r3, r2, r3
 8009cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009cc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ccc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009cd0:	f04f 0200 	mov.w	r2, #0
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8009cdc:	4649      	mov	r1, r9
 8009cde:	008b      	lsls	r3, r1, #2
 8009ce0:	4641      	mov	r1, r8
 8009ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	008a      	lsls	r2, r1, #2
 8009cea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009cee:	f7f6 ffab 	bl	8000c48 <__aeabi_uldivmod>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4b3b      	ldr	r3, [pc, #236]	; (8009de4 <LL_USART_SetBaudRate+0x454>)
 8009cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8009cfc:	095b      	lsrs	r3, r3, #5
 8009cfe:	2164      	movs	r1, #100	; 0x64
 8009d00:	fb01 f303 	mul.w	r3, r1, r3
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	3332      	adds	r3, #50	; 0x32
 8009d0a:	4a36      	ldr	r2, [pc, #216]	; (8009de4 <LL_USART_SetBaudRate+0x454>)
 8009d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d10:	095b      	lsrs	r3, r3, #5
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	4423      	add	r3, r4
 8009d1c:	b29c      	uxth	r4, r3
 8009d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d22:	2200      	movs	r2, #0
 8009d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d2c:	4642      	mov	r2, r8
 8009d2e:	464b      	mov	r3, r9
 8009d30:	1891      	adds	r1, r2, r2
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	415b      	adcs	r3, r3
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d3c:	4641      	mov	r1, r8
 8009d3e:	1851      	adds	r1, r2, r1
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	4649      	mov	r1, r9
 8009d44:	414b      	adcs	r3, r1
 8009d46:	607b      	str	r3, [r7, #4]
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d54:	4659      	mov	r1, fp
 8009d56:	00cb      	lsls	r3, r1, #3
 8009d58:	4651      	mov	r1, sl
 8009d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d5e:	4651      	mov	r1, sl
 8009d60:	00ca      	lsls	r2, r1, #3
 8009d62:	4610      	mov	r0, r2
 8009d64:	4619      	mov	r1, r3
 8009d66:	4603      	mov	r3, r0
 8009d68:	4642      	mov	r2, r8
 8009d6a:	189b      	adds	r3, r3, r2
 8009d6c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d6e:	464b      	mov	r3, r9
 8009d70:	460a      	mov	r2, r1
 8009d72:	eb42 0303 	adc.w	r3, r2, r3
 8009d76:	677b      	str	r3, [r7, #116]	; 0x74
 8009d78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d82:	f04f 0200 	mov.w	r2, #0
 8009d86:	f04f 0300 	mov.w	r3, #0
 8009d8a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8009d8e:	4649      	mov	r1, r9
 8009d90:	008b      	lsls	r3, r1, #2
 8009d92:	4641      	mov	r1, r8
 8009d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d98:	4641      	mov	r1, r8
 8009d9a:	008a      	lsls	r2, r1, #2
 8009d9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009da0:	f7f6 ff52 	bl	8000c48 <__aeabi_uldivmod>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <LL_USART_SetBaudRate+0x454>)
 8009daa:	fba3 1302 	umull	r1, r3, r3, r2
 8009dae:	095b      	lsrs	r3, r3, #5
 8009db0:	2164      	movs	r1, #100	; 0x64
 8009db2:	fb01 f303 	mul.w	r3, r1, r3
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	3332      	adds	r3, #50	; 0x32
 8009dbc:	4a09      	ldr	r2, [pc, #36]	; (8009de4 <LL_USART_SetBaudRate+0x454>)
 8009dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc2:	095b      	lsrs	r3, r3, #5
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	4423      	add	r3, r4
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd6:	609a      	str	r2, [r3, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009dde:	46bd      	mov	sp, r7
 8009de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009de4:	51eb851f 	.word	0x51eb851f

08009de8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff fd8e 	bl	800991c <LL_USART_IsEnabled>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d15e      	bne.n	8009ec4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009e0e:	f023 030c 	bic.w	r3, r3, #12
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	6851      	ldr	r1, [r2, #4]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	68d2      	ldr	r2, [r2, #12]
 8009e1a:	4311      	orrs	r1, r2
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	6912      	ldr	r2, [r2, #16]
 8009e20:	4311      	orrs	r1, r2
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	6992      	ldr	r2, [r2, #24]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff fd85 	bl	8009944 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff fd92 	bl	800996a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff f934 	bl	80090b8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a1f      	ldr	r2, [pc, #124]	; (8009ed0 <LL_USART_Init+0xe8>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d102      	bne.n	8009e5e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	61bb      	str	r3, [r7, #24]
 8009e5c:	e021      	b.n	8009ea2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a1c      	ldr	r2, [pc, #112]	; (8009ed4 <LL_USART_Init+0xec>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d102      	bne.n	8009e6c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	61bb      	str	r3, [r7, #24]
 8009e6a:	e01a      	b.n	8009ea2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a1a      	ldr	r2, [pc, #104]	; (8009ed8 <LL_USART_Init+0xf0>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d102      	bne.n	8009e7a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	e013      	b.n	8009ea2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a17      	ldr	r2, [pc, #92]	; (8009edc <LL_USART_Init+0xf4>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d102      	bne.n	8009e88 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	61bb      	str	r3, [r7, #24]
 8009e86:	e00c      	b.n	8009ea2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a15      	ldr	r2, [pc, #84]	; (8009ee0 <LL_USART_Init+0xf8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d102      	bne.n	8009e96 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	e005      	b.n	8009ea2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a12      	ldr	r2, [pc, #72]	; (8009ee4 <LL_USART_Init+0xfc>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d101      	bne.n	8009ea2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00d      	beq.n	8009ec4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d009      	beq.n	8009ec4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	699a      	ldr	r2, [r3, #24]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	69b9      	ldr	r1, [r7, #24]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff fd66 	bl	8009990 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009ec4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3720      	adds	r7, #32
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	40011000 	.word	0x40011000
 8009ed4:	40004400 	.word	0x40004400
 8009ed8:	40004800 	.word	0x40004800
 8009edc:	40011400 	.word	0x40011400
 8009ee0:	40004c00 	.word	0x40004c00
 8009ee4:	40005000 	.word	0x40005000

08009ee8 <__errno>:
 8009ee8:	4b01      	ldr	r3, [pc, #4]	; (8009ef0 <__errno+0x8>)
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	20000010 	.word	0x20000010

08009ef4 <__libc_init_array>:
 8009ef4:	b570      	push	{r4, r5, r6, lr}
 8009ef6:	4d0d      	ldr	r5, [pc, #52]	; (8009f2c <__libc_init_array+0x38>)
 8009ef8:	4c0d      	ldr	r4, [pc, #52]	; (8009f30 <__libc_init_array+0x3c>)
 8009efa:	1b64      	subs	r4, r4, r5
 8009efc:	10a4      	asrs	r4, r4, #2
 8009efe:	2600      	movs	r6, #0
 8009f00:	42a6      	cmp	r6, r4
 8009f02:	d109      	bne.n	8009f18 <__libc_init_array+0x24>
 8009f04:	4d0b      	ldr	r5, [pc, #44]	; (8009f34 <__libc_init_array+0x40>)
 8009f06:	4c0c      	ldr	r4, [pc, #48]	; (8009f38 <__libc_init_array+0x44>)
 8009f08:	f003 fc24 	bl	800d754 <_init>
 8009f0c:	1b64      	subs	r4, r4, r5
 8009f0e:	10a4      	asrs	r4, r4, #2
 8009f10:	2600      	movs	r6, #0
 8009f12:	42a6      	cmp	r6, r4
 8009f14:	d105      	bne.n	8009f22 <__libc_init_array+0x2e>
 8009f16:	bd70      	pop	{r4, r5, r6, pc}
 8009f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1c:	4798      	blx	r3
 8009f1e:	3601      	adds	r6, #1
 8009f20:	e7ee      	b.n	8009f00 <__libc_init_array+0xc>
 8009f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f26:	4798      	blx	r3
 8009f28:	3601      	adds	r6, #1
 8009f2a:	e7f2      	b.n	8009f12 <__libc_init_array+0x1e>
 8009f2c:	0800df94 	.word	0x0800df94
 8009f30:	0800df94 	.word	0x0800df94
 8009f34:	0800df94 	.word	0x0800df94
 8009f38:	0800df98 	.word	0x0800df98

08009f3c <memset>:
 8009f3c:	4402      	add	r2, r0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d100      	bne.n	8009f46 <memset+0xa>
 8009f44:	4770      	bx	lr
 8009f46:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4a:	e7f9      	b.n	8009f40 <memset+0x4>

08009f4c <__cvt>:
 8009f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	ec55 4b10 	vmov	r4, r5, d0
 8009f54:	2d00      	cmp	r5, #0
 8009f56:	460e      	mov	r6, r1
 8009f58:	4619      	mov	r1, r3
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	bfbb      	ittet	lt
 8009f5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f62:	461d      	movlt	r5, r3
 8009f64:	2300      	movge	r3, #0
 8009f66:	232d      	movlt	r3, #45	; 0x2d
 8009f68:	700b      	strb	r3, [r1, #0]
 8009f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f70:	4691      	mov	r9, r2
 8009f72:	f023 0820 	bic.w	r8, r3, #32
 8009f76:	bfbc      	itt	lt
 8009f78:	4622      	movlt	r2, r4
 8009f7a:	4614      	movlt	r4, r2
 8009f7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f80:	d005      	beq.n	8009f8e <__cvt+0x42>
 8009f82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f86:	d100      	bne.n	8009f8a <__cvt+0x3e>
 8009f88:	3601      	adds	r6, #1
 8009f8a:	2102      	movs	r1, #2
 8009f8c:	e000      	b.n	8009f90 <__cvt+0x44>
 8009f8e:	2103      	movs	r1, #3
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	ab02      	add	r3, sp, #8
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	ec45 4b10 	vmov	d0, r4, r5
 8009f9c:	4653      	mov	r3, sl
 8009f9e:	4632      	mov	r2, r6
 8009fa0:	f000 fe1a 	bl	800abd8 <_dtoa_r>
 8009fa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fa8:	4607      	mov	r7, r0
 8009faa:	d102      	bne.n	8009fb2 <__cvt+0x66>
 8009fac:	f019 0f01 	tst.w	r9, #1
 8009fb0:	d022      	beq.n	8009ff8 <__cvt+0xac>
 8009fb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fb6:	eb07 0906 	add.w	r9, r7, r6
 8009fba:	d110      	bne.n	8009fde <__cvt+0x92>
 8009fbc:	783b      	ldrb	r3, [r7, #0]
 8009fbe:	2b30      	cmp	r3, #48	; 0x30
 8009fc0:	d10a      	bne.n	8009fd8 <__cvt+0x8c>
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fce:	b918      	cbnz	r0, 8009fd8 <__cvt+0x8c>
 8009fd0:	f1c6 0601 	rsb	r6, r6, #1
 8009fd4:	f8ca 6000 	str.w	r6, [sl]
 8009fd8:	f8da 3000 	ldr.w	r3, [sl]
 8009fdc:	4499      	add	r9, r3
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fea:	b108      	cbz	r0, 8009ff0 <__cvt+0xa4>
 8009fec:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ff0:	2230      	movs	r2, #48	; 0x30
 8009ff2:	9b03      	ldr	r3, [sp, #12]
 8009ff4:	454b      	cmp	r3, r9
 8009ff6:	d307      	bcc.n	800a008 <__cvt+0xbc>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ffc:	1bdb      	subs	r3, r3, r7
 8009ffe:	4638      	mov	r0, r7
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	b004      	add	sp, #16
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	1c59      	adds	r1, r3, #1
 800a00a:	9103      	str	r1, [sp, #12]
 800a00c:	701a      	strb	r2, [r3, #0]
 800a00e:	e7f0      	b.n	8009ff2 <__cvt+0xa6>

0800a010 <__exponent>:
 800a010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a012:	4603      	mov	r3, r0
 800a014:	2900      	cmp	r1, #0
 800a016:	bfb8      	it	lt
 800a018:	4249      	neglt	r1, r1
 800a01a:	f803 2b02 	strb.w	r2, [r3], #2
 800a01e:	bfb4      	ite	lt
 800a020:	222d      	movlt	r2, #45	; 0x2d
 800a022:	222b      	movge	r2, #43	; 0x2b
 800a024:	2909      	cmp	r1, #9
 800a026:	7042      	strb	r2, [r0, #1]
 800a028:	dd2a      	ble.n	800a080 <__exponent+0x70>
 800a02a:	f10d 0407 	add.w	r4, sp, #7
 800a02e:	46a4      	mov	ip, r4
 800a030:	270a      	movs	r7, #10
 800a032:	46a6      	mov	lr, r4
 800a034:	460a      	mov	r2, r1
 800a036:	fb91 f6f7 	sdiv	r6, r1, r7
 800a03a:	fb07 1516 	mls	r5, r7, r6, r1
 800a03e:	3530      	adds	r5, #48	; 0x30
 800a040:	2a63      	cmp	r2, #99	; 0x63
 800a042:	f104 34ff 	add.w	r4, r4, #4294967295
 800a046:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a04a:	4631      	mov	r1, r6
 800a04c:	dcf1      	bgt.n	800a032 <__exponent+0x22>
 800a04e:	3130      	adds	r1, #48	; 0x30
 800a050:	f1ae 0502 	sub.w	r5, lr, #2
 800a054:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a058:	1c44      	adds	r4, r0, #1
 800a05a:	4629      	mov	r1, r5
 800a05c:	4561      	cmp	r1, ip
 800a05e:	d30a      	bcc.n	800a076 <__exponent+0x66>
 800a060:	f10d 0209 	add.w	r2, sp, #9
 800a064:	eba2 020e 	sub.w	r2, r2, lr
 800a068:	4565      	cmp	r5, ip
 800a06a:	bf88      	it	hi
 800a06c:	2200      	movhi	r2, #0
 800a06e:	4413      	add	r3, r2
 800a070:	1a18      	subs	r0, r3, r0
 800a072:	b003      	add	sp, #12
 800a074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a07a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a07e:	e7ed      	b.n	800a05c <__exponent+0x4c>
 800a080:	2330      	movs	r3, #48	; 0x30
 800a082:	3130      	adds	r1, #48	; 0x30
 800a084:	7083      	strb	r3, [r0, #2]
 800a086:	70c1      	strb	r1, [r0, #3]
 800a088:	1d03      	adds	r3, r0, #4
 800a08a:	e7f1      	b.n	800a070 <__exponent+0x60>

0800a08c <_printf_float>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	ed2d 8b02 	vpush	{d8}
 800a094:	b08d      	sub	sp, #52	; 0x34
 800a096:	460c      	mov	r4, r1
 800a098:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a09c:	4616      	mov	r6, r2
 800a09e:	461f      	mov	r7, r3
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	f001 fd3f 	bl	800bb24 <_localeconv_r>
 800a0a6:	f8d0 a000 	ldr.w	sl, [r0]
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	f7f6 f890 	bl	80001d0 <strlen>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0c0:	3307      	adds	r3, #7
 800a0c2:	f023 0307 	bic.w	r3, r3, #7
 800a0c6:	f103 0208 	add.w	r2, r3, #8
 800a0ca:	f8c8 2000 	str.w	r2, [r8]
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0de:	9307      	str	r3, [sp, #28]
 800a0e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0e4:	ee08 0a10 	vmov	s16, r0
 800a0e8:	4b9f      	ldr	r3, [pc, #636]	; (800a368 <_printf_float+0x2dc>)
 800a0ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f2:	f7f6 fd1b 	bl	8000b2c <__aeabi_dcmpun>
 800a0f6:	bb88      	cbnz	r0, 800a15c <_printf_float+0xd0>
 800a0f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0fc:	4b9a      	ldr	r3, [pc, #616]	; (800a368 <_printf_float+0x2dc>)
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	f7f6 fcf5 	bl	8000af0 <__aeabi_dcmple>
 800a106:	bb48      	cbnz	r0, 800a15c <_printf_float+0xd0>
 800a108:	2200      	movs	r2, #0
 800a10a:	2300      	movs	r3, #0
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	f7f6 fce4 	bl	8000adc <__aeabi_dcmplt>
 800a114:	b110      	cbz	r0, 800a11c <_printf_float+0x90>
 800a116:	232d      	movs	r3, #45	; 0x2d
 800a118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a11c:	4b93      	ldr	r3, [pc, #588]	; (800a36c <_printf_float+0x2e0>)
 800a11e:	4894      	ldr	r0, [pc, #592]	; (800a370 <_printf_float+0x2e4>)
 800a120:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a124:	bf94      	ite	ls
 800a126:	4698      	movls	r8, r3
 800a128:	4680      	movhi	r8, r0
 800a12a:	2303      	movs	r3, #3
 800a12c:	6123      	str	r3, [r4, #16]
 800a12e:	9b05      	ldr	r3, [sp, #20]
 800a130:	f023 0204 	bic.w	r2, r3, #4
 800a134:	6022      	str	r2, [r4, #0]
 800a136:	f04f 0900 	mov.w	r9, #0
 800a13a:	9700      	str	r7, [sp, #0]
 800a13c:	4633      	mov	r3, r6
 800a13e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a140:	4621      	mov	r1, r4
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f9d8 	bl	800a4f8 <_printf_common>
 800a148:	3001      	adds	r0, #1
 800a14a:	f040 8090 	bne.w	800a26e <_printf_float+0x1e2>
 800a14e:	f04f 30ff 	mov.w	r0, #4294967295
 800a152:	b00d      	add	sp, #52	; 0x34
 800a154:	ecbd 8b02 	vpop	{d8}
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	4642      	mov	r2, r8
 800a15e:	464b      	mov	r3, r9
 800a160:	4640      	mov	r0, r8
 800a162:	4649      	mov	r1, r9
 800a164:	f7f6 fce2 	bl	8000b2c <__aeabi_dcmpun>
 800a168:	b140      	cbz	r0, 800a17c <_printf_float+0xf0>
 800a16a:	464b      	mov	r3, r9
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bfbc      	itt	lt
 800a170:	232d      	movlt	r3, #45	; 0x2d
 800a172:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a176:	487f      	ldr	r0, [pc, #508]	; (800a374 <_printf_float+0x2e8>)
 800a178:	4b7f      	ldr	r3, [pc, #508]	; (800a378 <_printf_float+0x2ec>)
 800a17a:	e7d1      	b.n	800a120 <_printf_float+0x94>
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a182:	9206      	str	r2, [sp, #24]
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	d13f      	bne.n	800a208 <_printf_float+0x17c>
 800a188:	2306      	movs	r3, #6
 800a18a:	6063      	str	r3, [r4, #4]
 800a18c:	9b05      	ldr	r3, [sp, #20]
 800a18e:	6861      	ldr	r1, [r4, #4]
 800a190:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a194:	2300      	movs	r3, #0
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	ab0a      	add	r3, sp, #40	; 0x28
 800a19a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a19e:	ab09      	add	r3, sp, #36	; 0x24
 800a1a0:	ec49 8b10 	vmov	d0, r8, r9
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f7ff fecd 	bl	8009f4c <__cvt>
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1b6:	2b47      	cmp	r3, #71	; 0x47
 800a1b8:	4680      	mov	r8, r0
 800a1ba:	d108      	bne.n	800a1ce <_printf_float+0x142>
 800a1bc:	1cc8      	adds	r0, r1, #3
 800a1be:	db02      	blt.n	800a1c6 <_printf_float+0x13a>
 800a1c0:	6863      	ldr	r3, [r4, #4]
 800a1c2:	4299      	cmp	r1, r3
 800a1c4:	dd41      	ble.n	800a24a <_printf_float+0x1be>
 800a1c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a1ca:	fa5f fb8b 	uxtb.w	fp, fp
 800a1ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1d2:	d820      	bhi.n	800a216 <_printf_float+0x18a>
 800a1d4:	3901      	subs	r1, #1
 800a1d6:	465a      	mov	r2, fp
 800a1d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1dc:	9109      	str	r1, [sp, #36]	; 0x24
 800a1de:	f7ff ff17 	bl	800a010 <__exponent>
 800a1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e4:	1813      	adds	r3, r2, r0
 800a1e6:	2a01      	cmp	r2, #1
 800a1e8:	4681      	mov	r9, r0
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	dc02      	bgt.n	800a1f4 <_printf_float+0x168>
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	07d2      	lsls	r2, r2, #31
 800a1f2:	d501      	bpl.n	800a1f8 <_printf_float+0x16c>
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d09c      	beq.n	800a13a <_printf_float+0xae>
 800a200:	232d      	movs	r3, #45	; 0x2d
 800a202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a206:	e798      	b.n	800a13a <_printf_float+0xae>
 800a208:	9a06      	ldr	r2, [sp, #24]
 800a20a:	2a47      	cmp	r2, #71	; 0x47
 800a20c:	d1be      	bne.n	800a18c <_printf_float+0x100>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1bc      	bne.n	800a18c <_printf_float+0x100>
 800a212:	2301      	movs	r3, #1
 800a214:	e7b9      	b.n	800a18a <_printf_float+0xfe>
 800a216:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a21a:	d118      	bne.n	800a24e <_printf_float+0x1c2>
 800a21c:	2900      	cmp	r1, #0
 800a21e:	6863      	ldr	r3, [r4, #4]
 800a220:	dd0b      	ble.n	800a23a <_printf_float+0x1ae>
 800a222:	6121      	str	r1, [r4, #16]
 800a224:	b913      	cbnz	r3, 800a22c <_printf_float+0x1a0>
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	07d0      	lsls	r0, r2, #31
 800a22a:	d502      	bpl.n	800a232 <_printf_float+0x1a6>
 800a22c:	3301      	adds	r3, #1
 800a22e:	440b      	add	r3, r1
 800a230:	6123      	str	r3, [r4, #16]
 800a232:	65a1      	str	r1, [r4, #88]	; 0x58
 800a234:	f04f 0900 	mov.w	r9, #0
 800a238:	e7de      	b.n	800a1f8 <_printf_float+0x16c>
 800a23a:	b913      	cbnz	r3, 800a242 <_printf_float+0x1b6>
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	07d2      	lsls	r2, r2, #31
 800a240:	d501      	bpl.n	800a246 <_printf_float+0x1ba>
 800a242:	3302      	adds	r3, #2
 800a244:	e7f4      	b.n	800a230 <_printf_float+0x1a4>
 800a246:	2301      	movs	r3, #1
 800a248:	e7f2      	b.n	800a230 <_printf_float+0x1a4>
 800a24a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a250:	4299      	cmp	r1, r3
 800a252:	db05      	blt.n	800a260 <_printf_float+0x1d4>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	6121      	str	r1, [r4, #16]
 800a258:	07d8      	lsls	r0, r3, #31
 800a25a:	d5ea      	bpl.n	800a232 <_printf_float+0x1a6>
 800a25c:	1c4b      	adds	r3, r1, #1
 800a25e:	e7e7      	b.n	800a230 <_printf_float+0x1a4>
 800a260:	2900      	cmp	r1, #0
 800a262:	bfd4      	ite	le
 800a264:	f1c1 0202 	rsble	r2, r1, #2
 800a268:	2201      	movgt	r2, #1
 800a26a:	4413      	add	r3, r2
 800a26c:	e7e0      	b.n	800a230 <_printf_float+0x1a4>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	055a      	lsls	r2, r3, #21
 800a272:	d407      	bmi.n	800a284 <_printf_float+0x1f8>
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	4642      	mov	r2, r8
 800a278:	4631      	mov	r1, r6
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	d12c      	bne.n	800a2dc <_printf_float+0x250>
 800a282:	e764      	b.n	800a14e <_printf_float+0xc2>
 800a284:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a288:	f240 80e0 	bls.w	800a44c <_printf_float+0x3c0>
 800a28c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a290:	2200      	movs	r2, #0
 800a292:	2300      	movs	r3, #0
 800a294:	f7f6 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d034      	beq.n	800a306 <_printf_float+0x27a>
 800a29c:	4a37      	ldr	r2, [pc, #220]	; (800a37c <_printf_float+0x2f0>)
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f43f af51 	beq.w	800a14e <_printf_float+0xc2>
 800a2ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	db02      	blt.n	800a2ba <_printf_float+0x22e>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	07d8      	lsls	r0, r3, #31
 800a2b8:	d510      	bpl.n	800a2dc <_printf_float+0x250>
 800a2ba:	ee18 3a10 	vmov	r3, s16
 800a2be:	4652      	mov	r2, sl
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f af41 	beq.w	800a14e <_printf_float+0xc2>
 800a2cc:	f04f 0800 	mov.w	r8, #0
 800a2d0:	f104 091a 	add.w	r9, r4, #26
 800a2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	4543      	cmp	r3, r8
 800a2da:	dc09      	bgt.n	800a2f0 <_printf_float+0x264>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	079b      	lsls	r3, r3, #30
 800a2e0:	f100 8105 	bmi.w	800a4ee <_printf_float+0x462>
 800a2e4:	68e0      	ldr	r0, [r4, #12]
 800a2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e8:	4298      	cmp	r0, r3
 800a2ea:	bfb8      	it	lt
 800a2ec:	4618      	movlt	r0, r3
 800a2ee:	e730      	b.n	800a152 <_printf_float+0xc6>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	464a      	mov	r2, r9
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b8      	blx	r7
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f43f af27 	beq.w	800a14e <_printf_float+0xc2>
 800a300:	f108 0801 	add.w	r8, r8, #1
 800a304:	e7e6      	b.n	800a2d4 <_printf_float+0x248>
 800a306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dc39      	bgt.n	800a380 <_printf_float+0x2f4>
 800a30c:	4a1b      	ldr	r2, [pc, #108]	; (800a37c <_printf_float+0x2f0>)
 800a30e:	2301      	movs	r3, #1
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	f43f af19 	beq.w	800a14e <_printf_float+0xc2>
 800a31c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a320:	4313      	orrs	r3, r2
 800a322:	d102      	bne.n	800a32a <_printf_float+0x29e>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	07d9      	lsls	r1, r3, #31
 800a328:	d5d8      	bpl.n	800a2dc <_printf_float+0x250>
 800a32a:	ee18 3a10 	vmov	r3, s16
 800a32e:	4652      	mov	r2, sl
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f af09 	beq.w	800a14e <_printf_float+0xc2>
 800a33c:	f04f 0900 	mov.w	r9, #0
 800a340:	f104 0a1a 	add.w	sl, r4, #26
 800a344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a346:	425b      	negs	r3, r3
 800a348:	454b      	cmp	r3, r9
 800a34a:	dc01      	bgt.n	800a350 <_printf_float+0x2c4>
 800a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34e:	e792      	b.n	800a276 <_printf_float+0x1ea>
 800a350:	2301      	movs	r3, #1
 800a352:	4652      	mov	r2, sl
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	f43f aef7 	beq.w	800a14e <_printf_float+0xc2>
 800a360:	f109 0901 	add.w	r9, r9, #1
 800a364:	e7ee      	b.n	800a344 <_printf_float+0x2b8>
 800a366:	bf00      	nop
 800a368:	7fefffff 	.word	0x7fefffff
 800a36c:	0800db68 	.word	0x0800db68
 800a370:	0800db6c 	.word	0x0800db6c
 800a374:	0800db74 	.word	0x0800db74
 800a378:	0800db70 	.word	0x0800db70
 800a37c:	0800db78 	.word	0x0800db78
 800a380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a384:	429a      	cmp	r2, r3
 800a386:	bfa8      	it	ge
 800a388:	461a      	movge	r2, r3
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	4691      	mov	r9, r2
 800a38e:	dc37      	bgt.n	800a400 <_printf_float+0x374>
 800a390:	f04f 0b00 	mov.w	fp, #0
 800a394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a398:	f104 021a 	add.w	r2, r4, #26
 800a39c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a39e:	9305      	str	r3, [sp, #20]
 800a3a0:	eba3 0309 	sub.w	r3, r3, r9
 800a3a4:	455b      	cmp	r3, fp
 800a3a6:	dc33      	bgt.n	800a410 <_printf_float+0x384>
 800a3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	db3b      	blt.n	800a428 <_printf_float+0x39c>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	07da      	lsls	r2, r3, #31
 800a3b4:	d438      	bmi.n	800a428 <_printf_float+0x39c>
 800a3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b8:	9a05      	ldr	r2, [sp, #20]
 800a3ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3bc:	1a9a      	subs	r2, r3, r2
 800a3be:	eba3 0901 	sub.w	r9, r3, r1
 800a3c2:	4591      	cmp	r9, r2
 800a3c4:	bfa8      	it	ge
 800a3c6:	4691      	movge	r9, r2
 800a3c8:	f1b9 0f00 	cmp.w	r9, #0
 800a3cc:	dc35      	bgt.n	800a43a <_printf_float+0x3ae>
 800a3ce:	f04f 0800 	mov.w	r8, #0
 800a3d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3d6:	f104 0a1a 	add.w	sl, r4, #26
 800a3da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3de:	1a9b      	subs	r3, r3, r2
 800a3e0:	eba3 0309 	sub.w	r3, r3, r9
 800a3e4:	4543      	cmp	r3, r8
 800a3e6:	f77f af79 	ble.w	800a2dc <_printf_float+0x250>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4652      	mov	r2, sl
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b8      	blx	r7
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f43f aeaa 	beq.w	800a14e <_printf_float+0xc2>
 800a3fa:	f108 0801 	add.w	r8, r8, #1
 800a3fe:	e7ec      	b.n	800a3da <_printf_float+0x34e>
 800a400:	4613      	mov	r3, r2
 800a402:	4631      	mov	r1, r6
 800a404:	4642      	mov	r2, r8
 800a406:	4628      	mov	r0, r5
 800a408:	47b8      	blx	r7
 800a40a:	3001      	adds	r0, #1
 800a40c:	d1c0      	bne.n	800a390 <_printf_float+0x304>
 800a40e:	e69e      	b.n	800a14e <_printf_float+0xc2>
 800a410:	2301      	movs	r3, #1
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	9205      	str	r2, [sp, #20]
 800a418:	47b8      	blx	r7
 800a41a:	3001      	adds	r0, #1
 800a41c:	f43f ae97 	beq.w	800a14e <_printf_float+0xc2>
 800a420:	9a05      	ldr	r2, [sp, #20]
 800a422:	f10b 0b01 	add.w	fp, fp, #1
 800a426:	e7b9      	b.n	800a39c <_printf_float+0x310>
 800a428:	ee18 3a10 	vmov	r3, s16
 800a42c:	4652      	mov	r2, sl
 800a42e:	4631      	mov	r1, r6
 800a430:	4628      	mov	r0, r5
 800a432:	47b8      	blx	r7
 800a434:	3001      	adds	r0, #1
 800a436:	d1be      	bne.n	800a3b6 <_printf_float+0x32a>
 800a438:	e689      	b.n	800a14e <_printf_float+0xc2>
 800a43a:	9a05      	ldr	r2, [sp, #20]
 800a43c:	464b      	mov	r3, r9
 800a43e:	4442      	add	r2, r8
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	d1c1      	bne.n	800a3ce <_printf_float+0x342>
 800a44a:	e680      	b.n	800a14e <_printf_float+0xc2>
 800a44c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a44e:	2a01      	cmp	r2, #1
 800a450:	dc01      	bgt.n	800a456 <_printf_float+0x3ca>
 800a452:	07db      	lsls	r3, r3, #31
 800a454:	d538      	bpl.n	800a4c8 <_printf_float+0x43c>
 800a456:	2301      	movs	r3, #1
 800a458:	4642      	mov	r2, r8
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	f43f ae74 	beq.w	800a14e <_printf_float+0xc2>
 800a466:	ee18 3a10 	vmov	r3, s16
 800a46a:	4652      	mov	r2, sl
 800a46c:	4631      	mov	r1, r6
 800a46e:	4628      	mov	r0, r5
 800a470:	47b8      	blx	r7
 800a472:	3001      	adds	r0, #1
 800a474:	f43f ae6b 	beq.w	800a14e <_printf_float+0xc2>
 800a478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a47c:	2200      	movs	r2, #0
 800a47e:	2300      	movs	r3, #0
 800a480:	f7f6 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800a484:	b9d8      	cbnz	r0, 800a4be <_printf_float+0x432>
 800a486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a488:	f108 0201 	add.w	r2, r8, #1
 800a48c:	3b01      	subs	r3, #1
 800a48e:	4631      	mov	r1, r6
 800a490:	4628      	mov	r0, r5
 800a492:	47b8      	blx	r7
 800a494:	3001      	adds	r0, #1
 800a496:	d10e      	bne.n	800a4b6 <_printf_float+0x42a>
 800a498:	e659      	b.n	800a14e <_printf_float+0xc2>
 800a49a:	2301      	movs	r3, #1
 800a49c:	4652      	mov	r2, sl
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	47b8      	blx	r7
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	f43f ae52 	beq.w	800a14e <_printf_float+0xc2>
 800a4aa:	f108 0801 	add.w	r8, r8, #1
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	4543      	cmp	r3, r8
 800a4b4:	dcf1      	bgt.n	800a49a <_printf_float+0x40e>
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4bc:	e6dc      	b.n	800a278 <_printf_float+0x1ec>
 800a4be:	f04f 0800 	mov.w	r8, #0
 800a4c2:	f104 0a1a 	add.w	sl, r4, #26
 800a4c6:	e7f2      	b.n	800a4ae <_printf_float+0x422>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	4642      	mov	r2, r8
 800a4cc:	e7df      	b.n	800a48e <_printf_float+0x402>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	464a      	mov	r2, r9
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b8      	blx	r7
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f43f ae38 	beq.w	800a14e <_printf_float+0xc2>
 800a4de:	f108 0801 	add.w	r8, r8, #1
 800a4e2:	68e3      	ldr	r3, [r4, #12]
 800a4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4e6:	1a5b      	subs	r3, r3, r1
 800a4e8:	4543      	cmp	r3, r8
 800a4ea:	dcf0      	bgt.n	800a4ce <_printf_float+0x442>
 800a4ec:	e6fa      	b.n	800a2e4 <_printf_float+0x258>
 800a4ee:	f04f 0800 	mov.w	r8, #0
 800a4f2:	f104 0919 	add.w	r9, r4, #25
 800a4f6:	e7f4      	b.n	800a4e2 <_printf_float+0x456>

0800a4f8 <_printf_common>:
 800a4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fc:	4616      	mov	r6, r2
 800a4fe:	4699      	mov	r9, r3
 800a500:	688a      	ldr	r2, [r1, #8]
 800a502:	690b      	ldr	r3, [r1, #16]
 800a504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a508:	4293      	cmp	r3, r2
 800a50a:	bfb8      	it	lt
 800a50c:	4613      	movlt	r3, r2
 800a50e:	6033      	str	r3, [r6, #0]
 800a510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a514:	4607      	mov	r7, r0
 800a516:	460c      	mov	r4, r1
 800a518:	b10a      	cbz	r2, 800a51e <_printf_common+0x26>
 800a51a:	3301      	adds	r3, #1
 800a51c:	6033      	str	r3, [r6, #0]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	0699      	lsls	r1, r3, #26
 800a522:	bf42      	ittt	mi
 800a524:	6833      	ldrmi	r3, [r6, #0]
 800a526:	3302      	addmi	r3, #2
 800a528:	6033      	strmi	r3, [r6, #0]
 800a52a:	6825      	ldr	r5, [r4, #0]
 800a52c:	f015 0506 	ands.w	r5, r5, #6
 800a530:	d106      	bne.n	800a540 <_printf_common+0x48>
 800a532:	f104 0a19 	add.w	sl, r4, #25
 800a536:	68e3      	ldr	r3, [r4, #12]
 800a538:	6832      	ldr	r2, [r6, #0]
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	dc26      	bgt.n	800a58e <_printf_common+0x96>
 800a540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a544:	1e13      	subs	r3, r2, #0
 800a546:	6822      	ldr	r2, [r4, #0]
 800a548:	bf18      	it	ne
 800a54a:	2301      	movne	r3, #1
 800a54c:	0692      	lsls	r2, r2, #26
 800a54e:	d42b      	bmi.n	800a5a8 <_printf_common+0xb0>
 800a550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a554:	4649      	mov	r1, r9
 800a556:	4638      	mov	r0, r7
 800a558:	47c0      	blx	r8
 800a55a:	3001      	adds	r0, #1
 800a55c:	d01e      	beq.n	800a59c <_printf_common+0xa4>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	68e5      	ldr	r5, [r4, #12]
 800a562:	6832      	ldr	r2, [r6, #0]
 800a564:	f003 0306 	and.w	r3, r3, #6
 800a568:	2b04      	cmp	r3, #4
 800a56a:	bf08      	it	eq
 800a56c:	1aad      	subeq	r5, r5, r2
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	6922      	ldr	r2, [r4, #16]
 800a572:	bf0c      	ite	eq
 800a574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a578:	2500      	movne	r5, #0
 800a57a:	4293      	cmp	r3, r2
 800a57c:	bfc4      	itt	gt
 800a57e:	1a9b      	subgt	r3, r3, r2
 800a580:	18ed      	addgt	r5, r5, r3
 800a582:	2600      	movs	r6, #0
 800a584:	341a      	adds	r4, #26
 800a586:	42b5      	cmp	r5, r6
 800a588:	d11a      	bne.n	800a5c0 <_printf_common+0xc8>
 800a58a:	2000      	movs	r0, #0
 800a58c:	e008      	b.n	800a5a0 <_printf_common+0xa8>
 800a58e:	2301      	movs	r3, #1
 800a590:	4652      	mov	r2, sl
 800a592:	4649      	mov	r1, r9
 800a594:	4638      	mov	r0, r7
 800a596:	47c0      	blx	r8
 800a598:	3001      	adds	r0, #1
 800a59a:	d103      	bne.n	800a5a4 <_printf_common+0xac>
 800a59c:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	e7c6      	b.n	800a536 <_printf_common+0x3e>
 800a5a8:	18e1      	adds	r1, r4, r3
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	2030      	movs	r0, #48	; 0x30
 800a5ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5b2:	4422      	add	r2, r4
 800a5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5bc:	3302      	adds	r3, #2
 800a5be:	e7c7      	b.n	800a550 <_printf_common+0x58>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	47c0      	blx	r8
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d0e6      	beq.n	800a59c <_printf_common+0xa4>
 800a5ce:	3601      	adds	r6, #1
 800a5d0:	e7d9      	b.n	800a586 <_printf_common+0x8e>
	...

0800a5d4 <_printf_i>:
 800a5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	7e0f      	ldrb	r7, [r1, #24]
 800a5da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5dc:	2f78      	cmp	r7, #120	; 0x78
 800a5de:	4691      	mov	r9, r2
 800a5e0:	4680      	mov	r8, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	469a      	mov	sl, r3
 800a5e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5ea:	d807      	bhi.n	800a5fc <_printf_i+0x28>
 800a5ec:	2f62      	cmp	r7, #98	; 0x62
 800a5ee:	d80a      	bhi.n	800a606 <_printf_i+0x32>
 800a5f0:	2f00      	cmp	r7, #0
 800a5f2:	f000 80d8 	beq.w	800a7a6 <_printf_i+0x1d2>
 800a5f6:	2f58      	cmp	r7, #88	; 0x58
 800a5f8:	f000 80a3 	beq.w	800a742 <_printf_i+0x16e>
 800a5fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a604:	e03a      	b.n	800a67c <_printf_i+0xa8>
 800a606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a60a:	2b15      	cmp	r3, #21
 800a60c:	d8f6      	bhi.n	800a5fc <_printf_i+0x28>
 800a60e:	a101      	add	r1, pc, #4	; (adr r1, 800a614 <_printf_i+0x40>)
 800a610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a614:	0800a66d 	.word	0x0800a66d
 800a618:	0800a681 	.word	0x0800a681
 800a61c:	0800a5fd 	.word	0x0800a5fd
 800a620:	0800a5fd 	.word	0x0800a5fd
 800a624:	0800a5fd 	.word	0x0800a5fd
 800a628:	0800a5fd 	.word	0x0800a5fd
 800a62c:	0800a681 	.word	0x0800a681
 800a630:	0800a5fd 	.word	0x0800a5fd
 800a634:	0800a5fd 	.word	0x0800a5fd
 800a638:	0800a5fd 	.word	0x0800a5fd
 800a63c:	0800a5fd 	.word	0x0800a5fd
 800a640:	0800a78d 	.word	0x0800a78d
 800a644:	0800a6b1 	.word	0x0800a6b1
 800a648:	0800a76f 	.word	0x0800a76f
 800a64c:	0800a5fd 	.word	0x0800a5fd
 800a650:	0800a5fd 	.word	0x0800a5fd
 800a654:	0800a7af 	.word	0x0800a7af
 800a658:	0800a5fd 	.word	0x0800a5fd
 800a65c:	0800a6b1 	.word	0x0800a6b1
 800a660:	0800a5fd 	.word	0x0800a5fd
 800a664:	0800a5fd 	.word	0x0800a5fd
 800a668:	0800a777 	.word	0x0800a777
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	602a      	str	r2, [r5, #0]
 800a674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a67c:	2301      	movs	r3, #1
 800a67e:	e0a3      	b.n	800a7c8 <_printf_i+0x1f4>
 800a680:	6820      	ldr	r0, [r4, #0]
 800a682:	6829      	ldr	r1, [r5, #0]
 800a684:	0606      	lsls	r6, r0, #24
 800a686:	f101 0304 	add.w	r3, r1, #4
 800a68a:	d50a      	bpl.n	800a6a2 <_printf_i+0xce>
 800a68c:	680e      	ldr	r6, [r1, #0]
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	2e00      	cmp	r6, #0
 800a692:	da03      	bge.n	800a69c <_printf_i+0xc8>
 800a694:	232d      	movs	r3, #45	; 0x2d
 800a696:	4276      	negs	r6, r6
 800a698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a69c:	485e      	ldr	r0, [pc, #376]	; (800a818 <_printf_i+0x244>)
 800a69e:	230a      	movs	r3, #10
 800a6a0:	e019      	b.n	800a6d6 <_printf_i+0x102>
 800a6a2:	680e      	ldr	r6, [r1, #0]
 800a6a4:	602b      	str	r3, [r5, #0]
 800a6a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6aa:	bf18      	it	ne
 800a6ac:	b236      	sxthne	r6, r6
 800a6ae:	e7ef      	b.n	800a690 <_printf_i+0xbc>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	6820      	ldr	r0, [r4, #0]
 800a6b4:	1d19      	adds	r1, r3, #4
 800a6b6:	6029      	str	r1, [r5, #0]
 800a6b8:	0601      	lsls	r1, r0, #24
 800a6ba:	d501      	bpl.n	800a6c0 <_printf_i+0xec>
 800a6bc:	681e      	ldr	r6, [r3, #0]
 800a6be:	e002      	b.n	800a6c6 <_printf_i+0xf2>
 800a6c0:	0646      	lsls	r6, r0, #25
 800a6c2:	d5fb      	bpl.n	800a6bc <_printf_i+0xe8>
 800a6c4:	881e      	ldrh	r6, [r3, #0]
 800a6c6:	4854      	ldr	r0, [pc, #336]	; (800a818 <_printf_i+0x244>)
 800a6c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a6ca:	bf0c      	ite	eq
 800a6cc:	2308      	moveq	r3, #8
 800a6ce:	230a      	movne	r3, #10
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6d6:	6865      	ldr	r5, [r4, #4]
 800a6d8:	60a5      	str	r5, [r4, #8]
 800a6da:	2d00      	cmp	r5, #0
 800a6dc:	bfa2      	ittt	ge
 800a6de:	6821      	ldrge	r1, [r4, #0]
 800a6e0:	f021 0104 	bicge.w	r1, r1, #4
 800a6e4:	6021      	strge	r1, [r4, #0]
 800a6e6:	b90e      	cbnz	r6, 800a6ec <_printf_i+0x118>
 800a6e8:	2d00      	cmp	r5, #0
 800a6ea:	d04d      	beq.n	800a788 <_printf_i+0x1b4>
 800a6ec:	4615      	mov	r5, r2
 800a6ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a6f6:	5dc7      	ldrb	r7, [r0, r7]
 800a6f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6fc:	4637      	mov	r7, r6
 800a6fe:	42bb      	cmp	r3, r7
 800a700:	460e      	mov	r6, r1
 800a702:	d9f4      	bls.n	800a6ee <_printf_i+0x11a>
 800a704:	2b08      	cmp	r3, #8
 800a706:	d10b      	bne.n	800a720 <_printf_i+0x14c>
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	07de      	lsls	r6, r3, #31
 800a70c:	d508      	bpl.n	800a720 <_printf_i+0x14c>
 800a70e:	6923      	ldr	r3, [r4, #16]
 800a710:	6861      	ldr	r1, [r4, #4]
 800a712:	4299      	cmp	r1, r3
 800a714:	bfde      	ittt	le
 800a716:	2330      	movle	r3, #48	; 0x30
 800a718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a71c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a720:	1b52      	subs	r2, r2, r5
 800a722:	6122      	str	r2, [r4, #16]
 800a724:	f8cd a000 	str.w	sl, [sp]
 800a728:	464b      	mov	r3, r9
 800a72a:	aa03      	add	r2, sp, #12
 800a72c:	4621      	mov	r1, r4
 800a72e:	4640      	mov	r0, r8
 800a730:	f7ff fee2 	bl	800a4f8 <_printf_common>
 800a734:	3001      	adds	r0, #1
 800a736:	d14c      	bne.n	800a7d2 <_printf_i+0x1fe>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	b004      	add	sp, #16
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	4835      	ldr	r0, [pc, #212]	; (800a818 <_printf_i+0x244>)
 800a744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a748:	6829      	ldr	r1, [r5, #0]
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a750:	6029      	str	r1, [r5, #0]
 800a752:	061d      	lsls	r5, r3, #24
 800a754:	d514      	bpl.n	800a780 <_printf_i+0x1ac>
 800a756:	07df      	lsls	r7, r3, #31
 800a758:	bf44      	itt	mi
 800a75a:	f043 0320 	orrmi.w	r3, r3, #32
 800a75e:	6023      	strmi	r3, [r4, #0]
 800a760:	b91e      	cbnz	r6, 800a76a <_printf_i+0x196>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	f023 0320 	bic.w	r3, r3, #32
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	2310      	movs	r3, #16
 800a76c:	e7b0      	b.n	800a6d0 <_printf_i+0xfc>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	f043 0320 	orr.w	r3, r3, #32
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	2378      	movs	r3, #120	; 0x78
 800a778:	4828      	ldr	r0, [pc, #160]	; (800a81c <_printf_i+0x248>)
 800a77a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a77e:	e7e3      	b.n	800a748 <_printf_i+0x174>
 800a780:	0659      	lsls	r1, r3, #25
 800a782:	bf48      	it	mi
 800a784:	b2b6      	uxthmi	r6, r6
 800a786:	e7e6      	b.n	800a756 <_printf_i+0x182>
 800a788:	4615      	mov	r5, r2
 800a78a:	e7bb      	b.n	800a704 <_printf_i+0x130>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	6826      	ldr	r6, [r4, #0]
 800a790:	6961      	ldr	r1, [r4, #20]
 800a792:	1d18      	adds	r0, r3, #4
 800a794:	6028      	str	r0, [r5, #0]
 800a796:	0635      	lsls	r5, r6, #24
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	d501      	bpl.n	800a7a0 <_printf_i+0x1cc>
 800a79c:	6019      	str	r1, [r3, #0]
 800a79e:	e002      	b.n	800a7a6 <_printf_i+0x1d2>
 800a7a0:	0670      	lsls	r0, r6, #25
 800a7a2:	d5fb      	bpl.n	800a79c <_printf_i+0x1c8>
 800a7a4:	8019      	strh	r1, [r3, #0]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	6123      	str	r3, [r4, #16]
 800a7aa:	4615      	mov	r5, r2
 800a7ac:	e7ba      	b.n	800a724 <_printf_i+0x150>
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	1d1a      	adds	r2, r3, #4
 800a7b2:	602a      	str	r2, [r5, #0]
 800a7b4:	681d      	ldr	r5, [r3, #0]
 800a7b6:	6862      	ldr	r2, [r4, #4]
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f7f5 fd10 	bl	80001e0 <memchr>
 800a7c0:	b108      	cbz	r0, 800a7c6 <_printf_i+0x1f2>
 800a7c2:	1b40      	subs	r0, r0, r5
 800a7c4:	6060      	str	r0, [r4, #4]
 800a7c6:	6863      	ldr	r3, [r4, #4]
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7d0:	e7a8      	b.n	800a724 <_printf_i+0x150>
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	4640      	mov	r0, r8
 800a7da:	47d0      	blx	sl
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d0ab      	beq.n	800a738 <_printf_i+0x164>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	079b      	lsls	r3, r3, #30
 800a7e4:	d413      	bmi.n	800a80e <_printf_i+0x23a>
 800a7e6:	68e0      	ldr	r0, [r4, #12]
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	4298      	cmp	r0, r3
 800a7ec:	bfb8      	it	lt
 800a7ee:	4618      	movlt	r0, r3
 800a7f0:	e7a4      	b.n	800a73c <_printf_i+0x168>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	4632      	mov	r2, r6
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	47d0      	blx	sl
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d09b      	beq.n	800a738 <_printf_i+0x164>
 800a800:	3501      	adds	r5, #1
 800a802:	68e3      	ldr	r3, [r4, #12]
 800a804:	9903      	ldr	r1, [sp, #12]
 800a806:	1a5b      	subs	r3, r3, r1
 800a808:	42ab      	cmp	r3, r5
 800a80a:	dcf2      	bgt.n	800a7f2 <_printf_i+0x21e>
 800a80c:	e7eb      	b.n	800a7e6 <_printf_i+0x212>
 800a80e:	2500      	movs	r5, #0
 800a810:	f104 0619 	add.w	r6, r4, #25
 800a814:	e7f5      	b.n	800a802 <_printf_i+0x22e>
 800a816:	bf00      	nop
 800a818:	0800db7a 	.word	0x0800db7a
 800a81c:	0800db8b 	.word	0x0800db8b

0800a820 <iprintf>:
 800a820:	b40f      	push	{r0, r1, r2, r3}
 800a822:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <iprintf+0x2c>)
 800a824:	b513      	push	{r0, r1, r4, lr}
 800a826:	681c      	ldr	r4, [r3, #0]
 800a828:	b124      	cbz	r4, 800a834 <iprintf+0x14>
 800a82a:	69a3      	ldr	r3, [r4, #24]
 800a82c:	b913      	cbnz	r3, 800a834 <iprintf+0x14>
 800a82e:	4620      	mov	r0, r4
 800a830:	f001 f8da 	bl	800b9e8 <__sinit>
 800a834:	ab05      	add	r3, sp, #20
 800a836:	9a04      	ldr	r2, [sp, #16]
 800a838:	68a1      	ldr	r1, [r4, #8]
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	4620      	mov	r0, r4
 800a83e:	f001 fe97 	bl	800c570 <_vfiprintf_r>
 800a842:	b002      	add	sp, #8
 800a844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a848:	b004      	add	sp, #16
 800a84a:	4770      	bx	lr
 800a84c:	20000010 	.word	0x20000010

0800a850 <_puts_r>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	460e      	mov	r6, r1
 800a854:	4605      	mov	r5, r0
 800a856:	b118      	cbz	r0, 800a860 <_puts_r+0x10>
 800a858:	6983      	ldr	r3, [r0, #24]
 800a85a:	b90b      	cbnz	r3, 800a860 <_puts_r+0x10>
 800a85c:	f001 f8c4 	bl	800b9e8 <__sinit>
 800a860:	69ab      	ldr	r3, [r5, #24]
 800a862:	68ac      	ldr	r4, [r5, #8]
 800a864:	b913      	cbnz	r3, 800a86c <_puts_r+0x1c>
 800a866:	4628      	mov	r0, r5
 800a868:	f001 f8be 	bl	800b9e8 <__sinit>
 800a86c:	4b2c      	ldr	r3, [pc, #176]	; (800a920 <_puts_r+0xd0>)
 800a86e:	429c      	cmp	r4, r3
 800a870:	d120      	bne.n	800a8b4 <_puts_r+0x64>
 800a872:	686c      	ldr	r4, [r5, #4]
 800a874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a876:	07db      	lsls	r3, r3, #31
 800a878:	d405      	bmi.n	800a886 <_puts_r+0x36>
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	0598      	lsls	r0, r3, #22
 800a87e:	d402      	bmi.n	800a886 <_puts_r+0x36>
 800a880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a882:	f001 f954 	bl	800bb2e <__retarget_lock_acquire_recursive>
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	0719      	lsls	r1, r3, #28
 800a88a:	d51d      	bpl.n	800a8c8 <_puts_r+0x78>
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	b1db      	cbz	r3, 800a8c8 <_puts_r+0x78>
 800a890:	3e01      	subs	r6, #1
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a898:	3b01      	subs	r3, #1
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	bb39      	cbnz	r1, 800a8ee <_puts_r+0x9e>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	da38      	bge.n	800a914 <_puts_r+0xc4>
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	210a      	movs	r1, #10
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f000 f848 	bl	800a93c <__swbuf_r>
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d011      	beq.n	800a8d4 <_puts_r+0x84>
 800a8b0:	250a      	movs	r5, #10
 800a8b2:	e011      	b.n	800a8d8 <_puts_r+0x88>
 800a8b4:	4b1b      	ldr	r3, [pc, #108]	; (800a924 <_puts_r+0xd4>)
 800a8b6:	429c      	cmp	r4, r3
 800a8b8:	d101      	bne.n	800a8be <_puts_r+0x6e>
 800a8ba:	68ac      	ldr	r4, [r5, #8]
 800a8bc:	e7da      	b.n	800a874 <_puts_r+0x24>
 800a8be:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <_puts_r+0xd8>)
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	bf08      	it	eq
 800a8c4:	68ec      	ldreq	r4, [r5, #12]
 800a8c6:	e7d5      	b.n	800a874 <_puts_r+0x24>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f888 	bl	800a9e0 <__swsetup_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d0dd      	beq.n	800a890 <_puts_r+0x40>
 800a8d4:	f04f 35ff 	mov.w	r5, #4294967295
 800a8d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8da:	07da      	lsls	r2, r3, #31
 800a8dc:	d405      	bmi.n	800a8ea <_puts_r+0x9a>
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	059b      	lsls	r3, r3, #22
 800a8e2:	d402      	bmi.n	800a8ea <_puts_r+0x9a>
 800a8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8e6:	f001 f923 	bl	800bb30 <__retarget_lock_release_recursive>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	da04      	bge.n	800a8fc <_puts_r+0xac>
 800a8f2:	69a2      	ldr	r2, [r4, #24]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	dc06      	bgt.n	800a906 <_puts_r+0xb6>
 800a8f8:	290a      	cmp	r1, #10
 800a8fa:	d004      	beq.n	800a906 <_puts_r+0xb6>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	6022      	str	r2, [r4, #0]
 800a902:	7019      	strb	r1, [r3, #0]
 800a904:	e7c5      	b.n	800a892 <_puts_r+0x42>
 800a906:	4622      	mov	r2, r4
 800a908:	4628      	mov	r0, r5
 800a90a:	f000 f817 	bl	800a93c <__swbuf_r>
 800a90e:	3001      	adds	r0, #1
 800a910:	d1bf      	bne.n	800a892 <_puts_r+0x42>
 800a912:	e7df      	b.n	800a8d4 <_puts_r+0x84>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	250a      	movs	r5, #10
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	6022      	str	r2, [r4, #0]
 800a91c:	701d      	strb	r5, [r3, #0]
 800a91e:	e7db      	b.n	800a8d8 <_puts_r+0x88>
 800a920:	0800dc4c 	.word	0x0800dc4c
 800a924:	0800dc6c 	.word	0x0800dc6c
 800a928:	0800dc2c 	.word	0x0800dc2c

0800a92c <puts>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <puts+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f7ff bf8d 	b.w	800a850 <_puts_r>
 800a936:	bf00      	nop
 800a938:	20000010 	.word	0x20000010

0800a93c <__swbuf_r>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	460e      	mov	r6, r1
 800a940:	4614      	mov	r4, r2
 800a942:	4605      	mov	r5, r0
 800a944:	b118      	cbz	r0, 800a94e <__swbuf_r+0x12>
 800a946:	6983      	ldr	r3, [r0, #24]
 800a948:	b90b      	cbnz	r3, 800a94e <__swbuf_r+0x12>
 800a94a:	f001 f84d 	bl	800b9e8 <__sinit>
 800a94e:	4b21      	ldr	r3, [pc, #132]	; (800a9d4 <__swbuf_r+0x98>)
 800a950:	429c      	cmp	r4, r3
 800a952:	d12b      	bne.n	800a9ac <__swbuf_r+0x70>
 800a954:	686c      	ldr	r4, [r5, #4]
 800a956:	69a3      	ldr	r3, [r4, #24]
 800a958:	60a3      	str	r3, [r4, #8]
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	071a      	lsls	r2, r3, #28
 800a95e:	d52f      	bpl.n	800a9c0 <__swbuf_r+0x84>
 800a960:	6923      	ldr	r3, [r4, #16]
 800a962:	b36b      	cbz	r3, 800a9c0 <__swbuf_r+0x84>
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	6820      	ldr	r0, [r4, #0]
 800a968:	1ac0      	subs	r0, r0, r3
 800a96a:	6963      	ldr	r3, [r4, #20]
 800a96c:	b2f6      	uxtb	r6, r6
 800a96e:	4283      	cmp	r3, r0
 800a970:	4637      	mov	r7, r6
 800a972:	dc04      	bgt.n	800a97e <__swbuf_r+0x42>
 800a974:	4621      	mov	r1, r4
 800a976:	4628      	mov	r0, r5
 800a978:	f000 ffa2 	bl	800b8c0 <_fflush_r>
 800a97c:	bb30      	cbnz	r0, 800a9cc <__swbuf_r+0x90>
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	3b01      	subs	r3, #1
 800a982:	60a3      	str	r3, [r4, #8]
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	6022      	str	r2, [r4, #0]
 800a98a:	701e      	strb	r6, [r3, #0]
 800a98c:	6963      	ldr	r3, [r4, #20]
 800a98e:	3001      	adds	r0, #1
 800a990:	4283      	cmp	r3, r0
 800a992:	d004      	beq.n	800a99e <__swbuf_r+0x62>
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	07db      	lsls	r3, r3, #31
 800a998:	d506      	bpl.n	800a9a8 <__swbuf_r+0x6c>
 800a99a:	2e0a      	cmp	r6, #10
 800a99c:	d104      	bne.n	800a9a8 <__swbuf_r+0x6c>
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f000 ff8d 	bl	800b8c0 <_fflush_r>
 800a9a6:	b988      	cbnz	r0, 800a9cc <__swbuf_r+0x90>
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <__swbuf_r+0x9c>)
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	d101      	bne.n	800a9b6 <__swbuf_r+0x7a>
 800a9b2:	68ac      	ldr	r4, [r5, #8]
 800a9b4:	e7cf      	b.n	800a956 <__swbuf_r+0x1a>
 800a9b6:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <__swbuf_r+0xa0>)
 800a9b8:	429c      	cmp	r4, r3
 800a9ba:	bf08      	it	eq
 800a9bc:	68ec      	ldreq	r4, [r5, #12]
 800a9be:	e7ca      	b.n	800a956 <__swbuf_r+0x1a>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f000 f80c 	bl	800a9e0 <__swsetup_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d0cb      	beq.n	800a964 <__swbuf_r+0x28>
 800a9cc:	f04f 37ff 	mov.w	r7, #4294967295
 800a9d0:	e7ea      	b.n	800a9a8 <__swbuf_r+0x6c>
 800a9d2:	bf00      	nop
 800a9d4:	0800dc4c 	.word	0x0800dc4c
 800a9d8:	0800dc6c 	.word	0x0800dc6c
 800a9dc:	0800dc2c 	.word	0x0800dc2c

0800a9e0 <__swsetup_r>:
 800a9e0:	4b32      	ldr	r3, [pc, #200]	; (800aaac <__swsetup_r+0xcc>)
 800a9e2:	b570      	push	{r4, r5, r6, lr}
 800a9e4:	681d      	ldr	r5, [r3, #0]
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	b125      	cbz	r5, 800a9f6 <__swsetup_r+0x16>
 800a9ec:	69ab      	ldr	r3, [r5, #24]
 800a9ee:	b913      	cbnz	r3, 800a9f6 <__swsetup_r+0x16>
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 fff9 	bl	800b9e8 <__sinit>
 800a9f6:	4b2e      	ldr	r3, [pc, #184]	; (800aab0 <__swsetup_r+0xd0>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	d10f      	bne.n	800aa1c <__swsetup_r+0x3c>
 800a9fc:	686c      	ldr	r4, [r5, #4]
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa04:	0719      	lsls	r1, r3, #28
 800aa06:	d42c      	bmi.n	800aa62 <__swsetup_r+0x82>
 800aa08:	06dd      	lsls	r5, r3, #27
 800aa0a:	d411      	bmi.n	800aa30 <__swsetup_r+0x50>
 800aa0c:	2309      	movs	r3, #9
 800aa0e:	6033      	str	r3, [r6, #0]
 800aa10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1a:	e03e      	b.n	800aa9a <__swsetup_r+0xba>
 800aa1c:	4b25      	ldr	r3, [pc, #148]	; (800aab4 <__swsetup_r+0xd4>)
 800aa1e:	429c      	cmp	r4, r3
 800aa20:	d101      	bne.n	800aa26 <__swsetup_r+0x46>
 800aa22:	68ac      	ldr	r4, [r5, #8]
 800aa24:	e7eb      	b.n	800a9fe <__swsetup_r+0x1e>
 800aa26:	4b24      	ldr	r3, [pc, #144]	; (800aab8 <__swsetup_r+0xd8>)
 800aa28:	429c      	cmp	r4, r3
 800aa2a:	bf08      	it	eq
 800aa2c:	68ec      	ldreq	r4, [r5, #12]
 800aa2e:	e7e6      	b.n	800a9fe <__swsetup_r+0x1e>
 800aa30:	0758      	lsls	r0, r3, #29
 800aa32:	d512      	bpl.n	800aa5a <__swsetup_r+0x7a>
 800aa34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa36:	b141      	cbz	r1, 800aa4a <__swsetup_r+0x6a>
 800aa38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	d002      	beq.n	800aa46 <__swsetup_r+0x66>
 800aa40:	4630      	mov	r0, r6
 800aa42:	f001 fc8b 	bl	800c35c <_free_r>
 800aa46:	2300      	movs	r3, #0
 800aa48:	6363      	str	r3, [r4, #52]	; 0x34
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa50:	81a3      	strh	r3, [r4, #12]
 800aa52:	2300      	movs	r3, #0
 800aa54:	6063      	str	r3, [r4, #4]
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	f043 0308 	orr.w	r3, r3, #8
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	b94b      	cbnz	r3, 800aa7a <__swsetup_r+0x9a>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa70:	d003      	beq.n	800aa7a <__swsetup_r+0x9a>
 800aa72:	4621      	mov	r1, r4
 800aa74:	4630      	mov	r0, r6
 800aa76:	f001 f881 	bl	800bb7c <__smakebuf_r>
 800aa7a:	89a0      	ldrh	r0, [r4, #12]
 800aa7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa80:	f010 0301 	ands.w	r3, r0, #1
 800aa84:	d00a      	beq.n	800aa9c <__swsetup_r+0xbc>
 800aa86:	2300      	movs	r3, #0
 800aa88:	60a3      	str	r3, [r4, #8]
 800aa8a:	6963      	ldr	r3, [r4, #20]
 800aa8c:	425b      	negs	r3, r3
 800aa8e:	61a3      	str	r3, [r4, #24]
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	b943      	cbnz	r3, 800aaa6 <__swsetup_r+0xc6>
 800aa94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa98:	d1ba      	bne.n	800aa10 <__swsetup_r+0x30>
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	0781      	lsls	r1, r0, #30
 800aa9e:	bf58      	it	pl
 800aaa0:	6963      	ldrpl	r3, [r4, #20]
 800aaa2:	60a3      	str	r3, [r4, #8]
 800aaa4:	e7f4      	b.n	800aa90 <__swsetup_r+0xb0>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	e7f7      	b.n	800aa9a <__swsetup_r+0xba>
 800aaaa:	bf00      	nop
 800aaac:	20000010 	.word	0x20000010
 800aab0:	0800dc4c 	.word	0x0800dc4c
 800aab4:	0800dc6c 	.word	0x0800dc6c
 800aab8:	0800dc2c 	.word	0x0800dc2c

0800aabc <quorem>:
 800aabc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	6903      	ldr	r3, [r0, #16]
 800aac2:	690c      	ldr	r4, [r1, #16]
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	4607      	mov	r7, r0
 800aac8:	f2c0 8081 	blt.w	800abce <quorem+0x112>
 800aacc:	3c01      	subs	r4, #1
 800aace:	f101 0814 	add.w	r8, r1, #20
 800aad2:	f100 0514 	add.w	r5, r0, #20
 800aad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aae4:	3301      	adds	r3, #1
 800aae6:	429a      	cmp	r2, r3
 800aae8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aaec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aaf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800aaf4:	d331      	bcc.n	800ab5a <quorem+0x9e>
 800aaf6:	f04f 0e00 	mov.w	lr, #0
 800aafa:	4640      	mov	r0, r8
 800aafc:	46ac      	mov	ip, r5
 800aafe:	46f2      	mov	sl, lr
 800ab00:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab04:	b293      	uxth	r3, r2
 800ab06:	fb06 e303 	mla	r3, r6, r3, lr
 800ab0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	ebaa 0303 	sub.w	r3, sl, r3
 800ab14:	f8dc a000 	ldr.w	sl, [ip]
 800ab18:	0c12      	lsrs	r2, r2, #16
 800ab1a:	fa13 f38a 	uxtah	r3, r3, sl
 800ab1e:	fb06 e202 	mla	r2, r6, r2, lr
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	9b00      	ldr	r3, [sp, #0]
 800ab26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab2a:	b292      	uxth	r2, r2
 800ab2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab34:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab38:	4581      	cmp	r9, r0
 800ab3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab3e:	f84c 3b04 	str.w	r3, [ip], #4
 800ab42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab46:	d2db      	bcs.n	800ab00 <quorem+0x44>
 800ab48:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab4c:	b92b      	cbnz	r3, 800ab5a <quorem+0x9e>
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	3b04      	subs	r3, #4
 800ab52:	429d      	cmp	r5, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	d32e      	bcc.n	800abb6 <quorem+0xfa>
 800ab58:	613c      	str	r4, [r7, #16]
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	f001 fae6 	bl	800c12c <__mcmp>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	db24      	blt.n	800abae <quorem+0xf2>
 800ab64:	3601      	adds	r6, #1
 800ab66:	4628      	mov	r0, r5
 800ab68:	f04f 0c00 	mov.w	ip, #0
 800ab6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab70:	f8d0 e000 	ldr.w	lr, [r0]
 800ab74:	b293      	uxth	r3, r2
 800ab76:	ebac 0303 	sub.w	r3, ip, r3
 800ab7a:	0c12      	lsrs	r2, r2, #16
 800ab7c:	fa13 f38e 	uxtah	r3, r3, lr
 800ab80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab8e:	45c1      	cmp	r9, r8
 800ab90:	f840 3b04 	str.w	r3, [r0], #4
 800ab94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab98:	d2e8      	bcs.n	800ab6c <quorem+0xb0>
 800ab9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aba2:	b922      	cbnz	r2, 800abae <quorem+0xf2>
 800aba4:	3b04      	subs	r3, #4
 800aba6:	429d      	cmp	r5, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	d30a      	bcc.n	800abc2 <quorem+0x106>
 800abac:	613c      	str	r4, [r7, #16]
 800abae:	4630      	mov	r0, r6
 800abb0:	b003      	add	sp, #12
 800abb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb6:	6812      	ldr	r2, [r2, #0]
 800abb8:	3b04      	subs	r3, #4
 800abba:	2a00      	cmp	r2, #0
 800abbc:	d1cc      	bne.n	800ab58 <quorem+0x9c>
 800abbe:	3c01      	subs	r4, #1
 800abc0:	e7c7      	b.n	800ab52 <quorem+0x96>
 800abc2:	6812      	ldr	r2, [r2, #0]
 800abc4:	3b04      	subs	r3, #4
 800abc6:	2a00      	cmp	r2, #0
 800abc8:	d1f0      	bne.n	800abac <quorem+0xf0>
 800abca:	3c01      	subs	r4, #1
 800abcc:	e7eb      	b.n	800aba6 <quorem+0xea>
 800abce:	2000      	movs	r0, #0
 800abd0:	e7ee      	b.n	800abb0 <quorem+0xf4>
 800abd2:	0000      	movs	r0, r0
 800abd4:	0000      	movs	r0, r0
	...

0800abd8 <_dtoa_r>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	ed2d 8b04 	vpush	{d8-d9}
 800abe0:	ec57 6b10 	vmov	r6, r7, d0
 800abe4:	b093      	sub	sp, #76	; 0x4c
 800abe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800abe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800abec:	9106      	str	r1, [sp, #24]
 800abee:	ee10 aa10 	vmov	sl, s0
 800abf2:	4604      	mov	r4, r0
 800abf4:	9209      	str	r2, [sp, #36]	; 0x24
 800abf6:	930c      	str	r3, [sp, #48]	; 0x30
 800abf8:	46bb      	mov	fp, r7
 800abfa:	b975      	cbnz	r5, 800ac1a <_dtoa_r+0x42>
 800abfc:	2010      	movs	r0, #16
 800abfe:	f000 fffd 	bl	800bbfc <malloc>
 800ac02:	4602      	mov	r2, r0
 800ac04:	6260      	str	r0, [r4, #36]	; 0x24
 800ac06:	b920      	cbnz	r0, 800ac12 <_dtoa_r+0x3a>
 800ac08:	4ba7      	ldr	r3, [pc, #668]	; (800aea8 <_dtoa_r+0x2d0>)
 800ac0a:	21ea      	movs	r1, #234	; 0xea
 800ac0c:	48a7      	ldr	r0, [pc, #668]	; (800aeac <_dtoa_r+0x2d4>)
 800ac0e:	f001 fe45 	bl	800c89c <__assert_func>
 800ac12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac16:	6005      	str	r5, [r0, #0]
 800ac18:	60c5      	str	r5, [r0, #12]
 800ac1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac1c:	6819      	ldr	r1, [r3, #0]
 800ac1e:	b151      	cbz	r1, 800ac36 <_dtoa_r+0x5e>
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	604a      	str	r2, [r1, #4]
 800ac24:	2301      	movs	r3, #1
 800ac26:	4093      	lsls	r3, r2
 800ac28:	608b      	str	r3, [r1, #8]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f001 f83c 	bl	800bca8 <_Bfree>
 800ac30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	1e3b      	subs	r3, r7, #0
 800ac38:	bfaa      	itet	ge
 800ac3a:	2300      	movge	r3, #0
 800ac3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ac40:	f8c8 3000 	strge.w	r3, [r8]
 800ac44:	4b9a      	ldr	r3, [pc, #616]	; (800aeb0 <_dtoa_r+0x2d8>)
 800ac46:	bfbc      	itt	lt
 800ac48:	2201      	movlt	r2, #1
 800ac4a:	f8c8 2000 	strlt.w	r2, [r8]
 800ac4e:	ea33 030b 	bics.w	r3, r3, fp
 800ac52:	d11b      	bne.n	800ac8c <_dtoa_r+0xb4>
 800ac54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac56:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac60:	4333      	orrs	r3, r6
 800ac62:	f000 8592 	beq.w	800b78a <_dtoa_r+0xbb2>
 800ac66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac68:	b963      	cbnz	r3, 800ac84 <_dtoa_r+0xac>
 800ac6a:	4b92      	ldr	r3, [pc, #584]	; (800aeb4 <_dtoa_r+0x2dc>)
 800ac6c:	e022      	b.n	800acb4 <_dtoa_r+0xdc>
 800ac6e:	4b92      	ldr	r3, [pc, #584]	; (800aeb8 <_dtoa_r+0x2e0>)
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	3308      	adds	r3, #8
 800ac74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	9801      	ldr	r0, [sp, #4]
 800ac7a:	b013      	add	sp, #76	; 0x4c
 800ac7c:	ecbd 8b04 	vpop	{d8-d9}
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	4b8b      	ldr	r3, [pc, #556]	; (800aeb4 <_dtoa_r+0x2dc>)
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	3303      	adds	r3, #3
 800ac8a:	e7f3      	b.n	800ac74 <_dtoa_r+0x9c>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4650      	mov	r0, sl
 800ac92:	4659      	mov	r1, fp
 800ac94:	f7f5 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac98:	ec4b ab19 	vmov	d9, sl, fp
 800ac9c:	4680      	mov	r8, r0
 800ac9e:	b158      	cbz	r0, 800acb8 <_dtoa_r+0xe0>
 800aca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aca2:	2301      	movs	r3, #1
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 856b 	beq.w	800b784 <_dtoa_r+0xbac>
 800acae:	4883      	ldr	r0, [pc, #524]	; (800aebc <_dtoa_r+0x2e4>)
 800acb0:	6018      	str	r0, [r3, #0]
 800acb2:	1e43      	subs	r3, r0, #1
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	e7df      	b.n	800ac78 <_dtoa_r+0xa0>
 800acb8:	ec4b ab10 	vmov	d0, sl, fp
 800acbc:	aa10      	add	r2, sp, #64	; 0x40
 800acbe:	a911      	add	r1, sp, #68	; 0x44
 800acc0:	4620      	mov	r0, r4
 800acc2:	f001 fad9 	bl	800c278 <__d2b>
 800acc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800acca:	ee08 0a10 	vmov	s16, r0
 800acce:	2d00      	cmp	r5, #0
 800acd0:	f000 8084 	beq.w	800addc <_dtoa_r+0x204>
 800acd4:	ee19 3a90 	vmov	r3, s19
 800acd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ace0:	4656      	mov	r6, sl
 800ace2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ace6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800acea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800acee:	4b74      	ldr	r3, [pc, #464]	; (800aec0 <_dtoa_r+0x2e8>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fac7 	bl	8000288 <__aeabi_dsub>
 800acfa:	a365      	add	r3, pc, #404	; (adr r3, 800ae90 <_dtoa_r+0x2b8>)
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f7f5 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ad04:	a364      	add	r3, pc, #400	; (adr r3, 800ae98 <_dtoa_r+0x2c0>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fabf 	bl	800028c <__adddf3>
 800ad0e:	4606      	mov	r6, r0
 800ad10:	4628      	mov	r0, r5
 800ad12:	460f      	mov	r7, r1
 800ad14:	f7f5 fc06 	bl	8000524 <__aeabi_i2d>
 800ad18:	a361      	add	r3, pc, #388	; (adr r3, 800aea0 <_dtoa_r+0x2c8>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7f5 fc6b 	bl	80005f8 <__aeabi_dmul>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 faaf 	bl	800028c <__adddf3>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	f7f5 ff11 	bl	8000b58 <__aeabi_d2iz>
 800ad36:	2200      	movs	r2, #0
 800ad38:	9000      	str	r0, [sp, #0]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	4639      	mov	r1, r7
 800ad40:	f7f5 fecc 	bl	8000adc <__aeabi_dcmplt>
 800ad44:	b150      	cbz	r0, 800ad5c <_dtoa_r+0x184>
 800ad46:	9800      	ldr	r0, [sp, #0]
 800ad48:	f7f5 fbec 	bl	8000524 <__aeabi_i2d>
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	463b      	mov	r3, r7
 800ad50:	f7f5 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad54:	b910      	cbnz	r0, 800ad5c <_dtoa_r+0x184>
 800ad56:	9b00      	ldr	r3, [sp, #0]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	9b00      	ldr	r3, [sp, #0]
 800ad5e:	2b16      	cmp	r3, #22
 800ad60:	d85a      	bhi.n	800ae18 <_dtoa_r+0x240>
 800ad62:	9a00      	ldr	r2, [sp, #0]
 800ad64:	4b57      	ldr	r3, [pc, #348]	; (800aec4 <_dtoa_r+0x2ec>)
 800ad66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	ec51 0b19 	vmov	r0, r1, d9
 800ad72:	f7f5 feb3 	bl	8000adc <__aeabi_dcmplt>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d050      	beq.n	800ae1c <_dtoa_r+0x244>
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	2300      	movs	r3, #0
 800ad82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad86:	1b5d      	subs	r5, r3, r5
 800ad88:	1e6b      	subs	r3, r5, #1
 800ad8a:	9305      	str	r3, [sp, #20]
 800ad8c:	bf45      	ittet	mi
 800ad8e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ad92:	9304      	strmi	r3, [sp, #16]
 800ad94:	2300      	movpl	r3, #0
 800ad96:	2300      	movmi	r3, #0
 800ad98:	bf4c      	ite	mi
 800ad9a:	9305      	strmi	r3, [sp, #20]
 800ad9c:	9304      	strpl	r3, [sp, #16]
 800ad9e:	9b00      	ldr	r3, [sp, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	db3d      	blt.n	800ae20 <_dtoa_r+0x248>
 800ada4:	9b05      	ldr	r3, [sp, #20]
 800ada6:	9a00      	ldr	r2, [sp, #0]
 800ada8:	920a      	str	r2, [sp, #40]	; 0x28
 800adaa:	4413      	add	r3, r2
 800adac:	9305      	str	r3, [sp, #20]
 800adae:	2300      	movs	r3, #0
 800adb0:	9307      	str	r3, [sp, #28]
 800adb2:	9b06      	ldr	r3, [sp, #24]
 800adb4:	2b09      	cmp	r3, #9
 800adb6:	f200 8089 	bhi.w	800aecc <_dtoa_r+0x2f4>
 800adba:	2b05      	cmp	r3, #5
 800adbc:	bfc4      	itt	gt
 800adbe:	3b04      	subgt	r3, #4
 800adc0:	9306      	strgt	r3, [sp, #24]
 800adc2:	9b06      	ldr	r3, [sp, #24]
 800adc4:	f1a3 0302 	sub.w	r3, r3, #2
 800adc8:	bfcc      	ite	gt
 800adca:	2500      	movgt	r5, #0
 800adcc:	2501      	movle	r5, #1
 800adce:	2b03      	cmp	r3, #3
 800add0:	f200 8087 	bhi.w	800aee2 <_dtoa_r+0x30a>
 800add4:	e8df f003 	tbb	[pc, r3]
 800add8:	59383a2d 	.word	0x59383a2d
 800addc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ade0:	441d      	add	r5, r3
 800ade2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	bfc1      	itttt	gt
 800adea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800adee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800adf2:	fa0b f303 	lslgt.w	r3, fp, r3
 800adf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800adfa:	bfda      	itte	le
 800adfc:	f1c3 0320 	rsble	r3, r3, #32
 800ae00:	fa06 f003 	lslle.w	r0, r6, r3
 800ae04:	4318      	orrgt	r0, r3
 800ae06:	f7f5 fb7d 	bl	8000504 <__aeabi_ui2d>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae12:	3d01      	subs	r5, #1
 800ae14:	930e      	str	r3, [sp, #56]	; 0x38
 800ae16:	e76a      	b.n	800acee <_dtoa_r+0x116>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e7b2      	b.n	800ad82 <_dtoa_r+0x1aa>
 800ae1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae1e:	e7b1      	b.n	800ad84 <_dtoa_r+0x1ac>
 800ae20:	9b04      	ldr	r3, [sp, #16]
 800ae22:	9a00      	ldr	r2, [sp, #0]
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	4253      	negs	r3, r2
 800ae2a:	9307      	str	r3, [sp, #28]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae30:	e7bf      	b.n	800adb2 <_dtoa_r+0x1da>
 800ae32:	2300      	movs	r3, #0
 800ae34:	9308      	str	r3, [sp, #32]
 800ae36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dc55      	bgt.n	800aee8 <_dtoa_r+0x310>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae42:	461a      	mov	r2, r3
 800ae44:	9209      	str	r2, [sp, #36]	; 0x24
 800ae46:	e00c      	b.n	800ae62 <_dtoa_r+0x28a>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e7f3      	b.n	800ae34 <_dtoa_r+0x25c>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae50:	9308      	str	r3, [sp, #32]
 800ae52:	9b00      	ldr	r3, [sp, #0]
 800ae54:	4413      	add	r3, r2
 800ae56:	9302      	str	r3, [sp, #8]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	bfb8      	it	lt
 800ae60:	2301      	movlt	r3, #1
 800ae62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae64:	2200      	movs	r2, #0
 800ae66:	6042      	str	r2, [r0, #4]
 800ae68:	2204      	movs	r2, #4
 800ae6a:	f102 0614 	add.w	r6, r2, #20
 800ae6e:	429e      	cmp	r6, r3
 800ae70:	6841      	ldr	r1, [r0, #4]
 800ae72:	d93d      	bls.n	800aef0 <_dtoa_r+0x318>
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 fed7 	bl	800bc28 <_Balloc>
 800ae7a:	9001      	str	r0, [sp, #4]
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d13b      	bne.n	800aef8 <_dtoa_r+0x320>
 800ae80:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <_dtoa_r+0x2f0>)
 800ae82:	4602      	mov	r2, r0
 800ae84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae88:	e6c0      	b.n	800ac0c <_dtoa_r+0x34>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e7df      	b.n	800ae4e <_dtoa_r+0x276>
 800ae8e:	bf00      	nop
 800ae90:	636f4361 	.word	0x636f4361
 800ae94:	3fd287a7 	.word	0x3fd287a7
 800ae98:	8b60c8b3 	.word	0x8b60c8b3
 800ae9c:	3fc68a28 	.word	0x3fc68a28
 800aea0:	509f79fb 	.word	0x509f79fb
 800aea4:	3fd34413 	.word	0x3fd34413
 800aea8:	0800dba9 	.word	0x0800dba9
 800aeac:	0800dbc0 	.word	0x0800dbc0
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	0800dba5 	.word	0x0800dba5
 800aeb8:	0800db9c 	.word	0x0800db9c
 800aebc:	0800db79 	.word	0x0800db79
 800aec0:	3ff80000 	.word	0x3ff80000
 800aec4:	0800dd10 	.word	0x0800dd10
 800aec8:	0800dc1b 	.word	0x0800dc1b
 800aecc:	2501      	movs	r5, #1
 800aece:	2300      	movs	r3, #0
 800aed0:	9306      	str	r3, [sp, #24]
 800aed2:	9508      	str	r5, [sp, #32]
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
 800aed8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aedc:	2200      	movs	r2, #0
 800aede:	2312      	movs	r3, #18
 800aee0:	e7b0      	b.n	800ae44 <_dtoa_r+0x26c>
 800aee2:	2301      	movs	r3, #1
 800aee4:	9308      	str	r3, [sp, #32]
 800aee6:	e7f5      	b.n	800aed4 <_dtoa_r+0x2fc>
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aeee:	e7b8      	b.n	800ae62 <_dtoa_r+0x28a>
 800aef0:	3101      	adds	r1, #1
 800aef2:	6041      	str	r1, [r0, #4]
 800aef4:	0052      	lsls	r2, r2, #1
 800aef6:	e7b8      	b.n	800ae6a <_dtoa_r+0x292>
 800aef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefa:	9a01      	ldr	r2, [sp, #4]
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	2b0e      	cmp	r3, #14
 800af02:	f200 809d 	bhi.w	800b040 <_dtoa_r+0x468>
 800af06:	2d00      	cmp	r5, #0
 800af08:	f000 809a 	beq.w	800b040 <_dtoa_r+0x468>
 800af0c:	9b00      	ldr	r3, [sp, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dd32      	ble.n	800af78 <_dtoa_r+0x3a0>
 800af12:	4ab7      	ldr	r2, [pc, #732]	; (800b1f0 <_dtoa_r+0x618>)
 800af14:	f003 030f 	and.w	r3, r3, #15
 800af18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af20:	9b00      	ldr	r3, [sp, #0]
 800af22:	05d8      	lsls	r0, r3, #23
 800af24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af28:	d516      	bpl.n	800af58 <_dtoa_r+0x380>
 800af2a:	4bb2      	ldr	r3, [pc, #712]	; (800b1f4 <_dtoa_r+0x61c>)
 800af2c:	ec51 0b19 	vmov	r0, r1, d9
 800af30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af34:	f7f5 fc8a 	bl	800084c <__aeabi_ddiv>
 800af38:	f007 070f 	and.w	r7, r7, #15
 800af3c:	4682      	mov	sl, r0
 800af3e:	468b      	mov	fp, r1
 800af40:	2503      	movs	r5, #3
 800af42:	4eac      	ldr	r6, [pc, #688]	; (800b1f4 <_dtoa_r+0x61c>)
 800af44:	b957      	cbnz	r7, 800af5c <_dtoa_r+0x384>
 800af46:	4642      	mov	r2, r8
 800af48:	464b      	mov	r3, r9
 800af4a:	4650      	mov	r0, sl
 800af4c:	4659      	mov	r1, fp
 800af4e:	f7f5 fc7d 	bl	800084c <__aeabi_ddiv>
 800af52:	4682      	mov	sl, r0
 800af54:	468b      	mov	fp, r1
 800af56:	e028      	b.n	800afaa <_dtoa_r+0x3d2>
 800af58:	2502      	movs	r5, #2
 800af5a:	e7f2      	b.n	800af42 <_dtoa_r+0x36a>
 800af5c:	07f9      	lsls	r1, r7, #31
 800af5e:	d508      	bpl.n	800af72 <_dtoa_r+0x39a>
 800af60:	4640      	mov	r0, r8
 800af62:	4649      	mov	r1, r9
 800af64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af68:	f7f5 fb46 	bl	80005f8 <__aeabi_dmul>
 800af6c:	3501      	adds	r5, #1
 800af6e:	4680      	mov	r8, r0
 800af70:	4689      	mov	r9, r1
 800af72:	107f      	asrs	r7, r7, #1
 800af74:	3608      	adds	r6, #8
 800af76:	e7e5      	b.n	800af44 <_dtoa_r+0x36c>
 800af78:	f000 809b 	beq.w	800b0b2 <_dtoa_r+0x4da>
 800af7c:	9b00      	ldr	r3, [sp, #0]
 800af7e:	4f9d      	ldr	r7, [pc, #628]	; (800b1f4 <_dtoa_r+0x61c>)
 800af80:	425e      	negs	r6, r3
 800af82:	4b9b      	ldr	r3, [pc, #620]	; (800b1f0 <_dtoa_r+0x618>)
 800af84:	f006 020f 	and.w	r2, r6, #15
 800af88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	ec51 0b19 	vmov	r0, r1, d9
 800af94:	f7f5 fb30 	bl	80005f8 <__aeabi_dmul>
 800af98:	1136      	asrs	r6, r6, #4
 800af9a:	4682      	mov	sl, r0
 800af9c:	468b      	mov	fp, r1
 800af9e:	2300      	movs	r3, #0
 800afa0:	2502      	movs	r5, #2
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d17a      	bne.n	800b09c <_dtoa_r+0x4c4>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1d3      	bne.n	800af52 <_dtoa_r+0x37a>
 800afaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8082 	beq.w	800b0b6 <_dtoa_r+0x4de>
 800afb2:	4b91      	ldr	r3, [pc, #580]	; (800b1f8 <_dtoa_r+0x620>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	4650      	mov	r0, sl
 800afb8:	4659      	mov	r1, fp
 800afba:	f7f5 fd8f 	bl	8000adc <__aeabi_dcmplt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d079      	beq.n	800b0b6 <_dtoa_r+0x4de>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d076      	beq.n	800b0b6 <_dtoa_r+0x4de>
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dd36      	ble.n	800b03c <_dtoa_r+0x464>
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	4650      	mov	r0, sl
 800afd2:	4659      	mov	r1, fp
 800afd4:	1e5f      	subs	r7, r3, #1
 800afd6:	2200      	movs	r2, #0
 800afd8:	4b88      	ldr	r3, [pc, #544]	; (800b1fc <_dtoa_r+0x624>)
 800afda:	f7f5 fb0d 	bl	80005f8 <__aeabi_dmul>
 800afde:	9e02      	ldr	r6, [sp, #8]
 800afe0:	4682      	mov	sl, r0
 800afe2:	468b      	mov	fp, r1
 800afe4:	3501      	adds	r5, #1
 800afe6:	4628      	mov	r0, r5
 800afe8:	f7f5 fa9c 	bl	8000524 <__aeabi_i2d>
 800afec:	4652      	mov	r2, sl
 800afee:	465b      	mov	r3, fp
 800aff0:	f7f5 fb02 	bl	80005f8 <__aeabi_dmul>
 800aff4:	4b82      	ldr	r3, [pc, #520]	; (800b200 <_dtoa_r+0x628>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	f7f5 f948 	bl	800028c <__adddf3>
 800affc:	46d0      	mov	r8, sl
 800affe:	46d9      	mov	r9, fp
 800b000:	4682      	mov	sl, r0
 800b002:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b006:	2e00      	cmp	r6, #0
 800b008:	d158      	bne.n	800b0bc <_dtoa_r+0x4e4>
 800b00a:	4b7e      	ldr	r3, [pc, #504]	; (800b204 <_dtoa_r+0x62c>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	4640      	mov	r0, r8
 800b010:	4649      	mov	r1, r9
 800b012:	f7f5 f939 	bl	8000288 <__aeabi_dsub>
 800b016:	4652      	mov	r2, sl
 800b018:	465b      	mov	r3, fp
 800b01a:	4680      	mov	r8, r0
 800b01c:	4689      	mov	r9, r1
 800b01e:	f7f5 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 800b022:	2800      	cmp	r0, #0
 800b024:	f040 8295 	bne.w	800b552 <_dtoa_r+0x97a>
 800b028:	4652      	mov	r2, sl
 800b02a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b02e:	4640      	mov	r0, r8
 800b030:	4649      	mov	r1, r9
 800b032:	f7f5 fd53 	bl	8000adc <__aeabi_dcmplt>
 800b036:	2800      	cmp	r0, #0
 800b038:	f040 8289 	bne.w	800b54e <_dtoa_r+0x976>
 800b03c:	ec5b ab19 	vmov	sl, fp, d9
 800b040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b042:	2b00      	cmp	r3, #0
 800b044:	f2c0 8148 	blt.w	800b2d8 <_dtoa_r+0x700>
 800b048:	9a00      	ldr	r2, [sp, #0]
 800b04a:	2a0e      	cmp	r2, #14
 800b04c:	f300 8144 	bgt.w	800b2d8 <_dtoa_r+0x700>
 800b050:	4b67      	ldr	r3, [pc, #412]	; (800b1f0 <_dtoa_r+0x618>)
 800b052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b056:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f280 80d5 	bge.w	800b20c <_dtoa_r+0x634>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f300 80d1 	bgt.w	800b20c <_dtoa_r+0x634>
 800b06a:	f040 826f 	bne.w	800b54c <_dtoa_r+0x974>
 800b06e:	4b65      	ldr	r3, [pc, #404]	; (800b204 <_dtoa_r+0x62c>)
 800b070:	2200      	movs	r2, #0
 800b072:	4640      	mov	r0, r8
 800b074:	4649      	mov	r1, r9
 800b076:	f7f5 fabf 	bl	80005f8 <__aeabi_dmul>
 800b07a:	4652      	mov	r2, sl
 800b07c:	465b      	mov	r3, fp
 800b07e:	f7f5 fd41 	bl	8000b04 <__aeabi_dcmpge>
 800b082:	9e03      	ldr	r6, [sp, #12]
 800b084:	4637      	mov	r7, r6
 800b086:	2800      	cmp	r0, #0
 800b088:	f040 8245 	bne.w	800b516 <_dtoa_r+0x93e>
 800b08c:	9d01      	ldr	r5, [sp, #4]
 800b08e:	2331      	movs	r3, #49	; 0x31
 800b090:	f805 3b01 	strb.w	r3, [r5], #1
 800b094:	9b00      	ldr	r3, [sp, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	e240      	b.n	800b51e <_dtoa_r+0x946>
 800b09c:	07f2      	lsls	r2, r6, #31
 800b09e:	d505      	bpl.n	800b0ac <_dtoa_r+0x4d4>
 800b0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a4:	f7f5 faa8 	bl	80005f8 <__aeabi_dmul>
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	1076      	asrs	r6, r6, #1
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	e777      	b.n	800afa2 <_dtoa_r+0x3ca>
 800b0b2:	2502      	movs	r5, #2
 800b0b4:	e779      	b.n	800afaa <_dtoa_r+0x3d2>
 800b0b6:	9f00      	ldr	r7, [sp, #0]
 800b0b8:	9e03      	ldr	r6, [sp, #12]
 800b0ba:	e794      	b.n	800afe6 <_dtoa_r+0x40e>
 800b0bc:	9901      	ldr	r1, [sp, #4]
 800b0be:	4b4c      	ldr	r3, [pc, #304]	; (800b1f0 <_dtoa_r+0x618>)
 800b0c0:	4431      	add	r1, r6
 800b0c2:	910d      	str	r1, [sp, #52]	; 0x34
 800b0c4:	9908      	ldr	r1, [sp, #32]
 800b0c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0ce:	2900      	cmp	r1, #0
 800b0d0:	d043      	beq.n	800b15a <_dtoa_r+0x582>
 800b0d2:	494d      	ldr	r1, [pc, #308]	; (800b208 <_dtoa_r+0x630>)
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	f7f5 fbb9 	bl	800084c <__aeabi_ddiv>
 800b0da:	4652      	mov	r2, sl
 800b0dc:	465b      	mov	r3, fp
 800b0de:	f7f5 f8d3 	bl	8000288 <__aeabi_dsub>
 800b0e2:	9d01      	ldr	r5, [sp, #4]
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	468b      	mov	fp, r1
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7f5 fd34 	bl	8000b58 <__aeabi_d2iz>
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	f7f5 fa17 	bl	8000524 <__aeabi_i2d>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4640      	mov	r0, r8
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	f7f5 f8c3 	bl	8000288 <__aeabi_dsub>
 800b102:	3630      	adds	r6, #48	; 0x30
 800b104:	f805 6b01 	strb.w	r6, [r5], #1
 800b108:	4652      	mov	r2, sl
 800b10a:	465b      	mov	r3, fp
 800b10c:	4680      	mov	r8, r0
 800b10e:	4689      	mov	r9, r1
 800b110:	f7f5 fce4 	bl	8000adc <__aeabi_dcmplt>
 800b114:	2800      	cmp	r0, #0
 800b116:	d163      	bne.n	800b1e0 <_dtoa_r+0x608>
 800b118:	4642      	mov	r2, r8
 800b11a:	464b      	mov	r3, r9
 800b11c:	4936      	ldr	r1, [pc, #216]	; (800b1f8 <_dtoa_r+0x620>)
 800b11e:	2000      	movs	r0, #0
 800b120:	f7f5 f8b2 	bl	8000288 <__aeabi_dsub>
 800b124:	4652      	mov	r2, sl
 800b126:	465b      	mov	r3, fp
 800b128:	f7f5 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	f040 80b5 	bne.w	800b29c <_dtoa_r+0x6c4>
 800b132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b134:	429d      	cmp	r5, r3
 800b136:	d081      	beq.n	800b03c <_dtoa_r+0x464>
 800b138:	4b30      	ldr	r3, [pc, #192]	; (800b1fc <_dtoa_r+0x624>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	4650      	mov	r0, sl
 800b13e:	4659      	mov	r1, fp
 800b140:	f7f5 fa5a 	bl	80005f8 <__aeabi_dmul>
 800b144:	4b2d      	ldr	r3, [pc, #180]	; (800b1fc <_dtoa_r+0x624>)
 800b146:	4682      	mov	sl, r0
 800b148:	468b      	mov	fp, r1
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	2200      	movs	r2, #0
 800b150:	f7f5 fa52 	bl	80005f8 <__aeabi_dmul>
 800b154:	4680      	mov	r8, r0
 800b156:	4689      	mov	r9, r1
 800b158:	e7c6      	b.n	800b0e8 <_dtoa_r+0x510>
 800b15a:	4650      	mov	r0, sl
 800b15c:	4659      	mov	r1, fp
 800b15e:	f7f5 fa4b 	bl	80005f8 <__aeabi_dmul>
 800b162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b164:	9d01      	ldr	r5, [sp, #4]
 800b166:	930f      	str	r3, [sp, #60]	; 0x3c
 800b168:	4682      	mov	sl, r0
 800b16a:	468b      	mov	fp, r1
 800b16c:	4649      	mov	r1, r9
 800b16e:	4640      	mov	r0, r8
 800b170:	f7f5 fcf2 	bl	8000b58 <__aeabi_d2iz>
 800b174:	4606      	mov	r6, r0
 800b176:	f7f5 f9d5 	bl	8000524 <__aeabi_i2d>
 800b17a:	3630      	adds	r6, #48	; 0x30
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4640      	mov	r0, r8
 800b182:	4649      	mov	r1, r9
 800b184:	f7f5 f880 	bl	8000288 <__aeabi_dsub>
 800b188:	f805 6b01 	strb.w	r6, [r5], #1
 800b18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b18e:	429d      	cmp	r5, r3
 800b190:	4680      	mov	r8, r0
 800b192:	4689      	mov	r9, r1
 800b194:	f04f 0200 	mov.w	r2, #0
 800b198:	d124      	bne.n	800b1e4 <_dtoa_r+0x60c>
 800b19a:	4b1b      	ldr	r3, [pc, #108]	; (800b208 <_dtoa_r+0x630>)
 800b19c:	4650      	mov	r0, sl
 800b19e:	4659      	mov	r1, fp
 800b1a0:	f7f5 f874 	bl	800028c <__adddf3>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	f7f5 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d173      	bne.n	800b29c <_dtoa_r+0x6c4>
 800b1b4:	4652      	mov	r2, sl
 800b1b6:	465b      	mov	r3, fp
 800b1b8:	4913      	ldr	r1, [pc, #76]	; (800b208 <_dtoa_r+0x630>)
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	f7f5 f864 	bl	8000288 <__aeabi_dsub>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7f5 fc88 	bl	8000adc <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f43f af35 	beq.w	800b03c <_dtoa_r+0x464>
 800b1d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b1d4:	1e6b      	subs	r3, r5, #1
 800b1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1dc:	2b30      	cmp	r3, #48	; 0x30
 800b1de:	d0f8      	beq.n	800b1d2 <_dtoa_r+0x5fa>
 800b1e0:	9700      	str	r7, [sp, #0]
 800b1e2:	e049      	b.n	800b278 <_dtoa_r+0x6a0>
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <_dtoa_r+0x624>)
 800b1e6:	f7f5 fa07 	bl	80005f8 <__aeabi_dmul>
 800b1ea:	4680      	mov	r8, r0
 800b1ec:	4689      	mov	r9, r1
 800b1ee:	e7bd      	b.n	800b16c <_dtoa_r+0x594>
 800b1f0:	0800dd10 	.word	0x0800dd10
 800b1f4:	0800dce8 	.word	0x0800dce8
 800b1f8:	3ff00000 	.word	0x3ff00000
 800b1fc:	40240000 	.word	0x40240000
 800b200:	401c0000 	.word	0x401c0000
 800b204:	40140000 	.word	0x40140000
 800b208:	3fe00000 	.word	0x3fe00000
 800b20c:	9d01      	ldr	r5, [sp, #4]
 800b20e:	4656      	mov	r6, sl
 800b210:	465f      	mov	r7, fp
 800b212:	4642      	mov	r2, r8
 800b214:	464b      	mov	r3, r9
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	f7f5 fb17 	bl	800084c <__aeabi_ddiv>
 800b21e:	f7f5 fc9b 	bl	8000b58 <__aeabi_d2iz>
 800b222:	4682      	mov	sl, r0
 800b224:	f7f5 f97e 	bl	8000524 <__aeabi_i2d>
 800b228:	4642      	mov	r2, r8
 800b22a:	464b      	mov	r3, r9
 800b22c:	f7f5 f9e4 	bl	80005f8 <__aeabi_dmul>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4630      	mov	r0, r6
 800b236:	4639      	mov	r1, r7
 800b238:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b23c:	f7f5 f824 	bl	8000288 <__aeabi_dsub>
 800b240:	f805 6b01 	strb.w	r6, [r5], #1
 800b244:	9e01      	ldr	r6, [sp, #4]
 800b246:	9f03      	ldr	r7, [sp, #12]
 800b248:	1bae      	subs	r6, r5, r6
 800b24a:	42b7      	cmp	r7, r6
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	d135      	bne.n	800b2be <_dtoa_r+0x6e6>
 800b252:	f7f5 f81b 	bl	800028c <__adddf3>
 800b256:	4642      	mov	r2, r8
 800b258:	464b      	mov	r3, r9
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	f7f5 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 800b262:	b9d0      	cbnz	r0, 800b29a <_dtoa_r+0x6c2>
 800b264:	4642      	mov	r2, r8
 800b266:	464b      	mov	r3, r9
 800b268:	4630      	mov	r0, r6
 800b26a:	4639      	mov	r1, r7
 800b26c:	f7f5 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b270:	b110      	cbz	r0, 800b278 <_dtoa_r+0x6a0>
 800b272:	f01a 0f01 	tst.w	sl, #1
 800b276:	d110      	bne.n	800b29a <_dtoa_r+0x6c2>
 800b278:	4620      	mov	r0, r4
 800b27a:	ee18 1a10 	vmov	r1, s16
 800b27e:	f000 fd13 	bl	800bca8 <_Bfree>
 800b282:	2300      	movs	r3, #0
 800b284:	9800      	ldr	r0, [sp, #0]
 800b286:	702b      	strb	r3, [r5, #0]
 800b288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b28a:	3001      	adds	r0, #1
 800b28c:	6018      	str	r0, [r3, #0]
 800b28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b290:	2b00      	cmp	r3, #0
 800b292:	f43f acf1 	beq.w	800ac78 <_dtoa_r+0xa0>
 800b296:	601d      	str	r5, [r3, #0]
 800b298:	e4ee      	b.n	800ac78 <_dtoa_r+0xa0>
 800b29a:	9f00      	ldr	r7, [sp, #0]
 800b29c:	462b      	mov	r3, r5
 800b29e:	461d      	mov	r5, r3
 800b2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2a4:	2a39      	cmp	r2, #57	; 0x39
 800b2a6:	d106      	bne.n	800b2b6 <_dtoa_r+0x6de>
 800b2a8:	9a01      	ldr	r2, [sp, #4]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d1f7      	bne.n	800b29e <_dtoa_r+0x6c6>
 800b2ae:	9901      	ldr	r1, [sp, #4]
 800b2b0:	2230      	movs	r2, #48	; 0x30
 800b2b2:	3701      	adds	r7, #1
 800b2b4:	700a      	strb	r2, [r1, #0]
 800b2b6:	781a      	ldrb	r2, [r3, #0]
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	e790      	b.n	800b1e0 <_dtoa_r+0x608>
 800b2be:	4ba6      	ldr	r3, [pc, #664]	; (800b558 <_dtoa_r+0x980>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f7f5 f999 	bl	80005f8 <__aeabi_dmul>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	460f      	mov	r7, r1
 800b2ce:	f7f5 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d09d      	beq.n	800b212 <_dtoa_r+0x63a>
 800b2d6:	e7cf      	b.n	800b278 <_dtoa_r+0x6a0>
 800b2d8:	9a08      	ldr	r2, [sp, #32]
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	f000 80d7 	beq.w	800b48e <_dtoa_r+0x8b6>
 800b2e0:	9a06      	ldr	r2, [sp, #24]
 800b2e2:	2a01      	cmp	r2, #1
 800b2e4:	f300 80ba 	bgt.w	800b45c <_dtoa_r+0x884>
 800b2e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	f000 80b2 	beq.w	800b454 <_dtoa_r+0x87c>
 800b2f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2f4:	9e07      	ldr	r6, [sp, #28]
 800b2f6:	9d04      	ldr	r5, [sp, #16]
 800b2f8:	9a04      	ldr	r2, [sp, #16]
 800b2fa:	441a      	add	r2, r3
 800b2fc:	9204      	str	r2, [sp, #16]
 800b2fe:	9a05      	ldr	r2, [sp, #20]
 800b300:	2101      	movs	r1, #1
 800b302:	441a      	add	r2, r3
 800b304:	4620      	mov	r0, r4
 800b306:	9205      	str	r2, [sp, #20]
 800b308:	f000 fd86 	bl	800be18 <__i2b>
 800b30c:	4607      	mov	r7, r0
 800b30e:	2d00      	cmp	r5, #0
 800b310:	dd0c      	ble.n	800b32c <_dtoa_r+0x754>
 800b312:	9b05      	ldr	r3, [sp, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd09      	ble.n	800b32c <_dtoa_r+0x754>
 800b318:	42ab      	cmp	r3, r5
 800b31a:	9a04      	ldr	r2, [sp, #16]
 800b31c:	bfa8      	it	ge
 800b31e:	462b      	movge	r3, r5
 800b320:	1ad2      	subs	r2, r2, r3
 800b322:	9204      	str	r2, [sp, #16]
 800b324:	9a05      	ldr	r2, [sp, #20]
 800b326:	1aed      	subs	r5, r5, r3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	9b07      	ldr	r3, [sp, #28]
 800b32e:	b31b      	cbz	r3, 800b378 <_dtoa_r+0x7a0>
 800b330:	9b08      	ldr	r3, [sp, #32]
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 80af 	beq.w	800b496 <_dtoa_r+0x8be>
 800b338:	2e00      	cmp	r6, #0
 800b33a:	dd13      	ble.n	800b364 <_dtoa_r+0x78c>
 800b33c:	4639      	mov	r1, r7
 800b33e:	4632      	mov	r2, r6
 800b340:	4620      	mov	r0, r4
 800b342:	f000 fe29 	bl	800bf98 <__pow5mult>
 800b346:	ee18 2a10 	vmov	r2, s16
 800b34a:	4601      	mov	r1, r0
 800b34c:	4607      	mov	r7, r0
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 fd78 	bl	800be44 <__multiply>
 800b354:	ee18 1a10 	vmov	r1, s16
 800b358:	4680      	mov	r8, r0
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fca4 	bl	800bca8 <_Bfree>
 800b360:	ee08 8a10 	vmov	s16, r8
 800b364:	9b07      	ldr	r3, [sp, #28]
 800b366:	1b9a      	subs	r2, r3, r6
 800b368:	d006      	beq.n	800b378 <_dtoa_r+0x7a0>
 800b36a:	ee18 1a10 	vmov	r1, s16
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 fe12 	bl	800bf98 <__pow5mult>
 800b374:	ee08 0a10 	vmov	s16, r0
 800b378:	2101      	movs	r1, #1
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 fd4c 	bl	800be18 <__i2b>
 800b380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	4606      	mov	r6, r0
 800b386:	f340 8088 	ble.w	800b49a <_dtoa_r+0x8c2>
 800b38a:	461a      	mov	r2, r3
 800b38c:	4601      	mov	r1, r0
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fe02 	bl	800bf98 <__pow5mult>
 800b394:	9b06      	ldr	r3, [sp, #24]
 800b396:	2b01      	cmp	r3, #1
 800b398:	4606      	mov	r6, r0
 800b39a:	f340 8081 	ble.w	800b4a0 <_dtoa_r+0x8c8>
 800b39e:	f04f 0800 	mov.w	r8, #0
 800b3a2:	6933      	ldr	r3, [r6, #16]
 800b3a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3a8:	6918      	ldr	r0, [r3, #16]
 800b3aa:	f000 fce5 	bl	800bd78 <__hi0bits>
 800b3ae:	f1c0 0020 	rsb	r0, r0, #32
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	4418      	add	r0, r3
 800b3b6:	f010 001f 	ands.w	r0, r0, #31
 800b3ba:	f000 8092 	beq.w	800b4e2 <_dtoa_r+0x90a>
 800b3be:	f1c0 0320 	rsb	r3, r0, #32
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	f340 808a 	ble.w	800b4dc <_dtoa_r+0x904>
 800b3c8:	f1c0 001c 	rsb	r0, r0, #28
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	4403      	add	r3, r0
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	9b05      	ldr	r3, [sp, #20]
 800b3d4:	4403      	add	r3, r0
 800b3d6:	4405      	add	r5, r0
 800b3d8:	9305      	str	r3, [sp, #20]
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	dd07      	ble.n	800b3f0 <_dtoa_r+0x818>
 800b3e0:	ee18 1a10 	vmov	r1, s16
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 fe30 	bl	800c04c <__lshift>
 800b3ec:	ee08 0a10 	vmov	s16, r0
 800b3f0:	9b05      	ldr	r3, [sp, #20]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd05      	ble.n	800b402 <_dtoa_r+0x82a>
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fe26 	bl	800c04c <__lshift>
 800b400:	4606      	mov	r6, r0
 800b402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b404:	2b00      	cmp	r3, #0
 800b406:	d06e      	beq.n	800b4e6 <_dtoa_r+0x90e>
 800b408:	ee18 0a10 	vmov	r0, s16
 800b40c:	4631      	mov	r1, r6
 800b40e:	f000 fe8d 	bl	800c12c <__mcmp>
 800b412:	2800      	cmp	r0, #0
 800b414:	da67      	bge.n	800b4e6 <_dtoa_r+0x90e>
 800b416:	9b00      	ldr	r3, [sp, #0]
 800b418:	3b01      	subs	r3, #1
 800b41a:	ee18 1a10 	vmov	r1, s16
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	220a      	movs	r2, #10
 800b422:	2300      	movs	r3, #0
 800b424:	4620      	mov	r0, r4
 800b426:	f000 fc61 	bl	800bcec <__multadd>
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	ee08 0a10 	vmov	s16, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 81b1 	beq.w	800b798 <_dtoa_r+0xbc0>
 800b436:	2300      	movs	r3, #0
 800b438:	4639      	mov	r1, r7
 800b43a:	220a      	movs	r2, #10
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 fc55 	bl	800bcec <__multadd>
 800b442:	9b02      	ldr	r3, [sp, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	4607      	mov	r7, r0
 800b448:	f300 808e 	bgt.w	800b568 <_dtoa_r+0x990>
 800b44c:	9b06      	ldr	r3, [sp, #24]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	dc51      	bgt.n	800b4f6 <_dtoa_r+0x91e>
 800b452:	e089      	b.n	800b568 <_dtoa_r+0x990>
 800b454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b45a:	e74b      	b.n	800b2f4 <_dtoa_r+0x71c>
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	1e5e      	subs	r6, r3, #1
 800b460:	9b07      	ldr	r3, [sp, #28]
 800b462:	42b3      	cmp	r3, r6
 800b464:	bfbf      	itttt	lt
 800b466:	9b07      	ldrlt	r3, [sp, #28]
 800b468:	9607      	strlt	r6, [sp, #28]
 800b46a:	1af2      	sublt	r2, r6, r3
 800b46c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b46e:	bfb6      	itet	lt
 800b470:	189b      	addlt	r3, r3, r2
 800b472:	1b9e      	subge	r6, r3, r6
 800b474:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	bfb8      	it	lt
 800b47a:	2600      	movlt	r6, #0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bfb7      	itett	lt
 800b480:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b484:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b488:	1a9d      	sublt	r5, r3, r2
 800b48a:	2300      	movlt	r3, #0
 800b48c:	e734      	b.n	800b2f8 <_dtoa_r+0x720>
 800b48e:	9e07      	ldr	r6, [sp, #28]
 800b490:	9d04      	ldr	r5, [sp, #16]
 800b492:	9f08      	ldr	r7, [sp, #32]
 800b494:	e73b      	b.n	800b30e <_dtoa_r+0x736>
 800b496:	9a07      	ldr	r2, [sp, #28]
 800b498:	e767      	b.n	800b36a <_dtoa_r+0x792>
 800b49a:	9b06      	ldr	r3, [sp, #24]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	dc18      	bgt.n	800b4d2 <_dtoa_r+0x8fa>
 800b4a0:	f1ba 0f00 	cmp.w	sl, #0
 800b4a4:	d115      	bne.n	800b4d2 <_dtoa_r+0x8fa>
 800b4a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4aa:	b993      	cbnz	r3, 800b4d2 <_dtoa_r+0x8fa>
 800b4ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4b0:	0d1b      	lsrs	r3, r3, #20
 800b4b2:	051b      	lsls	r3, r3, #20
 800b4b4:	b183      	cbz	r3, 800b4d8 <_dtoa_r+0x900>
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	9b05      	ldr	r3, [sp, #20]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	f04f 0801 	mov.w	r8, #1
 800b4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f47f af6a 	bne.w	800b3a2 <_dtoa_r+0x7ca>
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	e76f      	b.n	800b3b2 <_dtoa_r+0x7da>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	e7f6      	b.n	800b4c6 <_dtoa_r+0x8ee>
 800b4d8:	4698      	mov	r8, r3
 800b4da:	e7f4      	b.n	800b4c6 <_dtoa_r+0x8ee>
 800b4dc:	f43f af7d 	beq.w	800b3da <_dtoa_r+0x802>
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	301c      	adds	r0, #28
 800b4e4:	e772      	b.n	800b3cc <_dtoa_r+0x7f4>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dc37      	bgt.n	800b55c <_dtoa_r+0x984>
 800b4ec:	9b06      	ldr	r3, [sp, #24]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	dd34      	ble.n	800b55c <_dtoa_r+0x984>
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	9302      	str	r3, [sp, #8]
 800b4f6:	9b02      	ldr	r3, [sp, #8]
 800b4f8:	b96b      	cbnz	r3, 800b516 <_dtoa_r+0x93e>
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	2205      	movs	r2, #5
 800b4fe:	4620      	mov	r0, r4
 800b500:	f000 fbf4 	bl	800bcec <__multadd>
 800b504:	4601      	mov	r1, r0
 800b506:	4606      	mov	r6, r0
 800b508:	ee18 0a10 	vmov	r0, s16
 800b50c:	f000 fe0e 	bl	800c12c <__mcmp>
 800b510:	2800      	cmp	r0, #0
 800b512:	f73f adbb 	bgt.w	800b08c <_dtoa_r+0x4b4>
 800b516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b518:	9d01      	ldr	r5, [sp, #4]
 800b51a:	43db      	mvns	r3, r3
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	f04f 0800 	mov.w	r8, #0
 800b522:	4631      	mov	r1, r6
 800b524:	4620      	mov	r0, r4
 800b526:	f000 fbbf 	bl	800bca8 <_Bfree>
 800b52a:	2f00      	cmp	r7, #0
 800b52c:	f43f aea4 	beq.w	800b278 <_dtoa_r+0x6a0>
 800b530:	f1b8 0f00 	cmp.w	r8, #0
 800b534:	d005      	beq.n	800b542 <_dtoa_r+0x96a>
 800b536:	45b8      	cmp	r8, r7
 800b538:	d003      	beq.n	800b542 <_dtoa_r+0x96a>
 800b53a:	4641      	mov	r1, r8
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fbb3 	bl	800bca8 <_Bfree>
 800b542:	4639      	mov	r1, r7
 800b544:	4620      	mov	r0, r4
 800b546:	f000 fbaf 	bl	800bca8 <_Bfree>
 800b54a:	e695      	b.n	800b278 <_dtoa_r+0x6a0>
 800b54c:	2600      	movs	r6, #0
 800b54e:	4637      	mov	r7, r6
 800b550:	e7e1      	b.n	800b516 <_dtoa_r+0x93e>
 800b552:	9700      	str	r7, [sp, #0]
 800b554:	4637      	mov	r7, r6
 800b556:	e599      	b.n	800b08c <_dtoa_r+0x4b4>
 800b558:	40240000 	.word	0x40240000
 800b55c:	9b08      	ldr	r3, [sp, #32]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 80ca 	beq.w	800b6f8 <_dtoa_r+0xb20>
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	9302      	str	r3, [sp, #8]
 800b568:	2d00      	cmp	r5, #0
 800b56a:	dd05      	ble.n	800b578 <_dtoa_r+0x9a0>
 800b56c:	4639      	mov	r1, r7
 800b56e:	462a      	mov	r2, r5
 800b570:	4620      	mov	r0, r4
 800b572:	f000 fd6b 	bl	800c04c <__lshift>
 800b576:	4607      	mov	r7, r0
 800b578:	f1b8 0f00 	cmp.w	r8, #0
 800b57c:	d05b      	beq.n	800b636 <_dtoa_r+0xa5e>
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fb51 	bl	800bc28 <_Balloc>
 800b586:	4605      	mov	r5, r0
 800b588:	b928      	cbnz	r0, 800b596 <_dtoa_r+0x9be>
 800b58a:	4b87      	ldr	r3, [pc, #540]	; (800b7a8 <_dtoa_r+0xbd0>)
 800b58c:	4602      	mov	r2, r0
 800b58e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b592:	f7ff bb3b 	b.w	800ac0c <_dtoa_r+0x34>
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	3202      	adds	r2, #2
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	f107 010c 	add.w	r1, r7, #12
 800b5a0:	300c      	adds	r0, #12
 800b5a2:	f000 fb33 	bl	800bc0c <memcpy>
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 fd4e 	bl	800c04c <__lshift>
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	f103 0901 	add.w	r9, r3, #1
 800b5b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	9305      	str	r3, [sp, #20]
 800b5be:	f00a 0301 	and.w	r3, sl, #1
 800b5c2:	46b8      	mov	r8, r7
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	ee18 0a10 	vmov	r0, s16
 800b5ce:	f7ff fa75 	bl	800aabc <quorem>
 800b5d2:	4641      	mov	r1, r8
 800b5d4:	9002      	str	r0, [sp, #8]
 800b5d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b5da:	ee18 0a10 	vmov	r0, s16
 800b5de:	f000 fda5 	bl	800c12c <__mcmp>
 800b5e2:	463a      	mov	r2, r7
 800b5e4:	9003      	str	r0, [sp, #12]
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 fdbb 	bl	800c164 <__mdiff>
 800b5ee:	68c2      	ldr	r2, [r0, #12]
 800b5f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	bb02      	cbnz	r2, 800b63a <_dtoa_r+0xa62>
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	ee18 0a10 	vmov	r0, s16
 800b5fe:	f000 fd95 	bl	800c12c <__mcmp>
 800b602:	4602      	mov	r2, r0
 800b604:	4629      	mov	r1, r5
 800b606:	4620      	mov	r0, r4
 800b608:	9207      	str	r2, [sp, #28]
 800b60a:	f000 fb4d 	bl	800bca8 <_Bfree>
 800b60e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b612:	ea43 0102 	orr.w	r1, r3, r2
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	430b      	orrs	r3, r1
 800b61a:	464d      	mov	r5, r9
 800b61c:	d10f      	bne.n	800b63e <_dtoa_r+0xa66>
 800b61e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b622:	d02a      	beq.n	800b67a <_dtoa_r+0xaa2>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	dd02      	ble.n	800b630 <_dtoa_r+0xa58>
 800b62a:	9b02      	ldr	r3, [sp, #8]
 800b62c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b630:	f88b a000 	strb.w	sl, [fp]
 800b634:	e775      	b.n	800b522 <_dtoa_r+0x94a>
 800b636:	4638      	mov	r0, r7
 800b638:	e7ba      	b.n	800b5b0 <_dtoa_r+0x9d8>
 800b63a:	2201      	movs	r2, #1
 800b63c:	e7e2      	b.n	800b604 <_dtoa_r+0xa2c>
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	db04      	blt.n	800b64e <_dtoa_r+0xa76>
 800b644:	9906      	ldr	r1, [sp, #24]
 800b646:	430b      	orrs	r3, r1
 800b648:	9904      	ldr	r1, [sp, #16]
 800b64a:	430b      	orrs	r3, r1
 800b64c:	d122      	bne.n	800b694 <_dtoa_r+0xabc>
 800b64e:	2a00      	cmp	r2, #0
 800b650:	ddee      	ble.n	800b630 <_dtoa_r+0xa58>
 800b652:	ee18 1a10 	vmov	r1, s16
 800b656:	2201      	movs	r2, #1
 800b658:	4620      	mov	r0, r4
 800b65a:	f000 fcf7 	bl	800c04c <__lshift>
 800b65e:	4631      	mov	r1, r6
 800b660:	ee08 0a10 	vmov	s16, r0
 800b664:	f000 fd62 	bl	800c12c <__mcmp>
 800b668:	2800      	cmp	r0, #0
 800b66a:	dc03      	bgt.n	800b674 <_dtoa_r+0xa9c>
 800b66c:	d1e0      	bne.n	800b630 <_dtoa_r+0xa58>
 800b66e:	f01a 0f01 	tst.w	sl, #1
 800b672:	d0dd      	beq.n	800b630 <_dtoa_r+0xa58>
 800b674:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b678:	d1d7      	bne.n	800b62a <_dtoa_r+0xa52>
 800b67a:	2339      	movs	r3, #57	; 0x39
 800b67c:	f88b 3000 	strb.w	r3, [fp]
 800b680:	462b      	mov	r3, r5
 800b682:	461d      	mov	r5, r3
 800b684:	3b01      	subs	r3, #1
 800b686:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b68a:	2a39      	cmp	r2, #57	; 0x39
 800b68c:	d071      	beq.n	800b772 <_dtoa_r+0xb9a>
 800b68e:	3201      	adds	r2, #1
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	e746      	b.n	800b522 <_dtoa_r+0x94a>
 800b694:	2a00      	cmp	r2, #0
 800b696:	dd07      	ble.n	800b6a8 <_dtoa_r+0xad0>
 800b698:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b69c:	d0ed      	beq.n	800b67a <_dtoa_r+0xaa2>
 800b69e:	f10a 0301 	add.w	r3, sl, #1
 800b6a2:	f88b 3000 	strb.w	r3, [fp]
 800b6a6:	e73c      	b.n	800b522 <_dtoa_r+0x94a>
 800b6a8:	9b05      	ldr	r3, [sp, #20]
 800b6aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b6ae:	4599      	cmp	r9, r3
 800b6b0:	d047      	beq.n	800b742 <_dtoa_r+0xb6a>
 800b6b2:	ee18 1a10 	vmov	r1, s16
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	220a      	movs	r2, #10
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 fb16 	bl	800bcec <__multadd>
 800b6c0:	45b8      	cmp	r8, r7
 800b6c2:	ee08 0a10 	vmov	s16, r0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	f04f 020a 	mov.w	r2, #10
 800b6ce:	4641      	mov	r1, r8
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	d106      	bne.n	800b6e2 <_dtoa_r+0xb0a>
 800b6d4:	f000 fb0a 	bl	800bcec <__multadd>
 800b6d8:	4680      	mov	r8, r0
 800b6da:	4607      	mov	r7, r0
 800b6dc:	f109 0901 	add.w	r9, r9, #1
 800b6e0:	e772      	b.n	800b5c8 <_dtoa_r+0x9f0>
 800b6e2:	f000 fb03 	bl	800bcec <__multadd>
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	220a      	movs	r2, #10
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 fafc 	bl	800bcec <__multadd>
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	e7f1      	b.n	800b6dc <_dtoa_r+0xb04>
 800b6f8:	9b03      	ldr	r3, [sp, #12]
 800b6fa:	9302      	str	r3, [sp, #8]
 800b6fc:	9d01      	ldr	r5, [sp, #4]
 800b6fe:	ee18 0a10 	vmov	r0, s16
 800b702:	4631      	mov	r1, r6
 800b704:	f7ff f9da 	bl	800aabc <quorem>
 800b708:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b70c:	9b01      	ldr	r3, [sp, #4]
 800b70e:	f805 ab01 	strb.w	sl, [r5], #1
 800b712:	1aea      	subs	r2, r5, r3
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	4293      	cmp	r3, r2
 800b718:	dd09      	ble.n	800b72e <_dtoa_r+0xb56>
 800b71a:	ee18 1a10 	vmov	r1, s16
 800b71e:	2300      	movs	r3, #0
 800b720:	220a      	movs	r2, #10
 800b722:	4620      	mov	r0, r4
 800b724:	f000 fae2 	bl	800bcec <__multadd>
 800b728:	ee08 0a10 	vmov	s16, r0
 800b72c:	e7e7      	b.n	800b6fe <_dtoa_r+0xb26>
 800b72e:	9b02      	ldr	r3, [sp, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	bfc8      	it	gt
 800b734:	461d      	movgt	r5, r3
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	bfd8      	it	le
 800b73a:	2501      	movle	r5, #1
 800b73c:	441d      	add	r5, r3
 800b73e:	f04f 0800 	mov.w	r8, #0
 800b742:	ee18 1a10 	vmov	r1, s16
 800b746:	2201      	movs	r2, #1
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 fc7f 	bl	800c04c <__lshift>
 800b74e:	4631      	mov	r1, r6
 800b750:	ee08 0a10 	vmov	s16, r0
 800b754:	f000 fcea 	bl	800c12c <__mcmp>
 800b758:	2800      	cmp	r0, #0
 800b75a:	dc91      	bgt.n	800b680 <_dtoa_r+0xaa8>
 800b75c:	d102      	bne.n	800b764 <_dtoa_r+0xb8c>
 800b75e:	f01a 0f01 	tst.w	sl, #1
 800b762:	d18d      	bne.n	800b680 <_dtoa_r+0xaa8>
 800b764:	462b      	mov	r3, r5
 800b766:	461d      	mov	r5, r3
 800b768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b76c:	2a30      	cmp	r2, #48	; 0x30
 800b76e:	d0fa      	beq.n	800b766 <_dtoa_r+0xb8e>
 800b770:	e6d7      	b.n	800b522 <_dtoa_r+0x94a>
 800b772:	9a01      	ldr	r2, [sp, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d184      	bne.n	800b682 <_dtoa_r+0xaaa>
 800b778:	9b00      	ldr	r3, [sp, #0]
 800b77a:	3301      	adds	r3, #1
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	2331      	movs	r3, #49	; 0x31
 800b780:	7013      	strb	r3, [r2, #0]
 800b782:	e6ce      	b.n	800b522 <_dtoa_r+0x94a>
 800b784:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <_dtoa_r+0xbd4>)
 800b786:	f7ff ba95 	b.w	800acb4 <_dtoa_r+0xdc>
 800b78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f47f aa6e 	bne.w	800ac6e <_dtoa_r+0x96>
 800b792:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <_dtoa_r+0xbd8>)
 800b794:	f7ff ba8e 	b.w	800acb4 <_dtoa_r+0xdc>
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dcae      	bgt.n	800b6fc <_dtoa_r+0xb24>
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	f73f aea8 	bgt.w	800b4f6 <_dtoa_r+0x91e>
 800b7a6:	e7a9      	b.n	800b6fc <_dtoa_r+0xb24>
 800b7a8:	0800dc1b 	.word	0x0800dc1b
 800b7ac:	0800db78 	.word	0x0800db78
 800b7b0:	0800db9c 	.word	0x0800db9c

0800b7b4 <__sflush_r>:
 800b7b4:	898a      	ldrh	r2, [r1, #12]
 800b7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	0710      	lsls	r0, r2, #28
 800b7be:	460c      	mov	r4, r1
 800b7c0:	d458      	bmi.n	800b874 <__sflush_r+0xc0>
 800b7c2:	684b      	ldr	r3, [r1, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dc05      	bgt.n	800b7d4 <__sflush_r+0x20>
 800b7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	dc02      	bgt.n	800b7d4 <__sflush_r+0x20>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	d0f9      	beq.n	800b7ce <__sflush_r+0x1a>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7e0:	682f      	ldr	r7, [r5, #0]
 800b7e2:	602b      	str	r3, [r5, #0]
 800b7e4:	d032      	beq.n	800b84c <__sflush_r+0x98>
 800b7e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	075a      	lsls	r2, r3, #29
 800b7ec:	d505      	bpl.n	800b7fa <__sflush_r+0x46>
 800b7ee:	6863      	ldr	r3, [r4, #4]
 800b7f0:	1ac0      	subs	r0, r0, r3
 800b7f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7f4:	b10b      	cbz	r3, 800b7fa <__sflush_r+0x46>
 800b7f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7f8:	1ac0      	subs	r0, r0, r3
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b800:	6a21      	ldr	r1, [r4, #32]
 800b802:	4628      	mov	r0, r5
 800b804:	47b0      	blx	r6
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	d106      	bne.n	800b81a <__sflush_r+0x66>
 800b80c:	6829      	ldr	r1, [r5, #0]
 800b80e:	291d      	cmp	r1, #29
 800b810:	d82c      	bhi.n	800b86c <__sflush_r+0xb8>
 800b812:	4a2a      	ldr	r2, [pc, #168]	; (800b8bc <__sflush_r+0x108>)
 800b814:	40ca      	lsrs	r2, r1
 800b816:	07d6      	lsls	r6, r2, #31
 800b818:	d528      	bpl.n	800b86c <__sflush_r+0xb8>
 800b81a:	2200      	movs	r2, #0
 800b81c:	6062      	str	r2, [r4, #4]
 800b81e:	04d9      	lsls	r1, r3, #19
 800b820:	6922      	ldr	r2, [r4, #16]
 800b822:	6022      	str	r2, [r4, #0]
 800b824:	d504      	bpl.n	800b830 <__sflush_r+0x7c>
 800b826:	1c42      	adds	r2, r0, #1
 800b828:	d101      	bne.n	800b82e <__sflush_r+0x7a>
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	b903      	cbnz	r3, 800b830 <__sflush_r+0x7c>
 800b82e:	6560      	str	r0, [r4, #84]	; 0x54
 800b830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b832:	602f      	str	r7, [r5, #0]
 800b834:	2900      	cmp	r1, #0
 800b836:	d0ca      	beq.n	800b7ce <__sflush_r+0x1a>
 800b838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b83c:	4299      	cmp	r1, r3
 800b83e:	d002      	beq.n	800b846 <__sflush_r+0x92>
 800b840:	4628      	mov	r0, r5
 800b842:	f000 fd8b 	bl	800c35c <_free_r>
 800b846:	2000      	movs	r0, #0
 800b848:	6360      	str	r0, [r4, #52]	; 0x34
 800b84a:	e7c1      	b.n	800b7d0 <__sflush_r+0x1c>
 800b84c:	6a21      	ldr	r1, [r4, #32]
 800b84e:	2301      	movs	r3, #1
 800b850:	4628      	mov	r0, r5
 800b852:	47b0      	blx	r6
 800b854:	1c41      	adds	r1, r0, #1
 800b856:	d1c7      	bne.n	800b7e8 <__sflush_r+0x34>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0c4      	beq.n	800b7e8 <__sflush_r+0x34>
 800b85e:	2b1d      	cmp	r3, #29
 800b860:	d001      	beq.n	800b866 <__sflush_r+0xb2>
 800b862:	2b16      	cmp	r3, #22
 800b864:	d101      	bne.n	800b86a <__sflush_r+0xb6>
 800b866:	602f      	str	r7, [r5, #0]
 800b868:	e7b1      	b.n	800b7ce <__sflush_r+0x1a>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	e7ad      	b.n	800b7d0 <__sflush_r+0x1c>
 800b874:	690f      	ldr	r7, [r1, #16]
 800b876:	2f00      	cmp	r7, #0
 800b878:	d0a9      	beq.n	800b7ce <__sflush_r+0x1a>
 800b87a:	0793      	lsls	r3, r2, #30
 800b87c:	680e      	ldr	r6, [r1, #0]
 800b87e:	bf08      	it	eq
 800b880:	694b      	ldreq	r3, [r1, #20]
 800b882:	600f      	str	r7, [r1, #0]
 800b884:	bf18      	it	ne
 800b886:	2300      	movne	r3, #0
 800b888:	eba6 0807 	sub.w	r8, r6, r7
 800b88c:	608b      	str	r3, [r1, #8]
 800b88e:	f1b8 0f00 	cmp.w	r8, #0
 800b892:	dd9c      	ble.n	800b7ce <__sflush_r+0x1a>
 800b894:	6a21      	ldr	r1, [r4, #32]
 800b896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b898:	4643      	mov	r3, r8
 800b89a:	463a      	mov	r2, r7
 800b89c:	4628      	mov	r0, r5
 800b89e:	47b0      	blx	r6
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	dc06      	bgt.n	800b8b2 <__sflush_r+0xfe>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b0:	e78e      	b.n	800b7d0 <__sflush_r+0x1c>
 800b8b2:	4407      	add	r7, r0
 800b8b4:	eba8 0800 	sub.w	r8, r8, r0
 800b8b8:	e7e9      	b.n	800b88e <__sflush_r+0xda>
 800b8ba:	bf00      	nop
 800b8bc:	20400001 	.word	0x20400001

0800b8c0 <_fflush_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	690b      	ldr	r3, [r1, #16]
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	b913      	cbnz	r3, 800b8d0 <_fflush_r+0x10>
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	b118      	cbz	r0, 800b8da <_fflush_r+0x1a>
 800b8d2:	6983      	ldr	r3, [r0, #24]
 800b8d4:	b90b      	cbnz	r3, 800b8da <_fflush_r+0x1a>
 800b8d6:	f000 f887 	bl	800b9e8 <__sinit>
 800b8da:	4b14      	ldr	r3, [pc, #80]	; (800b92c <_fflush_r+0x6c>)
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	d11b      	bne.n	800b918 <_fflush_r+0x58>
 800b8e0:	686c      	ldr	r4, [r5, #4]
 800b8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0ef      	beq.n	800b8ca <_fflush_r+0xa>
 800b8ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8ec:	07d0      	lsls	r0, r2, #31
 800b8ee:	d404      	bmi.n	800b8fa <_fflush_r+0x3a>
 800b8f0:	0599      	lsls	r1, r3, #22
 800b8f2:	d402      	bmi.n	800b8fa <_fflush_r+0x3a>
 800b8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8f6:	f000 f91a 	bl	800bb2e <__retarget_lock_acquire_recursive>
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	f7ff ff59 	bl	800b7b4 <__sflush_r>
 800b902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b904:	07da      	lsls	r2, r3, #31
 800b906:	4605      	mov	r5, r0
 800b908:	d4e0      	bmi.n	800b8cc <_fflush_r+0xc>
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	059b      	lsls	r3, r3, #22
 800b90e:	d4dd      	bmi.n	800b8cc <_fflush_r+0xc>
 800b910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b912:	f000 f90d 	bl	800bb30 <__retarget_lock_release_recursive>
 800b916:	e7d9      	b.n	800b8cc <_fflush_r+0xc>
 800b918:	4b05      	ldr	r3, [pc, #20]	; (800b930 <_fflush_r+0x70>)
 800b91a:	429c      	cmp	r4, r3
 800b91c:	d101      	bne.n	800b922 <_fflush_r+0x62>
 800b91e:	68ac      	ldr	r4, [r5, #8]
 800b920:	e7df      	b.n	800b8e2 <_fflush_r+0x22>
 800b922:	4b04      	ldr	r3, [pc, #16]	; (800b934 <_fflush_r+0x74>)
 800b924:	429c      	cmp	r4, r3
 800b926:	bf08      	it	eq
 800b928:	68ec      	ldreq	r4, [r5, #12]
 800b92a:	e7da      	b.n	800b8e2 <_fflush_r+0x22>
 800b92c:	0800dc4c 	.word	0x0800dc4c
 800b930:	0800dc6c 	.word	0x0800dc6c
 800b934:	0800dc2c 	.word	0x0800dc2c

0800b938 <std>:
 800b938:	2300      	movs	r3, #0
 800b93a:	b510      	push	{r4, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	e9c0 3300 	strd	r3, r3, [r0]
 800b942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b946:	6083      	str	r3, [r0, #8]
 800b948:	8181      	strh	r1, [r0, #12]
 800b94a:	6643      	str	r3, [r0, #100]	; 0x64
 800b94c:	81c2      	strh	r2, [r0, #14]
 800b94e:	6183      	str	r3, [r0, #24]
 800b950:	4619      	mov	r1, r3
 800b952:	2208      	movs	r2, #8
 800b954:	305c      	adds	r0, #92	; 0x5c
 800b956:	f7fe faf1 	bl	8009f3c <memset>
 800b95a:	4b05      	ldr	r3, [pc, #20]	; (800b970 <std+0x38>)
 800b95c:	6263      	str	r3, [r4, #36]	; 0x24
 800b95e:	4b05      	ldr	r3, [pc, #20]	; (800b974 <std+0x3c>)
 800b960:	62a3      	str	r3, [r4, #40]	; 0x28
 800b962:	4b05      	ldr	r3, [pc, #20]	; (800b978 <std+0x40>)
 800b964:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <std+0x44>)
 800b968:	6224      	str	r4, [r4, #32]
 800b96a:	6323      	str	r3, [r4, #48]	; 0x30
 800b96c:	bd10      	pop	{r4, pc}
 800b96e:	bf00      	nop
 800b970:	0800c7f1 	.word	0x0800c7f1
 800b974:	0800c813 	.word	0x0800c813
 800b978:	0800c84b 	.word	0x0800c84b
 800b97c:	0800c86f 	.word	0x0800c86f

0800b980 <_cleanup_r>:
 800b980:	4901      	ldr	r1, [pc, #4]	; (800b988 <_cleanup_r+0x8>)
 800b982:	f000 b8af 	b.w	800bae4 <_fwalk_reent>
 800b986:	bf00      	nop
 800b988:	0800b8c1 	.word	0x0800b8c1

0800b98c <__sfmoreglue>:
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	2268      	movs	r2, #104	; 0x68
 800b990:	1e4d      	subs	r5, r1, #1
 800b992:	4355      	muls	r5, r2
 800b994:	460e      	mov	r6, r1
 800b996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b99a:	f000 fd4b 	bl	800c434 <_malloc_r>
 800b99e:	4604      	mov	r4, r0
 800b9a0:	b140      	cbz	r0, 800b9b4 <__sfmoreglue+0x28>
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	e9c0 1600 	strd	r1, r6, [r0]
 800b9a8:	300c      	adds	r0, #12
 800b9aa:	60a0      	str	r0, [r4, #8]
 800b9ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9b0:	f7fe fac4 	bl	8009f3c <memset>
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}

0800b9b8 <__sfp_lock_acquire>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__sfp_lock_acquire+0x8>)
 800b9ba:	f000 b8b8 	b.w	800bb2e <__retarget_lock_acquire_recursive>
 800b9be:	bf00      	nop
 800b9c0:	200004f9 	.word	0x200004f9

0800b9c4 <__sfp_lock_release>:
 800b9c4:	4801      	ldr	r0, [pc, #4]	; (800b9cc <__sfp_lock_release+0x8>)
 800b9c6:	f000 b8b3 	b.w	800bb30 <__retarget_lock_release_recursive>
 800b9ca:	bf00      	nop
 800b9cc:	200004f9 	.word	0x200004f9

0800b9d0 <__sinit_lock_acquire>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <__sinit_lock_acquire+0x8>)
 800b9d2:	f000 b8ac 	b.w	800bb2e <__retarget_lock_acquire_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	200004fa 	.word	0x200004fa

0800b9dc <__sinit_lock_release>:
 800b9dc:	4801      	ldr	r0, [pc, #4]	; (800b9e4 <__sinit_lock_release+0x8>)
 800b9de:	f000 b8a7 	b.w	800bb30 <__retarget_lock_release_recursive>
 800b9e2:	bf00      	nop
 800b9e4:	200004fa 	.word	0x200004fa

0800b9e8 <__sinit>:
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	f7ff fff0 	bl	800b9d0 <__sinit_lock_acquire>
 800b9f0:	69a3      	ldr	r3, [r4, #24]
 800b9f2:	b11b      	cbz	r3, 800b9fc <__sinit+0x14>
 800b9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9f8:	f7ff bff0 	b.w	800b9dc <__sinit_lock_release>
 800b9fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba00:	6523      	str	r3, [r4, #80]	; 0x50
 800ba02:	4b13      	ldr	r3, [pc, #76]	; (800ba50 <__sinit+0x68>)
 800ba04:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <__sinit+0x6c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba0a:	42a3      	cmp	r3, r4
 800ba0c:	bf04      	itt	eq
 800ba0e:	2301      	moveq	r3, #1
 800ba10:	61a3      	streq	r3, [r4, #24]
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 f820 	bl	800ba58 <__sfp>
 800ba18:	6060      	str	r0, [r4, #4]
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f000 f81c 	bl	800ba58 <__sfp>
 800ba20:	60a0      	str	r0, [r4, #8]
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 f818 	bl	800ba58 <__sfp>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	60e0      	str	r0, [r4, #12]
 800ba2c:	2104      	movs	r1, #4
 800ba2e:	6860      	ldr	r0, [r4, #4]
 800ba30:	f7ff ff82 	bl	800b938 <std>
 800ba34:	68a0      	ldr	r0, [r4, #8]
 800ba36:	2201      	movs	r2, #1
 800ba38:	2109      	movs	r1, #9
 800ba3a:	f7ff ff7d 	bl	800b938 <std>
 800ba3e:	68e0      	ldr	r0, [r4, #12]
 800ba40:	2202      	movs	r2, #2
 800ba42:	2112      	movs	r1, #18
 800ba44:	f7ff ff78 	bl	800b938 <std>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	61a3      	str	r3, [r4, #24]
 800ba4c:	e7d2      	b.n	800b9f4 <__sinit+0xc>
 800ba4e:	bf00      	nop
 800ba50:	0800db64 	.word	0x0800db64
 800ba54:	0800b981 	.word	0x0800b981

0800ba58 <__sfp>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	4607      	mov	r7, r0
 800ba5c:	f7ff ffac 	bl	800b9b8 <__sfp_lock_acquire>
 800ba60:	4b1e      	ldr	r3, [pc, #120]	; (800badc <__sfp+0x84>)
 800ba62:	681e      	ldr	r6, [r3, #0]
 800ba64:	69b3      	ldr	r3, [r6, #24]
 800ba66:	b913      	cbnz	r3, 800ba6e <__sfp+0x16>
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f7ff ffbd 	bl	800b9e8 <__sinit>
 800ba6e:	3648      	adds	r6, #72	; 0x48
 800ba70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	d503      	bpl.n	800ba80 <__sfp+0x28>
 800ba78:	6833      	ldr	r3, [r6, #0]
 800ba7a:	b30b      	cbz	r3, 800bac0 <__sfp+0x68>
 800ba7c:	6836      	ldr	r6, [r6, #0]
 800ba7e:	e7f7      	b.n	800ba70 <__sfp+0x18>
 800ba80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba84:	b9d5      	cbnz	r5, 800babc <__sfp+0x64>
 800ba86:	4b16      	ldr	r3, [pc, #88]	; (800bae0 <__sfp+0x88>)
 800ba88:	60e3      	str	r3, [r4, #12]
 800ba8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba8e:	6665      	str	r5, [r4, #100]	; 0x64
 800ba90:	f000 f84c 	bl	800bb2c <__retarget_lock_init_recursive>
 800ba94:	f7ff ff96 	bl	800b9c4 <__sfp_lock_release>
 800ba98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800baa0:	6025      	str	r5, [r4, #0]
 800baa2:	61a5      	str	r5, [r4, #24]
 800baa4:	2208      	movs	r2, #8
 800baa6:	4629      	mov	r1, r5
 800baa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800baac:	f7fe fa46 	bl	8009f3c <memset>
 800bab0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bab4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bab8:	4620      	mov	r0, r4
 800baba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800babc:	3468      	adds	r4, #104	; 0x68
 800babe:	e7d9      	b.n	800ba74 <__sfp+0x1c>
 800bac0:	2104      	movs	r1, #4
 800bac2:	4638      	mov	r0, r7
 800bac4:	f7ff ff62 	bl	800b98c <__sfmoreglue>
 800bac8:	4604      	mov	r4, r0
 800baca:	6030      	str	r0, [r6, #0]
 800bacc:	2800      	cmp	r0, #0
 800bace:	d1d5      	bne.n	800ba7c <__sfp+0x24>
 800bad0:	f7ff ff78 	bl	800b9c4 <__sfp_lock_release>
 800bad4:	230c      	movs	r3, #12
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	e7ee      	b.n	800bab8 <__sfp+0x60>
 800bada:	bf00      	nop
 800badc:	0800db64 	.word	0x0800db64
 800bae0:	ffff0001 	.word	0xffff0001

0800bae4 <_fwalk_reent>:
 800bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	4606      	mov	r6, r0
 800baea:	4688      	mov	r8, r1
 800baec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800baf0:	2700      	movs	r7, #0
 800baf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baf6:	f1b9 0901 	subs.w	r9, r9, #1
 800bafa:	d505      	bpl.n	800bb08 <_fwalk_reent+0x24>
 800bafc:	6824      	ldr	r4, [r4, #0]
 800bafe:	2c00      	cmp	r4, #0
 800bb00:	d1f7      	bne.n	800baf2 <_fwalk_reent+0xe>
 800bb02:	4638      	mov	r0, r7
 800bb04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb08:	89ab      	ldrh	r3, [r5, #12]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d907      	bls.n	800bb1e <_fwalk_reent+0x3a>
 800bb0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb12:	3301      	adds	r3, #1
 800bb14:	d003      	beq.n	800bb1e <_fwalk_reent+0x3a>
 800bb16:	4629      	mov	r1, r5
 800bb18:	4630      	mov	r0, r6
 800bb1a:	47c0      	blx	r8
 800bb1c:	4307      	orrs	r7, r0
 800bb1e:	3568      	adds	r5, #104	; 0x68
 800bb20:	e7e9      	b.n	800baf6 <_fwalk_reent+0x12>
	...

0800bb24 <_localeconv_r>:
 800bb24:	4800      	ldr	r0, [pc, #0]	; (800bb28 <_localeconv_r+0x4>)
 800bb26:	4770      	bx	lr
 800bb28:	20000164 	.word	0x20000164

0800bb2c <__retarget_lock_init_recursive>:
 800bb2c:	4770      	bx	lr

0800bb2e <__retarget_lock_acquire_recursive>:
 800bb2e:	4770      	bx	lr

0800bb30 <__retarget_lock_release_recursive>:
 800bb30:	4770      	bx	lr

0800bb32 <__swhatbuf_r>:
 800bb32:	b570      	push	{r4, r5, r6, lr}
 800bb34:	460e      	mov	r6, r1
 800bb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb3a:	2900      	cmp	r1, #0
 800bb3c:	b096      	sub	sp, #88	; 0x58
 800bb3e:	4614      	mov	r4, r2
 800bb40:	461d      	mov	r5, r3
 800bb42:	da08      	bge.n	800bb56 <__swhatbuf_r+0x24>
 800bb44:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	602a      	str	r2, [r5, #0]
 800bb4c:	061a      	lsls	r2, r3, #24
 800bb4e:	d410      	bmi.n	800bb72 <__swhatbuf_r+0x40>
 800bb50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb54:	e00e      	b.n	800bb74 <__swhatbuf_r+0x42>
 800bb56:	466a      	mov	r2, sp
 800bb58:	f000 fee0 	bl	800c91c <_fstat_r>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	dbf1      	blt.n	800bb44 <__swhatbuf_r+0x12>
 800bb60:	9a01      	ldr	r2, [sp, #4]
 800bb62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb6a:	425a      	negs	r2, r3
 800bb6c:	415a      	adcs	r2, r3
 800bb6e:	602a      	str	r2, [r5, #0]
 800bb70:	e7ee      	b.n	800bb50 <__swhatbuf_r+0x1e>
 800bb72:	2340      	movs	r3, #64	; 0x40
 800bb74:	2000      	movs	r0, #0
 800bb76:	6023      	str	r3, [r4, #0]
 800bb78:	b016      	add	sp, #88	; 0x58
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}

0800bb7c <__smakebuf_r>:
 800bb7c:	898b      	ldrh	r3, [r1, #12]
 800bb7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb80:	079d      	lsls	r5, r3, #30
 800bb82:	4606      	mov	r6, r0
 800bb84:	460c      	mov	r4, r1
 800bb86:	d507      	bpl.n	800bb98 <__smakebuf_r+0x1c>
 800bb88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	6123      	str	r3, [r4, #16]
 800bb90:	2301      	movs	r3, #1
 800bb92:	6163      	str	r3, [r4, #20]
 800bb94:	b002      	add	sp, #8
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	ab01      	add	r3, sp, #4
 800bb9a:	466a      	mov	r2, sp
 800bb9c:	f7ff ffc9 	bl	800bb32 <__swhatbuf_r>
 800bba0:	9900      	ldr	r1, [sp, #0]
 800bba2:	4605      	mov	r5, r0
 800bba4:	4630      	mov	r0, r6
 800bba6:	f000 fc45 	bl	800c434 <_malloc_r>
 800bbaa:	b948      	cbnz	r0, 800bbc0 <__smakebuf_r+0x44>
 800bbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb0:	059a      	lsls	r2, r3, #22
 800bbb2:	d4ef      	bmi.n	800bb94 <__smakebuf_r+0x18>
 800bbb4:	f023 0303 	bic.w	r3, r3, #3
 800bbb8:	f043 0302 	orr.w	r3, r3, #2
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	e7e3      	b.n	800bb88 <__smakebuf_r+0xc>
 800bbc0:	4b0d      	ldr	r3, [pc, #52]	; (800bbf8 <__smakebuf_r+0x7c>)
 800bbc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	6020      	str	r0, [r4, #0]
 800bbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	9b00      	ldr	r3, [sp, #0]
 800bbd0:	6163      	str	r3, [r4, #20]
 800bbd2:	9b01      	ldr	r3, [sp, #4]
 800bbd4:	6120      	str	r0, [r4, #16]
 800bbd6:	b15b      	cbz	r3, 800bbf0 <__smakebuf_r+0x74>
 800bbd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f000 feaf 	bl	800c940 <_isatty_r>
 800bbe2:	b128      	cbz	r0, 800bbf0 <__smakebuf_r+0x74>
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	f023 0303 	bic.w	r3, r3, #3
 800bbea:	f043 0301 	orr.w	r3, r3, #1
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	89a0      	ldrh	r0, [r4, #12]
 800bbf2:	4305      	orrs	r5, r0
 800bbf4:	81a5      	strh	r5, [r4, #12]
 800bbf6:	e7cd      	b.n	800bb94 <__smakebuf_r+0x18>
 800bbf8:	0800b981 	.word	0x0800b981

0800bbfc <malloc>:
 800bbfc:	4b02      	ldr	r3, [pc, #8]	; (800bc08 <malloc+0xc>)
 800bbfe:	4601      	mov	r1, r0
 800bc00:	6818      	ldr	r0, [r3, #0]
 800bc02:	f000 bc17 	b.w	800c434 <_malloc_r>
 800bc06:	bf00      	nop
 800bc08:	20000010 	.word	0x20000010

0800bc0c <memcpy>:
 800bc0c:	440a      	add	r2, r1
 800bc0e:	4291      	cmp	r1, r2
 800bc10:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc14:	d100      	bne.n	800bc18 <memcpy+0xc>
 800bc16:	4770      	bx	lr
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc22:	4291      	cmp	r1, r2
 800bc24:	d1f9      	bne.n	800bc1a <memcpy+0xe>
 800bc26:	bd10      	pop	{r4, pc}

0800bc28 <_Balloc>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	460d      	mov	r5, r1
 800bc30:	b976      	cbnz	r6, 800bc50 <_Balloc+0x28>
 800bc32:	2010      	movs	r0, #16
 800bc34:	f7ff ffe2 	bl	800bbfc <malloc>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	6260      	str	r0, [r4, #36]	; 0x24
 800bc3c:	b920      	cbnz	r0, 800bc48 <_Balloc+0x20>
 800bc3e:	4b18      	ldr	r3, [pc, #96]	; (800bca0 <_Balloc+0x78>)
 800bc40:	4818      	ldr	r0, [pc, #96]	; (800bca4 <_Balloc+0x7c>)
 800bc42:	2166      	movs	r1, #102	; 0x66
 800bc44:	f000 fe2a 	bl	800c89c <__assert_func>
 800bc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc4c:	6006      	str	r6, [r0, #0]
 800bc4e:	60c6      	str	r6, [r0, #12]
 800bc50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc52:	68f3      	ldr	r3, [r6, #12]
 800bc54:	b183      	cbz	r3, 800bc78 <_Balloc+0x50>
 800bc56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc5e:	b9b8      	cbnz	r0, 800bc90 <_Balloc+0x68>
 800bc60:	2101      	movs	r1, #1
 800bc62:	fa01 f605 	lsl.w	r6, r1, r5
 800bc66:	1d72      	adds	r2, r6, #5
 800bc68:	0092      	lsls	r2, r2, #2
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 fb60 	bl	800c330 <_calloc_r>
 800bc70:	b160      	cbz	r0, 800bc8c <_Balloc+0x64>
 800bc72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc76:	e00e      	b.n	800bc96 <_Balloc+0x6e>
 800bc78:	2221      	movs	r2, #33	; 0x21
 800bc7a:	2104      	movs	r1, #4
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f000 fb57 	bl	800c330 <_calloc_r>
 800bc82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc84:	60f0      	str	r0, [r6, #12]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1e4      	bne.n	800bc56 <_Balloc+0x2e>
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
 800bc90:	6802      	ldr	r2, [r0, #0]
 800bc92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc96:	2300      	movs	r3, #0
 800bc98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc9c:	e7f7      	b.n	800bc8e <_Balloc+0x66>
 800bc9e:	bf00      	nop
 800bca0:	0800dba9 	.word	0x0800dba9
 800bca4:	0800dc8c 	.word	0x0800dc8c

0800bca8 <_Bfree>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcac:	4605      	mov	r5, r0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	b976      	cbnz	r6, 800bcd0 <_Bfree+0x28>
 800bcb2:	2010      	movs	r0, #16
 800bcb4:	f7ff ffa2 	bl	800bbfc <malloc>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	6268      	str	r0, [r5, #36]	; 0x24
 800bcbc:	b920      	cbnz	r0, 800bcc8 <_Bfree+0x20>
 800bcbe:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <_Bfree+0x3c>)
 800bcc0:	4809      	ldr	r0, [pc, #36]	; (800bce8 <_Bfree+0x40>)
 800bcc2:	218a      	movs	r1, #138	; 0x8a
 800bcc4:	f000 fdea 	bl	800c89c <__assert_func>
 800bcc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bccc:	6006      	str	r6, [r0, #0]
 800bcce:	60c6      	str	r6, [r0, #12]
 800bcd0:	b13c      	cbz	r4, 800bce2 <_Bfree+0x3a>
 800bcd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcd4:	6862      	ldr	r2, [r4, #4]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcdc:	6021      	str	r1, [r4, #0]
 800bcde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bce2:	bd70      	pop	{r4, r5, r6, pc}
 800bce4:	0800dba9 	.word	0x0800dba9
 800bce8:	0800dc8c 	.word	0x0800dc8c

0800bcec <__multadd>:
 800bcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf0:	690d      	ldr	r5, [r1, #16]
 800bcf2:	4607      	mov	r7, r0
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	461e      	mov	r6, r3
 800bcf8:	f101 0c14 	add.w	ip, r1, #20
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f8dc 3000 	ldr.w	r3, [ip]
 800bd02:	b299      	uxth	r1, r3
 800bd04:	fb02 6101 	mla	r1, r2, r1, r6
 800bd08:	0c1e      	lsrs	r6, r3, #16
 800bd0a:	0c0b      	lsrs	r3, r1, #16
 800bd0c:	fb02 3306 	mla	r3, r2, r6, r3
 800bd10:	b289      	uxth	r1, r1
 800bd12:	3001      	adds	r0, #1
 800bd14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd18:	4285      	cmp	r5, r0
 800bd1a:	f84c 1b04 	str.w	r1, [ip], #4
 800bd1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd22:	dcec      	bgt.n	800bcfe <__multadd+0x12>
 800bd24:	b30e      	cbz	r6, 800bd6a <__multadd+0x7e>
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	42ab      	cmp	r3, r5
 800bd2a:	dc19      	bgt.n	800bd60 <__multadd+0x74>
 800bd2c:	6861      	ldr	r1, [r4, #4]
 800bd2e:	4638      	mov	r0, r7
 800bd30:	3101      	adds	r1, #1
 800bd32:	f7ff ff79 	bl	800bc28 <_Balloc>
 800bd36:	4680      	mov	r8, r0
 800bd38:	b928      	cbnz	r0, 800bd46 <__multadd+0x5a>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <__multadd+0x84>)
 800bd3e:	480d      	ldr	r0, [pc, #52]	; (800bd74 <__multadd+0x88>)
 800bd40:	21b5      	movs	r1, #181	; 0xb5
 800bd42:	f000 fdab 	bl	800c89c <__assert_func>
 800bd46:	6922      	ldr	r2, [r4, #16]
 800bd48:	3202      	adds	r2, #2
 800bd4a:	f104 010c 	add.w	r1, r4, #12
 800bd4e:	0092      	lsls	r2, r2, #2
 800bd50:	300c      	adds	r0, #12
 800bd52:	f7ff ff5b 	bl	800bc0c <memcpy>
 800bd56:	4621      	mov	r1, r4
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f7ff ffa5 	bl	800bca8 <_Bfree>
 800bd5e:	4644      	mov	r4, r8
 800bd60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd64:	3501      	adds	r5, #1
 800bd66:	615e      	str	r6, [r3, #20]
 800bd68:	6125      	str	r5, [r4, #16]
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd70:	0800dc1b 	.word	0x0800dc1b
 800bd74:	0800dc8c 	.word	0x0800dc8c

0800bd78 <__hi0bits>:
 800bd78:	0c03      	lsrs	r3, r0, #16
 800bd7a:	041b      	lsls	r3, r3, #16
 800bd7c:	b9d3      	cbnz	r3, 800bdb4 <__hi0bits+0x3c>
 800bd7e:	0400      	lsls	r0, r0, #16
 800bd80:	2310      	movs	r3, #16
 800bd82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd86:	bf04      	itt	eq
 800bd88:	0200      	lsleq	r0, r0, #8
 800bd8a:	3308      	addeq	r3, #8
 800bd8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd90:	bf04      	itt	eq
 800bd92:	0100      	lsleq	r0, r0, #4
 800bd94:	3304      	addeq	r3, #4
 800bd96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd9a:	bf04      	itt	eq
 800bd9c:	0080      	lsleq	r0, r0, #2
 800bd9e:	3302      	addeq	r3, #2
 800bda0:	2800      	cmp	r0, #0
 800bda2:	db05      	blt.n	800bdb0 <__hi0bits+0x38>
 800bda4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bda8:	f103 0301 	add.w	r3, r3, #1
 800bdac:	bf08      	it	eq
 800bdae:	2320      	moveq	r3, #32
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	4770      	bx	lr
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	e7e4      	b.n	800bd82 <__hi0bits+0xa>

0800bdb8 <__lo0bits>:
 800bdb8:	6803      	ldr	r3, [r0, #0]
 800bdba:	f013 0207 	ands.w	r2, r3, #7
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	d00b      	beq.n	800bdda <__lo0bits+0x22>
 800bdc2:	07da      	lsls	r2, r3, #31
 800bdc4:	d423      	bmi.n	800be0e <__lo0bits+0x56>
 800bdc6:	0798      	lsls	r0, r3, #30
 800bdc8:	bf49      	itett	mi
 800bdca:	085b      	lsrmi	r3, r3, #1
 800bdcc:	089b      	lsrpl	r3, r3, #2
 800bdce:	2001      	movmi	r0, #1
 800bdd0:	600b      	strmi	r3, [r1, #0]
 800bdd2:	bf5c      	itt	pl
 800bdd4:	600b      	strpl	r3, [r1, #0]
 800bdd6:	2002      	movpl	r0, #2
 800bdd8:	4770      	bx	lr
 800bdda:	b298      	uxth	r0, r3
 800bddc:	b9a8      	cbnz	r0, 800be0a <__lo0bits+0x52>
 800bdde:	0c1b      	lsrs	r3, r3, #16
 800bde0:	2010      	movs	r0, #16
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	b90a      	cbnz	r2, 800bdea <__lo0bits+0x32>
 800bde6:	3008      	adds	r0, #8
 800bde8:	0a1b      	lsrs	r3, r3, #8
 800bdea:	071a      	lsls	r2, r3, #28
 800bdec:	bf04      	itt	eq
 800bdee:	091b      	lsreq	r3, r3, #4
 800bdf0:	3004      	addeq	r0, #4
 800bdf2:	079a      	lsls	r2, r3, #30
 800bdf4:	bf04      	itt	eq
 800bdf6:	089b      	lsreq	r3, r3, #2
 800bdf8:	3002      	addeq	r0, #2
 800bdfa:	07da      	lsls	r2, r3, #31
 800bdfc:	d403      	bmi.n	800be06 <__lo0bits+0x4e>
 800bdfe:	085b      	lsrs	r3, r3, #1
 800be00:	f100 0001 	add.w	r0, r0, #1
 800be04:	d005      	beq.n	800be12 <__lo0bits+0x5a>
 800be06:	600b      	str	r3, [r1, #0]
 800be08:	4770      	bx	lr
 800be0a:	4610      	mov	r0, r2
 800be0c:	e7e9      	b.n	800bde2 <__lo0bits+0x2a>
 800be0e:	2000      	movs	r0, #0
 800be10:	4770      	bx	lr
 800be12:	2020      	movs	r0, #32
 800be14:	4770      	bx	lr
	...

0800be18 <__i2b>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	460c      	mov	r4, r1
 800be1c:	2101      	movs	r1, #1
 800be1e:	f7ff ff03 	bl	800bc28 <_Balloc>
 800be22:	4602      	mov	r2, r0
 800be24:	b928      	cbnz	r0, 800be32 <__i2b+0x1a>
 800be26:	4b05      	ldr	r3, [pc, #20]	; (800be3c <__i2b+0x24>)
 800be28:	4805      	ldr	r0, [pc, #20]	; (800be40 <__i2b+0x28>)
 800be2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be2e:	f000 fd35 	bl	800c89c <__assert_func>
 800be32:	2301      	movs	r3, #1
 800be34:	6144      	str	r4, [r0, #20]
 800be36:	6103      	str	r3, [r0, #16]
 800be38:	bd10      	pop	{r4, pc}
 800be3a:	bf00      	nop
 800be3c:	0800dc1b 	.word	0x0800dc1b
 800be40:	0800dc8c 	.word	0x0800dc8c

0800be44 <__multiply>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	4691      	mov	r9, r2
 800be4a:	690a      	ldr	r2, [r1, #16]
 800be4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be50:	429a      	cmp	r2, r3
 800be52:	bfb8      	it	lt
 800be54:	460b      	movlt	r3, r1
 800be56:	460c      	mov	r4, r1
 800be58:	bfbc      	itt	lt
 800be5a:	464c      	movlt	r4, r9
 800be5c:	4699      	movlt	r9, r3
 800be5e:	6927      	ldr	r7, [r4, #16]
 800be60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be64:	68a3      	ldr	r3, [r4, #8]
 800be66:	6861      	ldr	r1, [r4, #4]
 800be68:	eb07 060a 	add.w	r6, r7, sl
 800be6c:	42b3      	cmp	r3, r6
 800be6e:	b085      	sub	sp, #20
 800be70:	bfb8      	it	lt
 800be72:	3101      	addlt	r1, #1
 800be74:	f7ff fed8 	bl	800bc28 <_Balloc>
 800be78:	b930      	cbnz	r0, 800be88 <__multiply+0x44>
 800be7a:	4602      	mov	r2, r0
 800be7c:	4b44      	ldr	r3, [pc, #272]	; (800bf90 <__multiply+0x14c>)
 800be7e:	4845      	ldr	r0, [pc, #276]	; (800bf94 <__multiply+0x150>)
 800be80:	f240 115d 	movw	r1, #349	; 0x15d
 800be84:	f000 fd0a 	bl	800c89c <__assert_func>
 800be88:	f100 0514 	add.w	r5, r0, #20
 800be8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be90:	462b      	mov	r3, r5
 800be92:	2200      	movs	r2, #0
 800be94:	4543      	cmp	r3, r8
 800be96:	d321      	bcc.n	800bedc <__multiply+0x98>
 800be98:	f104 0314 	add.w	r3, r4, #20
 800be9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bea0:	f109 0314 	add.w	r3, r9, #20
 800bea4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bea8:	9202      	str	r2, [sp, #8]
 800beaa:	1b3a      	subs	r2, r7, r4
 800beac:	3a15      	subs	r2, #21
 800beae:	f022 0203 	bic.w	r2, r2, #3
 800beb2:	3204      	adds	r2, #4
 800beb4:	f104 0115 	add.w	r1, r4, #21
 800beb8:	428f      	cmp	r7, r1
 800beba:	bf38      	it	cc
 800bebc:	2204      	movcc	r2, #4
 800bebe:	9201      	str	r2, [sp, #4]
 800bec0:	9a02      	ldr	r2, [sp, #8]
 800bec2:	9303      	str	r3, [sp, #12]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d80c      	bhi.n	800bee2 <__multiply+0x9e>
 800bec8:	2e00      	cmp	r6, #0
 800beca:	dd03      	ble.n	800bed4 <__multiply+0x90>
 800becc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d05a      	beq.n	800bf8a <__multiply+0x146>
 800bed4:	6106      	str	r6, [r0, #16]
 800bed6:	b005      	add	sp, #20
 800bed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bedc:	f843 2b04 	str.w	r2, [r3], #4
 800bee0:	e7d8      	b.n	800be94 <__multiply+0x50>
 800bee2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bee6:	f1ba 0f00 	cmp.w	sl, #0
 800beea:	d024      	beq.n	800bf36 <__multiply+0xf2>
 800beec:	f104 0e14 	add.w	lr, r4, #20
 800bef0:	46a9      	mov	r9, r5
 800bef2:	f04f 0c00 	mov.w	ip, #0
 800bef6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800befa:	f8d9 1000 	ldr.w	r1, [r9]
 800befe:	fa1f fb82 	uxth.w	fp, r2
 800bf02:	b289      	uxth	r1, r1
 800bf04:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf0c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf10:	4461      	add	r1, ip
 800bf12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf16:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf1e:	b289      	uxth	r1, r1
 800bf20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf24:	4577      	cmp	r7, lr
 800bf26:	f849 1b04 	str.w	r1, [r9], #4
 800bf2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf2e:	d8e2      	bhi.n	800bef6 <__multiply+0xb2>
 800bf30:	9a01      	ldr	r2, [sp, #4]
 800bf32:	f845 c002 	str.w	ip, [r5, r2]
 800bf36:	9a03      	ldr	r2, [sp, #12]
 800bf38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	f1b9 0f00 	cmp.w	r9, #0
 800bf42:	d020      	beq.n	800bf86 <__multiply+0x142>
 800bf44:	6829      	ldr	r1, [r5, #0]
 800bf46:	f104 0c14 	add.w	ip, r4, #20
 800bf4a:	46ae      	mov	lr, r5
 800bf4c:	f04f 0a00 	mov.w	sl, #0
 800bf50:	f8bc b000 	ldrh.w	fp, [ip]
 800bf54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf58:	fb09 220b 	mla	r2, r9, fp, r2
 800bf5c:	4492      	add	sl, r2
 800bf5e:	b289      	uxth	r1, r1
 800bf60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf64:	f84e 1b04 	str.w	r1, [lr], #4
 800bf68:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf6c:	f8be 1000 	ldrh.w	r1, [lr]
 800bf70:	0c12      	lsrs	r2, r2, #16
 800bf72:	fb09 1102 	mla	r1, r9, r2, r1
 800bf76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bf7a:	4567      	cmp	r7, ip
 800bf7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf80:	d8e6      	bhi.n	800bf50 <__multiply+0x10c>
 800bf82:	9a01      	ldr	r2, [sp, #4]
 800bf84:	50a9      	str	r1, [r5, r2]
 800bf86:	3504      	adds	r5, #4
 800bf88:	e79a      	b.n	800bec0 <__multiply+0x7c>
 800bf8a:	3e01      	subs	r6, #1
 800bf8c:	e79c      	b.n	800bec8 <__multiply+0x84>
 800bf8e:	bf00      	nop
 800bf90:	0800dc1b 	.word	0x0800dc1b
 800bf94:	0800dc8c 	.word	0x0800dc8c

0800bf98 <__pow5mult>:
 800bf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf9c:	4615      	mov	r5, r2
 800bf9e:	f012 0203 	ands.w	r2, r2, #3
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	460f      	mov	r7, r1
 800bfa6:	d007      	beq.n	800bfb8 <__pow5mult+0x20>
 800bfa8:	4c25      	ldr	r4, [pc, #148]	; (800c040 <__pow5mult+0xa8>)
 800bfaa:	3a01      	subs	r2, #1
 800bfac:	2300      	movs	r3, #0
 800bfae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfb2:	f7ff fe9b 	bl	800bcec <__multadd>
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	10ad      	asrs	r5, r5, #2
 800bfba:	d03d      	beq.n	800c038 <__pow5mult+0xa0>
 800bfbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bfbe:	b97c      	cbnz	r4, 800bfe0 <__pow5mult+0x48>
 800bfc0:	2010      	movs	r0, #16
 800bfc2:	f7ff fe1b 	bl	800bbfc <malloc>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	6270      	str	r0, [r6, #36]	; 0x24
 800bfca:	b928      	cbnz	r0, 800bfd8 <__pow5mult+0x40>
 800bfcc:	4b1d      	ldr	r3, [pc, #116]	; (800c044 <__pow5mult+0xac>)
 800bfce:	481e      	ldr	r0, [pc, #120]	; (800c048 <__pow5mult+0xb0>)
 800bfd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfd4:	f000 fc62 	bl	800c89c <__assert_func>
 800bfd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfdc:	6004      	str	r4, [r0, #0]
 800bfde:	60c4      	str	r4, [r0, #12]
 800bfe0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bfe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfe8:	b94c      	cbnz	r4, 800bffe <__pow5mult+0x66>
 800bfea:	f240 2171 	movw	r1, #625	; 0x271
 800bfee:	4630      	mov	r0, r6
 800bff0:	f7ff ff12 	bl	800be18 <__i2b>
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bffa:	4604      	mov	r4, r0
 800bffc:	6003      	str	r3, [r0, #0]
 800bffe:	f04f 0900 	mov.w	r9, #0
 800c002:	07eb      	lsls	r3, r5, #31
 800c004:	d50a      	bpl.n	800c01c <__pow5mult+0x84>
 800c006:	4639      	mov	r1, r7
 800c008:	4622      	mov	r2, r4
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7ff ff1a 	bl	800be44 <__multiply>
 800c010:	4639      	mov	r1, r7
 800c012:	4680      	mov	r8, r0
 800c014:	4630      	mov	r0, r6
 800c016:	f7ff fe47 	bl	800bca8 <_Bfree>
 800c01a:	4647      	mov	r7, r8
 800c01c:	106d      	asrs	r5, r5, #1
 800c01e:	d00b      	beq.n	800c038 <__pow5mult+0xa0>
 800c020:	6820      	ldr	r0, [r4, #0]
 800c022:	b938      	cbnz	r0, 800c034 <__pow5mult+0x9c>
 800c024:	4622      	mov	r2, r4
 800c026:	4621      	mov	r1, r4
 800c028:	4630      	mov	r0, r6
 800c02a:	f7ff ff0b 	bl	800be44 <__multiply>
 800c02e:	6020      	str	r0, [r4, #0]
 800c030:	f8c0 9000 	str.w	r9, [r0]
 800c034:	4604      	mov	r4, r0
 800c036:	e7e4      	b.n	800c002 <__pow5mult+0x6a>
 800c038:	4638      	mov	r0, r7
 800c03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c03e:	bf00      	nop
 800c040:	0800ddd8 	.word	0x0800ddd8
 800c044:	0800dba9 	.word	0x0800dba9
 800c048:	0800dc8c 	.word	0x0800dc8c

0800c04c <__lshift>:
 800c04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c050:	460c      	mov	r4, r1
 800c052:	6849      	ldr	r1, [r1, #4]
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c05a:	68a3      	ldr	r3, [r4, #8]
 800c05c:	4607      	mov	r7, r0
 800c05e:	4691      	mov	r9, r2
 800c060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c064:	f108 0601 	add.w	r6, r8, #1
 800c068:	42b3      	cmp	r3, r6
 800c06a:	db0b      	blt.n	800c084 <__lshift+0x38>
 800c06c:	4638      	mov	r0, r7
 800c06e:	f7ff fddb 	bl	800bc28 <_Balloc>
 800c072:	4605      	mov	r5, r0
 800c074:	b948      	cbnz	r0, 800c08a <__lshift+0x3e>
 800c076:	4602      	mov	r2, r0
 800c078:	4b2a      	ldr	r3, [pc, #168]	; (800c124 <__lshift+0xd8>)
 800c07a:	482b      	ldr	r0, [pc, #172]	; (800c128 <__lshift+0xdc>)
 800c07c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c080:	f000 fc0c 	bl	800c89c <__assert_func>
 800c084:	3101      	adds	r1, #1
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	e7ee      	b.n	800c068 <__lshift+0x1c>
 800c08a:	2300      	movs	r3, #0
 800c08c:	f100 0114 	add.w	r1, r0, #20
 800c090:	f100 0210 	add.w	r2, r0, #16
 800c094:	4618      	mov	r0, r3
 800c096:	4553      	cmp	r3, sl
 800c098:	db37      	blt.n	800c10a <__lshift+0xbe>
 800c09a:	6920      	ldr	r0, [r4, #16]
 800c09c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0a0:	f104 0314 	add.w	r3, r4, #20
 800c0a4:	f019 091f 	ands.w	r9, r9, #31
 800c0a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c0b0:	d02f      	beq.n	800c112 <__lshift+0xc6>
 800c0b2:	f1c9 0e20 	rsb	lr, r9, #32
 800c0b6:	468a      	mov	sl, r1
 800c0b8:	f04f 0c00 	mov.w	ip, #0
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	fa02 f209 	lsl.w	r2, r2, r9
 800c0c2:	ea42 020c 	orr.w	r2, r2, ip
 800c0c6:	f84a 2b04 	str.w	r2, [sl], #4
 800c0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ce:	4298      	cmp	r0, r3
 800c0d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c0d4:	d8f2      	bhi.n	800c0bc <__lshift+0x70>
 800c0d6:	1b03      	subs	r3, r0, r4
 800c0d8:	3b15      	subs	r3, #21
 800c0da:	f023 0303 	bic.w	r3, r3, #3
 800c0de:	3304      	adds	r3, #4
 800c0e0:	f104 0215 	add.w	r2, r4, #21
 800c0e4:	4290      	cmp	r0, r2
 800c0e6:	bf38      	it	cc
 800c0e8:	2304      	movcc	r3, #4
 800c0ea:	f841 c003 	str.w	ip, [r1, r3]
 800c0ee:	f1bc 0f00 	cmp.w	ip, #0
 800c0f2:	d001      	beq.n	800c0f8 <__lshift+0xac>
 800c0f4:	f108 0602 	add.w	r6, r8, #2
 800c0f8:	3e01      	subs	r6, #1
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	612e      	str	r6, [r5, #16]
 800c0fe:	4621      	mov	r1, r4
 800c100:	f7ff fdd2 	bl	800bca8 <_Bfree>
 800c104:	4628      	mov	r0, r5
 800c106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c10e:	3301      	adds	r3, #1
 800c110:	e7c1      	b.n	800c096 <__lshift+0x4a>
 800c112:	3904      	subs	r1, #4
 800c114:	f853 2b04 	ldr.w	r2, [r3], #4
 800c118:	f841 2f04 	str.w	r2, [r1, #4]!
 800c11c:	4298      	cmp	r0, r3
 800c11e:	d8f9      	bhi.n	800c114 <__lshift+0xc8>
 800c120:	e7ea      	b.n	800c0f8 <__lshift+0xac>
 800c122:	bf00      	nop
 800c124:	0800dc1b 	.word	0x0800dc1b
 800c128:	0800dc8c 	.word	0x0800dc8c

0800c12c <__mcmp>:
 800c12c:	b530      	push	{r4, r5, lr}
 800c12e:	6902      	ldr	r2, [r0, #16]
 800c130:	690c      	ldr	r4, [r1, #16]
 800c132:	1b12      	subs	r2, r2, r4
 800c134:	d10e      	bne.n	800c154 <__mcmp+0x28>
 800c136:	f100 0314 	add.w	r3, r0, #20
 800c13a:	3114      	adds	r1, #20
 800c13c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c140:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c144:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c148:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c14c:	42a5      	cmp	r5, r4
 800c14e:	d003      	beq.n	800c158 <__mcmp+0x2c>
 800c150:	d305      	bcc.n	800c15e <__mcmp+0x32>
 800c152:	2201      	movs	r2, #1
 800c154:	4610      	mov	r0, r2
 800c156:	bd30      	pop	{r4, r5, pc}
 800c158:	4283      	cmp	r3, r0
 800c15a:	d3f3      	bcc.n	800c144 <__mcmp+0x18>
 800c15c:	e7fa      	b.n	800c154 <__mcmp+0x28>
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295
 800c162:	e7f7      	b.n	800c154 <__mcmp+0x28>

0800c164 <__mdiff>:
 800c164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c168:	460c      	mov	r4, r1
 800c16a:	4606      	mov	r6, r0
 800c16c:	4611      	mov	r1, r2
 800c16e:	4620      	mov	r0, r4
 800c170:	4690      	mov	r8, r2
 800c172:	f7ff ffdb 	bl	800c12c <__mcmp>
 800c176:	1e05      	subs	r5, r0, #0
 800c178:	d110      	bne.n	800c19c <__mdiff+0x38>
 800c17a:	4629      	mov	r1, r5
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7ff fd53 	bl	800bc28 <_Balloc>
 800c182:	b930      	cbnz	r0, 800c192 <__mdiff+0x2e>
 800c184:	4b3a      	ldr	r3, [pc, #232]	; (800c270 <__mdiff+0x10c>)
 800c186:	4602      	mov	r2, r0
 800c188:	f240 2132 	movw	r1, #562	; 0x232
 800c18c:	4839      	ldr	r0, [pc, #228]	; (800c274 <__mdiff+0x110>)
 800c18e:	f000 fb85 	bl	800c89c <__assert_func>
 800c192:	2301      	movs	r3, #1
 800c194:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19c:	bfa4      	itt	ge
 800c19e:	4643      	movge	r3, r8
 800c1a0:	46a0      	movge	r8, r4
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1a8:	bfa6      	itte	ge
 800c1aa:	461c      	movge	r4, r3
 800c1ac:	2500      	movge	r5, #0
 800c1ae:	2501      	movlt	r5, #1
 800c1b0:	f7ff fd3a 	bl	800bc28 <_Balloc>
 800c1b4:	b920      	cbnz	r0, 800c1c0 <__mdiff+0x5c>
 800c1b6:	4b2e      	ldr	r3, [pc, #184]	; (800c270 <__mdiff+0x10c>)
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1be:	e7e5      	b.n	800c18c <__mdiff+0x28>
 800c1c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1c4:	6926      	ldr	r6, [r4, #16]
 800c1c6:	60c5      	str	r5, [r0, #12]
 800c1c8:	f104 0914 	add.w	r9, r4, #20
 800c1cc:	f108 0514 	add.w	r5, r8, #20
 800c1d0:	f100 0e14 	add.w	lr, r0, #20
 800c1d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c1d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1dc:	f108 0210 	add.w	r2, r8, #16
 800c1e0:	46f2      	mov	sl, lr
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1ec:	fa1f f883 	uxth.w	r8, r3
 800c1f0:	fa11 f18b 	uxtah	r1, r1, fp
 800c1f4:	0c1b      	lsrs	r3, r3, #16
 800c1f6:	eba1 0808 	sub.w	r8, r1, r8
 800c1fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c202:	fa1f f888 	uxth.w	r8, r8
 800c206:	1419      	asrs	r1, r3, #16
 800c208:	454e      	cmp	r6, r9
 800c20a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c20e:	f84a 3b04 	str.w	r3, [sl], #4
 800c212:	d8e7      	bhi.n	800c1e4 <__mdiff+0x80>
 800c214:	1b33      	subs	r3, r6, r4
 800c216:	3b15      	subs	r3, #21
 800c218:	f023 0303 	bic.w	r3, r3, #3
 800c21c:	3304      	adds	r3, #4
 800c21e:	3415      	adds	r4, #21
 800c220:	42a6      	cmp	r6, r4
 800c222:	bf38      	it	cc
 800c224:	2304      	movcc	r3, #4
 800c226:	441d      	add	r5, r3
 800c228:	4473      	add	r3, lr
 800c22a:	469e      	mov	lr, r3
 800c22c:	462e      	mov	r6, r5
 800c22e:	4566      	cmp	r6, ip
 800c230:	d30e      	bcc.n	800c250 <__mdiff+0xec>
 800c232:	f10c 0203 	add.w	r2, ip, #3
 800c236:	1b52      	subs	r2, r2, r5
 800c238:	f022 0203 	bic.w	r2, r2, #3
 800c23c:	3d03      	subs	r5, #3
 800c23e:	45ac      	cmp	ip, r5
 800c240:	bf38      	it	cc
 800c242:	2200      	movcc	r2, #0
 800c244:	441a      	add	r2, r3
 800c246:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c24a:	b17b      	cbz	r3, 800c26c <__mdiff+0x108>
 800c24c:	6107      	str	r7, [r0, #16]
 800c24e:	e7a3      	b.n	800c198 <__mdiff+0x34>
 800c250:	f856 8b04 	ldr.w	r8, [r6], #4
 800c254:	fa11 f288 	uxtah	r2, r1, r8
 800c258:	1414      	asrs	r4, r2, #16
 800c25a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c25e:	b292      	uxth	r2, r2
 800c260:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c264:	f84e 2b04 	str.w	r2, [lr], #4
 800c268:	1421      	asrs	r1, r4, #16
 800c26a:	e7e0      	b.n	800c22e <__mdiff+0xca>
 800c26c:	3f01      	subs	r7, #1
 800c26e:	e7ea      	b.n	800c246 <__mdiff+0xe2>
 800c270:	0800dc1b 	.word	0x0800dc1b
 800c274:	0800dc8c 	.word	0x0800dc8c

0800c278 <__d2b>:
 800c278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	4689      	mov	r9, r1
 800c27e:	2101      	movs	r1, #1
 800c280:	ec57 6b10 	vmov	r6, r7, d0
 800c284:	4690      	mov	r8, r2
 800c286:	f7ff fccf 	bl	800bc28 <_Balloc>
 800c28a:	4604      	mov	r4, r0
 800c28c:	b930      	cbnz	r0, 800c29c <__d2b+0x24>
 800c28e:	4602      	mov	r2, r0
 800c290:	4b25      	ldr	r3, [pc, #148]	; (800c328 <__d2b+0xb0>)
 800c292:	4826      	ldr	r0, [pc, #152]	; (800c32c <__d2b+0xb4>)
 800c294:	f240 310a 	movw	r1, #778	; 0x30a
 800c298:	f000 fb00 	bl	800c89c <__assert_func>
 800c29c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c2a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2a4:	bb35      	cbnz	r5, 800c2f4 <__d2b+0x7c>
 800c2a6:	2e00      	cmp	r6, #0
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	d028      	beq.n	800c2fe <__d2b+0x86>
 800c2ac:	4668      	mov	r0, sp
 800c2ae:	9600      	str	r6, [sp, #0]
 800c2b0:	f7ff fd82 	bl	800bdb8 <__lo0bits>
 800c2b4:	9900      	ldr	r1, [sp, #0]
 800c2b6:	b300      	cbz	r0, 800c2fa <__d2b+0x82>
 800c2b8:	9a01      	ldr	r2, [sp, #4]
 800c2ba:	f1c0 0320 	rsb	r3, r0, #32
 800c2be:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c2:	430b      	orrs	r3, r1
 800c2c4:	40c2      	lsrs	r2, r0
 800c2c6:	6163      	str	r3, [r4, #20]
 800c2c8:	9201      	str	r2, [sp, #4]
 800c2ca:	9b01      	ldr	r3, [sp, #4]
 800c2cc:	61a3      	str	r3, [r4, #24]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bf14      	ite	ne
 800c2d2:	2202      	movne	r2, #2
 800c2d4:	2201      	moveq	r2, #1
 800c2d6:	6122      	str	r2, [r4, #16]
 800c2d8:	b1d5      	cbz	r5, 800c310 <__d2b+0x98>
 800c2da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2de:	4405      	add	r5, r0
 800c2e0:	f8c9 5000 	str.w	r5, [r9]
 800c2e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2e8:	f8c8 0000 	str.w	r0, [r8]
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	b003      	add	sp, #12
 800c2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2f8:	e7d5      	b.n	800c2a6 <__d2b+0x2e>
 800c2fa:	6161      	str	r1, [r4, #20]
 800c2fc:	e7e5      	b.n	800c2ca <__d2b+0x52>
 800c2fe:	a801      	add	r0, sp, #4
 800c300:	f7ff fd5a 	bl	800bdb8 <__lo0bits>
 800c304:	9b01      	ldr	r3, [sp, #4]
 800c306:	6163      	str	r3, [r4, #20]
 800c308:	2201      	movs	r2, #1
 800c30a:	6122      	str	r2, [r4, #16]
 800c30c:	3020      	adds	r0, #32
 800c30e:	e7e3      	b.n	800c2d8 <__d2b+0x60>
 800c310:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c314:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c318:	f8c9 0000 	str.w	r0, [r9]
 800c31c:	6918      	ldr	r0, [r3, #16]
 800c31e:	f7ff fd2b 	bl	800bd78 <__hi0bits>
 800c322:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c326:	e7df      	b.n	800c2e8 <__d2b+0x70>
 800c328:	0800dc1b 	.word	0x0800dc1b
 800c32c:	0800dc8c 	.word	0x0800dc8c

0800c330 <_calloc_r>:
 800c330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c332:	fba1 2402 	umull	r2, r4, r1, r2
 800c336:	b94c      	cbnz	r4, 800c34c <_calloc_r+0x1c>
 800c338:	4611      	mov	r1, r2
 800c33a:	9201      	str	r2, [sp, #4]
 800c33c:	f000 f87a 	bl	800c434 <_malloc_r>
 800c340:	9a01      	ldr	r2, [sp, #4]
 800c342:	4605      	mov	r5, r0
 800c344:	b930      	cbnz	r0, 800c354 <_calloc_r+0x24>
 800c346:	4628      	mov	r0, r5
 800c348:	b003      	add	sp, #12
 800c34a:	bd30      	pop	{r4, r5, pc}
 800c34c:	220c      	movs	r2, #12
 800c34e:	6002      	str	r2, [r0, #0]
 800c350:	2500      	movs	r5, #0
 800c352:	e7f8      	b.n	800c346 <_calloc_r+0x16>
 800c354:	4621      	mov	r1, r4
 800c356:	f7fd fdf1 	bl	8009f3c <memset>
 800c35a:	e7f4      	b.n	800c346 <_calloc_r+0x16>

0800c35c <_free_r>:
 800c35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c35e:	2900      	cmp	r1, #0
 800c360:	d044      	beq.n	800c3ec <_free_r+0x90>
 800c362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c366:	9001      	str	r0, [sp, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f1a1 0404 	sub.w	r4, r1, #4
 800c36e:	bfb8      	it	lt
 800c370:	18e4      	addlt	r4, r4, r3
 800c372:	f000 fb19 	bl	800c9a8 <__malloc_lock>
 800c376:	4a1e      	ldr	r2, [pc, #120]	; (800c3f0 <_free_r+0x94>)
 800c378:	9801      	ldr	r0, [sp, #4]
 800c37a:	6813      	ldr	r3, [r2, #0]
 800c37c:	b933      	cbnz	r3, 800c38c <_free_r+0x30>
 800c37e:	6063      	str	r3, [r4, #4]
 800c380:	6014      	str	r4, [r2, #0]
 800c382:	b003      	add	sp, #12
 800c384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c388:	f000 bb14 	b.w	800c9b4 <__malloc_unlock>
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	d908      	bls.n	800c3a2 <_free_r+0x46>
 800c390:	6825      	ldr	r5, [r4, #0]
 800c392:	1961      	adds	r1, r4, r5
 800c394:	428b      	cmp	r3, r1
 800c396:	bf01      	itttt	eq
 800c398:	6819      	ldreq	r1, [r3, #0]
 800c39a:	685b      	ldreq	r3, [r3, #4]
 800c39c:	1949      	addeq	r1, r1, r5
 800c39e:	6021      	streq	r1, [r4, #0]
 800c3a0:	e7ed      	b.n	800c37e <_free_r+0x22>
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	b10b      	cbz	r3, 800c3ac <_free_r+0x50>
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	d9fa      	bls.n	800c3a2 <_free_r+0x46>
 800c3ac:	6811      	ldr	r1, [r2, #0]
 800c3ae:	1855      	adds	r5, r2, r1
 800c3b0:	42a5      	cmp	r5, r4
 800c3b2:	d10b      	bne.n	800c3cc <_free_r+0x70>
 800c3b4:	6824      	ldr	r4, [r4, #0]
 800c3b6:	4421      	add	r1, r4
 800c3b8:	1854      	adds	r4, r2, r1
 800c3ba:	42a3      	cmp	r3, r4
 800c3bc:	6011      	str	r1, [r2, #0]
 800c3be:	d1e0      	bne.n	800c382 <_free_r+0x26>
 800c3c0:	681c      	ldr	r4, [r3, #0]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	6053      	str	r3, [r2, #4]
 800c3c6:	4421      	add	r1, r4
 800c3c8:	6011      	str	r1, [r2, #0]
 800c3ca:	e7da      	b.n	800c382 <_free_r+0x26>
 800c3cc:	d902      	bls.n	800c3d4 <_free_r+0x78>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	6003      	str	r3, [r0, #0]
 800c3d2:	e7d6      	b.n	800c382 <_free_r+0x26>
 800c3d4:	6825      	ldr	r5, [r4, #0]
 800c3d6:	1961      	adds	r1, r4, r5
 800c3d8:	428b      	cmp	r3, r1
 800c3da:	bf04      	itt	eq
 800c3dc:	6819      	ldreq	r1, [r3, #0]
 800c3de:	685b      	ldreq	r3, [r3, #4]
 800c3e0:	6063      	str	r3, [r4, #4]
 800c3e2:	bf04      	itt	eq
 800c3e4:	1949      	addeq	r1, r1, r5
 800c3e6:	6021      	streq	r1, [r4, #0]
 800c3e8:	6054      	str	r4, [r2, #4]
 800c3ea:	e7ca      	b.n	800c382 <_free_r+0x26>
 800c3ec:	b003      	add	sp, #12
 800c3ee:	bd30      	pop	{r4, r5, pc}
 800c3f0:	200004fc 	.word	0x200004fc

0800c3f4 <sbrk_aligned>:
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	4e0e      	ldr	r6, [pc, #56]	; (800c430 <sbrk_aligned+0x3c>)
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	6831      	ldr	r1, [r6, #0]
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	b911      	cbnz	r1, 800c406 <sbrk_aligned+0x12>
 800c400:	f000 f9e6 	bl	800c7d0 <_sbrk_r>
 800c404:	6030      	str	r0, [r6, #0]
 800c406:	4621      	mov	r1, r4
 800c408:	4628      	mov	r0, r5
 800c40a:	f000 f9e1 	bl	800c7d0 <_sbrk_r>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d00a      	beq.n	800c428 <sbrk_aligned+0x34>
 800c412:	1cc4      	adds	r4, r0, #3
 800c414:	f024 0403 	bic.w	r4, r4, #3
 800c418:	42a0      	cmp	r0, r4
 800c41a:	d007      	beq.n	800c42c <sbrk_aligned+0x38>
 800c41c:	1a21      	subs	r1, r4, r0
 800c41e:	4628      	mov	r0, r5
 800c420:	f000 f9d6 	bl	800c7d0 <_sbrk_r>
 800c424:	3001      	adds	r0, #1
 800c426:	d101      	bne.n	800c42c <sbrk_aligned+0x38>
 800c428:	f04f 34ff 	mov.w	r4, #4294967295
 800c42c:	4620      	mov	r0, r4
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	20000500 	.word	0x20000500

0800c434 <_malloc_r>:
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c438:	1ccd      	adds	r5, r1, #3
 800c43a:	f025 0503 	bic.w	r5, r5, #3
 800c43e:	3508      	adds	r5, #8
 800c440:	2d0c      	cmp	r5, #12
 800c442:	bf38      	it	cc
 800c444:	250c      	movcc	r5, #12
 800c446:	2d00      	cmp	r5, #0
 800c448:	4607      	mov	r7, r0
 800c44a:	db01      	blt.n	800c450 <_malloc_r+0x1c>
 800c44c:	42a9      	cmp	r1, r5
 800c44e:	d905      	bls.n	800c45c <_malloc_r+0x28>
 800c450:	230c      	movs	r3, #12
 800c452:	603b      	str	r3, [r7, #0]
 800c454:	2600      	movs	r6, #0
 800c456:	4630      	mov	r0, r6
 800c458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c45c:	4e2e      	ldr	r6, [pc, #184]	; (800c518 <_malloc_r+0xe4>)
 800c45e:	f000 faa3 	bl	800c9a8 <__malloc_lock>
 800c462:	6833      	ldr	r3, [r6, #0]
 800c464:	461c      	mov	r4, r3
 800c466:	bb34      	cbnz	r4, 800c4b6 <_malloc_r+0x82>
 800c468:	4629      	mov	r1, r5
 800c46a:	4638      	mov	r0, r7
 800c46c:	f7ff ffc2 	bl	800c3f4 <sbrk_aligned>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	4604      	mov	r4, r0
 800c474:	d14d      	bne.n	800c512 <_malloc_r+0xde>
 800c476:	6834      	ldr	r4, [r6, #0]
 800c478:	4626      	mov	r6, r4
 800c47a:	2e00      	cmp	r6, #0
 800c47c:	d140      	bne.n	800c500 <_malloc_r+0xcc>
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	4631      	mov	r1, r6
 800c482:	4638      	mov	r0, r7
 800c484:	eb04 0803 	add.w	r8, r4, r3
 800c488:	f000 f9a2 	bl	800c7d0 <_sbrk_r>
 800c48c:	4580      	cmp	r8, r0
 800c48e:	d13a      	bne.n	800c506 <_malloc_r+0xd2>
 800c490:	6821      	ldr	r1, [r4, #0]
 800c492:	3503      	adds	r5, #3
 800c494:	1a6d      	subs	r5, r5, r1
 800c496:	f025 0503 	bic.w	r5, r5, #3
 800c49a:	3508      	adds	r5, #8
 800c49c:	2d0c      	cmp	r5, #12
 800c49e:	bf38      	it	cc
 800c4a0:	250c      	movcc	r5, #12
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	f7ff ffa5 	bl	800c3f4 <sbrk_aligned>
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	d02b      	beq.n	800c506 <_malloc_r+0xd2>
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	442b      	add	r3, r5
 800c4b2:	6023      	str	r3, [r4, #0]
 800c4b4:	e00e      	b.n	800c4d4 <_malloc_r+0xa0>
 800c4b6:	6822      	ldr	r2, [r4, #0]
 800c4b8:	1b52      	subs	r2, r2, r5
 800c4ba:	d41e      	bmi.n	800c4fa <_malloc_r+0xc6>
 800c4bc:	2a0b      	cmp	r2, #11
 800c4be:	d916      	bls.n	800c4ee <_malloc_r+0xba>
 800c4c0:	1961      	adds	r1, r4, r5
 800c4c2:	42a3      	cmp	r3, r4
 800c4c4:	6025      	str	r5, [r4, #0]
 800c4c6:	bf18      	it	ne
 800c4c8:	6059      	strne	r1, [r3, #4]
 800c4ca:	6863      	ldr	r3, [r4, #4]
 800c4cc:	bf08      	it	eq
 800c4ce:	6031      	streq	r1, [r6, #0]
 800c4d0:	5162      	str	r2, [r4, r5]
 800c4d2:	604b      	str	r3, [r1, #4]
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f104 060b 	add.w	r6, r4, #11
 800c4da:	f000 fa6b 	bl	800c9b4 <__malloc_unlock>
 800c4de:	f026 0607 	bic.w	r6, r6, #7
 800c4e2:	1d23      	adds	r3, r4, #4
 800c4e4:	1af2      	subs	r2, r6, r3
 800c4e6:	d0b6      	beq.n	800c456 <_malloc_r+0x22>
 800c4e8:	1b9b      	subs	r3, r3, r6
 800c4ea:	50a3      	str	r3, [r4, r2]
 800c4ec:	e7b3      	b.n	800c456 <_malloc_r+0x22>
 800c4ee:	6862      	ldr	r2, [r4, #4]
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	bf0c      	ite	eq
 800c4f4:	6032      	streq	r2, [r6, #0]
 800c4f6:	605a      	strne	r2, [r3, #4]
 800c4f8:	e7ec      	b.n	800c4d4 <_malloc_r+0xa0>
 800c4fa:	4623      	mov	r3, r4
 800c4fc:	6864      	ldr	r4, [r4, #4]
 800c4fe:	e7b2      	b.n	800c466 <_malloc_r+0x32>
 800c500:	4634      	mov	r4, r6
 800c502:	6876      	ldr	r6, [r6, #4]
 800c504:	e7b9      	b.n	800c47a <_malloc_r+0x46>
 800c506:	230c      	movs	r3, #12
 800c508:	603b      	str	r3, [r7, #0]
 800c50a:	4638      	mov	r0, r7
 800c50c:	f000 fa52 	bl	800c9b4 <__malloc_unlock>
 800c510:	e7a1      	b.n	800c456 <_malloc_r+0x22>
 800c512:	6025      	str	r5, [r4, #0]
 800c514:	e7de      	b.n	800c4d4 <_malloc_r+0xa0>
 800c516:	bf00      	nop
 800c518:	200004fc 	.word	0x200004fc

0800c51c <__sfputc_r>:
 800c51c:	6893      	ldr	r3, [r2, #8]
 800c51e:	3b01      	subs	r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	b410      	push	{r4}
 800c524:	6093      	str	r3, [r2, #8]
 800c526:	da08      	bge.n	800c53a <__sfputc_r+0x1e>
 800c528:	6994      	ldr	r4, [r2, #24]
 800c52a:	42a3      	cmp	r3, r4
 800c52c:	db01      	blt.n	800c532 <__sfputc_r+0x16>
 800c52e:	290a      	cmp	r1, #10
 800c530:	d103      	bne.n	800c53a <__sfputc_r+0x1e>
 800c532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c536:	f7fe ba01 	b.w	800a93c <__swbuf_r>
 800c53a:	6813      	ldr	r3, [r2, #0]
 800c53c:	1c58      	adds	r0, r3, #1
 800c53e:	6010      	str	r0, [r2, #0]
 800c540:	7019      	strb	r1, [r3, #0]
 800c542:	4608      	mov	r0, r1
 800c544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <__sfputs_r>:
 800c54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54c:	4606      	mov	r6, r0
 800c54e:	460f      	mov	r7, r1
 800c550:	4614      	mov	r4, r2
 800c552:	18d5      	adds	r5, r2, r3
 800c554:	42ac      	cmp	r4, r5
 800c556:	d101      	bne.n	800c55c <__sfputs_r+0x12>
 800c558:	2000      	movs	r0, #0
 800c55a:	e007      	b.n	800c56c <__sfputs_r+0x22>
 800c55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c560:	463a      	mov	r2, r7
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ffda 	bl	800c51c <__sfputc_r>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d1f3      	bne.n	800c554 <__sfputs_r+0xa>
 800c56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c570 <_vfiprintf_r>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	460d      	mov	r5, r1
 800c576:	b09d      	sub	sp, #116	; 0x74
 800c578:	4614      	mov	r4, r2
 800c57a:	4698      	mov	r8, r3
 800c57c:	4606      	mov	r6, r0
 800c57e:	b118      	cbz	r0, 800c588 <_vfiprintf_r+0x18>
 800c580:	6983      	ldr	r3, [r0, #24]
 800c582:	b90b      	cbnz	r3, 800c588 <_vfiprintf_r+0x18>
 800c584:	f7ff fa30 	bl	800b9e8 <__sinit>
 800c588:	4b89      	ldr	r3, [pc, #548]	; (800c7b0 <_vfiprintf_r+0x240>)
 800c58a:	429d      	cmp	r5, r3
 800c58c:	d11b      	bne.n	800c5c6 <_vfiprintf_r+0x56>
 800c58e:	6875      	ldr	r5, [r6, #4]
 800c590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c592:	07d9      	lsls	r1, r3, #31
 800c594:	d405      	bmi.n	800c5a2 <_vfiprintf_r+0x32>
 800c596:	89ab      	ldrh	r3, [r5, #12]
 800c598:	059a      	lsls	r2, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <_vfiprintf_r+0x32>
 800c59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c59e:	f7ff fac6 	bl	800bb2e <__retarget_lock_acquire_recursive>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	071b      	lsls	r3, r3, #28
 800c5a6:	d501      	bpl.n	800c5ac <_vfiprintf_r+0x3c>
 800c5a8:	692b      	ldr	r3, [r5, #16]
 800c5aa:	b9eb      	cbnz	r3, 800c5e8 <_vfiprintf_r+0x78>
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f7fe fa16 	bl	800a9e0 <__swsetup_r>
 800c5b4:	b1c0      	cbz	r0, 800c5e8 <_vfiprintf_r+0x78>
 800c5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b8:	07dc      	lsls	r4, r3, #31
 800c5ba:	d50e      	bpl.n	800c5da <_vfiprintf_r+0x6a>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	b01d      	add	sp, #116	; 0x74
 800c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c6:	4b7b      	ldr	r3, [pc, #492]	; (800c7b4 <_vfiprintf_r+0x244>)
 800c5c8:	429d      	cmp	r5, r3
 800c5ca:	d101      	bne.n	800c5d0 <_vfiprintf_r+0x60>
 800c5cc:	68b5      	ldr	r5, [r6, #8]
 800c5ce:	e7df      	b.n	800c590 <_vfiprintf_r+0x20>
 800c5d0:	4b79      	ldr	r3, [pc, #484]	; (800c7b8 <_vfiprintf_r+0x248>)
 800c5d2:	429d      	cmp	r5, r3
 800c5d4:	bf08      	it	eq
 800c5d6:	68f5      	ldreq	r5, [r6, #12]
 800c5d8:	e7da      	b.n	800c590 <_vfiprintf_r+0x20>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	0598      	lsls	r0, r3, #22
 800c5de:	d4ed      	bmi.n	800c5bc <_vfiprintf_r+0x4c>
 800c5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5e2:	f7ff faa5 	bl	800bb30 <__retarget_lock_release_recursive>
 800c5e6:	e7e9      	b.n	800c5bc <_vfiprintf_r+0x4c>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f6:	2330      	movs	r3, #48	; 0x30
 800c5f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7bc <_vfiprintf_r+0x24c>
 800c5fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c600:	f04f 0901 	mov.w	r9, #1
 800c604:	4623      	mov	r3, r4
 800c606:	469a      	mov	sl, r3
 800c608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c60c:	b10a      	cbz	r2, 800c612 <_vfiprintf_r+0xa2>
 800c60e:	2a25      	cmp	r2, #37	; 0x25
 800c610:	d1f9      	bne.n	800c606 <_vfiprintf_r+0x96>
 800c612:	ebba 0b04 	subs.w	fp, sl, r4
 800c616:	d00b      	beq.n	800c630 <_vfiprintf_r+0xc0>
 800c618:	465b      	mov	r3, fp
 800c61a:	4622      	mov	r2, r4
 800c61c:	4629      	mov	r1, r5
 800c61e:	4630      	mov	r0, r6
 800c620:	f7ff ff93 	bl	800c54a <__sfputs_r>
 800c624:	3001      	adds	r0, #1
 800c626:	f000 80aa 	beq.w	800c77e <_vfiprintf_r+0x20e>
 800c62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c62c:	445a      	add	r2, fp
 800c62e:	9209      	str	r2, [sp, #36]	; 0x24
 800c630:	f89a 3000 	ldrb.w	r3, [sl]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 80a2 	beq.w	800c77e <_vfiprintf_r+0x20e>
 800c63a:	2300      	movs	r3, #0
 800c63c:	f04f 32ff 	mov.w	r2, #4294967295
 800c640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c644:	f10a 0a01 	add.w	sl, sl, #1
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	9307      	str	r3, [sp, #28]
 800c64c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c650:	931a      	str	r3, [sp, #104]	; 0x68
 800c652:	4654      	mov	r4, sl
 800c654:	2205      	movs	r2, #5
 800c656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65a:	4858      	ldr	r0, [pc, #352]	; (800c7bc <_vfiprintf_r+0x24c>)
 800c65c:	f7f3 fdc0 	bl	80001e0 <memchr>
 800c660:	9a04      	ldr	r2, [sp, #16]
 800c662:	b9d8      	cbnz	r0, 800c69c <_vfiprintf_r+0x12c>
 800c664:	06d1      	lsls	r1, r2, #27
 800c666:	bf44      	itt	mi
 800c668:	2320      	movmi	r3, #32
 800c66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c66e:	0713      	lsls	r3, r2, #28
 800c670:	bf44      	itt	mi
 800c672:	232b      	movmi	r3, #43	; 0x2b
 800c674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c678:	f89a 3000 	ldrb.w	r3, [sl]
 800c67c:	2b2a      	cmp	r3, #42	; 0x2a
 800c67e:	d015      	beq.n	800c6ac <_vfiprintf_r+0x13c>
 800c680:	9a07      	ldr	r2, [sp, #28]
 800c682:	4654      	mov	r4, sl
 800c684:	2000      	movs	r0, #0
 800c686:	f04f 0c0a 	mov.w	ip, #10
 800c68a:	4621      	mov	r1, r4
 800c68c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c690:	3b30      	subs	r3, #48	; 0x30
 800c692:	2b09      	cmp	r3, #9
 800c694:	d94e      	bls.n	800c734 <_vfiprintf_r+0x1c4>
 800c696:	b1b0      	cbz	r0, 800c6c6 <_vfiprintf_r+0x156>
 800c698:	9207      	str	r2, [sp, #28]
 800c69a:	e014      	b.n	800c6c6 <_vfiprintf_r+0x156>
 800c69c:	eba0 0308 	sub.w	r3, r0, r8
 800c6a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	46a2      	mov	sl, r4
 800c6aa:	e7d2      	b.n	800c652 <_vfiprintf_r+0xe2>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	1d19      	adds	r1, r3, #4
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	9103      	str	r1, [sp, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	bfbb      	ittet	lt
 800c6b8:	425b      	neglt	r3, r3
 800c6ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c6be:	9307      	strge	r3, [sp, #28]
 800c6c0:	9307      	strlt	r3, [sp, #28]
 800c6c2:	bfb8      	it	lt
 800c6c4:	9204      	strlt	r2, [sp, #16]
 800c6c6:	7823      	ldrb	r3, [r4, #0]
 800c6c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ca:	d10c      	bne.n	800c6e6 <_vfiprintf_r+0x176>
 800c6cc:	7863      	ldrb	r3, [r4, #1]
 800c6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d0:	d135      	bne.n	800c73e <_vfiprintf_r+0x1ce>
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	1d1a      	adds	r2, r3, #4
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	9203      	str	r2, [sp, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bfb8      	it	lt
 800c6de:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6e2:	3402      	adds	r4, #2
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7cc <_vfiprintf_r+0x25c>
 800c6ea:	7821      	ldrb	r1, [r4, #0]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	f7f3 fd76 	bl	80001e0 <memchr>
 800c6f4:	b140      	cbz	r0, 800c708 <_vfiprintf_r+0x198>
 800c6f6:	2340      	movs	r3, #64	; 0x40
 800c6f8:	eba0 000a 	sub.w	r0, r0, sl
 800c6fc:	fa03 f000 	lsl.w	r0, r3, r0
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	4303      	orrs	r3, r0
 800c704:	3401      	adds	r4, #1
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70c:	482c      	ldr	r0, [pc, #176]	; (800c7c0 <_vfiprintf_r+0x250>)
 800c70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c712:	2206      	movs	r2, #6
 800c714:	f7f3 fd64 	bl	80001e0 <memchr>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d03f      	beq.n	800c79c <_vfiprintf_r+0x22c>
 800c71c:	4b29      	ldr	r3, [pc, #164]	; (800c7c4 <_vfiprintf_r+0x254>)
 800c71e:	bb1b      	cbnz	r3, 800c768 <_vfiprintf_r+0x1f8>
 800c720:	9b03      	ldr	r3, [sp, #12]
 800c722:	3307      	adds	r3, #7
 800c724:	f023 0307 	bic.w	r3, r3, #7
 800c728:	3308      	adds	r3, #8
 800c72a:	9303      	str	r3, [sp, #12]
 800c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72e:	443b      	add	r3, r7
 800c730:	9309      	str	r3, [sp, #36]	; 0x24
 800c732:	e767      	b.n	800c604 <_vfiprintf_r+0x94>
 800c734:	fb0c 3202 	mla	r2, ip, r2, r3
 800c738:	460c      	mov	r4, r1
 800c73a:	2001      	movs	r0, #1
 800c73c:	e7a5      	b.n	800c68a <_vfiprintf_r+0x11a>
 800c73e:	2300      	movs	r3, #0
 800c740:	3401      	adds	r4, #1
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	4619      	mov	r1, r3
 800c746:	f04f 0c0a 	mov.w	ip, #10
 800c74a:	4620      	mov	r0, r4
 800c74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c750:	3a30      	subs	r2, #48	; 0x30
 800c752:	2a09      	cmp	r2, #9
 800c754:	d903      	bls.n	800c75e <_vfiprintf_r+0x1ee>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0c5      	beq.n	800c6e6 <_vfiprintf_r+0x176>
 800c75a:	9105      	str	r1, [sp, #20]
 800c75c:	e7c3      	b.n	800c6e6 <_vfiprintf_r+0x176>
 800c75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c762:	4604      	mov	r4, r0
 800c764:	2301      	movs	r3, #1
 800c766:	e7f0      	b.n	800c74a <_vfiprintf_r+0x1da>
 800c768:	ab03      	add	r3, sp, #12
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	462a      	mov	r2, r5
 800c76e:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <_vfiprintf_r+0x258>)
 800c770:	a904      	add	r1, sp, #16
 800c772:	4630      	mov	r0, r6
 800c774:	f7fd fc8a 	bl	800a08c <_printf_float>
 800c778:	4607      	mov	r7, r0
 800c77a:	1c78      	adds	r0, r7, #1
 800c77c:	d1d6      	bne.n	800c72c <_vfiprintf_r+0x1bc>
 800c77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c780:	07d9      	lsls	r1, r3, #31
 800c782:	d405      	bmi.n	800c790 <_vfiprintf_r+0x220>
 800c784:	89ab      	ldrh	r3, [r5, #12]
 800c786:	059a      	lsls	r2, r3, #22
 800c788:	d402      	bmi.n	800c790 <_vfiprintf_r+0x220>
 800c78a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78c:	f7ff f9d0 	bl	800bb30 <__retarget_lock_release_recursive>
 800c790:	89ab      	ldrh	r3, [r5, #12]
 800c792:	065b      	lsls	r3, r3, #25
 800c794:	f53f af12 	bmi.w	800c5bc <_vfiprintf_r+0x4c>
 800c798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c79a:	e711      	b.n	800c5c0 <_vfiprintf_r+0x50>
 800c79c:	ab03      	add	r3, sp, #12
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <_vfiprintf_r+0x258>)
 800c7a4:	a904      	add	r1, sp, #16
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7fd ff14 	bl	800a5d4 <_printf_i>
 800c7ac:	e7e4      	b.n	800c778 <_vfiprintf_r+0x208>
 800c7ae:	bf00      	nop
 800c7b0:	0800dc4c 	.word	0x0800dc4c
 800c7b4:	0800dc6c 	.word	0x0800dc6c
 800c7b8:	0800dc2c 	.word	0x0800dc2c
 800c7bc:	0800dde4 	.word	0x0800dde4
 800c7c0:	0800ddee 	.word	0x0800ddee
 800c7c4:	0800a08d 	.word	0x0800a08d
 800c7c8:	0800c54b 	.word	0x0800c54b
 800c7cc:	0800ddea 	.word	0x0800ddea

0800c7d0 <_sbrk_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d06      	ldr	r5, [pc, #24]	; (800c7ec <_sbrk_r+0x1c>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	f7f8 fc46 	bl	800506c <_sbrk>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_sbrk_r+0x1a>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_sbrk_r+0x1a>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	20000504 	.word	0x20000504

0800c7f0 <__sread>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f8:	f000 f8e2 	bl	800c9c0 <_read_r>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	bfab      	itete	ge
 800c800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c802:	89a3      	ldrhlt	r3, [r4, #12]
 800c804:	181b      	addge	r3, r3, r0
 800c806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c80a:	bfac      	ite	ge
 800c80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c80e:	81a3      	strhlt	r3, [r4, #12]
 800c810:	bd10      	pop	{r4, pc}

0800c812 <__swrite>:
 800c812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c816:	461f      	mov	r7, r3
 800c818:	898b      	ldrh	r3, [r1, #12]
 800c81a:	05db      	lsls	r3, r3, #23
 800c81c:	4605      	mov	r5, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	4616      	mov	r6, r2
 800c822:	d505      	bpl.n	800c830 <__swrite+0x1e>
 800c824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c828:	2302      	movs	r3, #2
 800c82a:	2200      	movs	r2, #0
 800c82c:	f000 f898 	bl	800c960 <_lseek_r>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	4632      	mov	r2, r6
 800c83e:	463b      	mov	r3, r7
 800c840:	4628      	mov	r0, r5
 800c842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c846:	f000 b817 	b.w	800c878 <_write_r>

0800c84a <__sseek>:
 800c84a:	b510      	push	{r4, lr}
 800c84c:	460c      	mov	r4, r1
 800c84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c852:	f000 f885 	bl	800c960 <_lseek_r>
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	bf15      	itete	ne
 800c85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c866:	81a3      	strheq	r3, [r4, #12]
 800c868:	bf18      	it	ne
 800c86a:	81a3      	strhne	r3, [r4, #12]
 800c86c:	bd10      	pop	{r4, pc}

0800c86e <__sclose>:
 800c86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c872:	f000 b831 	b.w	800c8d8 <_close_r>
	...

0800c878 <_write_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d07      	ldr	r5, [pc, #28]	; (800c898 <_write_r+0x20>)
 800c87c:	4604      	mov	r4, r0
 800c87e:	4608      	mov	r0, r1
 800c880:	4611      	mov	r1, r2
 800c882:	2200      	movs	r2, #0
 800c884:	602a      	str	r2, [r5, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	f7f6 ff40 	bl	800370c <_write>
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	d102      	bne.n	800c896 <_write_r+0x1e>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	b103      	cbz	r3, 800c896 <_write_r+0x1e>
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	bd38      	pop	{r3, r4, r5, pc}
 800c898:	20000504 	.word	0x20000504

0800c89c <__assert_func>:
 800c89c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c89e:	4614      	mov	r4, r2
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <__assert_func+0x2c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	68d8      	ldr	r0, [r3, #12]
 800c8aa:	b14c      	cbz	r4, 800c8c0 <__assert_func+0x24>
 800c8ac:	4b07      	ldr	r3, [pc, #28]	; (800c8cc <__assert_func+0x30>)
 800c8ae:	9100      	str	r1, [sp, #0]
 800c8b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8b4:	4906      	ldr	r1, [pc, #24]	; (800c8d0 <__assert_func+0x34>)
 800c8b6:	462b      	mov	r3, r5
 800c8b8:	f000 f81e 	bl	800c8f8 <fiprintf>
 800c8bc:	f000 f89f 	bl	800c9fe <abort>
 800c8c0:	4b04      	ldr	r3, [pc, #16]	; (800c8d4 <__assert_func+0x38>)
 800c8c2:	461c      	mov	r4, r3
 800c8c4:	e7f3      	b.n	800c8ae <__assert_func+0x12>
 800c8c6:	bf00      	nop
 800c8c8:	20000010 	.word	0x20000010
 800c8cc:	0800ddf5 	.word	0x0800ddf5
 800c8d0:	0800de02 	.word	0x0800de02
 800c8d4:	0800de30 	.word	0x0800de30

0800c8d8 <_close_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d06      	ldr	r5, [pc, #24]	; (800c8f4 <_close_r+0x1c>)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	602b      	str	r3, [r5, #0]
 800c8e4:	f7f8 fb8d 	bl	8005002 <_close>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_close_r+0x1a>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_close_r+0x1a>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	20000504 	.word	0x20000504

0800c8f8 <fiprintf>:
 800c8f8:	b40e      	push	{r1, r2, r3}
 800c8fa:	b503      	push	{r0, r1, lr}
 800c8fc:	4601      	mov	r1, r0
 800c8fe:	ab03      	add	r3, sp, #12
 800c900:	4805      	ldr	r0, [pc, #20]	; (800c918 <fiprintf+0x20>)
 800c902:	f853 2b04 	ldr.w	r2, [r3], #4
 800c906:	6800      	ldr	r0, [r0, #0]
 800c908:	9301      	str	r3, [sp, #4]
 800c90a:	f7ff fe31 	bl	800c570 <_vfiprintf_r>
 800c90e:	b002      	add	sp, #8
 800c910:	f85d eb04 	ldr.w	lr, [sp], #4
 800c914:	b003      	add	sp, #12
 800c916:	4770      	bx	lr
 800c918:	20000010 	.word	0x20000010

0800c91c <_fstat_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	; (800c93c <_fstat_r+0x20>)
 800c920:	2300      	movs	r3, #0
 800c922:	4604      	mov	r4, r0
 800c924:	4608      	mov	r0, r1
 800c926:	4611      	mov	r1, r2
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	f7f8 fb76 	bl	800501a <_fstat>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	d102      	bne.n	800c938 <_fstat_r+0x1c>
 800c932:	682b      	ldr	r3, [r5, #0]
 800c934:	b103      	cbz	r3, 800c938 <_fstat_r+0x1c>
 800c936:	6023      	str	r3, [r4, #0]
 800c938:	bd38      	pop	{r3, r4, r5, pc}
 800c93a:	bf00      	nop
 800c93c:	20000504 	.word	0x20000504

0800c940 <_isatty_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d06      	ldr	r5, [pc, #24]	; (800c95c <_isatty_r+0x1c>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	f7f8 fb75 	bl	800503a <_isatty>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d102      	bne.n	800c95a <_isatty_r+0x1a>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b103      	cbz	r3, 800c95a <_isatty_r+0x1a>
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	20000504 	.word	0x20000504

0800c960 <_lseek_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	4d07      	ldr	r5, [pc, #28]	; (800c980 <_lseek_r+0x20>)
 800c964:	4604      	mov	r4, r0
 800c966:	4608      	mov	r0, r1
 800c968:	4611      	mov	r1, r2
 800c96a:	2200      	movs	r2, #0
 800c96c:	602a      	str	r2, [r5, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	f7f8 fb6e 	bl	8005050 <_lseek>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d102      	bne.n	800c97e <_lseek_r+0x1e>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b103      	cbz	r3, 800c97e <_lseek_r+0x1e>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	20000504 	.word	0x20000504

0800c984 <__ascii_mbtowc>:
 800c984:	b082      	sub	sp, #8
 800c986:	b901      	cbnz	r1, 800c98a <__ascii_mbtowc+0x6>
 800c988:	a901      	add	r1, sp, #4
 800c98a:	b142      	cbz	r2, 800c99e <__ascii_mbtowc+0x1a>
 800c98c:	b14b      	cbz	r3, 800c9a2 <__ascii_mbtowc+0x1e>
 800c98e:	7813      	ldrb	r3, [r2, #0]
 800c990:	600b      	str	r3, [r1, #0]
 800c992:	7812      	ldrb	r2, [r2, #0]
 800c994:	1e10      	subs	r0, r2, #0
 800c996:	bf18      	it	ne
 800c998:	2001      	movne	r0, #1
 800c99a:	b002      	add	sp, #8
 800c99c:	4770      	bx	lr
 800c99e:	4610      	mov	r0, r2
 800c9a0:	e7fb      	b.n	800c99a <__ascii_mbtowc+0x16>
 800c9a2:	f06f 0001 	mvn.w	r0, #1
 800c9a6:	e7f8      	b.n	800c99a <__ascii_mbtowc+0x16>

0800c9a8 <__malloc_lock>:
 800c9a8:	4801      	ldr	r0, [pc, #4]	; (800c9b0 <__malloc_lock+0x8>)
 800c9aa:	f7ff b8c0 	b.w	800bb2e <__retarget_lock_acquire_recursive>
 800c9ae:	bf00      	nop
 800c9b0:	200004f8 	.word	0x200004f8

0800c9b4 <__malloc_unlock>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	; (800c9bc <__malloc_unlock+0x8>)
 800c9b6:	f7ff b8bb 	b.w	800bb30 <__retarget_lock_release_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	200004f8 	.word	0x200004f8

0800c9c0 <_read_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	; (800c9e0 <_read_r+0x20>)
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	602a      	str	r2, [r5, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	f7f8 fafa 	bl	8004fc8 <_read>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d102      	bne.n	800c9de <_read_r+0x1e>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	b103      	cbz	r3, 800c9de <_read_r+0x1e>
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	20000504 	.word	0x20000504

0800c9e4 <__ascii_wctomb>:
 800c9e4:	b149      	cbz	r1, 800c9fa <__ascii_wctomb+0x16>
 800c9e6:	2aff      	cmp	r2, #255	; 0xff
 800c9e8:	bf85      	ittet	hi
 800c9ea:	238a      	movhi	r3, #138	; 0x8a
 800c9ec:	6003      	strhi	r3, [r0, #0]
 800c9ee:	700a      	strbls	r2, [r1, #0]
 800c9f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9f4:	bf98      	it	ls
 800c9f6:	2001      	movls	r0, #1
 800c9f8:	4770      	bx	lr
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	4770      	bx	lr

0800c9fe <abort>:
 800c9fe:	b508      	push	{r3, lr}
 800ca00:	2006      	movs	r0, #6
 800ca02:	f000 f82b 	bl	800ca5c <raise>
 800ca06:	2001      	movs	r0, #1
 800ca08:	f7f8 fad4 	bl	8004fb4 <_exit>

0800ca0c <_raise_r>:
 800ca0c:	291f      	cmp	r1, #31
 800ca0e:	b538      	push	{r3, r4, r5, lr}
 800ca10:	4604      	mov	r4, r0
 800ca12:	460d      	mov	r5, r1
 800ca14:	d904      	bls.n	800ca20 <_raise_r+0x14>
 800ca16:	2316      	movs	r3, #22
 800ca18:	6003      	str	r3, [r0, #0]
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1e:	bd38      	pop	{r3, r4, r5, pc}
 800ca20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca22:	b112      	cbz	r2, 800ca2a <_raise_r+0x1e>
 800ca24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca28:	b94b      	cbnz	r3, 800ca3e <_raise_r+0x32>
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 f830 	bl	800ca90 <_getpid_r>
 800ca30:	462a      	mov	r2, r5
 800ca32:	4601      	mov	r1, r0
 800ca34:	4620      	mov	r0, r4
 800ca36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca3a:	f000 b817 	b.w	800ca6c <_kill_r>
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d00a      	beq.n	800ca58 <_raise_r+0x4c>
 800ca42:	1c59      	adds	r1, r3, #1
 800ca44:	d103      	bne.n	800ca4e <_raise_r+0x42>
 800ca46:	2316      	movs	r3, #22
 800ca48:	6003      	str	r3, [r0, #0]
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	e7e7      	b.n	800ca1e <_raise_r+0x12>
 800ca4e:	2400      	movs	r4, #0
 800ca50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca54:	4628      	mov	r0, r5
 800ca56:	4798      	blx	r3
 800ca58:	2000      	movs	r0, #0
 800ca5a:	e7e0      	b.n	800ca1e <_raise_r+0x12>

0800ca5c <raise>:
 800ca5c:	4b02      	ldr	r3, [pc, #8]	; (800ca68 <raise+0xc>)
 800ca5e:	4601      	mov	r1, r0
 800ca60:	6818      	ldr	r0, [r3, #0]
 800ca62:	f7ff bfd3 	b.w	800ca0c <_raise_r>
 800ca66:	bf00      	nop
 800ca68:	20000010 	.word	0x20000010

0800ca6c <_kill_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	4d07      	ldr	r5, [pc, #28]	; (800ca8c <_kill_r+0x20>)
 800ca70:	2300      	movs	r3, #0
 800ca72:	4604      	mov	r4, r0
 800ca74:	4608      	mov	r0, r1
 800ca76:	4611      	mov	r1, r2
 800ca78:	602b      	str	r3, [r5, #0]
 800ca7a:	f7f8 fa8b 	bl	8004f94 <_kill>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	d102      	bne.n	800ca88 <_kill_r+0x1c>
 800ca82:	682b      	ldr	r3, [r5, #0]
 800ca84:	b103      	cbz	r3, 800ca88 <_kill_r+0x1c>
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	bd38      	pop	{r3, r4, r5, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000504 	.word	0x20000504

0800ca90 <_getpid_r>:
 800ca90:	f7f8 ba78 	b.w	8004f84 <_getpid>

0800ca94 <asinf>:
 800ca94:	b508      	push	{r3, lr}
 800ca96:	ed2d 8b02 	vpush	{d8}
 800ca9a:	eeb0 8a40 	vmov.f32	s16, s0
 800ca9e:	f000 f87f 	bl	800cba0 <__ieee754_asinf>
 800caa2:	eeb4 8a48 	vcmp.f32	s16, s16
 800caa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caaa:	eef0 8a40 	vmov.f32	s17, s0
 800caae:	d615      	bvs.n	800cadc <asinf+0x48>
 800cab0:	eeb0 0a48 	vmov.f32	s0, s16
 800cab4:	f000 fdc2 	bl	800d63c <fabsf>
 800cab8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cabc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac4:	dd0a      	ble.n	800cadc <asinf+0x48>
 800cac6:	f7fd fa0f 	bl	8009ee8 <__errno>
 800caca:	ecbd 8b02 	vpop	{d8}
 800cace:	2321      	movs	r3, #33	; 0x21
 800cad0:	6003      	str	r3, [r0, #0]
 800cad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cad6:	4804      	ldr	r0, [pc, #16]	; (800cae8 <asinf+0x54>)
 800cad8:	f000 bdc4 	b.w	800d664 <nanf>
 800cadc:	eeb0 0a68 	vmov.f32	s0, s17
 800cae0:	ecbd 8b02 	vpop	{d8}
 800cae4:	bd08      	pop	{r3, pc}
 800cae6:	bf00      	nop
 800cae8:	0800de30 	.word	0x0800de30

0800caec <atan2f>:
 800caec:	f000 b93e 	b.w	800cd6c <__ieee754_atan2f>

0800caf0 <powf>:
 800caf0:	b508      	push	{r3, lr}
 800caf2:	ed2d 8b04 	vpush	{d8-d9}
 800caf6:	eeb0 8a60 	vmov.f32	s16, s1
 800cafa:	eeb0 9a40 	vmov.f32	s18, s0
 800cafe:	f000 f9d5 	bl	800ceac <__ieee754_powf>
 800cb02:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0a:	eef0 8a40 	vmov.f32	s17, s0
 800cb0e:	d63e      	bvs.n	800cb8e <powf+0x9e>
 800cb10:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb18:	d112      	bne.n	800cb40 <powf+0x50>
 800cb1a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb22:	d039      	beq.n	800cb98 <powf+0xa8>
 800cb24:	eeb0 0a48 	vmov.f32	s0, s16
 800cb28:	f000 fd8f 	bl	800d64a <finitef>
 800cb2c:	b378      	cbz	r0, 800cb8e <powf+0x9e>
 800cb2e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb36:	d52a      	bpl.n	800cb8e <powf+0x9e>
 800cb38:	f7fd f9d6 	bl	8009ee8 <__errno>
 800cb3c:	2322      	movs	r3, #34	; 0x22
 800cb3e:	e014      	b.n	800cb6a <powf+0x7a>
 800cb40:	f000 fd83 	bl	800d64a <finitef>
 800cb44:	b998      	cbnz	r0, 800cb6e <powf+0x7e>
 800cb46:	eeb0 0a49 	vmov.f32	s0, s18
 800cb4a:	f000 fd7e 	bl	800d64a <finitef>
 800cb4e:	b170      	cbz	r0, 800cb6e <powf+0x7e>
 800cb50:	eeb0 0a48 	vmov.f32	s0, s16
 800cb54:	f000 fd79 	bl	800d64a <finitef>
 800cb58:	b148      	cbz	r0, 800cb6e <powf+0x7e>
 800cb5a:	eef4 8a68 	vcmp.f32	s17, s17
 800cb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb62:	d7e9      	bvc.n	800cb38 <powf+0x48>
 800cb64:	f7fd f9c0 	bl	8009ee8 <__errno>
 800cb68:	2321      	movs	r3, #33	; 0x21
 800cb6a:	6003      	str	r3, [r0, #0]
 800cb6c:	e00f      	b.n	800cb8e <powf+0x9e>
 800cb6e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb76:	d10a      	bne.n	800cb8e <powf+0x9e>
 800cb78:	eeb0 0a49 	vmov.f32	s0, s18
 800cb7c:	f000 fd65 	bl	800d64a <finitef>
 800cb80:	b128      	cbz	r0, 800cb8e <powf+0x9e>
 800cb82:	eeb0 0a48 	vmov.f32	s0, s16
 800cb86:	f000 fd60 	bl	800d64a <finitef>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d1d4      	bne.n	800cb38 <powf+0x48>
 800cb8e:	eeb0 0a68 	vmov.f32	s0, s17
 800cb92:	ecbd 8b04 	vpop	{d8-d9}
 800cb96:	bd08      	pop	{r3, pc}
 800cb98:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cb9c:	e7f7      	b.n	800cb8e <powf+0x9e>
	...

0800cba0 <__ieee754_asinf>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	ee10 5a10 	vmov	r5, s0
 800cba6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cbaa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cbae:	ed2d 8b04 	vpush	{d8-d9}
 800cbb2:	d10c      	bne.n	800cbce <__ieee754_asinf+0x2e>
 800cbb4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800cd2c <__ieee754_asinf+0x18c>
 800cbb8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800cd30 <__ieee754_asinf+0x190>
 800cbbc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cbc0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cbc4:	eeb0 0a67 	vmov.f32	s0, s15
 800cbc8:	ecbd 8b04 	vpop	{d8-d9}
 800cbcc:	bd38      	pop	{r3, r4, r5, pc}
 800cbce:	dd04      	ble.n	800cbda <__ieee754_asinf+0x3a>
 800cbd0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cbd4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cbd8:	e7f6      	b.n	800cbc8 <__ieee754_asinf+0x28>
 800cbda:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cbde:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cbe2:	da0b      	bge.n	800cbfc <__ieee754_asinf+0x5c>
 800cbe4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800cbe8:	da52      	bge.n	800cc90 <__ieee754_asinf+0xf0>
 800cbea:	eddf 7a52 	vldr	s15, [pc, #328]	; 800cd34 <__ieee754_asinf+0x194>
 800cbee:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cbf2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800cbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfa:	dce5      	bgt.n	800cbc8 <__ieee754_asinf+0x28>
 800cbfc:	f000 fd1e 	bl	800d63c <fabsf>
 800cc00:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800cc04:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800cc08:	ee20 8a08 	vmul.f32	s16, s0, s16
 800cc0c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800cd38 <__ieee754_asinf+0x198>
 800cc10:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800cd3c <__ieee754_asinf+0x19c>
 800cc14:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800cd40 <__ieee754_asinf+0x1a0>
 800cc18:	eea8 7a27 	vfma.f32	s14, s16, s15
 800cc1c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800cd44 <__ieee754_asinf+0x1a4>
 800cc20:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc24:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800cd48 <__ieee754_asinf+0x1a8>
 800cc28:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cc2c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800cd4c <__ieee754_asinf+0x1ac>
 800cc30:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc34:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800cd50 <__ieee754_asinf+0x1b0>
 800cc38:	eea7 9a88 	vfma.f32	s18, s15, s16
 800cc3c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800cd54 <__ieee754_asinf+0x1b4>
 800cc40:	eee8 7a07 	vfma.f32	s15, s16, s14
 800cc44:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800cd58 <__ieee754_asinf+0x1b8>
 800cc48:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cc4c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cd5c <__ieee754_asinf+0x1bc>
 800cc50:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc54:	eeb0 0a48 	vmov.f32	s0, s16
 800cc58:	eee7 8a88 	vfma.f32	s17, s15, s16
 800cc5c:	f000 fbf4 	bl	800d448 <__ieee754_sqrtf>
 800cc60:	4b3f      	ldr	r3, [pc, #252]	; (800cd60 <__ieee754_asinf+0x1c0>)
 800cc62:	ee29 9a08 	vmul.f32	s18, s18, s16
 800cc66:	429c      	cmp	r4, r3
 800cc68:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800cc6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc70:	dd3d      	ble.n	800ccee <__ieee754_asinf+0x14e>
 800cc72:	eea0 0a06 	vfma.f32	s0, s0, s12
 800cc76:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800cd64 <__ieee754_asinf+0x1c4>
 800cc7a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800cc7e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800cd30 <__ieee754_asinf+0x190>
 800cc82:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	bfd8      	it	le
 800cc8a:	eeb1 0a40 	vnegle.f32	s0, s0
 800cc8e:	e79b      	b.n	800cbc8 <__ieee754_asinf+0x28>
 800cc90:	ee60 7a00 	vmul.f32	s15, s0, s0
 800cc94:	eddf 6a28 	vldr	s13, [pc, #160]	; 800cd38 <__ieee754_asinf+0x198>
 800cc98:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800cd3c <__ieee754_asinf+0x19c>
 800cc9c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800cd50 <__ieee754_asinf+0x1b0>
 800cca0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cca4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800cd44 <__ieee754_asinf+0x1a4>
 800cca8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800cd48 <__ieee754_asinf+0x1a8>
 800ccb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccb4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800cd4c <__ieee754_asinf+0x1ac>
 800ccb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccbc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800cd40 <__ieee754_asinf+0x1a0>
 800ccc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ccc4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800cd54 <__ieee754_asinf+0x1b4>
 800ccc8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cccc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800cd58 <__ieee754_asinf+0x1b8>
 800ccd0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ccd4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800cd5c <__ieee754_asinf+0x1bc>
 800ccd8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ccdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cce0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800cce4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cce8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ccec:	e76c      	b.n	800cbc8 <__ieee754_asinf+0x28>
 800ccee:	ee10 3a10 	vmov	r3, s0
 800ccf2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ccf6:	f023 030f 	bic.w	r3, r3, #15
 800ccfa:	ee07 3a10 	vmov	s14, r3
 800ccfe:	eea7 8a47 	vfms.f32	s16, s14, s14
 800cd02:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cd06:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd0a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800cd0e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cd2c <__ieee754_asinf+0x18c>
 800cd12:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800cd16:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800cd1a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800cd68 <__ieee754_asinf+0x1c8>
 800cd1e:	eeb0 6a40 	vmov.f32	s12, s0
 800cd22:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cd26:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cd2a:	e7aa      	b.n	800cc82 <__ieee754_asinf+0xe2>
 800cd2c:	b33bbd2e 	.word	0xb33bbd2e
 800cd30:	3fc90fdb 	.word	0x3fc90fdb
 800cd34:	7149f2ca 	.word	0x7149f2ca
 800cd38:	3811ef08 	.word	0x3811ef08
 800cd3c:	3a4f7f04 	.word	0x3a4f7f04
 800cd40:	3e2aaaab 	.word	0x3e2aaaab
 800cd44:	bd241146 	.word	0xbd241146
 800cd48:	3e4e0aa8 	.word	0x3e4e0aa8
 800cd4c:	bea6b090 	.word	0xbea6b090
 800cd50:	3d9dc62e 	.word	0x3d9dc62e
 800cd54:	bf303361 	.word	0xbf303361
 800cd58:	4001572d 	.word	0x4001572d
 800cd5c:	c019d139 	.word	0xc019d139
 800cd60:	3f799999 	.word	0x3f799999
 800cd64:	333bbd2e 	.word	0x333bbd2e
 800cd68:	3f490fdb 	.word	0x3f490fdb

0800cd6c <__ieee754_atan2f>:
 800cd6c:	ee10 2a90 	vmov	r2, s1
 800cd70:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800cd74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	eef0 7a40 	vmov.f32	s15, s0
 800cd7e:	dc06      	bgt.n	800cd8e <__ieee754_atan2f+0x22>
 800cd80:	ee10 0a10 	vmov	r0, s0
 800cd84:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cd88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd8c:	dd04      	ble.n	800cd98 <__ieee754_atan2f+0x2c>
 800cd8e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cd92:	eeb0 0a67 	vmov.f32	s0, s15
 800cd96:	bd10      	pop	{r4, pc}
 800cd98:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800cd9c:	d103      	bne.n	800cda6 <__ieee754_atan2f+0x3a>
 800cd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda2:	f000 bb77 	b.w	800d494 <atanf>
 800cda6:	1794      	asrs	r4, r2, #30
 800cda8:	f004 0402 	and.w	r4, r4, #2
 800cdac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cdb0:	b943      	cbnz	r3, 800cdc4 <__ieee754_atan2f+0x58>
 800cdb2:	2c02      	cmp	r4, #2
 800cdb4:	d05e      	beq.n	800ce74 <__ieee754_atan2f+0x108>
 800cdb6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ce88 <__ieee754_atan2f+0x11c>
 800cdba:	2c03      	cmp	r4, #3
 800cdbc:	bf08      	it	eq
 800cdbe:	eef0 7a47 	vmoveq.f32	s15, s14
 800cdc2:	e7e6      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800cdc4:	b941      	cbnz	r1, 800cdd8 <__ieee754_atan2f+0x6c>
 800cdc6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800ce8c <__ieee754_atan2f+0x120>
 800cdca:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800ce90 <__ieee754_atan2f+0x124>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	bfb8      	it	lt
 800cdd2:	eef0 7a40 	vmovlt.f32	s15, s0
 800cdd6:	e7dc      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800cdd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cddc:	d110      	bne.n	800ce00 <__ieee754_atan2f+0x94>
 800cdde:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cde2:	f104 34ff 	add.w	r4, r4, #4294967295
 800cde6:	d107      	bne.n	800cdf8 <__ieee754_atan2f+0x8c>
 800cde8:	2c02      	cmp	r4, #2
 800cdea:	d846      	bhi.n	800ce7a <__ieee754_atan2f+0x10e>
 800cdec:	4b29      	ldr	r3, [pc, #164]	; (800ce94 <__ieee754_atan2f+0x128>)
 800cdee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cdf2:	edd4 7a00 	vldr	s15, [r4]
 800cdf6:	e7cc      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800cdf8:	2c02      	cmp	r4, #2
 800cdfa:	d841      	bhi.n	800ce80 <__ieee754_atan2f+0x114>
 800cdfc:	4b26      	ldr	r3, [pc, #152]	; (800ce98 <__ieee754_atan2f+0x12c>)
 800cdfe:	e7f6      	b.n	800cdee <__ieee754_atan2f+0x82>
 800ce00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ce04:	d0df      	beq.n	800cdc6 <__ieee754_atan2f+0x5a>
 800ce06:	1a5b      	subs	r3, r3, r1
 800ce08:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800ce0c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ce10:	da1a      	bge.n	800ce48 <__ieee754_atan2f+0xdc>
 800ce12:	2a00      	cmp	r2, #0
 800ce14:	da01      	bge.n	800ce1a <__ieee754_atan2f+0xae>
 800ce16:	313c      	adds	r1, #60	; 0x3c
 800ce18:	db19      	blt.n	800ce4e <__ieee754_atan2f+0xe2>
 800ce1a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ce1e:	f000 fc0d 	bl	800d63c <fabsf>
 800ce22:	f000 fb37 	bl	800d494 <atanf>
 800ce26:	eef0 7a40 	vmov.f32	s15, s0
 800ce2a:	2c01      	cmp	r4, #1
 800ce2c:	d012      	beq.n	800ce54 <__ieee754_atan2f+0xe8>
 800ce2e:	2c02      	cmp	r4, #2
 800ce30:	d017      	beq.n	800ce62 <__ieee754_atan2f+0xf6>
 800ce32:	2c00      	cmp	r4, #0
 800ce34:	d0ad      	beq.n	800cd92 <__ieee754_atan2f+0x26>
 800ce36:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ce9c <__ieee754_atan2f+0x130>
 800ce3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ce3e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800cea0 <__ieee754_atan2f+0x134>
 800ce42:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ce46:	e7a4      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800ce48:	eddf 7a10 	vldr	s15, [pc, #64]	; 800ce8c <__ieee754_atan2f+0x120>
 800ce4c:	e7ed      	b.n	800ce2a <__ieee754_atan2f+0xbe>
 800ce4e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cea4 <__ieee754_atan2f+0x138>
 800ce52:	e7ea      	b.n	800ce2a <__ieee754_atan2f+0xbe>
 800ce54:	ee17 3a90 	vmov	r3, s15
 800ce58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce5c:	ee07 3a90 	vmov	s15, r3
 800ce60:	e797      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800ce62:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ce9c <__ieee754_atan2f+0x130>
 800ce66:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ce6a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800cea0 <__ieee754_atan2f+0x134>
 800ce6e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ce72:	e78e      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800ce74:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800cea0 <__ieee754_atan2f+0x134>
 800ce78:	e78b      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800ce7a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800cea8 <__ieee754_atan2f+0x13c>
 800ce7e:	e788      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800ce80:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cea4 <__ieee754_atan2f+0x138>
 800ce84:	e785      	b.n	800cd92 <__ieee754_atan2f+0x26>
 800ce86:	bf00      	nop
 800ce88:	c0490fdb 	.word	0xc0490fdb
 800ce8c:	3fc90fdb 	.word	0x3fc90fdb
 800ce90:	bfc90fdb 	.word	0xbfc90fdb
 800ce94:	0800df3c 	.word	0x0800df3c
 800ce98:	0800df48 	.word	0x0800df48
 800ce9c:	33bbbd2e 	.word	0x33bbbd2e
 800cea0:	40490fdb 	.word	0x40490fdb
 800cea4:	00000000 	.word	0x00000000
 800cea8:	3f490fdb 	.word	0x3f490fdb

0800ceac <__ieee754_powf>:
 800ceac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb0:	ee10 4a90 	vmov	r4, s1
 800ceb4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800ceb8:	ed2d 8b02 	vpush	{d8}
 800cebc:	ee10 6a10 	vmov	r6, s0
 800cec0:	eeb0 8a40 	vmov.f32	s16, s0
 800cec4:	eef0 8a60 	vmov.f32	s17, s1
 800cec8:	d10c      	bne.n	800cee4 <__ieee754_powf+0x38>
 800ceca:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800cece:	0076      	lsls	r6, r6, #1
 800ced0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ced4:	f240 8296 	bls.w	800d404 <__ieee754_powf+0x558>
 800ced8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800cedc:	ecbd 8b02 	vpop	{d8}
 800cee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cee8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ceec:	dcf4      	bgt.n	800ced8 <__ieee754_powf+0x2c>
 800ceee:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800cef2:	dd08      	ble.n	800cf06 <__ieee754_powf+0x5a>
 800cef4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800cef8:	d1ee      	bne.n	800ced8 <__ieee754_powf+0x2c>
 800cefa:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800cefe:	0064      	lsls	r4, r4, #1
 800cf00:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800cf04:	e7e6      	b.n	800ced4 <__ieee754_powf+0x28>
 800cf06:	2e00      	cmp	r6, #0
 800cf08:	da20      	bge.n	800cf4c <__ieee754_powf+0xa0>
 800cf0a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800cf0e:	da2d      	bge.n	800cf6c <__ieee754_powf+0xc0>
 800cf10:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800cf14:	f2c0 827f 	blt.w	800d416 <__ieee754_powf+0x56a>
 800cf18:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800cf1c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cf20:	fa48 f703 	asr.w	r7, r8, r3
 800cf24:	fa07 f303 	lsl.w	r3, r7, r3
 800cf28:	4543      	cmp	r3, r8
 800cf2a:	f040 8274 	bne.w	800d416 <__ieee754_powf+0x56a>
 800cf2e:	f007 0701 	and.w	r7, r7, #1
 800cf32:	f1c7 0702 	rsb	r7, r7, #2
 800cf36:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800cf3a:	d11f      	bne.n	800cf7c <__ieee754_powf+0xd0>
 800cf3c:	2c00      	cmp	r4, #0
 800cf3e:	f280 8267 	bge.w	800d410 <__ieee754_powf+0x564>
 800cf42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cf46:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cf4a:	e7c7      	b.n	800cedc <__ieee754_powf+0x30>
 800cf4c:	2700      	movs	r7, #0
 800cf4e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800cf52:	d1f0      	bne.n	800cf36 <__ieee754_powf+0x8a>
 800cf54:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800cf58:	f000 8254 	beq.w	800d404 <__ieee754_powf+0x558>
 800cf5c:	dd08      	ble.n	800cf70 <__ieee754_powf+0xc4>
 800cf5e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800d268 <__ieee754_powf+0x3bc>
 800cf62:	2c00      	cmp	r4, #0
 800cf64:	bfa8      	it	ge
 800cf66:	eeb0 0a68 	vmovge.f32	s0, s17
 800cf6a:	e7b7      	b.n	800cedc <__ieee754_powf+0x30>
 800cf6c:	2702      	movs	r7, #2
 800cf6e:	e7ee      	b.n	800cf4e <__ieee754_powf+0xa2>
 800cf70:	2c00      	cmp	r4, #0
 800cf72:	f280 824a 	bge.w	800d40a <__ieee754_powf+0x55e>
 800cf76:	eeb1 0a68 	vneg.f32	s0, s17
 800cf7a:	e7af      	b.n	800cedc <__ieee754_powf+0x30>
 800cf7c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800cf80:	d102      	bne.n	800cf88 <__ieee754_powf+0xdc>
 800cf82:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cf86:	e7a9      	b.n	800cedc <__ieee754_powf+0x30>
 800cf88:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cf8c:	eeb0 0a48 	vmov.f32	s0, s16
 800cf90:	d107      	bne.n	800cfa2 <__ieee754_powf+0xf6>
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	db05      	blt.n	800cfa2 <__ieee754_powf+0xf6>
 800cf96:	ecbd 8b02 	vpop	{d8}
 800cf9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9e:	f000 ba53 	b.w	800d448 <__ieee754_sqrtf>
 800cfa2:	f000 fb4b 	bl	800d63c <fabsf>
 800cfa6:	b125      	cbz	r5, 800cfb2 <__ieee754_powf+0x106>
 800cfa8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800cfac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cfb0:	d116      	bne.n	800cfe0 <__ieee754_powf+0x134>
 800cfb2:	2c00      	cmp	r4, #0
 800cfb4:	bfbc      	itt	lt
 800cfb6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cfba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cfbe:	2e00      	cmp	r6, #0
 800cfc0:	da8c      	bge.n	800cedc <__ieee754_powf+0x30>
 800cfc2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800cfc6:	ea55 0307 	orrs.w	r3, r5, r7
 800cfca:	d104      	bne.n	800cfd6 <__ieee754_powf+0x12a>
 800cfcc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cfd0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cfd4:	e782      	b.n	800cedc <__ieee754_powf+0x30>
 800cfd6:	2f01      	cmp	r7, #1
 800cfd8:	d180      	bne.n	800cedc <__ieee754_powf+0x30>
 800cfda:	eeb1 0a40 	vneg.f32	s0, s0
 800cfde:	e77d      	b.n	800cedc <__ieee754_powf+0x30>
 800cfe0:	0ff0      	lsrs	r0, r6, #31
 800cfe2:	3801      	subs	r0, #1
 800cfe4:	ea57 0300 	orrs.w	r3, r7, r0
 800cfe8:	d104      	bne.n	800cff4 <__ieee754_powf+0x148>
 800cfea:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cfee:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cff2:	e773      	b.n	800cedc <__ieee754_powf+0x30>
 800cff4:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800cff8:	dd74      	ble.n	800d0e4 <__ieee754_powf+0x238>
 800cffa:	4b9c      	ldr	r3, [pc, #624]	; (800d26c <__ieee754_powf+0x3c0>)
 800cffc:	429d      	cmp	r5, r3
 800cffe:	dc08      	bgt.n	800d012 <__ieee754_powf+0x166>
 800d000:	2c00      	cmp	r4, #0
 800d002:	da0b      	bge.n	800d01c <__ieee754_powf+0x170>
 800d004:	2000      	movs	r0, #0
 800d006:	ecbd 8b02 	vpop	{d8}
 800d00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d00e:	f000 ba3b 	b.w	800d488 <__math_oflowf>
 800d012:	4b97      	ldr	r3, [pc, #604]	; (800d270 <__ieee754_powf+0x3c4>)
 800d014:	429d      	cmp	r5, r3
 800d016:	dd08      	ble.n	800d02a <__ieee754_powf+0x17e>
 800d018:	2c00      	cmp	r4, #0
 800d01a:	dcf3      	bgt.n	800d004 <__ieee754_powf+0x158>
 800d01c:	2000      	movs	r0, #0
 800d01e:	ecbd 8b02 	vpop	{d8}
 800d022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d026:	f000 ba29 	b.w	800d47c <__math_uflowf>
 800d02a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d02e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d032:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d274 <__ieee754_powf+0x3c8>
 800d036:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d03a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d03e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d042:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d046:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d04e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d278 <__ieee754_powf+0x3cc>
 800d052:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d056:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800d27c <__ieee754_powf+0x3d0>
 800d05a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d05e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d280 <__ieee754_powf+0x3d4>
 800d062:	eef0 6a67 	vmov.f32	s13, s15
 800d066:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d06a:	ee16 3a90 	vmov	r3, s13
 800d06e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d072:	f023 030f 	bic.w	r3, r3, #15
 800d076:	ee00 3a90 	vmov	s1, r3
 800d07a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d07e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d082:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800d086:	f024 040f 	bic.w	r4, r4, #15
 800d08a:	ee07 4a10 	vmov	s14, r4
 800d08e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d092:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d09e:	3f01      	subs	r7, #1
 800d0a0:	ea57 0200 	orrs.w	r2, r7, r0
 800d0a4:	ee07 4a10 	vmov	s14, r4
 800d0a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0ac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d0b0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d0b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d0b8:	ee17 4a10 	vmov	r4, s14
 800d0bc:	bf08      	it	eq
 800d0be:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d0c2:	2c00      	cmp	r4, #0
 800d0c4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d0c8:	f340 817e 	ble.w	800d3c8 <__ieee754_powf+0x51c>
 800d0cc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d0d0:	f340 80f8 	ble.w	800d2c4 <__ieee754_powf+0x418>
 800d0d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0dc:	bf4c      	ite	mi
 800d0de:	2001      	movmi	r0, #1
 800d0e0:	2000      	movpl	r0, #0
 800d0e2:	e790      	b.n	800d006 <__ieee754_powf+0x15a>
 800d0e4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800d0e8:	bf01      	itttt	eq
 800d0ea:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800d284 <__ieee754_powf+0x3d8>
 800d0ee:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d0f2:	f06f 0217 	mvneq.w	r2, #23
 800d0f6:	ee17 5a90 	vmoveq	r5, s15
 800d0fa:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d0fe:	bf18      	it	ne
 800d100:	2200      	movne	r2, #0
 800d102:	3b7f      	subs	r3, #127	; 0x7f
 800d104:	4413      	add	r3, r2
 800d106:	4a60      	ldr	r2, [pc, #384]	; (800d288 <__ieee754_powf+0x3dc>)
 800d108:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800d10c:	4295      	cmp	r5, r2
 800d10e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800d112:	dd06      	ble.n	800d122 <__ieee754_powf+0x276>
 800d114:	4a5d      	ldr	r2, [pc, #372]	; (800d28c <__ieee754_powf+0x3e0>)
 800d116:	4295      	cmp	r5, r2
 800d118:	f340 80a4 	ble.w	800d264 <__ieee754_powf+0x3b8>
 800d11c:	3301      	adds	r3, #1
 800d11e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d122:	2500      	movs	r5, #0
 800d124:	4a5a      	ldr	r2, [pc, #360]	; (800d290 <__ieee754_powf+0x3e4>)
 800d126:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800d12a:	ee07 1a90 	vmov	s15, r1
 800d12e:	ed92 7a00 	vldr	s14, [r2]
 800d132:	4a58      	ldr	r2, [pc, #352]	; (800d294 <__ieee754_powf+0x3e8>)
 800d134:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d138:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d13c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d140:	1049      	asrs	r1, r1, #1
 800d142:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d146:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d14a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800d14e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d152:	ee06 1a10 	vmov	s12, r1
 800d156:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d15a:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d15e:	ee14 6a90 	vmov	r6, s9
 800d162:	4016      	ands	r6, r2
 800d164:	ee05 6a90 	vmov	s11, r6
 800d168:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d16c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d170:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d298 <__ieee754_powf+0x3ec>
 800d174:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d178:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d17c:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d180:	eddf 6a46 	vldr	s13, [pc, #280]	; 800d29c <__ieee754_powf+0x3f0>
 800d184:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d188:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d2a0 <__ieee754_powf+0x3f4>
 800d18c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d190:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d274 <__ieee754_powf+0x3c8>
 800d194:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d198:	eddf 6a42 	vldr	s13, [pc, #264]	; 800d2a4 <__ieee754_powf+0x3f8>
 800d19c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d1a0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d2a8 <__ieee754_powf+0x3fc>
 800d1a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d1a8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d1ac:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d1b0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d1b4:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d1b8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d1bc:	eef0 7a45 	vmov.f32	s15, s10
 800d1c0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d1c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1c8:	ee17 1a90 	vmov	r1, s15
 800d1cc:	4011      	ands	r1, r2
 800d1ce:	ee07 1a90 	vmov	s15, r1
 800d1d2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d1d6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d1da:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d1de:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d1e2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d1e6:	eeb0 6a47 	vmov.f32	s12, s14
 800d1ea:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d1ee:	ee16 1a10 	vmov	r1, s12
 800d1f2:	4011      	ands	r1, r2
 800d1f4:	ee06 1a90 	vmov	s13, r1
 800d1f8:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d1fc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d2ac <__ieee754_powf+0x400>
 800d200:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800d2b0 <__ieee754_powf+0x404>
 800d204:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d208:	ee06 1a10 	vmov	s12, r1
 800d20c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d210:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d2b4 <__ieee754_powf+0x408>
 800d214:	4928      	ldr	r1, [pc, #160]	; (800d2b8 <__ieee754_powf+0x40c>)
 800d216:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d21a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800d21e:	edd1 7a00 	vldr	s15, [r1]
 800d222:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d226:	ee07 3a90 	vmov	s15, r3
 800d22a:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <__ieee754_powf+0x410>)
 800d22c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d230:	eef0 7a47 	vmov.f32	s15, s14
 800d234:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d238:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d23c:	edd5 0a00 	vldr	s1, [r5]
 800d240:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d248:	ee17 3a90 	vmov	r3, s15
 800d24c:	4013      	ands	r3, r2
 800d24e:	ee07 3a90 	vmov	s15, r3
 800d252:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d256:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d25a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d25e:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d262:	e70e      	b.n	800d082 <__ieee754_powf+0x1d6>
 800d264:	2501      	movs	r5, #1
 800d266:	e75d      	b.n	800d124 <__ieee754_powf+0x278>
 800d268:	00000000 	.word	0x00000000
 800d26c:	3f7ffff3 	.word	0x3f7ffff3
 800d270:	3f800007 	.word	0x3f800007
 800d274:	3eaaaaab 	.word	0x3eaaaaab
 800d278:	3fb8aa3b 	.word	0x3fb8aa3b
 800d27c:	36eca570 	.word	0x36eca570
 800d280:	3fb8aa00 	.word	0x3fb8aa00
 800d284:	4b800000 	.word	0x4b800000
 800d288:	001cc471 	.word	0x001cc471
 800d28c:	005db3d6 	.word	0x005db3d6
 800d290:	0800df54 	.word	0x0800df54
 800d294:	fffff000 	.word	0xfffff000
 800d298:	3e6c3255 	.word	0x3e6c3255
 800d29c:	3e53f142 	.word	0x3e53f142
 800d2a0:	3e8ba305 	.word	0x3e8ba305
 800d2a4:	3edb6db7 	.word	0x3edb6db7
 800d2a8:	3f19999a 	.word	0x3f19999a
 800d2ac:	3f76384f 	.word	0x3f76384f
 800d2b0:	3f763800 	.word	0x3f763800
 800d2b4:	369dc3a0 	.word	0x369dc3a0
 800d2b8:	0800df64 	.word	0x0800df64
 800d2bc:	0800df5c 	.word	0x0800df5c
 800d2c0:	3338aa3c 	.word	0x3338aa3c
 800d2c4:	f040 8095 	bne.w	800d3f2 <__ieee754_powf+0x546>
 800d2c8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d2c0 <__ieee754_powf+0x414>
 800d2cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d2d0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d2d4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	f73f aefa 	bgt.w	800d0d4 <__ieee754_powf+0x228>
 800d2e0:	15db      	asrs	r3, r3, #23
 800d2e2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d2e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d2ea:	4103      	asrs	r3, r0
 800d2ec:	4423      	add	r3, r4
 800d2ee:	494b      	ldr	r1, [pc, #300]	; (800d41c <__ieee754_powf+0x570>)
 800d2f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d2f4:	3a7f      	subs	r2, #127	; 0x7f
 800d2f6:	4111      	asrs	r1, r2
 800d2f8:	ea23 0101 	bic.w	r1, r3, r1
 800d2fc:	ee07 1a10 	vmov	s14, r1
 800d300:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d304:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d308:	f1c2 0217 	rsb	r2, r2, #23
 800d30c:	4110      	asrs	r0, r2
 800d30e:	2c00      	cmp	r4, #0
 800d310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d314:	bfb8      	it	lt
 800d316:	4240      	neglt	r0, r0
 800d318:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d31c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800d420 <__ieee754_powf+0x574>
 800d320:	eddf 6a40 	vldr	s13, [pc, #256]	; 800d424 <__ieee754_powf+0x578>
 800d324:	ee17 3a10 	vmov	r3, s14
 800d328:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d32c:	f023 030f 	bic.w	r3, r3, #15
 800d330:	ee07 3a10 	vmov	s14, r3
 800d334:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d338:	ee27 0a00 	vmul.f32	s0, s14, s0
 800d33c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d340:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d428 <__ieee754_powf+0x57c>
 800d344:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800d348:	eef0 7a40 	vmov.f32	s15, s0
 800d34c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d350:	eeb0 6a67 	vmov.f32	s12, s15
 800d354:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d358:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d35c:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d360:	eddf 6a32 	vldr	s13, [pc, #200]	; 800d42c <__ieee754_powf+0x580>
 800d364:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800d430 <__ieee754_powf+0x584>
 800d368:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d36c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800d434 <__ieee754_powf+0x588>
 800d370:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d374:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d438 <__ieee754_powf+0x58c>
 800d378:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d37c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d43c <__ieee754_powf+0x590>
 800d380:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d384:	eef0 6a67 	vmov.f32	s13, s15
 800d388:	eee6 6a47 	vfms.f32	s13, s12, s14
 800d38c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d390:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800d394:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d398:	eea7 0a80 	vfma.f32	s0, s15, s0
 800d39c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d3a0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d3a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d3a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d3ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d3b0:	ee10 3a10 	vmov	r3, s0
 800d3b4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d3b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3bc:	da1f      	bge.n	800d3fe <__ieee754_powf+0x552>
 800d3be:	f000 f957 	bl	800d670 <scalbnf>
 800d3c2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d3c6:	e589      	b.n	800cedc <__ieee754_powf+0x30>
 800d3c8:	4a1d      	ldr	r2, [pc, #116]	; (800d440 <__ieee754_powf+0x594>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	dd07      	ble.n	800d3de <__ieee754_powf+0x532>
 800d3ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d6:	bf4c      	ite	mi
 800d3d8:	2001      	movmi	r0, #1
 800d3da:	2000      	movpl	r0, #0
 800d3dc:	e61f      	b.n	800d01e <__ieee754_powf+0x172>
 800d3de:	d108      	bne.n	800d3f2 <__ieee754_powf+0x546>
 800d3e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d3e4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ec:	f6ff af78 	blt.w	800d2e0 <__ieee754_powf+0x434>
 800d3f0:	e7ed      	b.n	800d3ce <__ieee754_powf+0x522>
 800d3f2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d3f6:	f73f af73 	bgt.w	800d2e0 <__ieee754_powf+0x434>
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	e78c      	b.n	800d318 <__ieee754_powf+0x46c>
 800d3fe:	ee00 3a10 	vmov	s0, r3
 800d402:	e7de      	b.n	800d3c2 <__ieee754_powf+0x516>
 800d404:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d408:	e568      	b.n	800cedc <__ieee754_powf+0x30>
 800d40a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d444 <__ieee754_powf+0x598>
 800d40e:	e565      	b.n	800cedc <__ieee754_powf+0x30>
 800d410:	eeb0 0a48 	vmov.f32	s0, s16
 800d414:	e562      	b.n	800cedc <__ieee754_powf+0x30>
 800d416:	2700      	movs	r7, #0
 800d418:	e58d      	b.n	800cf36 <__ieee754_powf+0x8a>
 800d41a:	bf00      	nop
 800d41c:	007fffff 	.word	0x007fffff
 800d420:	35bfbe8c 	.word	0x35bfbe8c
 800d424:	3f317200 	.word	0x3f317200
 800d428:	3f317218 	.word	0x3f317218
 800d42c:	b5ddea0e 	.word	0xb5ddea0e
 800d430:	3331bb4c 	.word	0x3331bb4c
 800d434:	388ab355 	.word	0x388ab355
 800d438:	bb360b61 	.word	0xbb360b61
 800d43c:	3e2aaaab 	.word	0x3e2aaaab
 800d440:	43160000 	.word	0x43160000
 800d444:	00000000 	.word	0x00000000

0800d448 <__ieee754_sqrtf>:
 800d448:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d44c:	4770      	bx	lr

0800d44e <with_errnof>:
 800d44e:	b513      	push	{r0, r1, r4, lr}
 800d450:	4604      	mov	r4, r0
 800d452:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d456:	f7fc fd47 	bl	8009ee8 <__errno>
 800d45a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d45e:	6004      	str	r4, [r0, #0]
 800d460:	b002      	add	sp, #8
 800d462:	bd10      	pop	{r4, pc}

0800d464 <xflowf>:
 800d464:	b130      	cbz	r0, 800d474 <xflowf+0x10>
 800d466:	eef1 7a40 	vneg.f32	s15, s0
 800d46a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d46e:	2022      	movs	r0, #34	; 0x22
 800d470:	f7ff bfed 	b.w	800d44e <with_errnof>
 800d474:	eef0 7a40 	vmov.f32	s15, s0
 800d478:	e7f7      	b.n	800d46a <xflowf+0x6>
	...

0800d47c <__math_uflowf>:
 800d47c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d484 <__math_uflowf+0x8>
 800d480:	f7ff bff0 	b.w	800d464 <xflowf>
 800d484:	10000000 	.word	0x10000000

0800d488 <__math_oflowf>:
 800d488:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d490 <__math_oflowf+0x8>
 800d48c:	f7ff bfea 	b.w	800d464 <xflowf>
 800d490:	70000000 	.word	0x70000000

0800d494 <atanf>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	ee10 5a10 	vmov	r5, s0
 800d49a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d49e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d4a2:	eef0 7a40 	vmov.f32	s15, s0
 800d4a6:	db10      	blt.n	800d4ca <atanf+0x36>
 800d4a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d4ac:	dd04      	ble.n	800d4b8 <atanf+0x24>
 800d4ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d4b2:	eeb0 0a67 	vmov.f32	s0, s15
 800d4b6:	bd38      	pop	{r3, r4, r5, pc}
 800d4b8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d5f0 <atanf+0x15c>
 800d4bc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800d5f4 <atanf+0x160>
 800d4c0:	2d00      	cmp	r5, #0
 800d4c2:	bfd8      	it	le
 800d4c4:	eef0 7a40 	vmovle.f32	s15, s0
 800d4c8:	e7f3      	b.n	800d4b2 <atanf+0x1e>
 800d4ca:	4b4b      	ldr	r3, [pc, #300]	; (800d5f8 <atanf+0x164>)
 800d4cc:	429c      	cmp	r4, r3
 800d4ce:	dc10      	bgt.n	800d4f2 <atanf+0x5e>
 800d4d0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d4d4:	da0a      	bge.n	800d4ec <atanf+0x58>
 800d4d6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d5fc <atanf+0x168>
 800d4da:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ea:	dce2      	bgt.n	800d4b2 <atanf+0x1e>
 800d4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f0:	e013      	b.n	800d51a <atanf+0x86>
 800d4f2:	f000 f8a3 	bl	800d63c <fabsf>
 800d4f6:	4b42      	ldr	r3, [pc, #264]	; (800d600 <atanf+0x16c>)
 800d4f8:	429c      	cmp	r4, r3
 800d4fa:	dc4f      	bgt.n	800d59c <atanf+0x108>
 800d4fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d500:	429c      	cmp	r4, r3
 800d502:	dc41      	bgt.n	800d588 <atanf+0xf4>
 800d504:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d508:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d50c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d510:	2300      	movs	r3, #0
 800d512:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d516:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d51a:	1c5a      	adds	r2, r3, #1
 800d51c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d520:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d604 <atanf+0x170>
 800d524:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d608 <atanf+0x174>
 800d528:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d60c <atanf+0x178>
 800d52c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d530:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d534:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d610 <atanf+0x17c>
 800d538:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d53c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d614 <atanf+0x180>
 800d540:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d544:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d618 <atanf+0x184>
 800d548:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d54c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d61c <atanf+0x188>
 800d550:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d554:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d620 <atanf+0x18c>
 800d558:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d55c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d624 <atanf+0x190>
 800d560:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d564:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d628 <atanf+0x194>
 800d568:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d56c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d62c <atanf+0x198>
 800d570:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d574:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d578:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d57c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d580:	d121      	bne.n	800d5c6 <atanf+0x132>
 800d582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d586:	e794      	b.n	800d4b2 <atanf+0x1e>
 800d588:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d58c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d590:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d594:	2301      	movs	r3, #1
 800d596:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d59a:	e7be      	b.n	800d51a <atanf+0x86>
 800d59c:	4b24      	ldr	r3, [pc, #144]	; (800d630 <atanf+0x19c>)
 800d59e:	429c      	cmp	r4, r3
 800d5a0:	dc0b      	bgt.n	800d5ba <atanf+0x126>
 800d5a2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d5a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d5ae:	2302      	movs	r3, #2
 800d5b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d5b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5b8:	e7af      	b.n	800d51a <atanf+0x86>
 800d5ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d5be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e7a9      	b.n	800d51a <atanf+0x86>
 800d5c6:	4a1b      	ldr	r2, [pc, #108]	; (800d634 <atanf+0x1a0>)
 800d5c8:	491b      	ldr	r1, [pc, #108]	; (800d638 <atanf+0x1a4>)
 800d5ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d5ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d5d2:	ed93 0a00 	vldr	s0, [r3]
 800d5d6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d5da:	ed92 0a00 	vldr	s0, [r2]
 800d5de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5e2:	2d00      	cmp	r5, #0
 800d5e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d5e8:	bfb8      	it	lt
 800d5ea:	eef1 7a67 	vneglt.f32	s15, s15
 800d5ee:	e760      	b.n	800d4b2 <atanf+0x1e>
 800d5f0:	3fc90fdb 	.word	0x3fc90fdb
 800d5f4:	bfc90fdb 	.word	0xbfc90fdb
 800d5f8:	3edfffff 	.word	0x3edfffff
 800d5fc:	7149f2ca 	.word	0x7149f2ca
 800d600:	3f97ffff 	.word	0x3f97ffff
 800d604:	3c8569d7 	.word	0x3c8569d7
 800d608:	3d4bda59 	.word	0x3d4bda59
 800d60c:	bd6ef16b 	.word	0xbd6ef16b
 800d610:	3d886b35 	.word	0x3d886b35
 800d614:	3dba2e6e 	.word	0x3dba2e6e
 800d618:	3e124925 	.word	0x3e124925
 800d61c:	3eaaaaab 	.word	0x3eaaaaab
 800d620:	bd15a221 	.word	0xbd15a221
 800d624:	bd9d8795 	.word	0xbd9d8795
 800d628:	bde38e38 	.word	0xbde38e38
 800d62c:	be4ccccd 	.word	0xbe4ccccd
 800d630:	401bffff 	.word	0x401bffff
 800d634:	0800df6c 	.word	0x0800df6c
 800d638:	0800df7c 	.word	0x0800df7c

0800d63c <fabsf>:
 800d63c:	ee10 3a10 	vmov	r3, s0
 800d640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d644:	ee00 3a10 	vmov	s0, r3
 800d648:	4770      	bx	lr

0800d64a <finitef>:
 800d64a:	b082      	sub	sp, #8
 800d64c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d650:	9801      	ldr	r0, [sp, #4]
 800d652:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d656:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d65a:	bfac      	ite	ge
 800d65c:	2000      	movge	r0, #0
 800d65e:	2001      	movlt	r0, #1
 800d660:	b002      	add	sp, #8
 800d662:	4770      	bx	lr

0800d664 <nanf>:
 800d664:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d66c <nanf+0x8>
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	7fc00000 	.word	0x7fc00000

0800d670 <scalbnf>:
 800d670:	ee10 3a10 	vmov	r3, s0
 800d674:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d678:	d025      	beq.n	800d6c6 <scalbnf+0x56>
 800d67a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d67e:	d302      	bcc.n	800d686 <scalbnf+0x16>
 800d680:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d684:	4770      	bx	lr
 800d686:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d68a:	d122      	bne.n	800d6d2 <scalbnf+0x62>
 800d68c:	4b2a      	ldr	r3, [pc, #168]	; (800d738 <scalbnf+0xc8>)
 800d68e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d73c <scalbnf+0xcc>
 800d692:	4298      	cmp	r0, r3
 800d694:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d698:	db16      	blt.n	800d6c8 <scalbnf+0x58>
 800d69a:	ee10 3a10 	vmov	r3, s0
 800d69e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d6a2:	3a19      	subs	r2, #25
 800d6a4:	4402      	add	r2, r0
 800d6a6:	2afe      	cmp	r2, #254	; 0xfe
 800d6a8:	dd15      	ble.n	800d6d6 <scalbnf+0x66>
 800d6aa:	ee10 3a10 	vmov	r3, s0
 800d6ae:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d740 <scalbnf+0xd0>
 800d6b2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d744 <scalbnf+0xd4>
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	eeb0 7a67 	vmov.f32	s14, s15
 800d6bc:	bfb8      	it	lt
 800d6be:	eef0 7a66 	vmovlt.f32	s15, s13
 800d6c2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d6c6:	4770      	bx	lr
 800d6c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d748 <scalbnf+0xd8>
 800d6cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6d0:	4770      	bx	lr
 800d6d2:	0dd2      	lsrs	r2, r2, #23
 800d6d4:	e7e6      	b.n	800d6a4 <scalbnf+0x34>
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	dd06      	ble.n	800d6e8 <scalbnf+0x78>
 800d6da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6de:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d6e2:	ee00 3a10 	vmov	s0, r3
 800d6e6:	4770      	bx	lr
 800d6e8:	f112 0f16 	cmn.w	r2, #22
 800d6ec:	da1a      	bge.n	800d724 <scalbnf+0xb4>
 800d6ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d6f2:	4298      	cmp	r0, r3
 800d6f4:	ee10 3a10 	vmov	r3, s0
 800d6f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6fc:	dd0a      	ble.n	800d714 <scalbnf+0xa4>
 800d6fe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d740 <scalbnf+0xd0>
 800d702:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d744 <scalbnf+0xd4>
 800d706:	eef0 7a40 	vmov.f32	s15, s0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	bf18      	it	ne
 800d70e:	eeb0 0a47 	vmovne.f32	s0, s14
 800d712:	e7db      	b.n	800d6cc <scalbnf+0x5c>
 800d714:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d748 <scalbnf+0xd8>
 800d718:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d74c <scalbnf+0xdc>
 800d71c:	eef0 7a40 	vmov.f32	s15, s0
 800d720:	2b00      	cmp	r3, #0
 800d722:	e7f3      	b.n	800d70c <scalbnf+0x9c>
 800d724:	3219      	adds	r2, #25
 800d726:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d72a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d72e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d750 <scalbnf+0xe0>
 800d732:	ee07 3a10 	vmov	s14, r3
 800d736:	e7c4      	b.n	800d6c2 <scalbnf+0x52>
 800d738:	ffff3cb0 	.word	0xffff3cb0
 800d73c:	4c000000 	.word	0x4c000000
 800d740:	7149f2ca 	.word	0x7149f2ca
 800d744:	f149f2ca 	.word	0xf149f2ca
 800d748:	0da24260 	.word	0x0da24260
 800d74c:	8da24260 	.word	0x8da24260
 800d750:	33000000 	.word	0x33000000

0800d754 <_init>:
 800d754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d756:	bf00      	nop
 800d758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d75a:	bc08      	pop	{r3}
 800d75c:	469e      	mov	lr, r3
 800d75e:	4770      	bx	lr

0800d760 <_fini>:
 800d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d762:	bf00      	nop
 800d764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d766:	bc08      	pop	{r3}
 800d768:	469e      	mov	lr, r3
 800d76a:	4770      	bx	lr
